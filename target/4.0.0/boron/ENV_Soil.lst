
/Users/abdulhannanmustajab/Desktop/IoT/GLE_Chili_Dryer/Env-soil/ENV_Soil/target/4.0.0/boron/ENV_Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000090f0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd110  000bd110  0000d110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd134  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000010c  2003e2d4  000bd138  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000410  2003e3e0  2003e3e0  0002e3e0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bd244  000bd244  0002d244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd26c  000bd26c  0002d26c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001db0a8  00000000  00000000  0002d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001f914  00000000  00000000  00208318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000542d1  00000000  00000000  00227c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003e80  00000000  00000000  0027befd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e4f8  00000000  00000000  0027fd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049be1  00000000  00000000  0028e275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006944b  00000000  00000000  002d7e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001507dd  00000000  00000000  003412a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b858  00000000  00000000  00491a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fd09 	bl	bba48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fd2b 	bl	bba98 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e2d4 	.word	0x2003e2d4
   b404c:	000bd138 	.word	0x000bd138
   b4050:	2003e3e0 	.word	0x2003e3e0
   b4054:	2003e3e0 	.word	0x2003e3e0
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fe2f 	bl	bacc4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd0cc 	.word	0x000bd0cc
   b4080:	000bd104 	.word	0x000bd104

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b870 	b.w	b5168 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fb89 	bl	b57a0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bdcf 	b.w	bac34 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 b84f 	b.w	b9138 <malloc>

000b409a <_Znaj>:
   b409a:	f005 b84d 	b.w	b9138 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 b853 	b.w	b9148 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z11watchdogISRv>:
  systemStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   b40b4:	4b01      	ldr	r3, [pc, #4]	; (b40bc <_Z11watchdogISRv+0x8>)
   b40b6:	2201      	movs	r2, #1
   b40b8:	701a      	strb	r2, [r3, #0]
}
   b40ba:	4770      	bx	lr
   b40bc:	2003e600 	.word	0x2003e600

000b40c0 <_Z18outOfMemoryHandleryi>:
  sensorDataWriteNeeded = true;
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40c0:	4b01      	ldr	r3, [pc, #4]	; (b40c8 <_Z18outOfMemoryHandleryi+0x8>)
   b40c2:	601a      	str	r2, [r3, #0]
}
   b40c4:	4770      	bx	lr
   b40c6:	bf00      	nop
   b40c8:	2003e2d8 	.word	0x2003e2d8

000b40cc <_Z13userSwitchISRv>:
  sensorDataWriteNeeded = true;
}


void userSwitchISR() {
  userSwitchDetect = true;                                            // The the flag for the user switch interrupt
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z13userSwitchISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003e5c1 	.word	0x2003e5c1

000b40d8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40d8:	6943      	ldr	r3, [r0, #20]
   b40da:	b113      	cbz	r3, b40e2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40dc:	6983      	ldr	r3, [r0, #24]
   b40de:	300c      	adds	r0, #12
   b40e0:	4718      	bx	r3
            callback();
        }
    }
   b40e2:	4770      	bx	lr

000b40e4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40e4:	b530      	push	{r4, r5, lr}
   b40e6:	b085      	sub	sp, #20
   b40e8:	4604      	mov	r4, r0
   b40ea:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40ec:	b160      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40ee:	6840      	ldr	r0, [r0, #4]
   b40f0:	b150      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40f2:	6885      	ldr	r5, [r0, #8]
   b40f4:	b145      	cbz	r5, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b40f6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b40fa:	e9cd 2300 	strd	r2, r3, [sp]
   b40fe:	68c4      	ldr	r4, [r0, #12]
   b4100:	ab01      	add	r3, sp, #4
   b4102:	466a      	mov	r2, sp
   b4104:	a902      	add	r1, sp, #8
   b4106:	47a0      	blx	r4
    }
   b4108:	b005      	add	sp, #20
   b410a:	bd30      	pop	{r4, r5, pc}

000b410c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b410c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b410e:	6803      	ldr	r3, [r0, #0]
   b4110:	2b2f      	cmp	r3, #47	; 0x2f
{
   b4112:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4114:	d904      	bls.n	b4120 <nrf_gpio_pin_port_decode+0x14>
   b4116:	4a07      	ldr	r2, [pc, #28]	; (b4134 <nrf_gpio_pin_port_decode+0x28>)
   b4118:	4907      	ldr	r1, [pc, #28]	; (b4138 <nrf_gpio_pin_port_decode+0x2c>)
   b411a:	200a      	movs	r0, #10
   b411c:	f004 fea2 	bl	b8e64 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4120:	6823      	ldr	r3, [r4, #0]
   b4122:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4124:	bf83      	ittte	hi
   b4126:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b412a:	4804      	ldrhi	r0, [pc, #16]	; (b413c <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b412c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b412e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b4132:	bd10      	pop	{r4, pc}
   b4134:	000b8ac5 	.word	0x000b8ac5
   b4138:	000bbf96 	.word	0x000bbf96
   b413c:	50000300 	.word	0x50000300

000b4140 <_Z10measureNow6String>:
{
   b4140:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4142:	4904      	ldr	r1, [pc, #16]	; (b4154 <_Z10measureNow6String+0x14>)
   b4144:	f006 f9db 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b4148:	b118      	cbz	r0, b4152 <_Z10measureNow6String+0x12>
    state = REPORTING_STATE;
   b414a:	4b03      	ldr	r3, [pc, #12]	; (b4158 <_Z10measureNow6String+0x18>)
   b414c:	2206      	movs	r2, #6
   b414e:	701a      	strb	r2, [r3, #0]
    return 1;
   b4150:	2001      	movs	r0, #1
}
   b4152:	bd08      	pop	{r3, pc}
   b4154:	000bbf94 	.word	0x000bbf94
   b4158:	2003e570 	.word	0x2003e570

000b415c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b415c:	b510      	push	{r4, lr}
   b415e:	4b03      	ldr	r3, [pc, #12]	; (b416c <_ZN8MB85RC64D1Ev+0x10>)
   b4160:	6003      	str	r3, [r0, #0]
   b4162:	4604      	mov	r4, r0
   b4164:	f002 f934 	bl	b63d0 <_ZN6MB85RCD1Ev>
   b4168:	4620      	mov	r0, r4
   b416a:	bd10      	pop	{r4, pc}
   b416c:	000bc594 	.word	0x000bc594

000b4170 <_ZN8MB85RC64D0Ev>:
   b4170:	b510      	push	{r4, lr}
   b4172:	4604      	mov	r4, r0
   b4174:	f7ff fff2 	bl	b415c <_ZN8MB85RC64D1Ev>
   b4178:	4620      	mov	r0, r4
   b417a:	2110      	movs	r1, #16
   b417c:	f7ff ff8f 	bl	b409e <_ZdlPvj>
   b4180:	4620      	mov	r0, r4
   b4182:	bd10      	pop	{r4, pc}

000b4184 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4184:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4186:	2100      	movs	r1, #0
   b4188:	4604      	mov	r4, r0
   b418a:	4608      	mov	r0, r1
   b418c:	f004 fc12 	bl	b89b4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4190:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4192:	4620      	mov	r0, r4
   b4194:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4196:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4198:	f004 fc24 	bl	b89e4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b419c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419e:	b10c      	cbz	r4, b41a4 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41a0:	2301      	movs	r3, #1
   b41a2:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a4:	2100      	movs	r1, #0
   b41a6:	2001      	movs	r0, #1
   b41a8:	f004 fc04 	bl	b89b4 <os_thread_scheduling>
            }
        }
        if (t) {
   b41ac:	b12c      	cbz	r4, b41ba <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41ae:	6823      	ldr	r3, [r4, #0]
   b41b0:	4620      	mov	r0, r4
   b41b2:	689b      	ldr	r3, [r3, #8]
   b41b4:	4798      	blx	r3
            t->running = false;
   b41b6:	2300      	movs	r3, #0
   b41b8:	7123      	strb	r3, [r4, #4]
        }
    }
   b41ba:	b002      	add	sp, #8
   b41bc:	bd10      	pop	{r4, pc}

000b41be <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b41be:	b530      	push	{r4, r5, lr}
   b41c0:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b41c2:	6800      	ldr	r0, [r0, #0]
   b41c4:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b41c6:	9301      	str	r3, [sp, #4]
   b41c8:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b41cc:	6883      	ldr	r3, [r0, #8]
   b41ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b41d2:	b90b      	cbnz	r3, b41d8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b41d4:	f006 fee2 	bl	baf9c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41d8:	68c3      	ldr	r3, [r0, #12]
   b41da:	aa01      	add	r2, sp, #4
   b41dc:	a902      	add	r1, sp, #8
   b41de:	4798      	blx	r3
      }
   b41e0:	b005      	add	sp, #20
   b41e2:	bd30      	pop	{r4, r5, pc}

000b41e4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41e4:	2a01      	cmp	r2, #1
   b41e6:	d102      	bne.n	b41ee <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41e8:	6001      	str	r1, [r0, #0]
      }
   b41ea:	2000      	movs	r0, #0
   b41ec:	4770      	bx	lr
	  switch (__op)
   b41ee:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41f0:	bf04      	itt	eq
   b41f2:	680b      	ldreq	r3, [r1, #0]
   b41f4:	6003      	streq	r3, [r0, #0]
	      break;
   b41f6:	e7f8      	b.n	b41ea <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41f8 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41f8:	6803      	ldr	r3, [r0, #0]
   b41fa:	6812      	ldr	r2, [r2, #0]
   b41fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4200:	4718      	bx	r3

000b4202 <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b4202:	2a01      	cmp	r2, #1
   b4204:	d102      	bne.n	b420c <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4206:	6001      	str	r1, [r0, #0]
      }
   b4208:	2000      	movs	r0, #0
   b420a:	4770      	bx	lr
	  switch (__op)
   b420c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b420e:	bf04      	itt	eq
   b4210:	680b      	ldreq	r3, [r1, #0]
   b4212:	6003      	streq	r3, [r0, #0]
	      break;
   b4214:	e7f8      	b.n	b4208 <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b4216 <_ZNSt17_Function_handlerIFvyiEPFvyjEE9_M_invokeERKSt9_Any_dataOyOi>:
   b4216:	6803      	ldr	r3, [r0, #0]
   b4218:	6812      	ldr	r2, [r2, #0]
   b421a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b421e:	4718      	bx	r3

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   b4238:	b410      	push	{r4}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b423a:	6803      	ldr	r3, [r0, #0]
   b423c:	68dc      	ldr	r4, [r3, #12]
   b423e:	2330      	movs	r3, #48	; 0x30
   b4240:	46a4      	mov	ip, r4
    }
   b4242:	f85d 4b04 	ldr.w	r4, [sp], #4
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b4246:	4760      	bx	ip

000b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4248:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b424a:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b424c:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4250:	f88d 3000 	strb.w	r3, [sp]
   b4254:	f88d 5004 	strb.w	r5, [sp, #4]
   b4258:	6824      	ldr	r4, [r4, #0]
   b425a:	233c      	movs	r3, #60	; 0x3c
   b425c:	47a0      	blx	r4
	}
   b425e:	b003      	add	sp, #12
   b4260:	bd30      	pop	{r4, r5, pc}
	...

000b4264 <_Z21firmwareUpdateHandleryj>:
void firmwareUpdateHandler(system_event_t event, u_int param) {
   b4264:	b570      	push	{r4, r5, r6, lr}
  switch(param) {
   b4266:	2a01      	cmp	r2, #1
void firmwareUpdateHandler(system_event_t event, u_int param) {
   b4268:	b092      	sub	sp, #72	; 0x48
  switch(param) {
   b426a:	d00a      	beq.n	b4282 <_Z21firmwareUpdateHandleryj+0x1e>
   b426c:	1c53      	adds	r3, r2, #1
   b426e:	d024      	beq.n	b42ba <_Z21firmwareUpdateHandleryj+0x56>
   b4270:	b912      	cbnz	r2, b4278 <_Z21firmwareUpdateHandleryj+0x14>
      firmwareUpdateInProgress = true;
   b4272:	4b21      	ldr	r3, [pc, #132]	; (b42f8 <_Z21firmwareUpdateHandleryj+0x94>)
   b4274:	2201      	movs	r2, #1
   b4276:	701a      	strb	r2, [r3, #0]
  sensorDataWriteNeeded = true;
   b4278:	4b20      	ldr	r3, [pc, #128]	; (b42fc <_Z21firmwareUpdateHandleryj+0x98>)
   b427a:	2201      	movs	r2, #1
   b427c:	701a      	strb	r2, [r3, #0]
}
   b427e:	b012      	add	sp, #72	; 0x48
   b4280:	bd70      	pop	{r4, r5, r6, pc}
      firmwareUpdateInProgress = false;
   b4282:	4b1d      	ldr	r3, [pc, #116]	; (b42f8 <_Z21firmwareUpdateHandleryj+0x94>)
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b4284:	4d1e      	ldr	r5, [pc, #120]	; (b4300 <_Z21firmwareUpdateHandleryj+0x9c>)
      firmwareUpdateInProgress = false;
   b4286:	2400      	movs	r4, #0
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b4288:	2614      	movs	r6, #20
      firmwareUpdateInProgress = false;
   b428a:	701c      	strb	r4, [r3, #0]
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b428c:	632e      	str	r6, [r5, #48]	; 0x30
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b428e:	f006 fbb6 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b4292:	4a1c      	ldr	r2, [pc, #112]	; (b4304 <_Z21firmwareUpdateHandleryj+0xa0>)
   b4294:	9000      	str	r0, [sp, #0]
   b4296:	4633      	mov	r3, r6
   b4298:	2140      	movs	r1, #64	; 0x40
   b429a:	a802      	add	r0, sp, #8
   b429c:	f004 ff74 	bl	b9188 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   b42a0:	f002 fe18 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b42a4:	4b18      	ldr	r3, [pc, #96]	; (b4308 <_Z21firmwareUpdateHandleryj+0xa4>)
   b42a6:	f88d 4000 	strb.w	r4, [sp]
   b42aa:	781b      	ldrb	r3, [r3, #0]
   b42ac:	4917      	ldr	r1, [pc, #92]	; (b430c <_Z21firmwareUpdateHandleryj+0xa8>)
   b42ae:	aa02      	add	r2, sp, #8
   b42b0:	f7ff ffca 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      sensor_data.updateAttempts = 0;                                      // Zero the update attempts counter
   b42b4:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
      break;
   b42b8:	e7de      	b.n	b4278 <_Z21firmwareUpdateHandleryj+0x14>
    firmwareUpdateInProgress = false;
   b42ba:	4b0f      	ldr	r3, [pc, #60]	; (b42f8 <_Z21firmwareUpdateHandleryj+0x94>)
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42bc:	4c10      	ldr	r4, [pc, #64]	; (b4300 <_Z21firmwareUpdateHandleryj+0x9c>)
    firmwareUpdateInProgress = false;
   b42be:	2500      	movs	r5, #0
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42c0:	2616      	movs	r6, #22
    firmwareUpdateInProgress = false;
   b42c2:	701d      	strb	r5, [r3, #0]
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42c4:	6326      	str	r6, [r4, #48]	; 0x30
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b42c6:	f006 fb9a 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b42ca:	4a0e      	ldr	r2, [pc, #56]	; (b4304 <_Z21firmwareUpdateHandleryj+0xa0>)
   b42cc:	9000      	str	r0, [sp, #0]
   b42ce:	4633      	mov	r3, r6
   b42d0:	2140      	movs	r1, #64	; 0x40
   b42d2:	a802      	add	r0, sp, #8
   b42d4:	f004 ff58 	bl	b9188 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publlish queue
   b42d8:	f002 fdfc 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b42dc:	4b0a      	ldr	r3, [pc, #40]	; (b4308 <_Z21firmwareUpdateHandleryj+0xa4>)
   b42de:	f88d 5000 	strb.w	r5, [sp]
   b42e2:	781b      	ldrb	r3, [r3, #0]
   b42e4:	4909      	ldr	r1, [pc, #36]	; (b430c <_Z21firmwareUpdateHandleryj+0xa8>)
   b42e6:	aa02      	add	r2, sp, #8
   b42e8:	f7ff ffae 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      sensor_data.updateAttempts++;                                        // Increment the update attempts counter
   b42ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   b42f0:	3301      	adds	r3, #1
   b42f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      break;
   b42f6:	e7bf      	b.n	b4278 <_Z21firmwareUpdateHandleryj+0x14>
   b42f8:	2003e4ad 	.word	0x2003e4ad
   b42fc:	2003e520 	.word	0x2003e520
   b4300:	2003e524 	.word	0x2003e524
   b4304:	000bbfba 	.word	0x000bbfba
   b4308:	2003e445 	.word	0x2003e445
   b430c:	000bbfdc 	.word	0x000bbfdc

000b4310 <_Z12setKeepAlive6String>:
{
   b4310:	b510      	push	{r4, lr}
   b4312:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b4314:	6800      	ldr	r0, [r0, #0]
   b4316:	220a      	movs	r2, #10
   b4318:	a903      	add	r1, sp, #12
   b431a:	f007 fcbf 	bl	bbc9c <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b431e:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b4322:	d81b      	bhi.n	b435c <_Z12setKeepAlive6String+0x4c>
  sysStatus.keepAlive = tempTime;
   b4324:	4c0e      	ldr	r4, [pc, #56]	; (b4360 <_Z12setKeepAlive6String+0x50>)
   b4326:	6060      	str	r0, [r4, #4]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4328:	f004 fe56 	bl	b8fd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b432c:	b188      	cbz	r0, b4352 <_Z12setKeepAlive6String+0x42>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b432e:	6863      	ldr	r3, [r4, #4]
   b4330:	4a0c      	ldr	r2, [pc, #48]	; (b4364 <_Z12setKeepAlive6String+0x54>)
   b4332:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4336:	a804      	add	r0, sp, #16
   b4338:	f004 ff26 	bl	b9188 <snprintf>
    PublishQueuePosix::instance().publish("Keep Alive",data, PRIVATE);
   b433c:	f002 fdca 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4340:	2300      	movs	r3, #0
   b4342:	f88d 3000 	strb.w	r3, [sp]
   b4346:	4b08      	ldr	r3, [pc, #32]	; (b4368 <_Z12setKeepAlive6String+0x58>)
   b4348:	4908      	ldr	r1, [pc, #32]	; (b436c <_Z12setKeepAlive6String+0x5c>)
   b434a:	781b      	ldrb	r3, [r3, #0]
   b434c:	aa04      	add	r2, sp, #16
   b434e:	f7ff ff7b 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  systemStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b4352:	4b07      	ldr	r3, [pc, #28]	; (b4370 <_Z12setKeepAlive6String+0x60>)
   b4354:	2001      	movs	r0, #1
   b4356:	7018      	strb	r0, [r3, #0]
}
   b4358:	b044      	add	sp, #272	; 0x110
   b435a:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b435c:	2000      	movs	r0, #0
   b435e:	e7fb      	b.n	b4358 <_Z12setKeepAlive6String+0x48>
   b4360:	2003e580 	.word	0x2003e580
   b4364:	000bbfef 	.word	0x000bbfef
   b4368:	2003e445 	.word	0x2003e445
   b436c:	000bc008 	.word	0x000bc008
   b4370:	2003e5b0 	.word	0x2003e5b0

000b4374 <_Z14setVerboseMode6String>:
{
   b4374:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4376:	4917      	ldr	r1, [pc, #92]	; (b43d4 <_Z14setVerboseMode6String+0x60>)
   b4378:	4605      	mov	r5, r0
   b437a:	f006 f8c0 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command == "1")
   b437e:	4604      	mov	r4, r0
   b4380:	b190      	cbz	r0, b43a8 <_Z14setVerboseMode6String+0x34>
    sysStatus.verboseMode = true;
   b4382:	4b15      	ldr	r3, [pc, #84]	; (b43d8 <_Z14setVerboseMode6String+0x64>)
   b4384:	2401      	movs	r4, #1
   b4386:	725c      	strb	r4, [r3, #9]
    PublishQueuePosix::instance().publish("Mode","Set Verbose Mode",PRIVATE);
   b4388:	f002 fda4 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b438c:	2300      	movs	r3, #0
   b438e:	f88d 3000 	strb.w	r3, [sp]
   b4392:	4b12      	ldr	r3, [pc, #72]	; (b43dc <_Z14setVerboseMode6String+0x68>)
   b4394:	4a12      	ldr	r2, [pc, #72]	; (b43e0 <_Z14setVerboseMode6String+0x6c>)
   b4396:	781b      	ldrb	r3, [r3, #0]
   b4398:	4912      	ldr	r1, [pc, #72]	; (b43e4 <_Z14setVerboseMode6String+0x70>)
   b439a:	f7ff ff55 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b439e:	4b12      	ldr	r3, [pc, #72]	; (b43e8 <_Z14setVerboseMode6String+0x74>)
    return 1;
   b43a0:	4620      	mov	r0, r4
    systemStatusWriteNeeded = true;
   b43a2:	701c      	strb	r4, [r3, #0]
}
   b43a4:	b003      	add	sp, #12
   b43a6:	bd30      	pop	{r4, r5, pc}
   b43a8:	4910      	ldr	r1, [pc, #64]	; (b43ec <_Z14setVerboseMode6String+0x78>)
   b43aa:	4628      	mov	r0, r5
   b43ac:	f006 f8a7 	bl	ba4fe <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b43b0:	2800      	cmp	r0, #0
   b43b2:	d0f7      	beq.n	b43a4 <_Z14setVerboseMode6String+0x30>
    sysStatus.verboseMode = false;
   b43b4:	4b08      	ldr	r3, [pc, #32]	; (b43d8 <_Z14setVerboseMode6String+0x64>)
   b43b6:	725c      	strb	r4, [r3, #9]
    PublishQueuePosix::instance().publish("Mode","Cleared Verbose Mode",PRIVATE);
   b43b8:	f002 fd8c 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b43bc:	4b07      	ldr	r3, [pc, #28]	; (b43dc <_Z14setVerboseMode6String+0x68>)
   b43be:	f88d 4000 	strb.w	r4, [sp]
   b43c2:	781b      	ldrb	r3, [r3, #0]
   b43c4:	4a0a      	ldr	r2, [pc, #40]	; (b43f0 <_Z14setVerboseMode6String+0x7c>)
   b43c6:	4907      	ldr	r1, [pc, #28]	; (b43e4 <_Z14setVerboseMode6String+0x70>)
   b43c8:	f7ff ff3e 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b43cc:	4b06      	ldr	r3, [pc, #24]	; (b43e8 <_Z14setVerboseMode6String+0x74>)
   b43ce:	2001      	movs	r0, #1
   b43d0:	7018      	strb	r0, [r3, #0]
    return 1;
   b43d2:	e7e7      	b.n	b43a4 <_Z14setVerboseMode6String+0x30>
   b43d4:	000bbf94 	.word	0x000bbf94
   b43d8:	2003e580 	.word	0x2003e580
   b43dc:	2003e445 	.word	0x2003e445
   b43e0:	000bc013 	.word	0x000bc013
   b43e4:	000bc036 	.word	0x000bc036
   b43e8:	2003e5b0 	.word	0x2003e5b0
   b43ec:	000bc024 	.word	0x000bc024
   b43f0:	000bc026 	.word	0x000bc026

000b43f4 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   b43f4:	b513      	push	{r0, r1, r4, lr}
  PublishQueuePosix::instance().publish("*", PRIVATE,NO_ACK);
   b43f6:	f002 fd6d 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   b43fa:	4b08      	ldr	r3, [pc, #32]	; (b441c <_Z16keepAliveMessagev+0x28>)
   b43fc:	7819      	ldrb	r1, [r3, #0]
   b43fe:	4b08      	ldr	r3, [pc, #32]	; (b4420 <_Z16keepAliveMessagev+0x2c>)
   b4400:	781a      	ldrb	r2, [r3, #0]
		return publishCommon(eventName, "", 60, flags1, flags2);
   b4402:	6803      	ldr	r3, [r0, #0]
   b4404:	f88d 1004 	strb.w	r1, [sp, #4]
   b4408:	f88d 2000 	strb.w	r2, [sp]
   b440c:	681c      	ldr	r4, [r3, #0]
   b440e:	4a05      	ldr	r2, [pc, #20]	; (b4424 <_Z16keepAliveMessagev+0x30>)
   b4410:	4905      	ldr	r1, [pc, #20]	; (b4428 <_Z16keepAliveMessagev+0x34>)
   b4412:	233c      	movs	r3, #60	; 0x3c
   b4414:	47a0      	blx	r4
}
   b4416:	b002      	add	sp, #8
   b4418:	bd10      	pop	{r4, pc}
   b441a:	bf00      	nop
   b441c:	2003e444 	.word	0x2003e444
   b4420:	2003e445 	.word	0x2003e445
   b4424:	000bcec8 	.word	0x000bcec8
   b4428:	000bc03b 	.word	0x000bc03b

000b442c <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b442c:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b442e:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4430:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4432:	b130      	cbz	r0, b4442 <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b4434:	2100      	movs	r1, #0
   b4436:	e9cd 2100 	strd	r2, r1, [sp]
   b443a:	460a      	mov	r2, r1
   b443c:	2103      	movs	r1, #3
   b443e:	f004 fad9 	bl	b89f4 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4442:	b003      	add	sp, #12
   b4444:	f85d fb04 	ldr.w	pc, [sp], #4

000b4448 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b4448:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b444a:	2000      	movs	r0, #0
   b444c:	f004 fdec 	bl	b9028 <spark_sync_time_pending>
   b4450:	b128      	cbz	r0, b445e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4452:	f004 fdc1 	bl	b8fd8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4456:	f080 0001 	eor.w	r0, r0, #1
   b445a:	b2c0      	uxtb	r0, r0
    }
   b445c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b445e:	2001      	movs	r0, #1
   b4460:	e7fc      	b.n	b445c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4462:	2300      	movs	r3, #0
   b4464:	2204      	movs	r2, #4
   b4466:	f004 bd97 	b.w	b8f98 <spark_variable>
	...

000b446c <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   b446c:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   b446e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   b4470:	4605      	mov	r5, r0
   b4472:	460e      	mov	r6, r1
        if (valid_) {
   b4474:	b1cb      	cbz	r3, b44aa <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4476:	6803      	ldr	r3, [r0, #0]
   b4478:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b447a:	b123      	cbz	r3, b4486 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x1a>
            if (start->type == type) {
   b447c:	889a      	ldrh	r2, [r3, #4]
   b447e:	2a04      	cmp	r2, #4
   b4480:	d016      	beq.n	b44b0 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x44>
            start = start->next;
   b4482:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4484:	e7f9      	b.n	b447a <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4486:	490b      	ldr	r1, [pc, #44]	; (b44b4 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x48>)
   b4488:	2010      	movs	r0, #16
   b448a:	f006 fd7d 	bl	baf88 <_ZnwjRKSt9nothrow_t>
   b448e:	4604      	mov	r4, r0
   b4490:	b160      	cbz	r0, b44ac <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x40>
   b4492:	2210      	movs	r2, #16
   b4494:	2100      	movs	r1, #0
   b4496:	f007 faff 	bl	bba98 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b449a:	4b07      	ldr	r3, [pc, #28]	; (b44b8 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x4c>)
   b449c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b449e:	2304      	movs	r3, #4
   b44a0:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b44a2:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b44a4:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   b44a6:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   b44aa:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   b44ac:	7528      	strb	r0, [r5, #20]
                return *this;
   b44ae:	e7fc      	b.n	b44aa <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b44b0:	60de      	str	r6, [r3, #12]
                return *this;
   b44b2:	e7fa      	b.n	b44aa <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
   b44b4:	000bcea8 	.word	0x000bcea8
   b44b8:	00030010 	.word	0x00030010

000b44bc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44bc:	b510      	push	{r4, lr}
      if (_M_manager)
   b44be:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44c0:	4604      	mov	r4, r0
      if (_M_manager)
   b44c2:	b113      	cbz	r3, b44ca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44c4:	2203      	movs	r2, #3
   b44c6:	4601      	mov	r1, r0
   b44c8:	4798      	blx	r3
    }
   b44ca:	4620      	mov	r0, r4
   b44cc:	bd10      	pop	{r4, pc}

000b44ce <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b44ce:	b510      	push	{r4, lr}
            delete callableWrapper;
   b44d0:	4604      	mov	r4, r0
   b44d2:	b138      	cbz	r0, b44e4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b44d4:	f7ff fff2 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b44d8:	4620      	mov	r0, r4
   b44da:	2110      	movs	r1, #16
        };
   b44dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b44e0:	f7ff bddd 	b.w	b409e <_ZdlPvj>
        };
   b44e4:	bd10      	pop	{r4, pc}
	...

000b44e8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b44ea:	4b13      	ldr	r3, [pc, #76]	; (b4538 <_ZN5TimerD1Ev+0x50>)
   b44ec:	6003      	str	r3, [r0, #0]
   b44ee:	4604      	mov	r4, r0
        if (handle) {
   b44f0:	6880      	ldr	r0, [r0, #8]
   b44f2:	b1c8      	cbz	r0, b4528 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b44f4:	2500      	movs	r5, #0
   b44f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b44fa:	e9cd 3500 	strd	r3, r5, [sp]
   b44fe:	2102      	movs	r1, #2
   b4500:	462b      	mov	r3, r5
   b4502:	462a      	mov	r2, r5
   b4504:	f004 fa76 	bl	b89f4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4508:	68a0      	ldr	r0, [r4, #8]
   b450a:	4629      	mov	r1, r5
   b450c:	f004 fab2 	bl	b8a74 <os_timer_set_id>
            while (running) {
   b4510:	7923      	ldrb	r3, [r4, #4]
   b4512:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4516:	b113      	cbz	r3, b451e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4518:	f004 fa34 	bl	b8984 <os_thread_yield>
            while (running) {
   b451c:	e7f8      	b.n	b4510 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b451e:	68a0      	ldr	r0, [r4, #8]
   b4520:	4629      	mov	r1, r5
   b4522:	f004 fa57 	bl	b89d4 <os_timer_destroy>
            handle = nullptr;
   b4526:	60a5      	str	r5, [r4, #8]
   b4528:	f104 000c 	add.w	r0, r4, #12
   b452c:	f7ff ffc6 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
    }
   b4530:	4620      	mov	r0, r4
   b4532:	b003      	add	sp, #12
   b4534:	bd30      	pop	{r4, r5, pc}
   b4536:	bf00      	nop
   b4538:	000bc580 	.word	0x000bc580

000b453c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b453c:	b510      	push	{r4, lr}
   b453e:	4604      	mov	r4, r0
    }
   b4540:	f7ff ffd2 	bl	b44e8 <_ZN5TimerD1Ev>
   b4544:	4620      	mov	r0, r4
   b4546:	211c      	movs	r1, #28
   b4548:	f7ff fda9 	bl	b409e <_ZdlPvj>
   b454c:	4620      	mov	r0, r4
   b454e:	bd10      	pop	{r4, pc}

000b4550 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b4550:	2300      	movs	r3, #0
   b4552:	6840      	ldr	r0, [r0, #4]
   b4554:	461a      	mov	r2, r3
   b4556:	4619      	mov	r1, r3
   b4558:	f004 bdae 	b.w	b90b8 <network_on>

000b455c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b455e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4560:	4605      	mov	r5, r0
   b4562:	460f      	mov	r7, r1
   b4564:	4616      	mov	r6, r2
        if (valid_) {
   b4566:	b18b      	cbz	r3, b458c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4568:	6803      	ldr	r3, [r0, #0]
   b456a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b456c:	b183      	cbz	r3, b4590 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b456e:	889a      	ldrh	r2, [r3, #4]
   b4570:	2a01      	cmp	r2, #1
   b4572:	d006      	beq.n	b4582 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4574:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4576:	e7f9      	b.n	b456c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4578:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b457a:	b14b      	cbz	r3, b4590 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b457c:	889a      	ldrh	r2, [r3, #4]
   b457e:	2a01      	cmp	r2, #1
   b4580:	d1fa      	bne.n	b4578 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4582:	b12b      	cbz	r3, b4590 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4584:	899a      	ldrh	r2, [r3, #12]
   b4586:	42ba      	cmp	r2, r7
   b4588:	d1f6      	bne.n	b4578 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b458a:	739e      	strb	r6, [r3, #14]
    }
   b458c:	4628      	mov	r0, r5
   b458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4590:	490a      	ldr	r1, [pc, #40]	; (b45bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4592:	2010      	movs	r0, #16
   b4594:	f006 fcf8 	bl	baf88 <_ZnwjRKSt9nothrow_t>
   b4598:	4604      	mov	r4, r0
   b459a:	b168      	cbz	r0, b45b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b459c:	2210      	movs	r2, #16
   b459e:	2100      	movs	r1, #0
   b45a0:	f007 fa7a 	bl	bba98 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b45a4:	4b06      	ldr	r3, [pc, #24]	; (b45c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b45a6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b45a8:	2301      	movs	r3, #1
   b45aa:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b45ac:	692b      	ldr	r3, [r5, #16]
   b45ae:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b45b0:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b45b2:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b45b4:	612c      	str	r4, [r5, #16]
   b45b6:	e7e9      	b.n	b458c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b45b8:	7528      	strb	r0, [r5, #20]
                return *this;
   b45ba:	e7e7      	b.n	b458c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b45bc:	000bcea8 	.word	0x000bcea8
   b45c0:	00030010 	.word	0x00030010

000b45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    void freeWakeupSourceMemory() {
   b45c4:	b510      	push	{r4, lr}
   b45c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b45c8:	6800      	ldr	r0, [r0, #0]
   b45ca:	b118      	cbz	r0, b45d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b45cc:	f004 fdbc 	bl	b9148 <free>
            wakeupSource_ = nullptr;
   b45d0:	2300      	movs	r3, #0
   b45d2:	6023      	str	r3, [r4, #0]
    }
   b45d4:	bd10      	pop	{r4, pc}

000b45d6 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   b45d6:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b45d8:	2301      	movs	r3, #1
   b45da:	2208      	movs	r2, #8
   b45dc:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b45e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b45e4:	2300      	movs	r3, #0
   b45e6:	4341      	muls	r1, r0
   b45e8:	466a      	mov	r2, sp
   b45ea:	4618      	mov	r0, r3
   b45ec:	f004 fd2c 	bl	b9048 <spark_set_connection_property>
    }
   b45f0:	b003      	add	sp, #12
   b45f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b45f8 <_Z16setThirdPartySim6String>:
{
   b45f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b45fa:	491e      	ldr	r1, [pc, #120]	; (b4674 <_Z16setThirdPartySim6String+0x7c>)
   b45fc:	4605      	mov	r5, r0
   b45fe:	f005 ff7e 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4602:	4604      	mov	r4, r0
   b4604:	b308      	cbz	r0, b464a <_Z16setThirdPartySim6String+0x52>
    sysStatus.thirdPartySim = true;
   b4606:	4c1c      	ldr	r4, [pc, #112]	; (b4678 <_Z16setThirdPartySim6String+0x80>)
   b4608:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b460a:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   b460c:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b460e:	f7ff ffe2 	bl	b45d6 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b4612:	6863      	ldr	r3, [r4, #4]
   b4614:	4819      	ldr	r0, [pc, #100]	; (b467c <_Z16setThirdPartySim6String+0x84>)
   b4616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b461a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b461e:	4359      	muls	r1, r3
   b4620:	f7ff ff04 	bl	b442c <_ZN5Timer12changePeriodEjj.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4624:	f004 fcd8 	bl	b8fd8 <spark_cloud_flag_connected>
    if (Particle.connected()) PublishQueuePosix::instance().publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b4628:	b150      	cbz	r0, b4640 <_Z16setThirdPartySim6String+0x48>
   b462a:	f002 fc53 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b462e:	2300      	movs	r3, #0
   b4630:	f88d 3000 	strb.w	r3, [sp]
   b4634:	4b12      	ldr	r3, [pc, #72]	; (b4680 <_Z16setThirdPartySim6String+0x88>)
   b4636:	4a13      	ldr	r2, [pc, #76]	; (b4684 <_Z16setThirdPartySim6String+0x8c>)
   b4638:	781b      	ldrb	r3, [r3, #0]
   b463a:	4913      	ldr	r1, [pc, #76]	; (b4688 <_Z16setThirdPartySim6String+0x90>)
   b463c:	f7ff fe04 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b4640:	4b12      	ldr	r3, [pc, #72]	; (b468c <_Z16setThirdPartySim6String+0x94>)
   b4642:	2001      	movs	r0, #1
   b4644:	7018      	strb	r0, [r3, #0]
}
   b4646:	b003      	add	sp, #12
   b4648:	bd30      	pop	{r4, r5, pc}
   b464a:	4911      	ldr	r1, [pc, #68]	; (b4690 <_Z16setThirdPartySim6String+0x98>)
   b464c:	4628      	mov	r0, r5
   b464e:	f005 ff56 	bl	ba4fe <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4652:	2800      	cmp	r0, #0
   b4654:	d0f7      	beq.n	b4646 <_Z16setThirdPartySim6String+0x4e>
    sysStatus.thirdPartySim = false;
   b4656:	4b08      	ldr	r3, [pc, #32]	; (b4678 <_Z16setThirdPartySim6String+0x80>)
   b4658:	705c      	strb	r4, [r3, #1]
   b465a:	f004 fcbd 	bl	b8fd8 <spark_cloud_flag_connected>
    if (Particle.connected()) PublishQueuePosix::instance().publish("Mode","Set to Particle Sim", PRIVATE);
   b465e:	2800      	cmp	r0, #0
   b4660:	d0ee      	beq.n	b4640 <_Z16setThirdPartySim6String+0x48>
   b4662:	f002 fc37 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b4666:	4b06      	ldr	r3, [pc, #24]	; (b4680 <_Z16setThirdPartySim6String+0x88>)
   b4668:	f88d 4000 	strb.w	r4, [sp]
   b466c:	781b      	ldrb	r3, [r3, #0]
   b466e:	4a09      	ldr	r2, [pc, #36]	; (b4694 <_Z16setThirdPartySim6String+0x9c>)
   b4670:	e7e3      	b.n	b463a <_Z16setThirdPartySim6String+0x42>
   b4672:	bf00      	nop
   b4674:	000bbf94 	.word	0x000bbf94
   b4678:	2003e580 	.word	0x2003e580
   b467c:	2003e4d8 	.word	0x2003e4d8
   b4680:	2003e445 	.word	0x2003e445
   b4684:	000bc03d 	.word	0x000bc03d
   b4688:	000bc036 	.word	0x000bc036
   b468c:	2003e5b0 	.word	0x2003e5b0
   b4690:	000bc024 	.word	0x000bc024
   b4694:	000bc052 	.word	0x000bc052

000b4698 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4698:	b40e      	push	{r1, r2, r3}
   b469a:	b500      	push	{lr}
   b469c:	b08c      	sub	sp, #48	; 0x30
   b469e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b46a0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b46a4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b46a8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b46aa:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b46ae:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b46b0:	6801      	ldr	r1, [r0, #0]
   b46b2:	aa04      	add	r2, sp, #16
   b46b4:	201e      	movs	r0, #30
    attr.flags = 0;
   b46b6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b46ba:	f004 fbe3 	bl	b8e84 <log_message_v>
}
   b46be:	b00c      	add	sp, #48	; 0x30
   b46c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b46c4:	b003      	add	sp, #12
   b46c6:	4770      	bx	lr

000b46c8 <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif // HAL_PLATFORM_NRF52840

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   b46c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b46ca:	4d32      	ldr	r5, [pc, #200]	; (b4794 <digitalWriteFast+0xcc>)
   b46cc:	4c32      	ldr	r4, [pc, #200]	; (b4798 <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46ce:	782b      	ldrb	r3, [r5, #0]
   b46d0:	f3bf 8f5b 	dmb	ish
   b46d4:	0106      	lsls	r6, r0, #4
    if (value)
   b46d6:	b371      	cbz	r1, b4736 <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46d8:	07d8      	lsls	r0, r3, #31
   b46da:	d409      	bmi.n	b46f0 <digitalWriteFast+0x28>
   b46dc:	4628      	mov	r0, r5
   b46de:	f7ff fce0 	bl	b40a2 <__cxa_guard_acquire>
   b46e2:	b128      	cbz	r0, b46f0 <digitalWriteFast+0x28>
   b46e4:	f004 fa1e 	bl	b8b24 <HAL_Pin_Map>
   b46e8:	6020      	str	r0, [r4, #0]
   b46ea:	4628      	mov	r0, r5
   b46ec:	f7ff fcde 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b46f0:	6823      	ldr	r3, [r4, #0]
   b46f2:	5d9b      	ldrb	r3, [r3, r6]
   b46f4:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46f6:	782b      	ldrb	r3, [r5, #0]
   b46f8:	f3bf 8f5b 	dmb	ish
   b46fc:	07d9      	lsls	r1, r3, #31
   b46fe:	d409      	bmi.n	b4714 <digitalWriteFast+0x4c>
   b4700:	4824      	ldr	r0, [pc, #144]	; (b4794 <digitalWriteFast+0xcc>)
   b4702:	f7ff fcce 	bl	b40a2 <__cxa_guard_acquire>
   b4706:	b128      	cbz	r0, b4714 <digitalWriteFast+0x4c>
   b4708:	f004 fa0c 	bl	b8b24 <HAL_Pin_Map>
   b470c:	6020      	str	r0, [r4, #0]
   b470e:	4821      	ldr	r0, [pc, #132]	; (b4794 <digitalWriteFast+0xcc>)
   b4710:	f7ff fccc 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4714:	6820      	ldr	r0, [r4, #0]
   b4716:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4718:	a801      	add	r0, sp, #4
   b471a:	7873      	ldrb	r3, [r6, #1]
   b471c:	f003 031f 	and.w	r3, r3, #31
   b4720:	433b      	orrs	r3, r7
   b4722:	9301      	str	r3, [sp, #4]
   b4724:	f7ff fcf2 	bl	b410c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4728:	9a01      	ldr	r2, [sp, #4]
   b472a:	2301      	movs	r3, #1
   b472c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b472e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   b4732:	b003      	add	sp, #12
   b4734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4736:	07da      	lsls	r2, r3, #31
   b4738:	d409      	bmi.n	b474e <digitalWriteFast+0x86>
   b473a:	4628      	mov	r0, r5
   b473c:	f7ff fcb1 	bl	b40a2 <__cxa_guard_acquire>
   b4740:	b128      	cbz	r0, b474e <digitalWriteFast+0x86>
   b4742:	f004 f9ef 	bl	b8b24 <HAL_Pin_Map>
   b4746:	6020      	str	r0, [r4, #0]
   b4748:	4628      	mov	r0, r5
   b474a:	f7ff fcaf 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b474e:	6823      	ldr	r3, [r4, #0]
   b4750:	5d9b      	ldrb	r3, [r3, r6]
   b4752:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4754:	782b      	ldrb	r3, [r5, #0]
   b4756:	f3bf 8f5b 	dmb	ish
   b475a:	07db      	lsls	r3, r3, #31
   b475c:	d409      	bmi.n	b4772 <digitalWriteFast+0xaa>
   b475e:	480d      	ldr	r0, [pc, #52]	; (b4794 <digitalWriteFast+0xcc>)
   b4760:	f7ff fc9f 	bl	b40a2 <__cxa_guard_acquire>
   b4764:	b128      	cbz	r0, b4772 <digitalWriteFast+0xaa>
   b4766:	f004 f9dd 	bl	b8b24 <HAL_Pin_Map>
   b476a:	6020      	str	r0, [r4, #0]
   b476c:	4809      	ldr	r0, [pc, #36]	; (b4794 <digitalWriteFast+0xcc>)
   b476e:	f7ff fc9d 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4772:	6820      	ldr	r0, [r4, #0]
   b4774:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4776:	a801      	add	r0, sp, #4
   b4778:	7873      	ldrb	r3, [r6, #1]
   b477a:	f003 031f 	and.w	r3, r3, #31
   b477e:	433b      	orrs	r3, r7
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	f7ff fcc3 	bl	b410c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b4786:	9a01      	ldr	r2, [sp, #4]
   b4788:	2301      	movs	r3, #1
   b478a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b478c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   b4790:	e7cf      	b.n	b4732 <digitalWriteFast+0x6a>
   b4792:	bf00      	nop
   b4794:	2003e3e0 	.word	0x2003e3e0
   b4798:	2003e3e4 	.word	0x2003e3e4

000b479c <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b479c:	4b0c      	ldr	r3, [pc, #48]	; (b47d0 <_Z17checkSystemValuesv+0x34>)
   b479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   b47a0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b47a2:	2aff      	cmp	r2, #255	; 0xff
   b47a4:	bf84      	itt	hi
   b47a6:	2200      	movhi	r2, #0
   b47a8:	625a      	strhi	r2, [r3, #36]	; 0x24
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   b47aa:	4a0a      	ldr	r2, [pc, #40]	; (b47d4 <_Z17checkSystemValuesv+0x38>)
   b47ac:	6812      	ldr	r2, [r2, #0]
   b47ae:	4291      	cmp	r1, r2
   b47b0:	bf84      	itt	hi
   b47b2:	2100      	movhi	r1, #0
   b47b4:	8599      	strhhi	r1, [r3, #44]	; 0x2c
  if (sensor_data.maxConnectTime > connectMaxTimeSec) {
   b47b6:	4b08      	ldr	r3, [pc, #32]	; (b47d8 <_Z17checkSystemValuesv+0x3c>)
   b47b8:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   b47ba:	428a      	cmp	r2, r1
   b47bc:	d204      	bcs.n	b47c8 <_Z17checkSystemValuesv+0x2c>
    sensor_data.maxConnectTime = 0;
   b47be:	2200      	movs	r2, #0
   b47c0:	869a      	strh	r2, [r3, #52]	; 0x34
    sensorDataWriteNeeded = true;
   b47c2:	4b06      	ldr	r3, [pc, #24]	; (b47dc <_Z17checkSystemValuesv+0x40>)
   b47c4:	2201      	movs	r2, #1
   b47c6:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   b47c8:	4b05      	ldr	r3, [pc, #20]	; (b47e0 <_Z17checkSystemValuesv+0x44>)
   b47ca:	2201      	movs	r2, #1
   b47cc:	701a      	strb	r2, [r3, #0]
}
   b47ce:	4770      	bx	lr
   b47d0:	2003e580 	.word	0x2003e580
   b47d4:	2003e2d4 	.word	0x2003e2d4
   b47d8:	2003e524 	.word	0x2003e524
   b47dc:	2003e520 	.word	0x2003e520
   b47e0:	2003e5b0 	.word	0x2003e5b0

000b47e4 <_Z11petWatchdogv>:
{
   b47e4:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   b47e6:	2101      	movs	r1, #1
   b47e8:	2005      	movs	r0, #5
   b47ea:	f7ff ff6d 	bl	b46c8 <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   b47ee:	2100      	movs	r1, #0
   b47f0:	2005      	movs	r0, #5
   b47f2:	f7ff ff69 	bl	b46c8 <digitalWriteFast>
  watchdogFlag = false;
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <_Z11petWatchdogv+0x1c>)
   b47f8:	2200      	movs	r2, #0
   b47fa:	701a      	strb	r2, [r3, #0]
}
   b47fc:	bd08      	pop	{r3, pc}
   b47fe:	bf00      	nop
   b4800:	2003e600 	.word	0x2003e600

000b4804 <_Z9sendEventv>:
{
   b4804:	b530      	push	{r4, r5, lr}
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b4806:	4c1d      	ldr	r4, [pc, #116]	; (b487c <_Z9sendEventv+0x78>)
{
   b4808:	b0cf      	sub	sp, #316	; 0x13c
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b480a:	6a23      	ldr	r3, [r4, #32]
   b480c:	69e0      	ldr	r0, [r4, #28]
   b480e:	930c      	str	r3, [sp, #48]	; 0x30
   b4810:	f006 fd2c 	bl	bb26c <__aeabi_f2d>
   b4814:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4818:	69a0      	ldr	r0, [r4, #24]
   b481a:	f006 fd27 	bl	bb26c <__aeabi_f2d>
   b481e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4822:	6960      	ldr	r0, [r4, #20]
   b4824:	f006 fd22 	bl	bb26c <__aeabi_f2d>
   b4828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b482a:	9305      	str	r3, [sp, #20]
   b482c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b4830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4832:	6920      	ldr	r0, [r4, #16]
   b4834:	9304      	str	r3, [sp, #16]
   b4836:	f006 fd19 	bl	bb26c <__aeabi_f2d>
   b483a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b483e:	68e0      	ldr	r0, [r4, #12]
   b4840:	f006 fd14 	bl	bb26c <__aeabi_f2d>
   b4844:	4a0e      	ldr	r2, [pc, #56]	; (b4880 <_Z9sendEventv+0x7c>)
   b4846:	e9cd 0100 	strd	r0, r1, [sp]
   b484a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b484e:	a80e      	add	r0, sp, #56	; 0x38
   b4850:	f004 fc9a 	bl	b9188 <snprintf>
  PublishQueuePosix::instance().publish("environmental-hook", data, PRIVATE | WITH_ACK);
   b4854:	f002 fb3e 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4858:	4b0a      	ldr	r3, [pc, #40]	; (b4884 <_Z9sendEventv+0x80>)
   b485a:	490b      	ldr	r1, [pc, #44]	; (b4888 <_Z9sendEventv+0x84>)
   b485c:	781a      	ldrb	r2, [r3, #0]
   b485e:	4b0b      	ldr	r3, [pc, #44]	; (b488c <_Z9sendEventv+0x88>)
   b4860:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   b4862:	2500      	movs	r5, #0
   b4864:	4313      	orrs	r3, r2
   b4866:	f88d 5000 	strb.w	r5, [sp]
   b486a:	aa0e      	add	r2, sp, #56	; 0x38
   b486c:	f7ff fcec 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b4870:	4b07      	ldr	r3, [pc, #28]	; (b4890 <_Z9sendEventv+0x8c>)
  sensor_data.alerts = 0;                                                 // Reset the alert after publish
   b4872:	6325      	str	r5, [r4, #48]	; 0x30
  dataInFlight = true;                                                                      // set the data inflight flag
   b4874:	2201      	movs	r2, #1
   b4876:	701a      	strb	r2, [r3, #0]
}
   b4878:	b04f      	add	sp, #316	; 0x13c
   b487a:	bd30      	pop	{r4, r5, pc}
   b487c:	2003e524 	.word	0x2003e524
   b4880:	000bc066 	.word	0x000bc066
   b4884:	2003e446 	.word	0x2003e446
   b4888:	000bc0f1 	.word	0x000bc0f1
   b488c:	2003e445 	.word	0x2003e445
   b4890:	2003e4ac 	.word	0x2003e4ac

000b4894 <_Z22publishStateTransitionv>:
{
   b4894:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4896:	4d11      	ldr	r5, [pc, #68]	; (b48dc <_Z22publishStateTransitionv+0x48>)
   b4898:	4c11      	ldr	r4, [pc, #68]	; (b48e0 <_Z22publishStateTransitionv+0x4c>)
   b489a:	4b12      	ldr	r3, [pc, #72]	; (b48e4 <_Z22publishStateTransitionv+0x50>)
   b489c:	782a      	ldrb	r2, [r5, #0]
   b489e:	7821      	ldrb	r1, [r4, #0]
{
   b48a0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b48a2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b48a6:	9200      	str	r2, [sp, #0]
   b48a8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b48ac:	4a0e      	ldr	r2, [pc, #56]	; (b48e8 <_Z22publishStateTransitionv+0x54>)
   b48ae:	2128      	movs	r1, #40	; 0x28
   b48b0:	a802      	add	r0, sp, #8
   b48b2:	f004 fc69 	bl	b9188 <snprintf>
  oldState = state;
   b48b6:	782b      	ldrb	r3, [r5, #0]
   b48b8:	7023      	strb	r3, [r4, #0]
   b48ba:	f004 fb8d 	bl	b8fd8 <spark_cloud_flag_connected>
  if(Particle.connected()) PublishQueuePosix::instance().publish("State Transition",stateTransitionString, PRIVATE);
   b48be:	b150      	cbz	r0, b48d6 <_Z22publishStateTransitionv+0x42>
   b48c0:	f002 fb08 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b48c4:	2300      	movs	r3, #0
   b48c6:	f88d 3000 	strb.w	r3, [sp]
   b48ca:	4b08      	ldr	r3, [pc, #32]	; (b48ec <_Z22publishStateTransitionv+0x58>)
   b48cc:	4908      	ldr	r1, [pc, #32]	; (b48f0 <_Z22publishStateTransitionv+0x5c>)
   b48ce:	781b      	ldrb	r3, [r3, #0]
   b48d0:	aa02      	add	r2, sp, #8
   b48d2:	f7ff fcb9 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b48d6:	b00d      	add	sp, #52	; 0x34
   b48d8:	bd30      	pop	{r4, r5, pc}
   b48da:	bf00      	nop
   b48dc:	2003e570 	.word	0x2003e570
   b48e0:	2003e518 	.word	0x2003e518
   b48e4:	2003e2e0 	.word	0x2003e2e0
   b48e8:	000bc104 	.word	0x000bc104
   b48ec:	2003e445 	.word	0x2003e445
   b48f0:	000bc112 	.word	0x000bc112

000b48f4 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   b48f4:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b48f6:	4d19      	ldr	r5, [pc, #100]	; (b495c <_Z17getSignalStrengthv+0x68>)
   b48f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b48fa:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b48fc:	ac0c      	add	r4, sp, #48	; 0x30
   b48fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4904:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4908:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   b490c:	4914      	ldr	r1, [pc, #80]	; (b4960 <_Z17getSignalStrengthv+0x6c>)
   b490e:	a804      	add	r0, sp, #16
   b4910:	f004 fcec 	bl	b92ec <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   b4914:	a804      	add	r0, sp, #16
   b4916:	f004 fd2c 	bl	b9372 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b491a:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   b491c:	a804      	add	r0, sp, #16
   b491e:	f004 fd61 	bl	b93e4 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   b4922:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b4924:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b4928:	f004 fd8c 	bl	b9444 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b492c:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b492e:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b4932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b4936:	f006 fc99 	bl	bb26c <__aeabi_f2d>
   b493a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b493e:	4628      	mov	r0, r5
   b4940:	f006 fc94 	bl	bb26c <__aeabi_f2d>
   b4944:	e9cd 0100 	strd	r0, r1, [sp]
   b4948:	4a06      	ldr	r2, [pc, #24]	; (b4964 <_Z17getSignalStrengthv+0x70>)
   b494a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b494e:	4806      	ldr	r0, [pc, #24]	; (b4968 <_Z17getSignalStrengthv+0x74>)
   b4950:	2140      	movs	r1, #64	; 0x40
   b4952:	f004 fc19 	bl	b9188 <snprintf>
}
   b4956:	b017      	add	sp, #92	; 0x5c
   b4958:	bd30      	pop	{r4, r5, pc}
   b495a:	bf00      	nop
   b495c:	000bc5a8 	.word	0x000bc5a8
   b4960:	2003e638 	.word	0x2003e638
   b4964:	000bc123 	.word	0x000bc123
   b4968:	2003e3f8 	.word	0x2003e3f8

000b496c <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   b496c:	b508      	push	{r3, lr}
   b496e:	f004 fb33 	bl	b8fd8 <spark_cloud_flag_connected>
  return !Particle.connected();
   b4972:	f080 0001 	eor.w	r0, r0, #1
}
   b4976:	b2c0      	uxtb	r0, r0
   b4978:	bd08      	pop	{r3, pc}
	...

000b497c <_Z22disconnectFromParticlev>:
{
   b497c:	b530      	push	{r4, r5, lr}
   b497e:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4980:	2400      	movs	r4, #0
  Particle.disconnect();
   b4982:	a801      	add	r0, sp, #4
   b4984:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b4988:	f8ad 400c 	strh.w	r4, [sp, #12]
   b498c:	f004 fe02 	bl	b9594 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b4990:	4620      	mov	r0, r4
   b4992:	f004 f8af 	bl	b8af4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4996:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b499a:	4604      	mov	r4, r0
   b499c:	2000      	movs	r0, #0
   b499e:	f004 f8a9 	bl	b8af4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b49a2:	1b00      	subs	r0, r0, r4
   b49a4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b49a8:	42a8      	cmp	r0, r5
   b49aa:	f171 0300 	sbcs.w	r3, r1, #0
   b49ae:	d205      	bcs.n	b49bc <_Z22disconnectFromParticlev+0x40>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   b49b0:	f7ff ffdc 	bl	b496c <_Z12notConnectedv>
   b49b4:	b910      	cbnz	r0, b49bc <_Z22disconnectFromParticlev+0x40>
            spark_process();
   b49b6:	f004 faff 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b49ba:	e7ef      	b.n	b499c <_Z22disconnectFromParticlev+0x20>
   b49bc:	f7ff ffd6 	bl	b496c <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b49c0:	4809      	ldr	r0, [pc, #36]	; (b49e8 <_Z22disconnectFromParticlev+0x6c>)
   b49c2:	2300      	movs	r3, #0
   b49c4:	4619      	mov	r1, r3
   b49c6:	461a      	mov	r2, r3
   b49c8:	6840      	ldr	r0, [r0, #4]
   b49ca:	f004 fb7d 	bl	b90c8 <network_off>
  sysStatus.connectedStatus = false;
   b49ce:	4b07      	ldr	r3, [pc, #28]	; (b49ec <_Z22disconnectFromParticlev+0x70>)
   b49d0:	2200      	movs	r2, #0
   b49d2:	721a      	strb	r2, [r3, #8]
  systemStatusWriteNeeded = true;
   b49d4:	4b06      	ldr	r3, [pc, #24]	; (b49f0 <_Z22disconnectFromParticlev+0x74>)
   b49d6:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   b49d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   b49dc:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   b49de:	f004 fc37 	bl	b9250 <delay>
}
   b49e2:	4620      	mov	r0, r4
   b49e4:	b005      	add	sp, #20
   b49e6:	bd30      	pop	{r4, r5, pc}
   b49e8:	2003e638 	.word	0x2003e638
   b49ec:	2003e580 	.word	0x2003e580
   b49f0:	2003e5b0 	.word	0x2003e5b0

000b49f4 <_Z20meterParticlePublishv>:


bool meterParticlePublish() {
   b49f4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b49f6:	f004 f86d 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;  
  
  if (millis() - lastPublish >= 1000) return 1;
  
  return 0;
   b49fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b49fe:	bf34      	ite	cc
   b4a00:	2000      	movcc	r0, #0
   b4a02:	2001      	movcs	r0, #1
   b4a04:	bd08      	pop	{r3, pc}
	...

000b4a08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b4a08:	b530      	push	{r4, r5, lr}
   b4a0a:	b085      	sub	sp, #20
   b4a0c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b4a0e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b4a10:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b4a12:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b4a14:	f004 fa3e 	bl	b8e94 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b4a18:	b990      	cbnz	r0, b4a40 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b4a1a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b4a1c:	b10c      	cbz	r4, b4a22 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b4a1e:	6923      	ldr	r3, [r4, #16]
   b4a20:	b923      	cbnz	r3, b4a2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b4a22:	4a08      	ldr	r2, [pc, #32]	; (b4a44 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b4a24:	4908      	ldr	r1, [pc, #32]	; (b4a48 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b4a26:	200a      	movs	r0, #10
   b4a28:	f004 fa1c 	bl	b8e64 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4a2c:	230c      	movs	r3, #12
   b4a2e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b4a32:	2304      	movs	r3, #4
   b4a34:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b4a36:	aa01      	add	r2, sp, #4
   b4a38:	6923      	ldr	r3, [r4, #16]
   b4a3a:	2101      	movs	r1, #1
   b4a3c:	4620      	mov	r0, r4
   b4a3e:	4798      	blx	r3
}
   b4a40:	b005      	add	sp, #20
   b4a42:	bd30      	pop	{r4, r5, pc}
   b4a44:	000b8ac5 	.word	0x000b8ac5
   b4a48:	000bc13c 	.word	0x000bc13c

000b4a4c <_Z17getBatteryContextv>:
void getBatteryContext() {
   b4a4c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a4e:	4d0e      	ldr	r5, [pc, #56]	; (b4a88 <_Z17getBatteryContextv+0x3c>)
   b4a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   b4a52:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a54:	ac01      	add	r4, sp, #4
   b4a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b4a60:	4669      	mov	r1, sp
   b4a62:	2007      	movs	r0, #7
   b4a64:	f7ff ffd0 	bl	b4a08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b4a68:	2800      	cmp	r0, #0
        return val;
   b4a6a:	bfa8      	it	ge
   b4a6c:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b4a6e:	4a07      	ldr	r2, [pc, #28]	; (b4a8c <_Z17getBatteryContextv+0x40>)
   b4a70:	ab08      	add	r3, sp, #32
   b4a72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b4a76:	2110      	movs	r1, #16
   b4a78:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b4a7c:	4804      	ldr	r0, [pc, #16]	; (b4a90 <_Z17getBatteryContextv+0x44>)
}
   b4a7e:	b009      	add	sp, #36	; 0x24
   b4a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b4a84:	f004 bb80 	b.w	b9188 <snprintf>
   b4a88:	000bc5d0 	.word	0x000bc5d0
   b4a8c:	000bcb6e 	.word	0x000bcb6e
   b4a90:	2003e474 	.word	0x2003e474

000b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4a94:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a96:	2300      	movs	r3, #0
   b4a98:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a9a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a9c:	4604      	mov	r4, r0
   b4a9e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4aa0:	b12b      	cbz	r3, b4aae <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4aa2:	2202      	movs	r2, #2
   b4aa4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4aa6:	68eb      	ldr	r3, [r5, #12]
   b4aa8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4aaa:	68ab      	ldr	r3, [r5, #8]
   b4aac:	60a3      	str	r3, [r4, #8]
    }
   b4aae:	4620      	mov	r0, r4
   b4ab0:	bd38      	pop	{r3, r4, r5, pc}

000b4ab2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4ab2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4ab6:	4604      	mov	r4, r0
	switch (__op)
   b4ab8:	d104      	bne.n	b4ac4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4aba:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4abc:	6003      	str	r3, [r0, #0]
      }
   b4abe:	2000      	movs	r0, #0
   b4ac0:	b003      	add	sp, #12
   b4ac2:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4ac4:	2a02      	cmp	r2, #2
   b4ac6:	d00c      	beq.n	b4ae2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4ac8:	2a03      	cmp	r2, #3
   b4aca:	d1f8      	bne.n	b4abe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4acc:	6804      	ldr	r4, [r0, #0]
   b4ace:	2c00      	cmp	r4, #0
   b4ad0:	d0f5      	beq.n	b4abe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4ad2:	4620      	mov	r0, r4
   b4ad4:	f7ff fcf2 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4ad8:	2110      	movs	r1, #16
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff fadf 	bl	b409e <_ZdlPvj>
   b4ae0:	e7ed      	b.n	b4abe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4ae2:	6809      	ldr	r1, [r1, #0]
   b4ae4:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ae6:	2010      	movs	r0, #16
   b4ae8:	f7ff fad5 	bl	b4096 <_Znwj>
   b4aec:	4605      	mov	r5, r0
   b4aee:	b110      	cbz	r0, b4af6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4af0:	9901      	ldr	r1, [sp, #4]
   b4af2:	f7ff ffcf 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4af6:	6025      	str	r5, [r4, #0]
	}
   b4af8:	e7e1      	b.n	b4abe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4afa:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4afc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4afe:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4b00:	b17c      	cbz	r4, b4b22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4b02:	6863      	ldr	r3, [r4, #4]
   b4b04:	3b01      	subs	r3, #1
   b4b06:	6063      	str	r3, [r4, #4]
   b4b08:	b95b      	cbnz	r3, b4b22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4b0a:	6823      	ldr	r3, [r4, #0]
   b4b0c:	4620      	mov	r0, r4
   b4b0e:	689b      	ldr	r3, [r3, #8]
   b4b10:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b12:	68a3      	ldr	r3, [r4, #8]
   b4b14:	3b01      	subs	r3, #1
   b4b16:	60a3      	str	r3, [r4, #8]
   b4b18:	b91b      	cbnz	r3, b4b22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4b1a:	6823      	ldr	r3, [r4, #0]
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	68db      	ldr	r3, [r3, #12]
   b4b20:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4b22:	4628      	mov	r0, r5
   b4b24:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b28 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4b28:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   b4b2a:	780b      	ldrb	r3, [r1, #0]
   b4b2c:	4d23      	ldr	r5, [pc, #140]	; (b4bbc <_Z14UbidotsHandlerPKcS0_+0x94>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4b2e:	b095      	sub	sp, #84	; 0x54
   b4b30:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   b4b32:	b983      	cbnz	r3, b4b56 <_Z14UbidotsHandlerPKcS0_+0x2e>
    snprintf(responseString, sizeof(responseString),"No Data");
   b4b34:	4922      	ldr	r1, [pc, #136]	; (b4bc0 <_Z14UbidotsHandlerPKcS0_+0x98>)
   b4b36:	a804      	add	r0, sp, #16
   b4b38:	f006 ffee 	bl	bbb18 <strcpy>
  if (sysStatus.verboseMode && Particle.connected()) {
   b4b3c:	7a6b      	ldrb	r3, [r5, #9]
   b4b3e:	2b00      	cmp	r3, #0
   b4b40:	d03a      	beq.n	b4bb8 <_Z14UbidotsHandlerPKcS0_+0x90>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b42:	f004 fa49 	bl	b8fd8 <spark_cloud_flag_connected>
   b4b46:	2800      	cmp	r0, #0
   b4b48:	d036      	beq.n	b4bb8 <_Z14UbidotsHandlerPKcS0_+0x90>
    waitUntil(meterParticlePublish);
   b4b4a:	f7ff ff53 	bl	b49f4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   b4b4e:	bb20      	cbnz	r0, b4b9a <_Z14UbidotsHandlerPKcS0_+0x72>
            spark_process();
   b4b50:	f004 fa32 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b4b54:	e7f9      	b.n	b4b4a <_Z14UbidotsHandlerPKcS0_+0x22>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4b56:	4608      	mov	r0, r1
   b4b58:	f006 ff54 	bl	bba04 <atoi>
   b4b5c:	28c8      	cmp	r0, #200	; 0xc8
   b4b5e:	d10d      	bne.n	b4b7c <_Z14UbidotsHandlerPKcS0_+0x54>
    snprintf(responseString, sizeof(responseString),"Response Received");
   b4b60:	4918      	ldr	r1, [pc, #96]	; (b4bc4 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   b4b62:	a804      	add	r0, sp, #16
   b4b64:	f006 ffd8 	bl	bbb18 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   b4b68:	f005 ff49 	bl	ba9fe <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   b4b6c:	4b16      	ldr	r3, [pc, #88]	; (b4bc8 <_Z14UbidotsHandlerPKcS0_+0xa0>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   b4b6e:	6128      	str	r0, [r5, #16]
    systemStatusWriteNeeded = true;
   b4b70:	2201      	movs	r2, #1
   b4b72:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   b4b74:	4b15      	ldr	r3, [pc, #84]	; (b4bcc <_Z14UbidotsHandlerPKcS0_+0xa4>)
   b4b76:	2200      	movs	r2, #0
   b4b78:	701a      	strb	r2, [r3, #0]
   b4b7a:	e7df      	b.n	b4b3c <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f006 ff41 	bl	bba04 <atoi>
   b4b82:	28c9      	cmp	r0, #201	; 0xc9
   b4b84:	d0ec      	beq.n	b4b60 <_Z14UbidotsHandlerPKcS0_+0x38>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   b4b86:	4620      	mov	r0, r4
   b4b88:	f006 ff3c 	bl	bba04 <atoi>
   b4b8c:	4a10      	ldr	r2, [pc, #64]	; (b4bd0 <_Z14UbidotsHandlerPKcS0_+0xa8>)
   b4b8e:	4603      	mov	r3, r0
   b4b90:	2140      	movs	r1, #64	; 0x40
   b4b92:	a804      	add	r0, sp, #16
   b4b94:	f004 faf8 	bl	b9188 <snprintf>
   b4b98:	e7d0      	b.n	b4b3c <_Z14UbidotsHandlerPKcS0_+0x14>
    waitUntil(meterParticlePublish);
   b4b9a:	f7ff ff2b 	bl	b49f4 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4b9e:	4b0d      	ldr	r3, [pc, #52]	; (b4bd4 <_Z14UbidotsHandlerPKcS0_+0xac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ba0:	490d      	ldr	r1, [pc, #52]	; (b4bd8 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   b4ba2:	781b      	ldrb	r3, [r3, #0]
   b4ba4:	f88d 3000 	strb.w	r3, [sp]
   b4ba8:	a802      	add	r0, sp, #8
   b4baa:	233c      	movs	r3, #60	; 0x3c
   b4bac:	aa04      	add	r2, sp, #16
   b4bae:	f004 fe0d 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4bb2:	a803      	add	r0, sp, #12
   b4bb4:	f7ff ffa1 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4bb8:	b015      	add	sp, #84	; 0x54
   b4bba:	bd30      	pop	{r4, r5, pc}
   b4bbc:	2003e580 	.word	0x2003e580
   b4bc0:	000bc162 	.word	0x000bc162
   b4bc4:	000bc16a 	.word	0x000bc16a
   b4bc8:	2003e5b0 	.word	0x2003e5b0
   b4bcc:	2003e4ac 	.word	0x2003e4ac
   b4bd0:	000bc17c 	.word	0x000bc17c
   b4bd4:	2003e445 	.word	0x2003e445
   b4bd8:	000bc199 	.word	0x000bc199

000b4bdc <_Z15setLowPowerMode6String>:
{
   b4bdc:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4bde:	4928      	ldr	r1, [pc, #160]	; (b4c80 <_Z15setLowPowerMode6String+0xa4>)
   b4be0:	b085      	sub	sp, #20
   b4be2:	4604      	mov	r4, r0
   b4be4:	f005 fc8b 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4be8:	b1d0      	cbz	r0, b4c20 <_Z15setLowPowerMode6String+0x44>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4bea:	4925      	ldr	r1, [pc, #148]	; (b4c80 <_Z15setLowPowerMode6String+0xa4>)
   b4bec:	4620      	mov	r0, r4
   b4bee:	f005 fc86 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   b4bf2:	4605      	mov	r5, r0
   b4bf4:	b9e0      	cbnz	r0, b4c30 <_Z15setLowPowerMode6String+0x54>
   b4bf6:	4923      	ldr	r1, [pc, #140]	; (b4c84 <_Z15setLowPowerMode6String+0xa8>)
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	f005 fc80 	bl	ba4fe <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   b4bfe:	b158      	cbz	r0, b4c18 <_Z15setLowPowerMode6String+0x3c>
    sysStatus.lowPowerMode = false;
   b4c00:	4b21      	ldr	r3, [pc, #132]	; (b4c88 <_Z15setLowPowerMode6String+0xac>)
    Log.info("Cleared Low Power Mode");
   b4c02:	4922      	ldr	r1, [pc, #136]	; (b4c8c <_Z15setLowPowerMode6String+0xb0>)
   b4c04:	4822      	ldr	r0, [pc, #136]	; (b4c90 <_Z15setLowPowerMode6String+0xb4>)
    sysStatus.lowPowerMode = false;
   b4c06:	72dd      	strb	r5, [r3, #11]
    Log.info("Cleared Low Power Mode");
   b4c08:	f7ff fd46 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c0c:	f004 f9e4 	bl	b8fd8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {                                 // In case we are not connected, we will do so now.
   b4c10:	b9f8      	cbnz	r0, b4c52 <_Z15setLowPowerMode6String+0x76>
      state = CONNECTING_STATE;                                       // Will connect - if connection fails, will need to reset device
   b4c12:	4b20      	ldr	r3, [pc, #128]	; (b4c94 <_Z15setLowPowerMode6String+0xb8>)
   b4c14:	2205      	movs	r2, #5
   b4c16:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   b4c18:	4b1f      	ldr	r3, [pc, #124]	; (b4c98 <_Z15setLowPowerMode6String+0xbc>)
   b4c1a:	2001      	movs	r0, #1
   b4c1c:	7018      	strb	r0, [r3, #0]
  return 1;
   b4c1e:	e005      	b.n	b4c2c <_Z15setLowPowerMode6String+0x50>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4c20:	4918      	ldr	r1, [pc, #96]	; (b4c84 <_Z15setLowPowerMode6String+0xa8>)
   b4c22:	4620      	mov	r0, r4
   b4c24:	f005 fc6b 	bl	ba4fe <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4c28:	2800      	cmp	r0, #0
   b4c2a:	d1de      	bne.n	b4bea <_Z15setLowPowerMode6String+0xe>
}
   b4c2c:	b005      	add	sp, #20
   b4c2e:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   b4c30:	4b15      	ldr	r3, [pc, #84]	; (b4c88 <_Z15setLowPowerMode6String+0xac>)
    Log.info("Set Low Power Mode");
   b4c32:	491a      	ldr	r1, [pc, #104]	; (b4c9c <_Z15setLowPowerMode6String+0xc0>)
   b4c34:	4816      	ldr	r0, [pc, #88]	; (b4c90 <_Z15setLowPowerMode6String+0xb4>)
    sysStatus.lowPowerMode = true;
   b4c36:	2201      	movs	r2, #1
   b4c38:	72da      	strb	r2, [r3, #11]
    Log.info("Set Low Power Mode");
   b4c3a:	f7ff fd2d 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b4c3e:	f004 f9cb 	bl	b8fd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b4c42:	2800      	cmp	r0, #0
   b4c44:	d0e8      	beq.n	b4c18 <_Z15setLowPowerMode6String+0x3c>
      waitUntil(meterParticlePublish);
   b4c46:	f7ff fed5 	bl	b49f4 <_Z20meterParticlePublishv>
   b4c4a:	b940      	cbnz	r0, b4c5e <_Z15setLowPowerMode6String+0x82>
            spark_process();
   b4c4c:	f004 f9b4 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b4c50:	e7f9      	b.n	b4c46 <_Z15setLowPowerMode6String+0x6a>
      waitUntil(meterParticlePublish);
   b4c52:	f7ff fecf 	bl	b49f4 <_Z20meterParticlePublishv>
   b4c56:	b910      	cbnz	r0, b4c5e <_Z15setLowPowerMode6String+0x82>
            spark_process();
   b4c58:	f004 f9ae 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b4c5c:	e7f9      	b.n	b4c52 <_Z15setLowPowerMode6String+0x76>
   b4c5e:	f7ff fec9 	bl	b49f4 <_Z20meterParticlePublishv>
   b4c62:	4b0f      	ldr	r3, [pc, #60]	; (b4ca0 <_Z15setLowPowerMode6String+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c64:	4a0f      	ldr	r2, [pc, #60]	; (b4ca4 <_Z15setLowPowerMode6String+0xc8>)
   b4c66:	781b      	ldrb	r3, [r3, #0]
   b4c68:	f88d 3000 	strb.w	r3, [sp]
   b4c6c:	a802      	add	r0, sp, #8
   b4c6e:	490e      	ldr	r1, [pc, #56]	; (b4ca8 <_Z15setLowPowerMode6String+0xcc>)
   b4c70:	233c      	movs	r3, #60	; 0x3c
   b4c72:	f004 fdab 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4c76:	a803      	add	r0, sp, #12
   b4c78:	f7ff ff3f 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c7c:	e7cc      	b.n	b4c18 <_Z15setLowPowerMode6String+0x3c>
   b4c7e:	bf00      	nop
   b4c80:	000bbf94 	.word	0x000bbf94
   b4c84:	000bc024 	.word	0x000bc024
   b4c88:	2003e580 	.word	0x2003e580
   b4c8c:	000bc1b9 	.word	0x000bc1b9
   b4c90:	2003e670 	.word	0x2003e670
   b4c94:	2003e570 	.word	0x2003e570
   b4c98:	2003e5b0 	.word	0x2003e5b0
   b4c9c:	000bc1a6 	.word	0x000bc1a6
   b4ca0:	2003e445 	.word	0x2003e445
   b4ca4:	2003e4f8 	.word	0x2003e4f8
   b4ca8:	000bc036 	.word	0x000bc036

000b4cac <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b4cac:	b570      	push	{r4, r5, r6, lr}
  sensor_data.validData = false;
   b4cae:	4c61      	ldr	r4, [pc, #388]	; (b4e34 <_Z16takeMeasurementsv+0x188>)
  if (sht31.readTemperature()){
   b4cb0:	4861      	ldr	r0, [pc, #388]	; (b4e38 <_Z16takeMeasurementsv+0x18c>)
bool takeMeasurements() {
   b4cb2:	b086      	sub	sp, #24
  sensor_data.validData = false;
   b4cb4:	2500      	movs	r5, #0
   b4cb6:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   b4cb8:	f001 fdaa 	bl	b6810 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4cbc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4cc4:	f000 80aa 	beq.w	b4e1c <_Z16takeMeasurementsv+0x170>
    sensor_data.temperatureInC = sht31.readTemperature();
   b4cc8:	485b      	ldr	r0, [pc, #364]	; (b4e38 <_Z16takeMeasurementsv+0x18c>)
   b4cca:	f001 fda1 	bl	b6810 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4cce:	ee10 0a10 	vmov	r0, s0
   b4cd2:	ed84 0a03 	vstr	s0, [r4, #12]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   b4cd6:	f006 fac9 	bl	bb26c <__aeabi_f2d>
   b4cda:	4a58      	ldr	r2, [pc, #352]	; (b4e3c <_Z16takeMeasurementsv+0x190>)
   b4cdc:	e9cd 0100 	strd	r0, r1, [sp]
   b4ce0:	2110      	movs	r1, #16
   b4ce2:	4857      	ldr	r0, [pc, #348]	; (b4e40 <_Z16takeMeasurementsv+0x194>)
   b4ce4:	f004 fa50 	bl	b9188 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   b4ce8:	4853      	ldr	r0, [pc, #332]	; (b4e38 <_Z16takeMeasurementsv+0x18c>)
   b4cea:	f001 fd9f 	bl	b682c <_ZN14Adafruit_SHT3112readHumidityEv>
   b4cee:	ee10 0a10 	vmov	r0, s0
   b4cf2:	ed84 0a04 	vstr	s0, [r4, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   b4cf6:	f006 fab9 	bl	bb26c <__aeabi_f2d>
   b4cfa:	4a52      	ldr	r2, [pc, #328]	; (b4e44 <_Z16takeMeasurementsv+0x198>)
   b4cfc:	e9cd 0100 	strd	r0, r1, [sp]
   b4d00:	2110      	movs	r1, #16
   b4d02:	4851      	ldr	r0, [pc, #324]	; (b4e48 <_Z16takeMeasurementsv+0x19c>)
   b4d04:	f004 fa40 	bl	b9188 <snprintf>
    sensor_data.lux = veml.readLux();
   b4d08:	4850      	ldr	r0, [pc, #320]	; (b4e4c <_Z16takeMeasurementsv+0x1a0>)
   b4d0a:	f001 fa35 	bl	b6178 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   b4d0e:	484f      	ldr	r0, [pc, #316]	; (b4e4c <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.lux = veml.readLux();
   b4d10:	ed84 0a05 	vstr	s0, [r4, #20]
    sensor_data.white = veml.readWhite();
   b4d14:	f001 fa50 	bl	b61b8 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   b4d18:	484c      	ldr	r0, [pc, #304]	; (b4e4c <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.white = veml.readWhite();
   b4d1a:	ed84 0a06 	vstr	s0, [r4, #24]
    sensor_data.raw_als = veml.readALS();
   b4d1e:	f001 f9cc 	bl	b60ba <_ZN17Adafruit_VEML77007readALSEv>
   b4d22:	ee07 0a90 	vmov	s15, r0
   b4d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4d2a:	2664      	movs	r6, #100	; 0x64
   b4d2c:	2013      	movs	r0, #19
    sensor_data.raw_als = veml.readALS();
   b4d2e:	edc4 7a07 	vstr	s15, [r4, #28]
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4d32:	f006 f85b 	bl	badec <analogRead>
   b4d36:	462b      	mov	r3, r5
   b4d38:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4d3c:	4629      	mov	r1, r5
   b4d3e:	9600      	str	r6, [sp, #0]
   b4d40:	f004 fa7a 	bl	b9238 <_Z3mapiiiii>
   b4d44:	62a0      	str	r0, [r4, #40]	; 0x28
    sensor_data.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4d46:	2012      	movs	r0, #18
   b4d48:	f006 f850 	bl	badec <analogRead>
   b4d4c:	462b      	mov	r3, r5
   b4d4e:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4d52:	4629      	mov	r1, r5
   b4d54:	9600      	str	r6, [sp, #0]
   b4d56:	f004 fa6f 	bl	b9238 <_Z3mapiiiii>
   b4d5a:	62e0      	str	r0, [r4, #44]	; 0x2c
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   b4d5c:	6960      	ldr	r0, [r4, #20]
   b4d5e:	f006 fa85 	bl	bb26c <__aeabi_f2d>
   b4d62:	4a3b      	ldr	r2, [pc, #236]	; (b4e50 <_Z16takeMeasurementsv+0x1a4>)
   b4d64:	e9cd 0100 	strd	r0, r1, [sp]
   b4d68:	2110      	movs	r1, #16
   b4d6a:	483a      	ldr	r0, [pc, #232]	; (b4e54 <_Z16takeMeasurementsv+0x1a8>)
   b4d6c:	f004 fa0c 	bl	b9188 <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   b4d70:	69a0      	ldr	r0, [r4, #24]
   b4d72:	f006 fa7b 	bl	bb26c <__aeabi_f2d>
   b4d76:	4a38      	ldr	r2, [pc, #224]	; (b4e58 <_Z16takeMeasurementsv+0x1ac>)
   b4d78:	e9cd 0100 	strd	r0, r1, [sp]
   b4d7c:	2110      	movs	r1, #16
   b4d7e:	4837      	ldr	r0, [pc, #220]	; (b4e5c <_Z16takeMeasurementsv+0x1b0>)
   b4d80:	f004 fa02 	bl	b9188 <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   b4d84:	69e0      	ldr	r0, [r4, #28]
   b4d86:	f006 fa71 	bl	bb26c <__aeabi_f2d>
   b4d8a:	4a35      	ldr	r2, [pc, #212]	; (b4e60 <_Z16takeMeasurementsv+0x1b4>)
   b4d8c:	e9cd 0100 	strd	r0, r1, [sp]
   b4d90:	2110      	movs	r1, #16
   b4d92:	4834      	ldr	r0, [pc, #208]	; (b4e64 <_Z16takeMeasurementsv+0x1b8>)
   b4d94:	f004 f9f8 	bl	b9188 <snprintf>
   b4d98:	a902      	add	r1, sp, #8
   b4d9a:	2003      	movs	r0, #3
   b4d9c:	f7ff fe34 	bl	b4a08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b4da0:	2800      	cmp	r0, #0
   b4da2:	d13e      	bne.n	b4e22 <_Z16takeMeasurementsv+0x176>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4da4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4da8:	ee07 3a90 	vmov	s15, r3
   b4dac:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4db4:	2110      	movs	r1, #16
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4db6:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4dba:	4a2b      	ldr	r2, [pc, #172]	; (b4e68 <_Z16takeMeasurementsv+0x1bc>)
   b4dbc:	482b      	ldr	r0, [pc, #172]	; (b4e6c <_Z16takeMeasurementsv+0x1c0>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4dbe:	edc4 7a08 	vstr	s15, [r4, #32]
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4dc2:	f004 f9e1 	bl	b9188 <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   b4dc6:	f7ff fe41 	bl	b4a4c <_Z17getBatteryContextv>
   b4dca:	a902      	add	r1, sp, #8
   b4dcc:	2003      	movs	r0, #3
   b4dce:	f7ff fe1b 	bl	b4a08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   b4dd2:	bb48      	cbnz	r0, b4e28 <_Z16takeMeasurementsv+0x17c>
   b4dd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4dd8:	ee07 3a90 	vmov	s15, r3
   b4ddc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b4de4:	4a22      	ldr	r2, [pc, #136]	; (b4e70 <_Z16takeMeasurementsv+0x1c4>)
   b4de6:	ee17 3a90 	vmov	r3, s15
    if (sysStatus.stateOfCharge < 30) {
   b4dea:	2b1d      	cmp	r3, #29
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4dec:	edc2 7a03 	vstr	s15, [r2, #12]
    if (sysStatus.stateOfCharge < 30) {
   b4df0:	dc1d      	bgt.n	b4e2e <_Z16takeMeasurementsv+0x182>
      sysStatus.lowBatteryMode = true;
   b4df2:	2301      	movs	r3, #1
   b4df4:	7293      	strb	r3, [r2, #10]
      if (!sysStatus.lowPowerMode) setLowPowerMode("1");                 // Should be there already but just in case...
   b4df6:	7ad3      	ldrb	r3, [r2, #11]
   b4df8:	b94b      	cbnz	r3, b4e0e <_Z16takeMeasurementsv+0x162>
   b4dfa:	491e      	ldr	r1, [pc, #120]	; (b4e74 <_Z16takeMeasurementsv+0x1c8>)
   b4dfc:	a802      	add	r0, sp, #8
   b4dfe:	f005 fad0 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e02:	a802      	add	r0, sp, #8
   b4e04:	f7ff feea 	bl	b4bdc <_Z15setLowPowerMode6String>
   b4e08:	a802      	add	r0, sp, #8
   b4e0a:	f005 fa7f 	bl	ba30c <_ZN6StringD1Ev>
    sensor_data.validData = true;
   b4e0e:	2501      	movs	r5, #1
   b4e10:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   b4e12:	f005 fdf4 	bl	ba9fe <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;  
   b4e16:	4b18      	ldr	r3, [pc, #96]	; (b4e78 <_Z16takeMeasurementsv+0x1cc>)
    sensor_data.timeStamp = Time.now();
   b4e18:	6060      	str	r0, [r4, #4]
    sensorDataWriteNeeded = true;  
   b4e1a:	701d      	strb	r5, [r3, #0]
    }else return 0;
   b4e1c:	4628      	mov	r0, r5
  }                                                                       // Take measurement from all the sensors
   b4e1e:	b006      	add	sp, #24
   b4e20:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   b4e22:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4e26:	e7c3      	b.n	b4db0 <_Z16takeMeasurementsv+0x104>
   b4e28:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4e2c:	e7d8      	b.n	b4de0 <_Z16takeMeasurementsv+0x134>
    else sysStatus.lowBatteryMode = false;                              // We have sufficient to continue operations
   b4e2e:	2300      	movs	r3, #0
   b4e30:	7293      	strb	r3, [r2, #10]
   b4e32:	e7ec      	b.n	b4e0e <_Z16takeMeasurementsv+0x162>
   b4e34:	2003e524 	.word	0x2003e524
   b4e38:	2003e564 	.word	0x2003e564
   b4e3c:	000bc1d0 	.word	0x000bc1d0
   b4e40:	2003e5b1 	.word	0x2003e5b1
   b4e44:	000bc1d8 	.word	0x000bc1d8
   b4e48:	2003e4c8 	.word	0x2003e4c8
   b4e4c:	2003e5c4 	.word	0x2003e5c4
   b4e50:	000bc1e0 	.word	0x000bc1e0
   b4e54:	2003e508 	.word	0x2003e508
   b4e58:	000bc1ec 	.word	0x000bc1ec
   b4e5c:	2003e601 	.word	0x2003e601
   b4e60:	000bc1fa 	.word	0x000bc1fa
   b4e64:	2003e3e8 	.word	0x2003e3e8
   b4e68:	000bc206 	.word	0x000bc206
   b4e6c:	2003e484 	.word	0x2003e484
   b4e70:	2003e580 	.word	0x2003e580
   b4e74:	000bbf94 	.word	0x000bbf94
   b4e78:	2003e520 	.word	0x2003e520

000b4e7c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                           // Default settings for the device - connected, not-low power and always on
   b4e7c:	b510      	push	{r4, lr}
   b4e7e:	b086      	sub	sp, #24
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e80:	f004 f8aa 	bl	b8fd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4e84:	b1a0      	cbz	r0, b4eb0 <_Z18loadSystemDefaultsv+0x34>
    waitUntil(meterParticlePublish);
   b4e86:	f7ff fdb5 	bl	b49f4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   b4e8a:	b910      	cbnz	r0, b4e92 <_Z18loadSystemDefaultsv+0x16>
            spark_process();
   b4e8c:	f004 f894 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b4e90:	e7f9      	b.n	b4e86 <_Z18loadSystemDefaultsv+0xa>
   b4e92:	f7ff fdaf 	bl	b49f4 <_Z20meterParticlePublishv>
   b4e96:	4b19      	ldr	r3, [pc, #100]	; (b4efc <_Z18loadSystemDefaultsv+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4e98:	4a19      	ldr	r2, [pc, #100]	; (b4f00 <_Z18loadSystemDefaultsv+0x84>)
   b4e9a:	781b      	ldrb	r3, [r3, #0]
   b4e9c:	f88d 3000 	strb.w	r3, [sp]
   b4ea0:	a802      	add	r0, sp, #8
   b4ea2:	4918      	ldr	r1, [pc, #96]	; (b4f04 <_Z18loadSystemDefaultsv+0x88>)
   b4ea4:	233c      	movs	r3, #60	; 0x3c
   b4ea6:	f004 fc91 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4eaa:	a803      	add	r0, sp, #12
   b4eac:	f7ff fe25 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 1;
   b4eb0:	4c15      	ldr	r4, [pc, #84]	; (b4f08 <_Z18loadSystemDefaultsv+0x8c>)
  Log.info("Loading system defaults");
   b4eb2:	4816      	ldr	r0, [pc, #88]	; (b4f0c <_Z18loadSystemDefaultsv+0x90>)
   b4eb4:	4916      	ldr	r1, [pc, #88]	; (b4f10 <_Z18loadSystemDefaultsv+0x94>)
   b4eb6:	f7ff fbef 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   b4eba:	2301      	movs	r3, #1
   b4ebc:	7023      	strb	r3, [r4, #0]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   b4ebe:	2004      	movs	r0, #4
  sysStatus.verboseMode = false;
   b4ec0:	2300      	movs	r3, #0
   b4ec2:	7263      	strb	r3, [r4, #9]
  sysStatus.lowBatteryMode = false;
   b4ec4:	72a3      	strb	r3, [r4, #10]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   b4ec6:	f005 ff7e 	bl	badc6 <digitalRead>
   b4eca:	b1a0      	cbz	r0, b4ef6 <_Z18loadSystemDefaultsv+0x7a>
   b4ecc:	4911      	ldr	r1, [pc, #68]	; (b4f14 <_Z18loadSystemDefaultsv+0x98>)
  else setLowPowerMode("0");
   b4ece:	a802      	add	r0, sp, #8
   b4ed0:	f005 fa67 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ed4:	a802      	add	r0, sp, #8
   b4ed6:	f7ff fe81 	bl	b4bdc <_Z15setLowPowerMode6String>
   b4eda:	a802      	add	r0, sp, #8
   b4edc:	f005 fa16 	bl	ba30c <_ZN6StringD1Ev>
  fram.put(FRAM::sysStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   b4ee0:	4a09      	ldr	r2, [pc, #36]	; (b4f08 <_Z18loadSystemDefaultsv+0x8c>)
   b4ee2:	480d      	ldr	r0, [pc, #52]	; (b4f18 <_Z18loadSystemDefaultsv+0x9c>)
  sysStatus.solarPowerMode = true;
   b4ee4:	2101      	movs	r1, #1
  sysStatus.lastConnectionDuration = 0;                               // New measure
   b4ee6:	2300      	movs	r3, #0
  sysStatus.solarPowerMode = true;
   b4ee8:	75e1      	strb	r1, [r4, #23]
  sysStatus.lastConnectionDuration = 0;                               // New measure
   b4eea:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   b4eec:	b006      	add	sp, #24
   b4eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  fram.put(FRAM::sysStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   b4ef2:	f7ff b9a1 	b.w	b4238 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
  else setLowPowerMode("0");
   b4ef6:	4909      	ldr	r1, [pc, #36]	; (b4f1c <_Z18loadSystemDefaultsv+0xa0>)
   b4ef8:	e7e9      	b.n	b4ece <_Z18loadSystemDefaultsv+0x52>
   b4efa:	bf00      	nop
   b4efc:	2003e445 	.word	0x2003e445
   b4f00:	000bc20a 	.word	0x000bc20a
   b4f04:	000bc036 	.word	0x000bc036
   b4f08:	2003e580 	.word	0x2003e580
   b4f0c:	2003e670 	.word	0x2003e670
   b4f10:	000bc222 	.word	0x000bc222
   b4f14:	000bbf94 	.word	0x000bbf94
   b4f18:	2003e4b0 	.word	0x2003e4b0
   b4f1c:	000bc024 	.word	0x000bc024

000b4f20 <_Z23recordConnectionDetailsv>:
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   b4f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   b4f22:	4a3b      	ldr	r2, [pc, #236]	; (b5010 <_Z23recordConnectionDetailsv+0xf0>)
   b4f24:	4d3b      	ldr	r5, [pc, #236]	; (b5014 <_Z23recordConnectionDetailsv+0xf4>)
   b4f26:	6812      	ldr	r2, [r2, #0]
   b4f28:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   b4f2a:	3201      	adds	r2, #1
   b4f2c:	4293      	cmp	r3, r2
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   b4f2e:	b095      	sub	sp, #84	; 0x54
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   b4f30:	d932      	bls.n	b4f98 <_Z23recordConnectionDetailsv+0x78>
   b4f32:	2300      	movs	r3, #0
   b4f34:	85ab      	strh	r3, [r5, #44]	; 0x2c
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4f36:	4e38      	ldr	r6, [pc, #224]	; (b5018 <_Z23recordConnectionDetailsv+0xf8>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4f38:	2200      	movs	r2, #0
   b4f3a:	6870      	ldr	r0, [r6, #4]
   b4f3c:	4611      	mov	r1, r2
   b4f3e:	f004 f8b3 	bl	b90a8 <network_ready>
  if (Cellular.ready()) getSignalStrength();                           // Test signal strength if the cellular modem is on and ready
   b4f42:	b108      	cbz	r0, b4f48 <_Z23recordConnectionDetailsv+0x28>
   b4f44:	f7ff fcd6 	bl	b48f4 <_Z17getSignalStrengthv>
  snprintf(data, sizeof(data),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   b4f48:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   b4f4a:	4a34      	ldr	r2, [pc, #208]	; (b501c <_Z23recordConnectionDetailsv+0xfc>)
   b4f4c:	2140      	movs	r1, #64	; 0x40
   b4f4e:	a804      	add	r0, sp, #16
   b4f50:	f004 f91a 	bl	b9188 <snprintf>
  Log.info(data);
   b4f54:	4832      	ldr	r0, [pc, #200]	; (b5020 <_Z23recordConnectionDetailsv+0x100>)
   b4f56:	a904      	add	r1, sp, #16
   b4f58:	f7ff fb9e 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f5c:	f004 f83c 	bl	b8fd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4f60:	4604      	mov	r4, r0
   b4f62:	b1f8      	cbz	r0, b4fa4 <_Z23recordConnectionDetailsv+0x84>
    Log.info("Cloud connection successful");
   b4f64:	492f      	ldr	r1, [pc, #188]	; (b5024 <_Z23recordConnectionDetailsv+0x104>)
   b4f66:	482e      	ldr	r0, [pc, #184]	; (b5020 <_Z23recordConnectionDetailsv+0x100>)
   b4f68:	f7ff fb96 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.verboseMode) Particle.publish("Cellular",data,PRIVATE);
   b4f6c:	7a6b      	ldrb	r3, [r5, #9]
   b4f6e:	b163      	cbz	r3, b4f8a <_Z23recordConnectionDetailsv+0x6a>
   b4f70:	4b2d      	ldr	r3, [pc, #180]	; (b5028 <_Z23recordConnectionDetailsv+0x108>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f72:	492e      	ldr	r1, [pc, #184]	; (b502c <_Z23recordConnectionDetailsv+0x10c>)
   b4f74:	781b      	ldrb	r3, [r3, #0]
   b4f76:	f88d 3000 	strb.w	r3, [sp]
   b4f7a:	a802      	add	r0, sp, #8
   b4f7c:	233c      	movs	r3, #60	; 0x3c
   b4f7e:	aa04      	add	r2, sp, #16
   b4f80:	f004 fc24 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4f84:	a803      	add	r0, sp, #12
   b4f86:	f7ff fdb8 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  systemStatusWriteNeeded = true;
   b4f8a:	4a29      	ldr	r2, [pc, #164]	; (b5030 <_Z23recordConnectionDetailsv+0x110>)
   b4f8c:	2301      	movs	r3, #1
   b4f8e:	7013      	strb	r3, [r2, #0]
  sensorDataWriteNeeded = true;
   b4f90:	4a28      	ldr	r2, [pc, #160]	; (b5034 <_Z23recordConnectionDetailsv+0x114>)
   b4f92:	7013      	strb	r3, [r2, #0]
}
   b4f94:	b015      	add	sp, #84	; 0x54
   b4f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (sysStatus.lastConnectionDuration > sensor_data.maxConnectTime) sensor_data.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   b4f98:	4a27      	ldr	r2, [pc, #156]	; (b5038 <_Z23recordConnectionDetailsv+0x118>)
   b4f9a:	8e91      	ldrh	r1, [r2, #52]	; 0x34
   b4f9c:	4299      	cmp	r1, r3
   b4f9e:	bf38      	it	cc
   b4fa0:	8693      	strhcc	r3, [r2, #52]	; 0x34
   b4fa2:	e7c8      	b.n	b4f36 <_Z23recordConnectionDetailsv+0x16>
   b4fa4:	4602      	mov	r2, r0
   b4fa6:	4601      	mov	r1, r0
   b4fa8:	6870      	ldr	r0, [r6, #4]
   b4faa:	4f23      	ldr	r7, [pc, #140]	; (b5038 <_Z23recordConnectionDetailsv+0x118>)
   b4fac:	4e1e      	ldr	r6, [pc, #120]	; (b5028 <_Z23recordConnectionDetailsv+0x108>)
   b4fae:	f004 f87b 	bl	b90a8 <network_ready>
  else if (Cellular.ready()) {                                        // We want to take note of this as it implies an issue with the Particle back-end
   b4fb2:	4605      	mov	r5, r0
   b4fb4:	b1c0      	cbz	r0, b4fe8 <_Z23recordConnectionDetailsv+0xc8>
    Log.info("Connected to cellular but not Particle");
   b4fb6:	4921      	ldr	r1, [pc, #132]	; (b503c <_Z23recordConnectionDetailsv+0x11c>)
   b4fb8:	4819      	ldr	r0, [pc, #100]	; (b5020 <_Z23recordConnectionDetailsv+0x100>)
    sensor_data.alerts = 30;                                              // Record alert for timeout on Particle but connected to cellular
   b4fba:	251e      	movs	r5, #30
    Log.info("Connected to cellular but not Particle");
   b4fbc:	f7ff fb6c 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    sensor_data.alerts = 30;                                              // Record alert for timeout on Particle but connected to cellular
   b4fc0:	633d      	str	r5, [r7, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b4fc2:	f005 fd1c 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b4fc6:	4a1e      	ldr	r2, [pc, #120]	; (b5040 <_Z23recordConnectionDetailsv+0x120>)
   b4fc8:	9000      	str	r0, [sp, #0]
   b4fca:	462b      	mov	r3, r5
   b4fcc:	2140      	movs	r1, #64	; 0x40
   b4fce:	a804      	add	r0, sp, #16
   b4fd0:	f004 f8da 	bl	b9188 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b4fd4:	f001 ff7e 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b4fd8:	f88d 4000 	strb.w	r4, [sp]
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b4fdc:	7833      	ldrb	r3, [r6, #0]
   b4fde:	4919      	ldr	r1, [pc, #100]	; (b5044 <_Z23recordConnectionDetailsv+0x124>)
   b4fe0:	aa04      	add	r2, sp, #16
   b4fe2:	f7ff f931 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4fe6:	e7d0      	b.n	b4f8a <_Z23recordConnectionDetailsv+0x6a>
    Log.info("Failed to connect");
   b4fe8:	4917      	ldr	r1, [pc, #92]	; (b5048 <_Z23recordConnectionDetailsv+0x128>)
   b4fea:	480d      	ldr	r0, [pc, #52]	; (b5020 <_Z23recordConnectionDetailsv+0x100>)
    sensor_data.alerts = 31;                                              // Record alert for timeout on cellular
   b4fec:	241f      	movs	r4, #31
    Log.info("Failed to connect");
   b4fee:	f7ff fb53 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    sensor_data.alerts = 31;                                              // Record alert for timeout on cellular
   b4ff2:	633c      	str	r4, [r7, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b4ff4:	f005 fd03 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b4ff8:	4a11      	ldr	r2, [pc, #68]	; (b5040 <_Z23recordConnectionDetailsv+0x120>)
   b4ffa:	9000      	str	r0, [sp, #0]
   b4ffc:	4623      	mov	r3, r4
   b4ffe:	2140      	movs	r1, #64	; 0x40
   b5000:	a804      	add	r0, sp, #16
   b5002:	f004 f8c1 	bl	b9188 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b5006:	f001 ff65 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b500a:	f88d 5000 	strb.w	r5, [sp]
   b500e:	e7e5      	b.n	b4fdc <_Z23recordConnectionDetailsv+0xbc>
   b5010:	2003e2d4 	.word	0x2003e2d4
   b5014:	2003e580 	.word	0x2003e580
   b5018:	2003e638 	.word	0x2003e638
   b501c:	000bc23a 	.word	0x000bc23a
   b5020:	2003e670 	.word	0x2003e670
   b5024:	000bc24f 	.word	0x000bc24f
   b5028:	2003e445 	.word	0x2003e445
   b502c:	000bc26b 	.word	0x000bc26b
   b5030:	2003e5b0 	.word	0x2003e5b0
   b5034:	2003e520 	.word	0x2003e520
   b5038:	2003e524 	.word	0x2003e524
   b503c:	000bc274 	.word	0x000bc274
   b5040:	000bbfba 	.word	0x000bbfba
   b5044:	000bbfdc 	.word	0x000bbfdc
   b5048:	000bc29b 	.word	0x000bc29b

000b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b504c:	b513      	push	{r0, r1, r4, lr}
   b504e:	460b      	mov	r3, r1
   b5050:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5052:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5056:	466c      	mov	r4, sp
   b5058:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b505c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5060:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5064:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5068:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b506c:	b002      	add	sp, #8
   b506e:	bd10      	pop	{r4, pc}

000b5070 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5074:	b094      	sub	sp, #80	; 0x50
   b5076:	4605      	mov	r5, r0
        };
   b5078:	991a      	ldr	r1, [sp, #104]	; 0x68
   b507a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b507c:	4617      	mov	r7, r2
   b507e:	461e      	mov	r6, r3
        };
   b5080:	f7ff fd08 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5084:	a904      	add	r1, sp, #16
   b5086:	a808      	add	r0, sp, #32
   b5088:	f7ff fd04 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b508c:	a908      	add	r1, sp, #32
   b508e:	a80c      	add	r0, sp, #48	; 0x30
   b5090:	f7ff fd00 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b5094:	f04f 0800 	mov.w	r8, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5098:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b509a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b509e:	f7fe fffa 	bl	b4096 <_Znwj>
   b50a2:	4604      	mov	r4, r0
   b50a4:	b168      	cbz	r0, b50c2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x52>
    _Function_base() : _M_manager(nullptr) { }
   b50a6:	f8c0 8008 	str.w	r8, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b50aa:	4601      	mov	r1, r0
   b50ac:	a80c      	add	r0, sp, #48	; 0x30
   b50ae:	f7ff ffcd 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b50b4:	68a2      	ldr	r2, [r4, #8]
   b50b6:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   b50b8:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b50ba:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b50be:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b50c0:	920f      	str	r2, [sp, #60]	; 0x3c
	    _M_invoker = &_My_handler::_M_invoke;
   b50c2:	4b24      	ldr	r3, [pc, #144]	; (b5154 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe4>)
   b50c4:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b50c6:	4b24      	ldr	r3, [pc, #144]	; (b5158 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>)
   b50c8:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b50ca:	2200      	movs	r2, #0
   b50cc:	2300      	movs	r3, #0
   b50ce:	f04f 0800 	mov.w	r8, #0
   b50d2:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b50d6:	4b21      	ldr	r3, [pc, #132]	; (b515c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xec>)
              callable_(callable) {
   b50d8:	f8c5 8008 	str.w	r8, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b50dc:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50de:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b50e0:	e9cd 3801 	strd	r3, r8, [sp, #4]
   b50e4:	f8cd 800c 	str.w	r8, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b50e8:	f7fe ffd5 	bl	b4096 <_Znwj>
   b50ec:	4604      	mov	r4, r0
   b50ee:	b1d8      	cbz	r0, b5128 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
    bool _M_empty() const { return !_M_manager; }
   b50f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b50f2:	f8c0 8008 	str.w	r8, [r0, #8]
      if (static_cast<bool>(__x))
   b50f6:	b133      	cbz	r3, b5106 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x96>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b50f8:	2202      	movs	r2, #2
   b50fa:	a910      	add	r1, sp, #64	; 0x40
   b50fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b50fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5100:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5102:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5104:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5106:	4b16      	ldr	r3, [pc, #88]	; (b5160 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf0>)
   b5108:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b510a:	4a16      	ldr	r2, [pc, #88]	; (b5164 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
        context.callable = wrapper;
   b510c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b510e:	ab01      	add	r3, sp, #4
   b5110:	4638      	mov	r0, r7
   b5112:	4631      	mov	r1, r6
   b5114:	f003 fee0 	bl	b8ed8 <system_subscribe_event>
        if (r) {
   b5118:	b1b0      	cbz	r0, b5148 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xd8>
    class function<_Res(_ArgTypes...)>
   b511a:	4620      	mov	r0, r4
   b511c:	f7ff f9ce 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b5120:	2110      	movs	r1, #16
   b5122:	4620      	mov	r0, r4
   b5124:	f7fe ffbb 	bl	b409e <_ZdlPvj>
   b5128:	a810      	add	r0, sp, #64	; 0x40
   b512a:	f7ff f9c7 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b512e:	a80c      	add	r0, sp, #48	; 0x30
   b5130:	f7ff f9c4 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b5134:	a808      	add	r0, sp, #32
   b5136:	f7ff f9c1 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b513a:	a804      	add	r0, sp, #16
   b513c:	f7ff f9be 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
    }
   b5140:	4628      	mov	r0, r5
   b5142:	b014      	add	sp, #80	; 0x50
   b5144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5148:	9b02      	ldr	r3, [sp, #8]
   b514a:	60ab      	str	r3, [r5, #8]
   b514c:	e9c5 7600 	strd	r7, r6, [r5]
   b5150:	e7ea      	b.n	b5128 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
   b5152:	bf00      	nop
   b5154:	000b41bf 	.word	0x000b41bf
   b5158:	000b4ab3 	.word	0x000b4ab3
   b515c:	000c0002 	.word	0x000c0002
   b5160:	000b44cf 	.word	0x000b44cf
   b5164:	000b40e5 	.word	0x000b40e5

000b5168 <setup>:
{
   b5168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b516c:	2100      	movs	r1, #0
{
   b516e:	b0a7      	sub	sp, #156	; 0x9c
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b5170:	2008      	movs	r0, #8
   b5172:	f005 fe17 	bl	bada4 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b5176:	2101      	movs	r1, #1
   b5178:	2005      	movs	r0, #5
   b517a:	f005 fe13 	bl	bada4 <pinMode>
  pinMode(userSwitch,INPUT);                                                                // Momentary contact button on board for direct user input
   b517e:	2100      	movs	r1, #0
   b5180:	2004      	movs	r0, #4
   b5182:	f005 fe0f 	bl	bada4 <pinMode>
  pinMode(soilPin, INPUT);    
   b5186:	2100      	movs	r1, #0
   b5188:	2013      	movs	r0, #19
   b518a:	f005 fe0b 	bl	bada4 <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   b518e:	f7ff fb29 	bl	b47e4 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   b5192:	2300      	movs	r3, #0
   b5194:	9300      	str	r3, [sp, #0]
   b5196:	2201      	movs	r2, #1
   b5198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b519c:	49b8      	ldr	r1, [pc, #736]	; (b5480 <setup+0x318>)
   b519e:	2008      	movs	r0, #8
   b51a0:	f004 fe26 	bl	b9df0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b51a4:	4bb7      	ldr	r3, [pc, #732]	; (b5484 <setup+0x31c>)
   b51a6:	aa06      	add	r2, sp, #24
   b51a8:	f103 0510 	add.w	r5, r3, #16
   b51ac:	4691      	mov	r9, r2
   b51ae:	6818      	ldr	r0, [r3, #0]
   b51b0:	6859      	ldr	r1, [r3, #4]
   b51b2:	4614      	mov	r4, r2
   b51b4:	c403      	stmia	r4!, {r0, r1}
   b51b6:	3308      	adds	r3, #8
   b51b8:	42ab      	cmp	r3, r5
   b51ba:	4622      	mov	r2, r4
   b51bc:	d1f7      	bne.n	b51ae <setup+0x46>
   b51be:	8819      	ldrh	r1, [r3, #0]
   b51c0:	789b      	ldrb	r3, [r3, #2]
   b51c2:	70a3      	strb	r3, [r4, #2]
   b51c4:	222d      	movs	r2, #45	; 0x2d
   b51c6:	8021      	strh	r1, [r4, #0]
  state = IDLE_STATE;
   b51c8:	4faf      	ldr	r7, [pc, #700]	; (b5488 <setup+0x320>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b51ca:	4eb0      	ldr	r6, [pc, #704]	; (b548c <setup+0x324>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b51cc:	2100      	movs	r1, #0
   b51ce:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   b51d2:	f006 fc61 	bl	bba98 <memset>
  state = IDLE_STATE;
   b51d6:	2502      	movs	r5, #2
        return spark_deviceID();
   b51d8:	a802      	add	r0, sp, #8
   b51da:	703d      	strb	r5, [r7, #0]
   b51dc:	f003 ff04 	bl	b8fe8 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b51e0:	a902      	add	r1, sp, #8
   b51e2:	a816      	add	r0, sp, #88	; 0x58
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b51e4:	2400      	movs	r4, #0
   b51e6:	f005 f91c 	bl	ba422 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/environmental-hook/", UbidotsHandler, MY_DEVICES);
   b51ea:	49a9      	ldr	r1, [pc, #676]	; (b5490 <setup+0x328>)
   b51ec:	a816      	add	r0, sp, #88	; 0x58
   b51ee:	f005 f971 	bl	ba4d4 <_ZplRK15StringSumHelperPKc>
   b51f2:	e9cd 4400 	strd	r4, r4, [sp]
   b51f6:	49a7      	ldr	r1, [pc, #668]	; (b5494 <setup+0x32c>)
   b51f8:	6800      	ldr	r0, [r0, #0]
   b51fa:	4623      	mov	r3, r4
   b51fc:	4622      	mov	r2, r4
   b51fe:	f003 ff03 	bl	b9008 <spark_subscribe>
class StringSumHelper : public String
   b5202:	a816      	add	r0, sp, #88	; 0x58
   b5204:	f005 f882 	bl	ba30c <_ZN6StringD1Ev>
   b5208:	a802      	add	r0, sp, #8
   b520a:	f005 f87f 	bl	ba30c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b520e:	4ba2      	ldr	r3, [pc, #648]	; (b5498 <setup+0x330>)
   b5210:	9316      	str	r3, [sp, #88]	; 0x58
	    _M_invoker = &_My_handler::_M_invoke;
   b5212:	4ba2      	ldr	r3, [pc, #648]	; (b549c <setup+0x334>)
   b5214:	9319      	str	r3, [sp, #100]	; 0x64
	    _M_manager = &_My_handler::_M_manager;
   b5216:	4ba2      	ldr	r3, [pc, #648]	; (b54a0 <setup+0x338>)
   b5218:	9318      	str	r3, [sp, #96]	; 0x60
  System.on(firmware_update, firmwareUpdateHandler);// Registers a handler that will track if we are getting an update
   b521a:	ab16      	add	r3, sp, #88	; 0x58
   b521c:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5220:	9300      	str	r3, [sp, #0]
   b5222:	a802      	add	r0, sp, #8
   b5224:	2300      	movs	r3, #0
   b5226:	f7ff ff23 	bl	b5070 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b522a:	a816      	add	r0, sp, #88	; 0x58
   b522c:	f7ff f946 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5230:	4b9c      	ldr	r3, [pc, #624]	; (b54a4 <setup+0x33c>)
   b5232:	9316      	str	r3, [sp, #88]	; 0x58
	    _M_invoker = &_My_handler::_M_invoke;
   b5234:	4b9c      	ldr	r3, [pc, #624]	; (b54a8 <setup+0x340>)
   b5236:	9319      	str	r3, [sp, #100]	; 0x64
	    _M_manager = &_My_handler::_M_manager;
   b5238:	4b9c      	ldr	r3, [pc, #624]	; (b54ac <setup+0x344>)
   b523a:	9318      	str	r3, [sp, #96]	; 0x60
  System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b523c:	ab16      	add	r3, sp, #88	; 0x58
   b523e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5242:	9300      	str	r3, [sp, #0]
   b5244:	a802      	add	r0, sp, #8
   b5246:	2300      	movs	r3, #0
   b5248:	f7ff ff12 	bl	b5070 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b524c:	a816      	add	r0, sp, #88	; 0x58
   b524e:	f7ff f935 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5252:	4b97      	ldr	r3, [pc, #604]	; (b54b0 <setup+0x348>)
   b5254:	4897      	ldr	r0, [pc, #604]	; (b54b4 <setup+0x34c>)
   b5256:	6819      	ldr	r1, [r3, #0]
   b5258:	f7ff f903 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b525c:	4996      	ldr	r1, [pc, #600]	; (b54b8 <setup+0x350>)
   b525e:	4897      	ldr	r0, [pc, #604]	; (b54bc <setup+0x354>)
   b5260:	f7ff f8ff 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5264:	4996      	ldr	r1, [pc, #600]	; (b54c0 <setup+0x358>)
   b5266:	4897      	ldr	r0, [pc, #604]	; (b54c4 <setup+0x35c>)
   b5268:	f7ff f8fb 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b526c:	4996      	ldr	r1, [pc, #600]	; (b54c8 <setup+0x360>)
   b526e:	4897      	ldr	r0, [pc, #604]	; (b54cc <setup+0x364>)
   b5270:	f7ff f8f7 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5274:	4996      	ldr	r1, [pc, #600]	; (b54d0 <setup+0x368>)
   b5276:	4897      	ldr	r0, [pc, #604]	; (b54d4 <setup+0x36c>)
   b5278:	f7ff f8f3 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b527c:	4996      	ldr	r1, [pc, #600]	; (b54d8 <setup+0x370>)
   b527e:	4897      	ldr	r0, [pc, #604]	; (b54dc <setup+0x374>)
   b5280:	f7ff f8ef 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5284:	4996      	ldr	r1, [pc, #600]	; (b54e0 <setup+0x378>)
   b5286:	4897      	ldr	r0, [pc, #604]	; (b54e4 <setup+0x37c>)
   b5288:	f7ff f8eb 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b528c:	4996      	ldr	r1, [pc, #600]	; (b54e8 <setup+0x380>)
   b528e:	4897      	ldr	r0, [pc, #604]	; (b54ec <setup+0x384>)
   b5290:	f7ff f8e7 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5294:	462a      	mov	r2, r5
   b5296:	4996      	ldr	r1, [pc, #600]	; (b54f0 <setup+0x388>)
   b5298:	4896      	ldr	r0, [pc, #600]	; (b54f4 <setup+0x38c>)
   b529a:	4623      	mov	r3, r4
   b529c:	f003 fe7c 	bl	b8f98 <spark_variable>
   b52a0:	4623      	mov	r3, r4
   b52a2:	2201      	movs	r2, #1
   b52a4:	4994      	ldr	r1, [pc, #592]	; (b54f8 <setup+0x390>)
   b52a6:	4895      	ldr	r0, [pc, #596]	; (b54fc <setup+0x394>)
   b52a8:	f003 fe76 	bl	b8f98 <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b52ac:	4994      	ldr	r1, [pc, #592]	; (b5500 <setup+0x398>)
   b52ae:	4895      	ldr	r0, [pc, #596]	; (b5504 <setup+0x39c>)
   b52b0:	f7ff f8d7 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b52b4:	4994      	ldr	r1, [pc, #592]	; (b5508 <setup+0x3a0>)
   b52b6:	4895      	ldr	r0, [pc, #596]	; (b550c <setup+0x3a4>)
   b52b8:	f7ff f8d3 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b52bc:	462a      	mov	r2, r5
   b52be:	4994      	ldr	r1, [pc, #592]	; (b5510 <setup+0x3a8>)
   b52c0:	4894      	ldr	r0, [pc, #592]	; (b5514 <setup+0x3ac>)
   b52c2:	4623      	mov	r3, r4
   b52c4:	f003 fe68 	bl	b8f98 <spark_variable>
   b52c8:	4623      	mov	r3, r4
   b52ca:	2209      	movs	r2, #9
   b52cc:	4992      	ldr	r1, [pc, #584]	; (b5518 <setup+0x3b0>)
   b52ce:	4893      	ldr	r0, [pc, #588]	; (b551c <setup+0x3b4>)
   b52d0:	f003 fe62 	bl	b8f98 <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b52d4:	498a      	ldr	r1, [pc, #552]	; (b5500 <setup+0x398>)
   b52d6:	488b      	ldr	r0, [pc, #556]	; (b5504 <setup+0x39c>)
   b52d8:	f7ff f8c3 	bl	b4462 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b52dc:	4623      	mov	r3, r4
   b52de:	462a      	mov	r2, r5
   b52e0:	f106 0130 	add.w	r1, r6, #48	; 0x30
   b52e4:	488e      	ldr	r0, [pc, #568]	; (b5520 <setup+0x3b8>)
   b52e6:	4d8f      	ldr	r5, [pc, #572]	; (b5524 <setup+0x3bc>)
   b52e8:	f003 fe56 	bl	b8f98 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b52ec:	4a8e      	ldr	r2, [pc, #568]	; (b5528 <setup+0x3c0>)
   b52ee:	498f      	ldr	r1, [pc, #572]	; (b552c <setup+0x3c4>)
   b52f0:	488f      	ldr	r0, [pc, #572]	; (b5530 <setup+0x3c8>)
   b52f2:	f004 f93e 	bl	b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b52f6:	4a8f      	ldr	r2, [pc, #572]	; (b5534 <setup+0x3cc>)
   b52f8:	498f      	ldr	r1, [pc, #572]	; (b5538 <setup+0x3d0>)
   b52fa:	488d      	ldr	r0, [pc, #564]	; (b5530 <setup+0x3c8>)
   b52fc:	f004 f939 	bl	b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5300:	4a8e      	ldr	r2, [pc, #568]	; (b553c <setup+0x3d4>)
   b5302:	498f      	ldr	r1, [pc, #572]	; (b5540 <setup+0x3d8>)
   b5304:	488a      	ldr	r0, [pc, #552]	; (b5530 <setup+0x3c8>)
   b5306:	f004 f934 	bl	b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b530a:	4a7c      	ldr	r2, [pc, #496]	; (b54fc <setup+0x394>)
   b530c:	498d      	ldr	r1, [pc, #564]	; (b5544 <setup+0x3dc>)
   b530e:	4888      	ldr	r0, [pc, #544]	; (b5530 <setup+0x3c8>)
   b5310:	f004 f92f 	bl	b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5314:	498c      	ldr	r1, [pc, #560]	; (b5548 <setup+0x3e0>)
   b5316:	4a8d      	ldr	r2, [pc, #564]	; (b554c <setup+0x3e4>)
   b5318:	4885      	ldr	r0, [pc, #532]	; (b5530 <setup+0x3c8>)
   b531a:	f004 f92a 	bl	b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        bool clearSession) :
   b531e:	f04f 0801 	mov.w	r8, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b5322:	2203      	movs	r2, #3
   b5324:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   b5328:	a816      	add	r0, sp, #88	; 0x58
   b532a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        bool clearSession) :
   b532e:	f8ad 8060 	strh.w	r8, [sp, #96]	; 0x60
   b5332:	f004 f949 	bl	b95c8 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5336:	4886      	ldr	r0, [pc, #536]	; (b5550 <setup+0x3e8>)
   b5338:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                         // The carrier board has D8 connected to FOUT for wake interrupts
   b533a:	4641      	mov	r1, r8
   b533c:	8143      	strh	r3, [r0, #10]
   b533e:	f003 faa7 	bl	b8890 <_ZN6AB18055setupEb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                         // Enable watchdog
   b5342:	217c      	movs	r1, #124	; 0x7c
   b5344:	4882      	ldr	r0, [pc, #520]	; (b5550 <setup+0x3e8>)
   b5346:	f002 fea5 	bl	b8094 <_ZN6AB18056setWDTEi>
  fuelGauge.wakeup();                                                  // Expliciely wake the Feul gauge and give it a half-sec
   b534a:	4882      	ldr	r0, [pc, #520]	; (b5554 <setup+0x3ec>)
   b534c:	f004 fc82 	bl	b9c54 <_ZN9FuelGauge6wakeupEv>
  delay(500);
   b5350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5354:	f003 ff7c 	bl	b9250 <delay>
  fuelGauge.quickStart();                                              // May help us re-establish a baseline for SoC
   b5358:	487e      	ldr	r0, [pc, #504]	; (b5554 <setup+0x3ec>)
   b535a:	f004 fc72 	bl	b9c42 <_ZN9FuelGauge10quickStartEv>
  fram.begin();                                                        // Initialize the FRAM module
   b535e:	487e      	ldr	r0, [pc, #504]	; (b5558 <setup+0x3f0>)
   b5360:	f001 f84c 	bl	b63fc <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5364:	4643      	mov	r3, r8
   b5366:	487c      	ldr	r0, [pc, #496]	; (b5558 <setup+0x3f0>)
   b5368:	aa02      	add	r2, sp, #8
   b536a:	4621      	mov	r1, r4
   b536c:	f001 f888 	bl	b6480 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   b5370:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b5374:	2b05      	cmp	r3, #5
   b5376:	f000 8117 	beq.w	b55a8 <setup+0x440>
    fram.erase();                                                      // Reset the FRAM to correct the issue
   b537a:	4877      	ldr	r0, [pc, #476]	; (b5558 <setup+0x3f0>)
   b537c:	f001 f848 	bl	b6410 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5380:	4a76      	ldr	r2, [pc, #472]	; (b555c <setup+0x3f4>)
   b5382:	4875      	ldr	r0, [pc, #468]	; (b5558 <setup+0x3f0>)
   b5384:	2304      	movs	r3, #4
   b5386:	4621      	mov	r1, r4
   b5388:	f001 f8c5 	bl	b6516 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b538c:	4643      	mov	r3, r8
   b538e:	4872      	ldr	r0, [pc, #456]	; (b5558 <setup+0x3f0>)
   b5390:	aa02      	add	r2, sp, #8
   b5392:	4621      	mov	r1, r4
   b5394:	f001 f874 	bl	b6480 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   b5398:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b539c:	2b05      	cmp	r3, #5
   b539e:	f000 8100 	beq.w	b55a2 <setup+0x43a>
      state = ERROR_STATE;                                             // Device will not work without FRAM will need to reset
   b53a2:	f887 8000 	strb.w	r8, [r7]
   b53a6:	f003 fb95 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();                                       // Likely close to zero but, for form's sake
   b53aa:	4b6d      	ldr	r3, [pc, #436]	; (b5560 <setup+0x3f8>)
   b53ac:	6018      	str	r0, [r3, #0]
      sensor_data.alerts = 12;                                         // FRAM is messed up so can't store but will be read in ERROR state
   b53ae:	230c      	movs	r3, #12
   b53b0:	6333      	str	r3, [r6, #48]	; 0x30
  if (! sht31.begin(0x44)) {                                                                      // Start the SHT Sensor
   b53b2:	486c      	ldr	r0, [pc, #432]	; (b5564 <setup+0x3fc>)
   b53b4:	2144      	movs	r1, #68	; 0x44
   b53b6:	f001 f994 	bl	b66e2 <_ZN14Adafruit_SHT315beginEh>
   b53ba:	b948      	cbnz	r0, b53d0 <setup+0x268>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b53bc:	496a      	ldr	r1, [pc, #424]	; (b5568 <setup+0x400>)
   b53be:	4648      	mov	r0, r9
   b53c0:	f006 fbaa 	bl	bbb18 <strcpy>
    state = ERROR_STATE;
   b53c4:	2301      	movs	r3, #1
   b53c6:	703b      	strb	r3, [r7, #0]
   b53c8:	f003 fb84 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b53cc:	4b64      	ldr	r3, [pc, #400]	; (b5560 <setup+0x3f8>)
   b53ce:	6018      	str	r0, [r3, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   b53d0:	f005 fd52 	bl	bae78 <_Z19__fetch_global_Wirev>
   b53d4:	4601      	mov	r1, r0
   b53d6:	4865      	ldr	r0, [pc, #404]	; (b556c <setup+0x404>)
   b53d8:	f000 ff11 	bl	b61fe <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b53dc:	b960      	cbnz	r0, b53f8 <setup+0x290>
   b53de:	f003 fb79 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b53e2:	4c5f      	ldr	r4, [pc, #380]	; (b5560 <setup+0x3f8>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b53e4:	4962      	ldr	r1, [pc, #392]	; (b5570 <setup+0x408>)
    resetTimeStamp = millis();
   b53e6:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b53e8:	4648      	mov	r0, r9
   b53ea:	f006 fb95 	bl	bbb18 <strcpy>
    state = ERROR_STATE;
   b53ee:	2301      	movs	r3, #1
   b53f0:	703b      	strb	r3, [r7, #0]
   b53f2:	f003 fb6f 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b53f6:	6020      	str	r0, [r4, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   b53f8:	485c      	ldr	r0, [pc, #368]	; (b556c <setup+0x404>)
   b53fa:	2100      	movs	r1, #0
   b53fc:	f000 fe77 	bl	b60ee <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   b5400:	485a      	ldr	r0, [pc, #360]	; (b556c <setup+0x404>)
   b5402:	210c      	movs	r1, #12
   b5404:	f000 fe6a 	bl	b60dc <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.interruptEnable(true);
   b5408:	2101      	movs	r1, #1
   b540a:	4858      	ldr	r0, [pc, #352]	; (b556c <setup+0x404>)
   b540c:	f000 fe60 	bl	b60d0 <_ZN17Adafruit_VEML770015interruptEnableEb>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b5410:	f7ff f9c4 	bl	b479c <_Z17checkSystemValuesv>
        int reason = RESET_REASON_NONE;
   b5414:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b5416:	4611      	mov	r1, r2
   b5418:	a816      	add	r0, sp, #88	; 0x58
        int reason = RESET_REASON_NONE;
   b541a:	9216      	str	r2, [sp, #88]	; 0x58
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b541c:	f003 fb3a 	bl	b8a94 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b5420:	9b16      	ldr	r3, [sp, #88]	; 0x58
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   b5422:	2b14      	cmp	r3, #20
   b5424:	f04f 0200 	mov.w	r2, #0
   b5428:	f040 80cb 	bne.w	b55c2 <setup+0x45a>
    sysStatus.resetCount++;
   b542c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b542e:	3301      	adds	r3, #1
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b5430:	2b03      	cmp	r3, #3
    sysStatus.resetCount++;
   b5432:	626b      	str	r3, [r5, #36]	; 0x24
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b5434:	f300 80cf 	bgt.w	b55d6 <setup+0x46e>
  PublishQueuePosix::instance().setup();                             // Start the Publish Queie
   b5438:	f001 fd4c 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b543c:	f001 ff56 	bl	b72ec <_ZN17PublishQueuePosix5setupEv>
  if (sensor_data.updateAttempts >= 3 && sensor_data.alerts != 23) {         // Send out alert the first time we are over the limit
   b5440:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   b5444:	2b02      	cmp	r3, #2
   b5446:	f240 809d 	bls.w	b5584 <setup+0x41c>
   b544a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   b544c:	2b17      	cmp	r3, #23
   b544e:	f000 8099 	beq.w	b5584 <setup+0x41c>
        system_set_flag(flag, value, nullptr);
   b5452:	2200      	movs	r2, #0
   b5454:	4611      	mov	r1, r2
    sensor_data.alerts = 23;                                             // Set an alert that we have maxed out our updates for the day
   b5456:	2417      	movs	r4, #23
   b5458:	2001      	movs	r0, #1
   b545a:	f003 fd4d 	bl	b8ef8 <system_set_flag>
   b545e:	6334      	str	r4, [r6, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b5460:	f005 facd 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5464:	4a43      	ldr	r2, [pc, #268]	; (b5574 <setup+0x40c>)
   b5466:	9000      	str	r0, [sp, #0]
   b5468:	4623      	mov	r3, r4
   b546a:	2140      	movs	r1, #64	; 0x40
   b546c:	a816      	add	r0, sp, #88	; 0x58
   b546e:	f003 fe8b 	bl	b9188 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   b5472:	f001 fd2f 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b5476:	2300      	movs	r3, #0
   b5478:	f88d 3000 	strb.w	r3, [sp]
   b547c:	e07c      	b.n	b5578 <setup+0x410>
   b547e:	bf00      	nop
   b5480:	000b40b5 	.word	0x000b40b5
   b5484:	000bc5ec 	.word	0x000bc5ec
   b5488:	2003e570 	.word	0x2003e570
   b548c:	2003e524 	.word	0x2003e524
   b5490:	000bc2ad 	.word	0x000bc2ad
   b5494:	000b4b29 	.word	0x000b4b29
   b5498:	000b4265 	.word	0x000b4265
   b549c:	000b4217 	.word	0x000b4217
   b54a0:	000b4203 	.word	0x000b4203
   b54a4:	000b40c1 	.word	0x000b40c1
   b54a8:	000b41f9 	.word	0x000b41f9
   b54ac:	000b41e5 	.word	0x000b41e5
   b54b0:	2003e2dc 	.word	0x2003e2dc
   b54b4:	000bc2d0 	.word	0x000bc2d0
   b54b8:	2003e5b1 	.word	0x2003e5b1
   b54bc:	000bc2d8 	.word	0x000bc2d8
   b54c0:	2003e4c8 	.word	0x2003e4c8
   b54c4:	000bc2e4 	.word	0x000bc2e4
   b54c8:	2003e508 	.word	0x2003e508
   b54cc:	000bc2ed 	.word	0x000bc2ed
   b54d0:	2003e601 	.word	0x2003e601
   b54d4:	000bc2f1 	.word	0x000bc2f1
   b54d8:	2003e3e8 	.word	0x2003e3e8
   b54dc:	000bc2f7 	.word	0x000bc2f7
   b54e0:	2003e484 	.word	0x2003e484
   b54e4:	000bc2ff 	.word	0x000bc2ff
   b54e8:	2003e474 	.word	0x2003e474
   b54ec:	000bc307 	.word	0x000bc307
   b54f0:	2003e584 	.word	0x2003e584
   b54f4:	000bc316 	.word	0x000bc316
   b54f8:	2003e581 	.word	0x2003e581
   b54fc:	000bc044 	.word	0x000bc044
   b5500:	2003e4f8 	.word	0x2003e4f8
   b5504:	000bc325 	.word	0x000bc325
   b5508:	2003e3f8 	.word	0x2003e3f8
   b550c:	000bc332 	.word	0x000bc332
   b5510:	2003e5a4 	.word	0x2003e5a4
   b5514:	000bc339 	.word	0x000bc339
   b5518:	2003e598 	.word	0x2003e598
   b551c:	000bc344 	.word	0x000bc344
   b5520:	000bc353 	.word	0x000bc353
   b5524:	2003e580 	.word	0x2003e580
   b5528:	000bc35a 	.word	0x000bc35a
   b552c:	000b4141 	.word	0x000b4141
   b5530:	000b9547 	.word	0x000b9547
   b5534:	000bc366 	.word	0x000bc366
   b5538:	000b4375 	.word	0x000b4375
   b553c:	000bc008 	.word	0x000bc008
   b5540:	000b4311 	.word	0x000b4311
   b5544:	000b45f9 	.word	0x000b45f9
   b5548:	000b4bdd 	.word	0x000b4bdd
   b554c:	000bc373 	.word	0x000bc373
   b5550:	2003e454 	.word	0x2003e454
   b5554:	2003e4c0 	.word	0x2003e4c0
   b5558:	2003e4b0 	.word	0x2003e4b0
   b555c:	000bc62c 	.word	0x000bc62c
   b5560:	2003e51c 	.word	0x2003e51c
   b5564:	2003e564 	.word	0x2003e564
   b5568:	000bc381 	.word	0x000bc381
   b556c:	2003e5c4 	.word	0x2003e5c4
   b5570:	000bc39e 	.word	0x000bc39e
   b5574:	000bbfba 	.word	0x000bbfba
   b5578:	4b34      	ldr	r3, [pc, #208]	; (b564c <setup+0x4e4>)
   b557a:	4935      	ldr	r1, [pc, #212]	; (b5650 <setup+0x4e8>)
   b557c:	781b      	ldrb	r3, [r3, #0]
   b557e:	aa16      	add	r2, sp, #88	; 0x58
   b5580:	f7fe fe62 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b5584:	7aeb      	ldrb	r3, [r5, #11]
   b5586:	2210      	movs	r2, #16
   b5588:	b343      	cbz	r3, b55dc <setup+0x474>
   b558a:	4932      	ldr	r1, [pc, #200]	; (b5654 <setup+0x4ec>)
   b558c:	4832      	ldr	r0, [pc, #200]	; (b5658 <setup+0x4f0>)
   b558e:	f006 faf0 	bl	bbb72 <strncpy>
  if (sysStatus.thirdPartySim) {
   b5592:	786b      	ldrb	r3, [r5, #1]
   b5594:	b393      	cbz	r3, b55fc <setup+0x494>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5596:	f003 fd1f 	bl	b8fd8 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b559a:	bb08      	cbnz	r0, b55e0 <setup+0x478>
            spark_process();
   b559c:	f003 fd0c 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b55a0:	e7f9      	b.n	b5596 <setup+0x42e>
    else loadSystemDefaults();                                         // Out of the box, we need the device to be awake and connected
   b55a2:	f7ff fc6b 	bl	b4e7c <_Z18loadSystemDefaultsv>
   b55a6:	e704      	b.n	b53b2 <setup+0x24a>
   b55a8:	462a      	mov	r2, r5
   b55aa:	4641      	mov	r1, r8
   b55ac:	2330      	movs	r3, #48	; 0x30
   b55ae:	482b      	ldr	r0, [pc, #172]	; (b565c <setup+0x4f4>)
   b55b0:	f000 ff66 	bl	b6480 <_ZN6MB85RC8readDataEjPhj>
   b55b4:	2340      	movs	r3, #64	; 0x40
   b55b6:	4632      	mov	r2, r6
   b55b8:	21a0      	movs	r1, #160	; 0xa0
   b55ba:	4828      	ldr	r0, [pc, #160]	; (b565c <setup+0x4f4>)
   b55bc:	f000 ff60 	bl	b6480 <_ZN6MB85RC8readDataEjPhj>
        return t;
   b55c0:	e6f7      	b.n	b53b2 <setup+0x24a>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b55c2:	4611      	mov	r1, r2
   b55c4:	a816      	add	r0, sp, #88	; 0x58
        int reason = RESET_REASON_NONE;
   b55c6:	9216      	str	r2, [sp, #88]	; 0x58
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b55c8:	f003 fa64 	bl	b8a94 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b55cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   b55ce:	2b8c      	cmp	r3, #140	; 0x8c
   b55d0:	f47f af32 	bne.w	b5438 <setup+0x2d0>
   b55d4:	e72a      	b.n	b542c <setup+0x2c4>
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b55d6:	230d      	movs	r3, #13
   b55d8:	6333      	str	r3, [r6, #48]	; 0x30
   b55da:	e72d      	b.n	b5438 <setup+0x2d0>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b55dc:	4920      	ldr	r1, [pc, #128]	; (b5660 <setup+0x4f8>)
   b55de:	e7d5      	b.n	b558c <setup+0x424>
   b55e0:	f003 fcfa 	bl	b8fd8 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                    // Set the keep alive value
   b55e4:	6868      	ldr	r0, [r5, #4]
   b55e6:	f7fe fff6 	bl	b45d6 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b55ea:	686b      	ldr	r3, [r5, #4]
   b55ec:	481d      	ldr	r0, [pc, #116]	; (b5664 <setup+0x4fc>)
   b55ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b55f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b55f6:	4359      	muls	r1, r3
   b55f8:	f7fe ff18 	bl	b442c <_ZN5Timer12changePeriodEjj.isra.0>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                                       // Make sure the device wakes up and connects
   b55fc:	2004      	movs	r0, #4
   b55fe:	f005 fbe2 	bl	badc6 <digitalRead>
   b5602:	b908      	cbnz	r0, b5608 <setup+0x4a0>
   b5604:	f7ff fc3a 	bl	b4e7c <_Z18loadSystemDefaultsv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b5608:	f7ff fb50 	bl	b4cac <_Z16takeMeasurementsv>
  if (sysStatus.lowBatteryMode) setLowPowerMode("1");                                       // If battery is low we need to go to low power state
   b560c:	7aab      	ldrb	r3, [r5, #10]
   b560e:	b14b      	cbz	r3, b5624 <setup+0x4bc>
   b5610:	4915      	ldr	r1, [pc, #84]	; (b5668 <setup+0x500>)
   b5612:	a816      	add	r0, sp, #88	; 0x58
   b5614:	f004 fec5 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5618:	a816      	add	r0, sp, #88	; 0x58
   b561a:	f7ff fadf 	bl	b4bdc <_Z15setLowPowerMode6String>
   b561e:	a816      	add	r0, sp, #88	; 0x58
   b5620:	f004 fe74 	bl	ba30c <_ZN6StringD1Ev>
  if(sysStatus.verboseMode) PublishQueuePosix::instance().publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b5624:	7a6b      	ldrb	r3, [r5, #9]
   b5626:	b153      	cbz	r3, b563e <setup+0x4d6>
   b5628:	f001 fc54 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b562c:	2300      	movs	r3, #0
   b562e:	f88d 3000 	strb.w	r3, [sp]
   b5632:	4b06      	ldr	r3, [pc, #24]	; (b564c <setup+0x4e4>)
   b5634:	490d      	ldr	r1, [pc, #52]	; (b566c <setup+0x504>)
   b5636:	781b      	ldrb	r3, [r3, #0]
   b5638:	464a      	mov	r2, r9
   b563a:	f7fe fe05 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   b563e:	783b      	ldrb	r3, [r7, #0]
   b5640:	b90b      	cbnz	r3, b5646 <setup+0x4de>
   b5642:	2302      	movs	r3, #2
   b5644:	703b      	strb	r3, [r7, #0]
}
   b5646:	b027      	add	sp, #156	; 0x9c
   b5648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b564c:	2003e445 	.word	0x2003e445
   b5650:	000bbfdc 	.word	0x000bbfdc
   b5654:	000bc3ba 	.word	0x000bc3ba
   b5658:	2003e4f8 	.word	0x2003e4f8
   b565c:	2003e4b0 	.word	0x2003e4b0
   b5660:	000bc3bf 	.word	0x000bc3bf
   b5664:	2003e4d8 	.word	0x2003e4d8
   b5668:	000bbf94 	.word	0x000bbf94
   b566c:	000bc3c5 	.word	0x000bc3c5

000b5670 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   b5670:	4b37      	ldr	r3, [pc, #220]	; (b5750 <_GLOBAL__sub_I_sysStatus+0xe0>)
   b5672:	b530      	push	{r4, r5, lr}
   b5674:	2501      	movs	r5, #1
   b5676:	701d      	strb	r5, [r3, #0]
   b5678:	4b36      	ldr	r3, [pc, #216]	; (b5754 <_GLOBAL__sub_I_sysStatus+0xe4>)
   b567a:	2002      	movs	r0, #2
   b567c:	7018      	strb	r0, [r3, #0]
   b567e:	4b36      	ldr	r3, [pc, #216]	; (b5758 <_GLOBAL__sub_I_sysStatus+0xe8>)
   b5680:	2208      	movs	r2, #8
   b5682:	701a      	strb	r2, [r3, #0]
struct sensor_data_struct {                        // Here we define the structure for collecting and storing data from the sensors
   b5684:	4b35      	ldr	r3, [pc, #212]	; (b575c <_GLOBAL__sub_I_sysStatus+0xec>)
   b5686:	2400      	movs	r4, #0
   b5688:	2264      	movs	r2, #100	; 0x64
   b568a:	869c      	strh	r4, [r3, #52]	; 0x34
   b568c:	639a      	str	r2, [r3, #56]	; 0x38
   b568e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
              error_(SYSTEM_ERROR_NONE) {
   b5692:	4b33      	ldr	r3, [pc, #204]	; (b5760 <_GLOBAL__sub_I_sysStatus+0xf0>)
    SleepResult() {}
   b5694:	4a33      	ldr	r2, [pc, #204]	; (b5764 <_GLOBAL__sub_I_sysStatus+0xf4>)
   b5696:	609a      	str	r2, [r3, #8]
   b5698:	b087      	sub	sp, #28
              error_(SYSTEM_ERROR_NONE) {
   b569a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b569e:	f003 fc0b 	bl	b8eb8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b56a2:	4621      	mov	r1, r4
   b56a4:	4628      	mov	r0, r5
   b56a6:	f003 fc1f 	bl	b8ee8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b56aa:	4629      	mov	r1, r5
   b56ac:	2004      	movs	r0, #4
   b56ae:	f003 f9e9 	bl	b8a84 <HAL_Feature_Set>
        : config_(config) {
   b56b2:	4b2d      	ldr	r3, [pc, #180]	; (b5768 <_GLOBAL__sub_I_sysStatus+0xf8>)
Adafruit_VEML7700 veml;
   b56b4:	482d      	ldr	r0, [pc, #180]	; (b576c <_GLOBAL__sub_I_sysStatus+0xfc>)
              valid_(true) {
   b56b6:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b56b8:	1d1a      	adds	r2, r3, #4
   b56ba:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b56bc:	4a2c      	ldr	r2, [pc, #176]	; (b5770 <_GLOBAL__sub_I_sysStatus+0x100>)
   b56be:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b56c0:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b56c4:	751d      	strb	r5, [r3, #20]
   b56c6:	f000 fcf7 	bl	b60b8 <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b56ca:	482a      	ldr	r0, [pc, #168]	; (b5774 <_GLOBAL__sub_I_sysStatus+0x104>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b56cc:	4d2a      	ldr	r5, [pc, #168]	; (b5778 <_GLOBAL__sub_I_sysStatus+0x108>)
   b56ce:	f000 ffe3 	bl	b6698 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b56d2:	f005 fbd1 	bl	bae78 <_Z19__fetch_global_Wirev>
   b56d6:	4623      	mov	r3, r4
   b56d8:	4601      	mov	r1, r0
   b56da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b56de:	4628      	mov	r0, r5
   b56e0:	f000 fe82 	bl	b63e8 <_ZN6MB85RCC1ER7TwoWireji>
   b56e4:	4b25      	ldr	r3, [pc, #148]	; (b577c <_GLOBAL__sub_I_sysStatus+0x10c>)
   b56e6:	602b      	str	r3, [r5, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b56e8:	4b25      	ldr	r3, [pc, #148]	; (b5780 <_GLOBAL__sub_I_sysStatus+0x110>)
   b56ea:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b56ec:	4b25      	ldr	r3, [pc, #148]	; (b5784 <_GLOBAL__sub_I_sysStatus+0x114>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b56ee:	4d26      	ldr	r5, [pc, #152]	; (b5788 <_GLOBAL__sub_I_sysStatus+0x118>)
   b56f0:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b56f2:	4b26      	ldr	r3, [pc, #152]	; (b578c <_GLOBAL__sub_I_sysStatus+0x11c>)
   b56f4:	9304      	str	r3, [sp, #16]
   b56f6:	4b26      	ldr	r3, [pc, #152]	; (b5790 <_GLOBAL__sub_I_sysStatus+0x120>)
   b56f8:	602b      	str	r3, [r5, #0]
	std::swap(_M_functor, __x._M_functor);
   b56fa:	f105 010c 	add.w	r1, r5, #12
   b56fe:	a802      	add	r0, sp, #8
   b5700:	712c      	strb	r4, [r5, #4]
   b5702:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   b5704:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   b5706:	f7ff fca1 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
   b570a:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b570c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b570e:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5710:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5712:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5714:	69aa      	ldr	r2, [r5, #24]
   b5716:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b5718:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b571a:	4a1e      	ldr	r2, [pc, #120]	; (b5794 <_GLOBAL__sub_I_sysStatus+0x124>)
   b571c:	462b      	mov	r3, r5
   b571e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5722:	e9cd 4400 	strd	r4, r4, [sp]
   b5726:	f105 0008 	add.w	r0, r5, #8
   b572a:	f003 f94b 	bl	b89c4 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b572e:	a802      	add	r0, sp, #8
   b5730:	f7fe fec4 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5734:	f005 fba0 	bl	bae78 <_Z19__fetch_global_Wirev>
   b5738:	2269      	movs	r2, #105	; 0x69
   b573a:	4601      	mov	r1, r0
   b573c:	4816      	ldr	r0, [pc, #88]	; (b5798 <_GLOBAL__sub_I_sysStatus+0x128>)
   b573e:	f002 fbab 	bl	b7e98 <_ZN6AB1805C1ER7TwoWireh>
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state
   b5742:	4816      	ldr	r0, [pc, #88]	; (b579c <_GLOBAL__sub_I_sysStatus+0x12c>)
   b5744:	4621      	mov	r1, r4
   b5746:	b007      	add	sp, #28
   b5748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state
   b574c:	f004 b9f4 	b.w	b9b38 <_ZN9FuelGaugeC1Eb>
   b5750:	2003e445 	.word	0x2003e445
   b5754:	2003e444 	.word	0x2003e444
   b5758:	2003e446 	.word	0x2003e446
   b575c:	2003e524 	.word	0x2003e524
   b5760:	2003e438 	.word	0x2003e438
   b5764:	ffff0000 	.word	0xffff0000
   b5768:	2003e494 	.word	0x2003e494
   b576c:	2003e5c4 	.word	0x2003e5c4
   b5770:	00030010 	.word	0x00030010
   b5774:	2003e564 	.word	0x2003e564
   b5778:	2003e4b0 	.word	0x2003e4b0
   b577c:	000bc594 	.word	0x000bc594
   b5780:	000b43f5 	.word	0x000b43f5
   b5784:	000b4235 	.word	0x000b4235
   b5788:	2003e4d8 	.word	0x2003e4d8
   b578c:	000b4221 	.word	0x000b4221
   b5790:	000bc580 	.word	0x000bc580
   b5794:	000b4185 	.word	0x000b4185
   b5798:	2003e454 	.word	0x2003e454
   b579c:	2003e4c0 	.word	0x2003e4c0

000b57a0 <loop>:
{
   b57a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   b57a2:	4c9e      	ldr	r4, [pc, #632]	; (b5a1c <loop+0x27c>)
   b57a4:	7823      	ldrb	r3, [r4, #0]
   b57a6:	3b01      	subs	r3, #1
{
   b57a8:	b097      	sub	sp, #92	; 0x5c
   b57aa:	2b07      	cmp	r3, #7
   b57ac:	d85c      	bhi.n	b5868 <loop+0xc8>
   b57ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   b57b2:	027b      	.short	0x027b
   b57b4:	01760008 	.word	0x01760008
   b57b8:	01e600d5 	.word	0x01e600d5
   b57bc:	00a6002e 	.word	0x00a6002e
   b57c0:	0311      	.short	0x0311
    if (state != oldState) publishStateTransition();
   b57c2:	4b97      	ldr	r3, [pc, #604]	; (b5a20 <loop+0x280>)
   b57c4:	781b      	ldrb	r3, [r3, #0]
   b57c6:	2b02      	cmp	r3, #2
   b57c8:	d001      	beq.n	b57ce <loop+0x2e>
   b57ca:	f7ff f863 	bl	b4894 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   b57ce:	4b95      	ldr	r3, [pc, #596]	; (b5a24 <loop+0x284>)
   b57d0:	7adb      	ldrb	r3, [r3, #11]
   b57d2:	b153      	cbz	r3, b57ea <loop+0x4a>
   b57d4:	f003 f97e 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
   b57d8:	4b93      	ldr	r3, [pc, #588]	; (b5a28 <loop+0x288>)
   b57da:	681b      	ldr	r3, [r3, #0]
   b57dc:	1ac0      	subs	r0, r0, r3
   b57de:	4b93      	ldr	r3, [pc, #588]	; (b5a2c <loop+0x28c>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	4298      	cmp	r0, r3
   b57e4:	bf84      	itt	hi
   b57e6:	2304      	movhi	r3, #4
   b57e8:	7023      	strbhi	r3, [r4, #0]
    if (firmwareUpdateInProgress) state= FIRMWARE_UPDATE;                                                     // This means there is a firemware update on deck
   b57ea:	4b91      	ldr	r3, [pc, #580]	; (b5a30 <loop+0x290>)
   b57ec:	781b      	ldrb	r3, [r3, #0]
   b57ee:	b10b      	cbz	r3, b57f4 <loop+0x54>
   b57f0:	2308      	movs	r3, #8
   b57f2:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   b57f4:	f005 f914 	bl	baa20 <_ZN9TimeClass4hourEv>
   b57f8:	4b8e      	ldr	r3, [pc, #568]	; (b5a34 <loop+0x294>)
   b57fa:	4605      	mov	r5, r0
   b57fc:	2100      	movs	r1, #0
   b57fe:	6818      	ldr	r0, [r3, #0]
   b5800:	f004 ffdc 	bl	ba7bc <_ZN9TimeClass4hourEx>
   b5804:	4285      	cmp	r5, r0
   b5806:	d02f      	beq.n	b5868 <loop+0xc8>
   b5808:	2306      	movs	r3, #6
          state = IDLE_STATE;
   b580a:	7023      	strb	r3, [r4, #0]
    } break;
   b580c:	e02c      	b.n	b5868 <loop+0xc8>
    if (state != oldState) publishStateTransition();
   b580e:	4b84      	ldr	r3, [pc, #528]	; (b5a20 <loop+0x280>)
   b5810:	781b      	ldrb	r3, [r3, #0]
   b5812:	2b06      	cmp	r3, #6
   b5814:	d001      	beq.n	b581a <loop+0x7a>
   b5816:	f7ff f83d 	bl	b4894 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                     // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   b581a:	f005 f8f0 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b581e:	4b85      	ldr	r3, [pc, #532]	; (b5a34 <loop+0x294>)
   b5820:	6018      	str	r0, [r3, #0]
    takeMeasurements();                                                // Take Measurements here for reporting
   b5822:	f7ff fa43 	bl	b4cac <_Z16takeMeasurementsv>
    sendEvent();                                                       // Publish hourly but not at opening time as there is nothing to publish
   b5826:	f7fe ffed 	bl	b4804 <_Z9sendEventv>
    state = CONNECTING_STATE;                                          // Default behaviour would be to connect and send report to Ubidots
   b582a:	2305      	movs	r3, #5
   b582c:	7023      	strb	r3, [r4, #0]
   b582e:	f003 fbd3 	bl	b8fd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {                                        // We are already connected go to response wait
   b5832:	b140      	cbz	r0, b5846 <loop+0xa6>
      stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b5834:	4b7d      	ldr	r3, [pc, #500]	; (b5a2c <loop+0x28c>)
   b5836:	4a80      	ldr	r2, [pc, #512]	; (b5a38 <loop+0x298>)
   b5838:	601a      	str	r2, [r3, #0]
   b583a:	f003 f94b 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   b583e:	4b7a      	ldr	r3, [pc, #488]	; (b5a28 <loop+0x288>)
   b5840:	6018      	str	r0, [r3, #0]
          (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b5842:	2307      	movs	r3, #7
   b5844:	e7e1      	b.n	b580a <loop+0x6a>
    else if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   b5846:	4d77      	ldr	r5, [pc, #476]	; (b5a24 <loop+0x284>)
   b5848:	7aab      	ldrb	r3, [r5, #10]
   b584a:	2b00      	cmp	r3, #0
   b584c:	d13c      	bne.n	b58c8 <loop+0x128>
    else if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {      // Low power mode and user switch not pressed
   b584e:	7aeb      	ldrb	r3, [r5, #11]
   b5850:	b153      	cbz	r3, b5868 <loop+0xc8>
   b5852:	2004      	movs	r0, #4
   b5854:	f005 fab7 	bl	badc6 <digitalRead>
   b5858:	b130      	cbz	r0, b5868 <loop+0xc8>
      if (sysStatus.stateOfCharge > 65) {
   b585a:	68eb      	ldr	r3, [r5, #12]
   b585c:	2b41      	cmp	r3, #65	; 0x41
   b585e:	dd3d      	ble.n	b58dc <loop+0x13c>
        Log.info("Sufficient battery power connecting");
   b5860:	4976      	ldr	r1, [pc, #472]	; (b5a3c <loop+0x29c>)
   b5862:	4877      	ldr	r0, [pc, #476]	; (b5a40 <loop+0x2a0>)
   b5864:	f7fe ff18 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
  PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   b5868:	f001 fb34 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
   b586c:	f001 fa25 	bl	b6cba <_ZN17PublishQueuePosix4loopEv>
  ab1805.loop();                                                       // Keeps the RTC synchronized with the Boron's clock
   b5870:	4874      	ldr	r0, [pc, #464]	; (b5a44 <loop+0x2a4>)
   b5872:	f002 ffbb 	bl	b87ec <_ZN6AB18054loopEv>
   if (outOfMemory >= 0) {                                              // In this function we are going to reset the system if there is an out of memory error
   b5876:	4b74      	ldr	r3, [pc, #464]	; (b5a48 <loop+0x2a8>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	2b00      	cmp	r3, #0
   b587c:	db08      	blt.n	b5890 <loop+0xf0>
    sensor_data.alerts = 14;                                               // Out of memory alert
   b587e:	4b73      	ldr	r3, [pc, #460]	; (b5a4c <loop+0x2ac>)
   b5880:	220e      	movs	r2, #14
   b5882:	631a      	str	r2, [r3, #48]	; 0x30
   b5884:	f003 f926 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5888:	4b71      	ldr	r3, [pc, #452]	; (b5a50 <loop+0x2b0>)
   b588a:	6018      	str	r0, [r3, #0]
    state = ERROR_STATE;
   b588c:	2301      	movs	r3, #1
   b588e:	7023      	strb	r3, [r4, #0]
  if (watchdogFlag) petWatchdog();                                     // Watchdog flag is raised - time to pet the watchdog
   b5890:	4b70      	ldr	r3, [pc, #448]	; (b5a54 <loop+0x2b4>)
   b5892:	781b      	ldrb	r3, [r3, #0]
   b5894:	b10b      	cbz	r3, b589a <loop+0xfa>
   b5896:	f7fe ffa5 	bl	b47e4 <_Z11petWatchdogv>
  if (systemStatusWriteNeeded) {
   b589a:	4c6f      	ldr	r4, [pc, #444]	; (b5a58 <loop+0x2b8>)
   b589c:	7823      	ldrb	r3, [r4, #0]
   b589e:	b133      	cbz	r3, b58ae <loop+0x10e>
    fram.put(FRAM::sysStatusAddr,sysStatus);
   b58a0:	4a60      	ldr	r2, [pc, #384]	; (b5a24 <loop+0x284>)
   b58a2:	486e      	ldr	r0, [pc, #440]	; (b5a5c <loop+0x2bc>)
   b58a4:	2101      	movs	r1, #1
   b58a6:	f7fe fcc7 	bl	b4238 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
    systemStatusWriteNeeded = false;
   b58aa:	2300      	movs	r3, #0
   b58ac:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   b58ae:	4c6c      	ldr	r4, [pc, #432]	; (b5a60 <loop+0x2c0>)
   b58b0:	7823      	ldrb	r3, [r4, #0]
   b58b2:	b13b      	cbz	r3, b58c4 <loop+0x124>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b58b4:	2340      	movs	r3, #64	; 0x40
   b58b6:	4a65      	ldr	r2, [pc, #404]	; (b5a4c <loop+0x2ac>)
   b58b8:	4868      	ldr	r0, [pc, #416]	; (b5a5c <loop+0x2bc>)
   b58ba:	21a0      	movs	r1, #160	; 0xa0
   b58bc:	f000 fe2b 	bl	b6516 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b58c0:	2300      	movs	r3, #0
   b58c2:	7023      	strb	r3, [r4, #0]
}
   b58c4:	b017      	add	sp, #92	; 0x5c
   b58c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   b58c8:	2004      	movs	r0, #4
   b58ca:	f005 fa7c 	bl	badc6 <digitalRead>
   b58ce:	2800      	cmp	r0, #0
   b58d0:	d0bd      	beq.n	b584e <loop+0xae>
      Log.info("Not connecting - low battery mode");
   b58d2:	4964      	ldr	r1, [pc, #400]	; (b5a64 <loop+0x2c4>)
          Log.info("firmware update completed");
   b58d4:	485a      	ldr	r0, [pc, #360]	; (b5a40 <loop+0x2a0>)
   b58d6:	f7fe fedf 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
          state = IDLE_STATE;
   b58da:	e01f      	b.n	b591c <loop+0x17c>
      else if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b58dc:	2b32      	cmp	r3, #50	; 0x32
   b58de:	dc06      	bgt.n	b58ee <loop+0x14e>
   b58e0:	f005 f89e 	bl	baa20 <_ZN9TimeClass4hourEv>
   b58e4:	0782      	lsls	r2, r0, #30
   b58e6:	d108      	bne.n	b58fa <loop+0x15a>
      else if (sysStatus.stateOfCharge <= 65 && (Time.hour() % 2)) {   // If the battery level is 50% -  65%, only connect every other hour
   b58e8:	68eb      	ldr	r3, [r5, #12]
   b58ea:	2b41      	cmp	r3, #65	; 0x41
   b58ec:	dcbc      	bgt.n	b5868 <loop+0xc8>
   b58ee:	f005 f897 	bl	baa20 <_ZN9TimeClass4hourEv>
   b58f2:	07c3      	lsls	r3, r0, #31
   b58f4:	d5b8      	bpl.n	b5868 <loop+0xc8>
        Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b58f6:	495c      	ldr	r1, [pc, #368]	; (b5a68 <loop+0x2c8>)
   b58f8:	e7ec      	b.n	b58d4 <loop+0x134>
        Log.info("Not connecting - <50%% charge - four hour schedule");
   b58fa:	495c      	ldr	r1, [pc, #368]	; (b5a6c <loop+0x2cc>)
   b58fc:	e7ea      	b.n	b58d4 <loop+0x134>
    if (state != oldState) {
   b58fe:	4b48      	ldr	r3, [pc, #288]	; (b5a20 <loop+0x280>)
   b5900:	4d5b      	ldr	r5, [pc, #364]	; (b5a70 <loop+0x2d0>)
   b5902:	781b      	ldrb	r3, [r3, #0]
   b5904:	2b07      	cmp	r3, #7
   b5906:	d007      	beq.n	b5918 <loop+0x178>
   b5908:	f003 f8e4 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // We are connected and we have published, head to the response wait state
   b590c:	4b59      	ldr	r3, [pc, #356]	; (b5a74 <loop+0x2d4>)
   b590e:	6018      	str	r0, [r3, #0]
      dataInFlight = true;                                            // set the data inflight flag
   b5910:	2301      	movs	r3, #1
   b5912:	702b      	strb	r3, [r5, #0]
      publishStateTransition();
   b5914:	f7fe ffbe 	bl	b4894 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   b5918:	782b      	ldrb	r3, [r5, #0]
   b591a:	b90b      	cbnz	r3, b5920 <loop+0x180>
          state = IDLE_STATE;
   b591c:	2302      	movs	r3, #2
   b591e:	e774      	b.n	b580a <loop+0x6a>
   b5920:	f003 f8d8 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   b5924:	4b53      	ldr	r3, [pc, #332]	; (b5a74 <loop+0x2d4>)
   b5926:	681b      	ldr	r3, [r3, #0]
   b5928:	1ac0      	subs	r0, r0, r3
   b592a:	f247 5330 	movw	r3, #30000	; 0x7530
   b592e:	4298      	cmp	r0, r3
   b5930:	d99a      	bls.n	b5868 <loop+0xc8>
      sensor_data.alerts = 40;                                            // Raise the missed webhook flag
   b5932:	4b46      	ldr	r3, [pc, #280]	; (b5a4c <loop+0x2ac>)
   b5934:	2228      	movs	r2, #40	; 0x28
   b5936:	631a      	str	r2, [r3, #48]	; 0x30
      sensorDataWriteNeeded = true;
   b5938:	4b49      	ldr	r3, [pc, #292]	; (b5a60 <loop+0x2c0>)
   b593a:	2501      	movs	r5, #1
   b593c:	701d      	strb	r5, [r3, #0]
      if (Time.now() - sysStatus.lastHookResponse > 3 * 3600L) {      // Failed to get a webhook response for over three hours
   b593e:	f005 f85e 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5942:	4b38      	ldr	r3, [pc, #224]	; (b5a24 <loop+0x284>)
   b5944:	691b      	ldr	r3, [r3, #16]
   b5946:	1ac0      	subs	r0, r0, r3
   b5948:	f642 2330 	movw	r3, #10800	; 0x2a30
   b594c:	4298      	cmp	r0, r3
   b594e:	d9e5      	bls.n	b591c <loop+0x17c>
   b5950:	f003 f8c0 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   b5954:	4b3e      	ldr	r3, [pc, #248]	; (b5a50 <loop+0x2b0>)
        state = ERROR_STATE;                                          // Response timed out
   b5956:	7025      	strb	r5, [r4, #0]
        resetTimeStamp = millis();
   b5958:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                          // Response timed out
   b595a:	e785      	b.n	b5868 <loop+0xc8>
      if (state != oldState) publishStateTransition();
   b595c:	4b30      	ldr	r3, [pc, #192]	; (b5a20 <loop+0x280>)
   b595e:	781b      	ldrb	r3, [r3, #0]
   b5960:	2b04      	cmp	r3, #4
   b5962:	d001      	beq.n	b5968 <loop+0x1c8>
   b5964:	f7fe ff96 	bl	b4894 <_Z22publishStateTransitionv>
   b5968:	f003 fb36 	bl	b8fd8 <spark_cloud_flag_connected>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle and power down the modem
   b596c:	2800      	cmp	r0, #0
   b596e:	f000 808d 	beq.w	b5a8c <loop+0x2ec>
   b5972:	f7ff f803 	bl	b497c <_Z22disconnectFromParticlev>
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b5976:	4b2d      	ldr	r3, [pc, #180]	; (b5a2c <loop+0x28c>)
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b5978:	4d3f      	ldr	r5, [pc, #252]	; (b5a78 <loop+0x2d8>)
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b597a:	4832      	ldr	r0, [pc, #200]	; (b5a44 <loop+0x2a4>)
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b597c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5980:	601a      	str	r2, [r3, #0]
   b5982:	2100      	movs	r1, #0
      state = IDLE_STATE;                                                // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   b5984:	2302      	movs	r3, #2
   b5986:	7023      	strb	r3, [r4, #0]
   b5988:	f002 fb84 	bl	b8094 <_ZN6AB18056setWDTEi>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b598c:	682e      	ldr	r6, [r5, #0]
   b598e:	f005 f836 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5992:	682d      	ldr	r5, [r5, #0]
   b5994:	fb90 f3f5 	sdiv	r3, r0, r5
   b5998:	fb03 0015 	mls	r0, r3, r5, r0
   b599c:	1a30      	subs	r0, r6, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b599e:	2800      	cmp	r0, #0
   b59a0:	dd7b      	ble.n	b5a9a <loop+0x2fa>
   b59a2:	4285      	cmp	r5, r0
   b59a4:	bfa8      	it	ge
   b59a6:	4605      	movge	r5, r0
      Log.info("Napping for %i seconds",wakeInSeconds);
   b59a8:	462a      	mov	r2, r5
   b59aa:	4934      	ldr	r1, [pc, #208]	; (b5a7c <loop+0x2dc>)
   b59ac:	4824      	ldr	r0, [pc, #144]	; (b5a40 <loop+0x2a0>)
   b59ae:	f7fe fe73 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   b59b2:	4b33      	ldr	r3, [pc, #204]	; (b5a80 <loop+0x2e0>)
   b59b4:	7d1a      	ldrb	r2, [r3, #20]
   b59b6:	b10a      	cbz	r2, b59bc <loop+0x21c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b59b8:	2202      	movs	r2, #2
   b59ba:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)                                         // User presses the user button
   b59bc:	2200      	movs	r2, #0
   b59be:	2104      	movs	r1, #4
   b59c0:	482f      	ldr	r0, [pc, #188]	; (b5a80 <loop+0x2e0>)
   b59c2:	f7fe fdcb 	bl	b455c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        .duration(wakeInSeconds * 1000);
   b59c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b59ca:	4369      	muls	r1, r5
   b59cc:	f7fe fd4e 	bl	b446c <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   b59d0:	492b      	ldr	r1, [pc, #172]	; (b5a80 <loop+0x2e0>)
   b59d2:	a803      	add	r0, sp, #12
   b59d4:	f004 fe3c 	bl	ba650 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b59d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b59dc:	4819      	ldr	r0, [pc, #100]	; (b5a44 <loop+0x2a4>)
   b59de:	f002 fb59 	bl	b8094 <_ZN6AB18056setWDTEi>
      fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   b59e2:	4828      	ldr	r0, [pc, #160]	; (b5a84 <loop+0x2e4>)
   b59e4:	f004 f936 	bl	b9c54 <_ZN9FuelGauge6wakeupEv>
   b59e8:	f003 f874 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   b59ec:	4b0e      	ldr	r3, [pc, #56]	; (b5a28 <loop+0x288>)
   b59ee:	6018      	str	r0, [r3, #0]
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b59f0:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b59f2:	b17b      	cbz	r3, b5a14 <loop+0x274>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b59f4:	889a      	ldrh	r2, [r3, #4]
   b59f6:	2a01      	cmp	r2, #1
   b59f8:	d10c      	bne.n	b5a14 <loop+0x274>
      if (result.wakeupPin() == userSwitch) setLowPowerMode("0");        // The user woke the device and we need to make sure it stays awake
   b59fa:	899b      	ldrh	r3, [r3, #12]
   b59fc:	2b04      	cmp	r3, #4
   b59fe:	d109      	bne.n	b5a14 <loop+0x274>
   b5a00:	4921      	ldr	r1, [pc, #132]	; (b5a88 <loop+0x2e8>)
   b5a02:	a806      	add	r0, sp, #24
   b5a04:	f004 fccd 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a08:	a806      	add	r0, sp, #24
   b5a0a:	f7ff f8e7 	bl	b4bdc <_Z15setLowPowerMode6String>
   b5a0e:	a806      	add	r0, sp, #24
   b5a10:	f004 fc7c 	bl	ba30c <_ZN6StringD1Ev>
        freeWakeupSourceMemory();
   b5a14:	a803      	add	r0, sp, #12
   b5a16:	f7fe fdd5 	bl	b45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
    } break;
   b5a1a:	e725      	b.n	b5868 <loop+0xc8>
   b5a1c:	2003e570 	.word	0x2003e570
   b5a20:	2003e518 	.word	0x2003e518
   b5a24:	2003e580 	.word	0x2003e580
   b5a28:	2003e578 	.word	0x2003e578
   b5a2c:	2003e574 	.word	0x2003e574
   b5a30:	2003e4ad 	.word	0x2003e4ad
   b5a34:	2003e4f4 	.word	0x2003e4f4
   b5a38:	00015f90 	.word	0x00015f90
   b5a3c:	000bc3ef 	.word	0x000bc3ef
   b5a40:	2003e670 	.word	0x2003e670
   b5a44:	2003e454 	.word	0x2003e454
   b5a48:	2003e2d8 	.word	0x2003e2d8
   b5a4c:	2003e524 	.word	0x2003e524
   b5a50:	2003e51c 	.word	0x2003e51c
   b5a54:	2003e600 	.word	0x2003e600
   b5a58:	2003e5b0 	.word	0x2003e5b0
   b5a5c:	2003e4b0 	.word	0x2003e4b0
   b5a60:	2003e520 	.word	0x2003e520
   b5a64:	000bc3cd 	.word	0x000bc3cd
   b5a68:	000bc446 	.word	0x000bc446
   b5a6c:	000bc413 	.word	0x000bc413
   b5a70:	2003e4ac 	.word	0x2003e4ac
   b5a74:	2003e448 	.word	0x2003e448
   b5a78:	2003e370 	.word	0x2003e370
   b5a7c:	000bc47a 	.word	0x000bc47a
   b5a80:	2003e494 	.word	0x2003e494
   b5a84:	2003e4c0 	.word	0x2003e4c0
   b5a88:	000bc024 	.word	0x000bc024
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle and power down the modem
   b5a8c:	48a9      	ldr	r0, [pc, #676]	; (b5d34 <loop+0x594>)
   b5a8e:	f004 fa7d 	bl	b9f8c <_ZN5spark12NetworkClass5isOffEv>
   b5a92:	2800      	cmp	r0, #0
   b5a94:	f43f af6d 	beq.w	b5972 <loop+0x1d2>
   b5a98:	e76d      	b.n	b5976 <loop+0x1d6>
   b5a9a:	2501      	movs	r5, #1
   b5a9c:	e784      	b.n	b59a8 <loop+0x208>
      if (state != oldState) publishStateTransition();
   b5a9e:	4ba6      	ldr	r3, [pc, #664]	; (b5d38 <loop+0x598>)
   b5aa0:	781b      	ldrb	r3, [r3, #0]
   b5aa2:	2b03      	cmp	r3, #3
   b5aa4:	d001      	beq.n	b5aaa <loop+0x30a>
   b5aa6:	f7fe fef5 	bl	b4894 <_Z22publishStateTransitionv>
   b5aaa:	f003 fa95 	bl	b8fd8 <spark_cloud_flag_connected>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle
   b5aae:	2800      	cmp	r0, #0
   b5ab0:	d05d      	beq.n	b5b6e <loop+0x3ce>
   b5ab2:	f7fe ff63 	bl	b497c <_Z22disconnectFromParticlev>
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b5ab6:	4ea1      	ldr	r6, [pc, #644]	; (b5d3c <loop+0x59c>)
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary) + 1;
   b5ab8:	4fa1      	ldr	r7, [pc, #644]	; (b5d40 <loop+0x5a0>)
    bool stopWDT() { return setWDT(0); };
   b5aba:	48a2      	ldr	r0, [pc, #648]	; (b5d44 <loop+0x5a4>)
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b5abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ac0:	6033      	str	r3, [r6, #0]
   b5ac2:	2100      	movs	r1, #0
      state = IDLE_STATE;                                                // Head back to the idle state after we sleep
   b5ac4:	2302      	movs	r3, #2
   b5ac6:	7023      	strb	r3, [r4, #0]
   b5ac8:	f002 fae4 	bl	b8094 <_ZN6AB18056setWDTEi>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary) + 1;
   b5acc:	683d      	ldr	r5, [r7, #0]
   b5ace:	f004 ff96 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5ad2:	683b      	ldr	r3, [r7, #0]
   b5ad4:	fb90 f2f3 	sdiv	r2, r0, r3
   b5ad8:	fb02 0013 	mls	r0, r2, r3, r0
   b5adc:	1a2d      	subs	r5, r5, r0
   b5ade:	2d00      	cmp	r5, #0
   b5ae0:	dd4b      	ble.n	b5b7a <loop+0x3da>
   b5ae2:	42ab      	cmp	r3, r5
   b5ae4:	bfa8      	it	ge
   b5ae6:	462b      	movge	r3, r5
   b5ae8:	1c5d      	adds	r5, r3, #1
      Log.info("Going to sleep for %i seconds",wakeInSeconds);
   b5aea:	462a      	mov	r2, r5
   b5aec:	4996      	ldr	r1, [pc, #600]	; (b5d48 <loop+0x5a8>)
   b5aee:	4897      	ldr	r0, [pc, #604]	; (b5d4c <loop+0x5ac>)
   b5af0:	f7fe fdd2 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   b5af4:	4b96      	ldr	r3, [pc, #600]	; (b5d50 <loop+0x5b0>)
   b5af6:	7d1a      	ldrb	r2, [r3, #20]
   b5af8:	b10a      	cbz	r2, b5afe <loop+0x35e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5afa:	2202      	movs	r2, #2
   b5afc:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)
   b5afe:	2200      	movs	r2, #0
   b5b00:	2104      	movs	r1, #4
   b5b02:	4893      	ldr	r0, [pc, #588]	; (b5d50 <loop+0x5b0>)
      stayAwakeTimeStamp = millis();
   b5b04:	4f93      	ldr	r7, [pc, #588]	; (b5d54 <loop+0x5b4>)
        .gpio(userSwitch,CHANGE)
   b5b06:	f7fe fd29 	bl	b455c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        .duration(wakeInSeconds * 1000);
   b5b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5b0e:	4369      	muls	r1, r5
   b5b10:	f7fe fcac 	bl	b446c <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5b14:	498e      	ldr	r1, [pc, #568]	; (b5d50 <loop+0x5b0>)
   b5b16:	a803      	add	r0, sp, #12
   b5b18:	f004 fd9a 	bl	ba650 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   b5b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5b20:	4888      	ldr	r0, [pc, #544]	; (b5d44 <loop+0x5a4>)
   b5b22:	f002 fab7 	bl	b8094 <_ZN6AB18056setWDTEi>
      fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   b5b26:	488c      	ldr	r0, [pc, #560]	; (b5d58 <loop+0x5b8>)
   b5b28:	f004 f894 	bl	b9c54 <_ZN9FuelGauge6wakeupEv>
   b5b2c:	f002 ffd2 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
   b5b30:	9b03      	ldr	r3, [sp, #12]
      stayAwakeTimeStamp = millis();
   b5b32:	6038      	str	r0, [r7, #0]
        if (wakeupSource_) {
   b5b34:	2b00      	cmp	r3, #0
   b5b36:	f43f af6d 	beq.w	b5a14 <loop+0x274>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5b3a:	889d      	ldrh	r5, [r3, #4]
   b5b3c:	2d01      	cmp	r5, #1
   b5b3e:	f47f af69 	bne.w	b5a14 <loop+0x274>
      if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b5b42:	899b      	ldrh	r3, [r3, #12]
   b5b44:	2b04      	cmp	r3, #4
   b5b46:	f47f af65 	bne.w	b5a14 <loop+0x274>
        setLowPowerMode("0");                                            // We are waking the device for a reason
   b5b4a:	4984      	ldr	r1, [pc, #528]	; (b5d5c <loop+0x5bc>)
   b5b4c:	a806      	add	r0, sp, #24
   b5b4e:	f004 fc28 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b52:	a806      	add	r0, sp, #24
   b5b54:	f7ff f842 	bl	b4bdc <_Z15setLowPowerMode6String>
   b5b58:	a806      	add	r0, sp, #24
   b5b5a:	f004 fbd7 	bl	ba30c <_ZN6StringD1Ev>
   b5b5e:	f002 ffb9 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        stayAwake = stayAwakeLong;
   b5b62:	4b7f      	ldr	r3, [pc, #508]	; (b5d60 <loop+0x5c0>)
   b5b64:	6033      	str	r3, [r6, #0]
        systemStatusWriteNeeded = true;
   b5b66:	4b7f      	ldr	r3, [pc, #508]	; (b5d64 <loop+0x5c4>)
        stayAwakeTimeStamp = millis();
   b5b68:	6038      	str	r0, [r7, #0]
        systemStatusWriteNeeded = true;
   b5b6a:	701d      	strb	r5, [r3, #0]
   b5b6c:	e752      	b.n	b5a14 <loop+0x274>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle
   b5b6e:	4871      	ldr	r0, [pc, #452]	; (b5d34 <loop+0x594>)
   b5b70:	f004 fa0c 	bl	b9f8c <_ZN5spark12NetworkClass5isOffEv>
   b5b74:	2800      	cmp	r0, #0
   b5b76:	d09c      	beq.n	b5ab2 <loop+0x312>
   b5b78:	e79d      	b.n	b5ab6 <loop+0x316>
   b5b7a:	2301      	movs	r3, #1
   b5b7c:	e7b4      	b.n	b5ae8 <loop+0x348>
      if (state != oldState) {                                           // Non-blocking function - these are first time items
   b5b7e:	4b6e      	ldr	r3, [pc, #440]	; (b5d38 <loop+0x598>)
   b5b80:	4d79      	ldr	r5, [pc, #484]	; (b5d68 <loop+0x5c8>)
   b5b82:	781b      	ldrb	r3, [r3, #0]
   b5b84:	2b05      	cmp	r3, #5
   b5b86:	d021      	beq.n	b5bcc <loop+0x42c>
        retainedOldState = oldState;                                     // Keep track for where to go next
   b5b88:	4e78      	ldr	r6, [pc, #480]	; (b5d6c <loop+0x5cc>)
   b5b8a:	7033      	strb	r3, [r6, #0]
        sysStatus.lastConnectionDuration = 0;                            // Will exit with 0 if we do not connect or are connected or the connection time if we do
   b5b8c:	2300      	movs	r3, #0
   b5b8e:	85ab      	strh	r3, [r5, #44]	; 0x2c
        publishStateTransition();
   b5b90:	f7fe fe80 	bl	b4894 <_Z22publishStateTransitionv>
   b5b94:	f003 fa20 	bl	b8fd8 <spark_cloud_flag_connected>
        if (Particle.connected()) {
   b5b98:	b178      	cbz	r0, b5bba <loop+0x41a>
          Log.info("Connecting state but already connected");
   b5b9a:	4975      	ldr	r1, [pc, #468]	; (b5d70 <loop+0x5d0>)
   b5b9c:	486b      	ldr	r0, [pc, #428]	; (b5d4c <loop+0x5ac>)
   b5b9e:	f7fe fd7b 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
          stayAwake = stayAwakeLong;                                     // Keeps device awake after reboot - helps with recovery
   b5ba2:	4b66      	ldr	r3, [pc, #408]	; (b5d3c <loop+0x59c>)
   b5ba4:	4a6e      	ldr	r2, [pc, #440]	; (b5d60 <loop+0x5c0>)
   b5ba6:	601a      	str	r2, [r3, #0]
   b5ba8:	f002 ff94 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
          stayAwakeTimeStamp = millis();
   b5bac:	4b69      	ldr	r3, [pc, #420]	; (b5d54 <loop+0x5b4>)
   b5bae:	6018      	str	r0, [r3, #0]
          (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b5bb0:	7833      	ldrb	r3, [r6, #0]
   b5bb2:	2b06      	cmp	r3, #6
   b5bb4:	f47f aeb2 	bne.w	b591c <loop+0x17c>
   b5bb8:	e643      	b.n	b5842 <loop+0xa2>
   b5bba:	f002 ff8b 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        connectionStartTimeStamp = millis();                             // Have to use millis as the clock will get reset on connect
   b5bbe:	4b6d      	ldr	r3, [pc, #436]	; (b5d74 <loop+0x5d4>)
   b5bc0:	6018      	str	r0, [r3, #0]
        Cellular.on();                                                   // Needed until they fix this: https://github.com/particle-iot/device-os/issues/1631
   b5bc2:	485c      	ldr	r0, [pc, #368]	; (b5d34 <loop+0x594>)
   b5bc4:	f7fe fcc4 	bl	b4550 <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
   b5bc8:	f003 f9fe 	bl	b8fc8 <spark_cloud_flag_connect>
   b5bcc:	f002 ff82 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      sysStatus.lastConnectionDuration = int((millis() - connectionStartTimeStamp)/1000);
   b5bd0:	4b68      	ldr	r3, [pc, #416]	; (b5d74 <loop+0x5d4>)
   b5bd2:	681b      	ldr	r3, [r3, #0]
   b5bd4:	1ac0      	subs	r0, r0, r3
   b5bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bda:	fbb0 f0f3 	udiv	r0, r0, r3
   b5bde:	85a8      	strh	r0, [r5, #44]	; 0x2c
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5be0:	f003 f9fa 	bl	b8fd8 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b5be4:	2800      	cmp	r0, #0
   b5be6:	d035      	beq.n	b5c54 <loop+0x4b4>
   b5be8:	f003 f9f6 	bl	b8fd8 <spark_cloud_flag_connected>
        if (!connected()) {
   b5bec:	b110      	cbz	r0, b5bf4 <loop+0x454>
        return spark_sync_time(NULL);
   b5bee:	2000      	movs	r0, #0
   b5bf0:	f003 fa12 	bl	b9018 <spark_sync_time>
        return hal_timer_millis(nullptr);
   b5bf4:	2000      	movs	r0, #0
   b5bf6:	f002 ff7d 	bl	b8af4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5bfa:	f247 5730 	movw	r7, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5bfe:	4606      	mov	r6, r0
   b5c00:	2000      	movs	r0, #0
   b5c02:	f002 ff77 	bl	b8af4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5c06:	1b80      	subs	r0, r0, r6
   b5c08:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5c0c:	42b8      	cmp	r0, r7
   b5c0e:	f171 0300 	sbcs.w	r3, r1, #0
   b5c12:	d205      	bcs.n	b5c20 <loop+0x480>
        waitFor(Particle.syncTimeDone,30000);                          // Wait for up to 30 seconds for the SyncTime to complete
   b5c14:	f7fe fc18 	bl	b4448 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   b5c18:	b910      	cbnz	r0, b5c20 <loop+0x480>
            spark_process();
   b5c1a:	f003 f9cd 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   b5c1e:	e7ef      	b.n	b5c00 <loop+0x460>
   b5c20:	f7fe fc12 	bl	b4448 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   b5c24:	f004 feeb 	bl	ba9fe <_ZN9TimeClass3nowEv>
        stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b5c28:	4b44      	ldr	r3, [pc, #272]	; (b5d3c <loop+0x59c>)
   b5c2a:	4a4d      	ldr	r2, [pc, #308]	; (b5d60 <loop+0x5c0>)
   b5c2c:	601a      	str	r2, [r3, #0]
        sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   b5c2e:	62a8      	str	r0, [r5, #40]	; 0x28
   b5c30:	f002 ff50 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   b5c34:	4b47      	ldr	r3, [pc, #284]	; (b5d54 <loop+0x5b4>)
   b5c36:	6018      	str	r0, [r3, #0]
        recordConnectionDetails();                                       // Record outcome of connection attempt
   b5c38:	f7ff f972 	bl	b4f20 <_Z23recordConnectionDetailsv>
        attachInterrupt(userSwitch, userSwitchISR,FALLING);              // Attach interrupt for the user switch to enable verbose counts
   b5c3c:	2300      	movs	r3, #0
   b5c3e:	9300      	str	r3, [sp, #0]
   b5c40:	494d      	ldr	r1, [pc, #308]	; (b5d78 <loop+0x5d8>)
   b5c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c46:	2202      	movs	r2, #2
   b5c48:	2004      	movs	r0, #4
   b5c4a:	f004 f8d1 	bl	b9df0 <_Z15attachInterrupttPFvvE13InterruptModeah>
        (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b5c4e:	4b47      	ldr	r3, [pc, #284]	; (b5d6c <loop+0x5cc>)
   b5c50:	781b      	ldrb	r3, [r3, #0]
   b5c52:	e7ae      	b.n	b5bb2 <loop+0x412>
      else if (sysStatus.lastConnectionDuration > connectMaxTimeSec) {
   b5c54:	4b49      	ldr	r3, [pc, #292]	; (b5d7c <loop+0x5dc>)
   b5c56:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   b5c58:	681b      	ldr	r3, [r3, #0]
   b5c5a:	429a      	cmp	r2, r3
   b5c5c:	f67f ae04 	bls.w	b5868 <loop+0xc8>
        recordConnectionDetails();                                       // Record outcome of connection attempt
   b5c60:	f7ff f95e 	bl	b4f20 <_Z23recordConnectionDetailsv>
        Log.info("cloud connection unsuccessful");
   b5c64:	4946      	ldr	r1, [pc, #280]	; (b5d80 <loop+0x5e0>)
   b5c66:	4839      	ldr	r0, [pc, #228]	; (b5d4c <loop+0x5ac>)
   b5c68:	f7fe fd16 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        disconnectFromParticle();                                        // Make sure the modem is turned off
   b5c6c:	f7fe fe86 	bl	b497c <_Z22disconnectFromParticlev>
        if (sysStatus.solarPowerMode) setLowPowerMode("1");              // If we cannot connect, there is no point to stayng out of low power mode
   b5c70:	7deb      	ldrb	r3, [r5, #23]
   b5c72:	b14b      	cbz	r3, b5c88 <loop+0x4e8>
   b5c74:	4943      	ldr	r1, [pc, #268]	; (b5d84 <loop+0x5e4>)
   b5c76:	a806      	add	r0, sp, #24
   b5c78:	f004 fb93 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5c7c:	a806      	add	r0, sp, #24
   b5c7e:	f7fe ffad 	bl	b4bdc <_Z15setLowPowerMode6String>
   b5c82:	a806      	add	r0, sp, #24
   b5c84:	f004 fb42 	bl	ba30c <_ZN6StringD1Ev>
        if ((Time.now() - sysStatus.lastConnection) > 6 * 3600L) {       // Only sends to ERROR_STATE if it has been over six hours - this ties to reporting and low battery state
   b5c88:	f004 feb9 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5c8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   b5c8e:	1ac0      	subs	r0, r0, r3
   b5c90:	f245 4360 	movw	r3, #21600	; 0x5460
   b5c94:	4298      	cmp	r0, r3
   b5c96:	f67f ae41 	bls.w	b591c <loop+0x17c>
          state = ERROR_STATE;
   b5c9a:	2301      	movs	r3, #1
   b5c9c:	7023      	strb	r3, [r4, #0]
   b5c9e:	f002 ff19 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
          resetTimeStamp = millis();
   b5ca2:	4b39      	ldr	r3, [pc, #228]	; (b5d88 <loop+0x5e8>)
   b5ca4:	6018      	str	r0, [r3, #0]
          break;
   b5ca6:	e5df      	b.n	b5868 <loop+0xc8>
    if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5ca8:	4b23      	ldr	r3, [pc, #140]	; (b5d38 <loop+0x598>)
   b5caa:	781b      	ldrb	r3, [r3, #0]
   b5cac:	2b01      	cmp	r3, #1
   b5cae:	d001      	beq.n	b5cb4 <loop+0x514>
   b5cb0:	f7fe fdf0 	bl	b4894 <_Z22publishStateTransitionv>
   b5cb4:	f002 ff0e 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {                       // This simply gives us some time to catch the device if it is in a reset loop                           
   b5cb8:	4b33      	ldr	r3, [pc, #204]	; (b5d88 <loop+0x5e8>)
   b5cba:	681b      	ldr	r3, [r3, #0]
   b5cbc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   b5cc0:	3330      	adds	r3, #48	; 0x30
   b5cc2:	4283      	cmp	r3, r0
   b5cc4:	f4bf add0 	bcs.w	b5868 <loop+0xc8>
      snprintf(errorStr, sizeof(errorStr),"Resetting device with alert code %i",sensor_data.alerts);
   b5cc8:	4d30      	ldr	r5, [pc, #192]	; (b5d8c <loop+0x5ec>)
   b5cca:	4a31      	ldr	r2, [pc, #196]	; (b5d90 <loop+0x5f0>)
   b5ccc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   b5cce:	2140      	movs	r1, #64	; 0x40
   b5cd0:	a806      	add	r0, sp, #24
   b5cd2:	f003 fa59 	bl	b9188 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5cd6:	f003 f97f 	bl	b8fd8 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("ERROR_STATE", errorStr, PRIVATE);
   b5cda:	b160      	cbz	r0, b5cf6 <loop+0x556>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5cdc:	4b2d      	ldr	r3, [pc, #180]	; (b5d94 <loop+0x5f4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5cde:	492e      	ldr	r1, [pc, #184]	; (b5d98 <loop+0x5f8>)
   b5ce0:	781b      	ldrb	r3, [r3, #0]
   b5ce2:	f88d 3000 	strb.w	r3, [sp]
   b5ce6:	a803      	add	r0, sp, #12
   b5ce8:	233c      	movs	r3, #60	; 0x3c
   b5cea:	aa06      	add	r2, sp, #24
   b5cec:	f003 fd6e 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5cf0:	a804      	add	r0, sp, #16
   b5cf2:	f7fe ff02 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Log.info(errorStr);
   b5cf6:	4815      	ldr	r0, [pc, #84]	; (b5d4c <loop+0x5ac>)
   b5cf8:	a906      	add	r1, sp, #24
   b5cfa:	f7fe fccd 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
      delay(2000);
   b5cfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5d02:	f003 faa5 	bl	b9250 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d06:	f003 f967 	bl	b8fd8 <spark_cloud_flag_connected>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle and power down the modem
   b5d0a:	b160      	cbz	r0, b5d26 <loop+0x586>
   b5d0c:	f7fe fe36 	bl	b497c <_Z22disconnectFromParticlev>
      switch (sensor_data.alerts) {                                        // All of these events will reset the device
   b5d10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   b5d12:	2b0d      	cmp	r3, #13
   b5d14:	d053      	beq.n	b5dbe <loop+0x61e>
   b5d16:	dc41      	bgt.n	b5d9c <loop+0x5fc>
   b5d18:	2b0c      	cmp	r3, #12
   b5d1a:	d14d      	bne.n	b5db8 <loop+0x618>
          ab1805.deepPowerDown();                                      // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   b5d1c:	211e      	movs	r1, #30
   b5d1e:	4809      	ldr	r0, [pc, #36]	; (b5d44 <loop+0x5a4>)
   b5d20:	f002 fb12 	bl	b8348 <_ZN6AB180513deepPowerDownEi>
          break;
   b5d24:	e5a0      	b.n	b5868 <loop+0xc8>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle and power down the modem
   b5d26:	4803      	ldr	r0, [pc, #12]	; (b5d34 <loop+0x594>)
   b5d28:	f004 f930 	bl	b9f8c <_ZN5spark12NetworkClass5isOffEv>
   b5d2c:	2800      	cmp	r0, #0
   b5d2e:	d0ed      	beq.n	b5d0c <loop+0x56c>
   b5d30:	e7ee      	b.n	b5d10 <loop+0x570>
   b5d32:	bf00      	nop
   b5d34:	2003e638 	.word	0x2003e638
   b5d38:	2003e518 	.word	0x2003e518
   b5d3c:	2003e574 	.word	0x2003e574
   b5d40:	2003e370 	.word	0x2003e370
   b5d44:	2003e454 	.word	0x2003e454
   b5d48:	000bc491 	.word	0x000bc491
   b5d4c:	2003e670 	.word	0x2003e670
   b5d50:	2003e494 	.word	0x2003e494
   b5d54:	2003e578 	.word	0x2003e578
   b5d58:	2003e4c0 	.word	0x2003e4c0
   b5d5c:	000bc024 	.word	0x000bc024
   b5d60:	00015f90 	.word	0x00015f90
   b5d64:	2003e5b0 	.word	0x2003e5b0
   b5d68:	2003e580 	.word	0x2003e580
   b5d6c:	2003e447 	.word	0x2003e447
   b5d70:	000bc4af 	.word	0x000bc4af
   b5d74:	2003e44c 	.word	0x2003e44c
   b5d78:	000b40cd 	.word	0x000b40cd
   b5d7c:	2003e2d4 	.word	0x2003e2d4
   b5d80:	000bc4d6 	.word	0x000bc4d6
   b5d84:	000bbf94 	.word	0x000bbf94
   b5d88:	2003e51c 	.word	0x2003e51c
   b5d8c:	2003e524 	.word	0x2003e524
   b5d90:	000bc4f4 	.word	0x000bc4f4
   b5d94:	2003e445 	.word	0x2003e445
   b5d98:	000bc518 	.word	0x000bc518
   b5d9c:	3b1e      	subs	r3, #30
   b5d9e:	2b01      	cmp	r3, #1
   b5da0:	d80a      	bhi.n	b5db8 <loop+0x618>
          sysStatus.lastConnection = Time.now();                       // Make sure we don't do this very often
   b5da2:	f004 fe2c 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5da6:	4a2a      	ldr	r2, [pc, #168]	; (b5e50 <loop+0x6b0>)
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Unless a FRAM error sent us here - store alerts value
   b5da8:	2101      	movs	r1, #1
          sysStatus.lastConnection = Time.now();                       // Make sure we don't do this very often
   b5daa:	6290      	str	r0, [r2, #40]	; 0x28
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Unless a FRAM error sent us here - store alerts value
   b5dac:	4829      	ldr	r0, [pc, #164]	; (b5e54 <loop+0x6b4>)
   b5dae:	f7fe fa43 	bl	b4238 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
          delay(100);                                                  // Time to write to FRAM
   b5db2:	2064      	movs	r0, #100	; 0x64
   b5db4:	f003 fa4c 	bl	b9250 <delay>
          System.reset();
   b5db8:	f004 fc46 	bl	ba648 <_ZN11SystemClass5resetEv>
          break;
   b5dbc:	e554      	b.n	b5868 <loop+0xc8>
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5dbe:	4a24      	ldr	r2, [pc, #144]	; (b5e50 <loop+0x6b0>)
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5dc0:	4824      	ldr	r0, [pc, #144]	; (b5e54 <loop+0x6b4>)
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5dc2:	2300      	movs	r3, #0
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5dc4:	2101      	movs	r1, #1
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5dc6:	6253      	str	r3, [r2, #36]	; 0x24
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5dc8:	f7fe fa36 	bl	b4238 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
          delay (100);
   b5dcc:	2064      	movs	r0, #100	; 0x64
   b5dce:	f003 fa3f 	bl	b9250 <delay>
   b5dd2:	e7a3      	b.n	b5d1c <loop+0x57c>
      if (state != oldState) {
   b5dd4:	4b20      	ldr	r3, [pc, #128]	; (b5e58 <loop+0x6b8>)
   b5dd6:	781b      	ldrb	r3, [r3, #0]
   b5dd8:	2b08      	cmp	r3, #8
   b5dda:	d009      	beq.n	b5df0 <loop+0x650>
   b5ddc:	f002 fe7a 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();                                          // When did we start the firmware update?
   b5de0:	4b1e      	ldr	r3, [pc, #120]	; (b5e5c <loop+0x6bc>)
        Log.info("In the firmware update state");
   b5de2:	491f      	ldr	r1, [pc, #124]	; (b5e60 <loop+0x6c0>)
        stateTime = millis();                                          // When did we start the firmware update?
   b5de4:	6018      	str	r0, [r3, #0]
        Log.info("In the firmware update state");
   b5de6:	481f      	ldr	r0, [pc, #124]	; (b5e64 <loop+0x6c4>)
   b5de8:	f7fe fc56 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        publishStateTransition();
   b5dec:	f7fe fd52 	bl	b4894 <_Z22publishStateTransitionv>
      if (!firmwareUpdateInProgress) {                                 // Done with the update
   b5df0:	4b1d      	ldr	r3, [pc, #116]	; (b5e68 <loop+0x6c8>)
   b5df2:	781b      	ldrb	r3, [r3, #0]
   b5df4:	b90b      	cbnz	r3, b5dfa <loop+0x65a>
          Log.info("firmware update completed");
   b5df6:	491d      	ldr	r1, [pc, #116]	; (b5e6c <loop+0x6cc>)
   b5df8:	e56c      	b.n	b58d4 <loop+0x134>
   b5dfa:	f002 fe6b 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - stateTime >= firmwareUpdateMaxTime.count()) {     // Ran out of time
   b5dfe:	4b17      	ldr	r3, [pc, #92]	; (b5e5c <loop+0x6bc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	1ac0      	subs	r0, r0, r3
   b5e04:	4b1a      	ldr	r3, [pc, #104]	; (b5e70 <loop+0x6d0>)
   b5e06:	4298      	cmp	r0, r3
   b5e08:	f67f ad2e 	bls.w	b5868 <loop+0xc8>
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5e0c:	4d19      	ldr	r5, [pc, #100]	; (b5e74 <loop+0x6d4>)
          Log.info("firmware update timed out");
   b5e0e:	491a      	ldr	r1, [pc, #104]	; (b5e78 <loop+0x6d8>)
   b5e10:	4814      	ldr	r0, [pc, #80]	; (b5e64 <loop+0x6c4>)
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5e12:	2615      	movs	r6, #21
          Log.info("firmware update timed out");
   b5e14:	f7fe fc40 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5e18:	632e      	str	r6, [r5, #48]	; 0x30
          snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b5e1a:	f004 fdf0 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b5e1e:	4a17      	ldr	r2, [pc, #92]	; (b5e7c <loop+0x6dc>)
   b5e20:	9000      	str	r0, [sp, #0]
   b5e22:	4633      	mov	r3, r6
   b5e24:	2140      	movs	r1, #64	; 0x40
   b5e26:	a806      	add	r0, sp, #24
   b5e28:	f003 f9ae 	bl	b9188 <snprintf>
          PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b5e2c:	f001 f852 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b5e30:	2300      	movs	r3, #0
   b5e32:	f88d 3000 	strb.w	r3, [sp]
   b5e36:	4b12      	ldr	r3, [pc, #72]	; (b5e80 <loop+0x6e0>)
   b5e38:	4912      	ldr	r1, [pc, #72]	; (b5e84 <loop+0x6e4>)
   b5e3a:	781b      	ldrb	r3, [r3, #0]
   b5e3c:	aa06      	add	r2, sp, #24
   b5e3e:	f7fe fa03 	bl	b4248 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
          sensor_data.updateAttempts++;                                    // Increment the update attempt counter
   b5e42:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   b5e46:	3301      	adds	r3, #1
   b5e48:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   b5e4c:	e566      	b.n	b591c <loop+0x17c>
   b5e4e:	bf00      	nop
   b5e50:	2003e580 	.word	0x2003e580
   b5e54:	2003e4b0 	.word	0x2003e4b0
   b5e58:	2003e518 	.word	0x2003e518
   b5e5c:	2003e450 	.word	0x2003e450
   b5e60:	000bc524 	.word	0x000bc524
   b5e64:	2003e670 	.word	0x2003e670
   b5e68:	2003e4ad 	.word	0x2003e4ad
   b5e6c:	000bc541 	.word	0x000bc541
   b5e70:	000927bf 	.word	0x000927bf
   b5e74:	2003e524 	.word	0x2003e524
   b5e78:	000bc55b 	.word	0x000bc55b
   b5e7c:	000bbfba 	.word	0x000bbfba
   b5e80:	2003e445 	.word	0x2003e445
   b5e84:	000bbfdc 	.word	0x000bbfdc

000b5e88 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b5e88:	6042      	str	r2, [r0, #4]
  _begun = false;
   b5e8a:	2200      	movs	r2, #0
  _addr = addr;
   b5e8c:	7001      	strb	r1, [r0, #0]
  _begun = false;
   b5e8e:	7202      	strb	r2, [r0, #8]
}
   b5e90:	4770      	bx	lr

000b5e92 <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   b5e92:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b5e94:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b5e96:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b5e98:	b153      	cbz	r3, b5eb0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b5e9a:	7821      	ldrb	r1, [r4, #0]
   b5e9c:	6860      	ldr	r0, [r4, #4]
   b5e9e:	f003 ff6d 	bl	b9d7c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   b5ea2:	6860      	ldr	r0, [r4, #4]
   b5ea4:	f003 ff8d 	bl	b9dc2 <_ZN7TwoWire15endTransmissionEv>
   b5ea8:	fab0 f080 	clz	r0, r0
   b5eac:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b5eae:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b5eb0:	f000 f803 	bl	b5eba <_ZN18Adafruit_I2CDevice5beginEv>
   b5eb4:	2800      	cmp	r0, #0
   b5eb6:	d1f0      	bne.n	b5e9a <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b5eb8:	e7f9      	b.n	b5eae <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b5eba <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   b5eba:	b510      	push	{r4, lr}
   b5ebc:	4604      	mov	r4, r0
  _wire->begin();
   b5ebe:	6840      	ldr	r0, [r0, #4]
   b5ec0:	f003 ff2a 	bl	b9d18 <_ZN7TwoWire5beginEv>
  _begun = true;
   b5ec4:	2301      	movs	r3, #1
   b5ec6:	7223      	strb	r3, [r4, #8]
  return detected();
   b5ec8:	4620      	mov	r0, r4
}
   b5eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   b5ece:	f7ff bfe0 	b.w	b5e92 <_ZN18Adafruit_I2CDevice8detectedEv>

000b5ed2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b5ed2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ed6:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b5eda:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   b5edc:	1993      	adds	r3, r2, r6
   b5ede:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b5ee0:	4604      	mov	r4, r0
   b5ee2:	4688      	mov	r8, r1
   b5ee4:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   b5ee6:	d902      	bls.n	b5eee <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b5ee8:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   b5eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b5eee:	7801      	ldrb	r1, [r0, #0]
   b5ef0:	6840      	ldr	r0, [r0, #4]
   b5ef2:	f003 ff43 	bl	b9d7c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5ef6:	b97e      	cbnz	r6, b5f18 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   b5ef8:	6860      	ldr	r0, [r4, #4]
   b5efa:	6803      	ldr	r3, [r0, #0]
   b5efc:	462a      	mov	r2, r5
   b5efe:	68db      	ldr	r3, [r3, #12]
   b5f00:	4641      	mov	r1, r8
   b5f02:	4798      	blx	r3
   b5f04:	4285      	cmp	r5, r0
   b5f06:	d1ef      	bne.n	b5ee8 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   b5f08:	6860      	ldr	r0, [r4, #4]
   b5f0a:	4639      	mov	r1, r7
   b5f0c:	f003 ff55 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
   b5f10:	fab0 f080 	clz	r0, r0
   b5f14:	0940      	lsrs	r0, r0, #5
   b5f16:	e7e8      	b.n	b5eea <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5f18:	f1b9 0f00 	cmp.w	r9, #0
   b5f1c:	d0ec      	beq.n	b5ef8 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b5f1e:	6860      	ldr	r0, [r4, #4]
   b5f20:	6803      	ldr	r3, [r0, #0]
   b5f22:	4632      	mov	r2, r6
   b5f24:	68db      	ldr	r3, [r3, #12]
   b5f26:	4649      	mov	r1, r9
   b5f28:	4798      	blx	r3
   b5f2a:	4286      	cmp	r6, r0
   b5f2c:	d1dc      	bne.n	b5ee8 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   b5f2e:	e7e3      	b.n	b5ef8 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000b5f30 <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   b5f30:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b5f32:	b570      	push	{r4, r5, r6, lr}
   b5f34:	4606      	mov	r6, r0
   b5f36:	460c      	mov	r4, r1
   b5f38:	4615      	mov	r5, r2
  if (len > 32) {
   b5f3a:	d80f      	bhi.n	b5f5c <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   b5f3c:	7801      	ldrb	r1, [r0, #0]
   b5f3e:	6840      	ldr	r0, [r0, #4]
   b5f40:	f003 ff07 	bl	b9d52 <_ZN7TwoWire11requestFromEhjh>
   b5f44:	42a8      	cmp	r0, r5
   b5f46:	d109      	bne.n	b5f5c <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   b5f48:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   b5f4a:	42a5      	cmp	r5, r4
   b5f4c:	d008      	beq.n	b5f60 <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   b5f4e:	6870      	ldr	r0, [r6, #4]
   b5f50:	6803      	ldr	r3, [r0, #0]
   b5f52:	695b      	ldr	r3, [r3, #20]
   b5f54:	4798      	blx	r3
   b5f56:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   b5f5a:	e7f6      	b.n	b5f4a <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   b5f5c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5f5e:	bd70      	pop	{r4, r5, r6, pc}
   b5f60:	2001      	movs	r0, #1
   b5f62:	e7fc      	b.n	b5f5e <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000b5f64 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f66:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   b5f68:	2300      	movs	r3, #0
   b5f6a:	e9cd 3300 	strd	r3, r3, [sp]
   b5f6e:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5f72:	9e06      	ldr	r6, [sp, #24]
   b5f74:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   b5f76:	f7ff ffac 	bl	b5ed2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   b5f7a:	b140      	cbz	r0, b5f8e <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   b5f7c:	2301      	movs	r3, #1
   b5f7e:	4632      	mov	r2, r6
   b5f80:	4629      	mov	r1, r5
   b5f82:	4620      	mov	r0, r4
}
   b5f84:	b002      	add	sp, #8
   b5f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b5f8a:	f7ff bfd1 	b.w	b5f30 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5f8e:	b002      	add	sp, #8
   b5f90:	bd70      	pop	{r4, r5, r6, pc}

000b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   b5f92:	b510      	push	{r4, lr}
  _device = device;
   b5f94:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   b5f96:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   b5f98:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   b5f9c:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   b5fa0:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   b5fa2:	7202      	strb	r2, [r0, #8]
  _width = width;
   b5fa4:	7183      	strb	r3, [r0, #6]
}
   b5fa6:	bd10      	pop	{r4, pc}

000b5fa8 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   b5fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   b5faa:	8883      	ldrh	r3, [r0, #4]
   b5fac:	f88d 300c 	strb.w	r3, [sp, #12]
   b5fb0:	0a1b      	lsrs	r3, r3, #8
   b5fb2:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   b5fb6:	79c3      	ldrb	r3, [r0, #7]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	ab03      	add	r3, sp, #12
   b5fbc:	9300      	str	r3, [sp, #0]
   b5fbe:	6800      	ldr	r0, [r0, #0]
   b5fc0:	2301      	movs	r3, #1
   b5fc2:	f7ff ff86 	bl	b5ed2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   b5fc6:	b005      	add	sp, #20
   b5fc8:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fcc <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   b5fcc:	b4f0      	push	{r4, r5, r6, r7}
   b5fce:	460c      	mov	r4, r1
  if (numbytes == 0) {
   b5fd0:	b902      	cbnz	r2, b5fd4 <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   b5fd2:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   b5fd4:	2a04      	cmp	r2, #4
   b5fd6:	d813      	bhi.n	b6000 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   b5fd8:	f100 0509 	add.w	r5, r0, #9
   b5fdc:	1883      	adds	r3, r0, r2
   b5fde:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   b5fe0:	4283      	cmp	r3, r0
   b5fe2:	d009      	beq.n	b5ff8 <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   b5fe4:	7a07      	ldrb	r7, [r0, #8]
      _buffer[i] = value & 0xFF;
   b5fe6:	b2e6      	uxtb	r6, r4
    if (_bitorder == LSBFIRST) {
   b5fe8:	b927      	cbnz	r7, b5ff4 <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   b5fea:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   b5fec:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   b5fee:	3501      	adds	r5, #1
   b5ff0:	3b01      	subs	r3, #1
   b5ff2:	e7f5      	b.n	b5fe0 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   b5ff4:	721e      	strb	r6, [r3, #8]
   b5ff6:	e7f9      	b.n	b5fec <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   b5ff8:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b5ffa:	4618      	mov	r0, r3
   b5ffc:	f7ff bfd4 	b.w	b5fa8 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   b6000:	2000      	movs	r0, #0
   b6002:	bcf0      	pop	{r4, r5, r6, r7}
   b6004:	4770      	bx	lr

000b6006 <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b6006:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   b6008:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b600a:	460b      	mov	r3, r1
  _buffer[0] = _address;
   b600c:	8881      	ldrh	r1, [r0, #4]
   b600e:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   b6012:	2100      	movs	r1, #0
   b6014:	e9cd 2100 	strd	r2, r1, [sp]
   b6018:	2201      	movs	r2, #1
   b601a:	4621      	mov	r1, r4
   b601c:	6800      	ldr	r0, [r0, #0]
   b601e:	f7ff ffa1 	bl	b5f64 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   b6022:	b002      	add	sp, #8
   b6024:	bd10      	pop	{r4, pc}

000b6026 <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   b6026:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   b6028:	f100 0509 	add.w	r5, r0, #9
   b602c:	7982      	ldrb	r2, [r0, #6]
   b602e:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   b6030:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   b6032:	f7ff ffe8 	bl	b6006 <_ZN20Adafruit_I2CRegister4readEPhh>
   b6036:	b178      	cbz	r0, b6058 <_ZN20Adafruit_I2CRegister4readEv+0x32>
   b6038:	79a2      	ldrb	r2, [r4, #6]
   b603a:	4629      	mov	r1, r5
   b603c:	4422      	add	r2, r4
  uint32_t value = 0;
   b603e:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   b6040:	42a2      	cmp	r2, r4
   b6042:	d00b      	beq.n	b605c <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   b6044:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   b6046:	7a20      	ldrb	r0, [r4, #8]
   b6048:	b920      	cbnz	r0, b6054 <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   b604a:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   b604c:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   b604e:	3a01      	subs	r2, #1
   b6050:	3101      	adds	r1, #1
   b6052:	e7f5      	b.n	b6040 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   b6054:	7808      	ldrb	r0, [r1, #0]
   b6056:	e7f9      	b.n	b604c <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   b6058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b605c:	bd38      	pop	{r3, r4, r5, pc}

000b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   b605e:	b510      	push	{r4, lr}
  _register = reg;
   b6060:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b6062:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b6064:	7143      	strb	r3, [r0, #5]
}
   b6066:	bd10      	pop	{r4, pc}

000b6068 <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   b6068:	b510      	push	{r4, lr}
   b606a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b606c:	6800      	ldr	r0, [r0, #0]
   b606e:	f7ff ffda 	bl	b6026 <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   b6072:	7923      	ldrb	r3, [r4, #4]
   b6074:	1c5a      	adds	r2, r3, #1
   b6076:	2301      	movs	r3, #1
   b6078:	4093      	lsls	r3, r2
  val >>= _shift;
   b607a:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   b607c:	3b01      	subs	r3, #1
  val >>= _shift;
   b607e:	40d0      	lsrs	r0, r2
}
   b6080:	4018      	ands	r0, r3
   b6082:	bd10      	pop	{r4, pc}

000b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b6084:	b570      	push	{r4, r5, r6, lr}
   b6086:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b6088:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b608a:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b608c:	f7ff ffcb 	bl	b6026 <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   b6090:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b6092:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits+1)) - 1;
   b6094:	3301      	adds	r3, #1
   b6096:	2201      	movs	r2, #1
   b6098:	409a      	lsls	r2, r3
   b609a:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b609c:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;      // remove the current data at that spot
   b60a0:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b60a4:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   b60a6:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b60a8:	fa03 f101 	lsl.w	r1, r3, r1
  _register->write(val, _register->width());
   b60ac:	4329      	orrs	r1, r5
   b60ae:	7982      	ldrb	r2, [r0, #6]
   b60b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   b60b4:	f7ff bf8a 	b.w	b5fcc <_ZN20Adafruit_I2CRegister5writeEmh>

000b60b8 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   b60b8:	4770      	bx	lr

000b60ba <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   b60ba:	b508      	push	{r3, lr}
  return ALS_Data->read();
   b60bc:	6840      	ldr	r0, [r0, #4]
   b60be:	f7ff ffb2 	bl	b6026 <_ZN20Adafruit_I2CRegister4readEv>
}
   b60c2:	b280      	uxth	r0, r0
   b60c4:	bd08      	pop	{r3, pc}

000b60c6 <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   b60c6:	69c0      	ldr	r0, [r0, #28]
   b60c8:	f081 0101 	eor.w	r1, r1, #1
   b60cc:	f7ff bfda 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b60d0 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   b60d0:	6a00      	ldr	r0, [r0, #32]
   b60d2:	f7ff bfd7 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b60d6 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   b60d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b60d8:	f7ff bfd4 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b60dc <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   b60dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b60de:	f7ff bfd1 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b60e2 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   b60e2:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   b60e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b60e6:	f7ff ffbf 	bl	b6068 <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b60ea:	b2c0      	uxtb	r0, r0
   b60ec:	bd08      	pop	{r3, pc}

000b60ee <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   b60ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b60f0:	f7ff bfc8 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b60f4 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   b60f4:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   b60f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b60f8:	f7ff ffb6 	bl	b6068 <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b60fc:	b2c0      	uxtb	r0, r0
   b60fe:	bd08      	pop	{r3, pc}

000b6100 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   b6100:	b510      	push	{r4, lr}
   b6102:	ed2d 8b02 	vpush	{d8}
   b6106:	4604      	mov	r4, r0
   b6108:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   b610c:	f7ff fff2 	bl	b60f4 <_ZN17Adafruit_VEML77007getGainEv>
   b6110:	2802      	cmp	r0, #2
   b6112:	d018      	beq.n	b6146 <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   b6114:	2803      	cmp	r0, #3
   b6116:	d013      	beq.n	b6140 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   b6118:	2801      	cmp	r0, #1
   b611a:	d103      	bne.n	b6124 <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   b611c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   b6120:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   b6124:	4620      	mov	r0, r4
   b6126:	f7ff ffdc 	bl	b60e2 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   b612a:	3801      	subs	r0, #1
   b612c:	280b      	cmp	r0, #11
   b612e:	d814      	bhi.n	b615a <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   b6130:	e8df f000 	tbb	[pc, r0]
   b6134:	131e1b18 	.word	0x131e1b18
   b6138:	11131313 	.word	0x11131313
   b613c:	0c131313 	.word	0x0c131313
    value *= 4;
   b6140:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   b6144:	e7ec      	b.n	b6120 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   b6146:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b614a:	e7e9      	b.n	b6120 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   b614c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   b6150:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   b6154:	e001      	b.n	b615a <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   b6156:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   b615a:	eeb0 0a48 	vmov.f32	s0, s16
   b615e:	ecbd 8b02 	vpop	{d8}
   b6162:	bd10      	pop	{r4, pc}
    value /= 2.0;
   b6164:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b6168:	e7f2      	b.n	b6150 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   b616a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   b616e:	e7ef      	b.n	b6150 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   b6170:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   b6174:	e7ec      	b.n	b6150 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
	...

000b6178 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   b6178:	b510      	push	{r4, lr}
   b617a:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   b617c:	6840      	ldr	r0, [r0, #4]
   b617e:	f7ff ff52 	bl	b6026 <_ZN20Adafruit_I2CRegister4readEv>
   b6182:	ee07 0a90 	vmov	s15, r0
   b6186:	4620      	mov	r0, r4
   b6188:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b618c:	f7ff ffb8 	bl	b6100 <_ZN17Adafruit_VEML77009normalizeEf>
   b6190:	ee10 0a10 	vmov	r0, s0
   b6194:	f005 f86a 	bl	bb26c <__aeabi_f2d>
   b6198:	a305      	add	r3, pc, #20	; (adr r3, b61b0 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   b619a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b619e:	f005 f8bd 	bl	bb31c <__aeabi_dmul>
   b61a2:	f005 fbb3 	bl	bb90c <__aeabi_d2f>
}
   b61a6:	ee00 0a10 	vmov	s0, r0
   b61aa:	bd10      	pop	{r4, pc}
   b61ac:	f3af 8000 	nop.w
   b61b0:	487fcb92 	.word	0x487fcb92
   b61b4:	3fad7dbf 	.word	0x3fad7dbf

000b61b8 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   b61b8:	b510      	push	{r4, lr}
   b61ba:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   b61bc:	6880      	ldr	r0, [r0, #8]
   b61be:	f7ff ff32 	bl	b6026 <_ZN20Adafruit_I2CRegister4readEv>
   b61c2:	ee07 0a90 	vmov	s15, r0
   b61c6:	4620      	mov	r0, r4
   b61c8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b61cc:	f7ff ff98 	bl	b6100 <_ZN17Adafruit_VEML77009normalizeEf>
   b61d0:	ee10 0a10 	vmov	r0, s0
   b61d4:	f005 f84a 	bl	bb26c <__aeabi_f2d>
   b61d8:	a305      	add	r3, pc, #20	; (adr r3, b61f0 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   b61da:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61de:	f005 f89d 	bl	bb31c <__aeabi_dmul>
   b61e2:	f005 fb93 	bl	bb90c <__aeabi_d2f>
}
   b61e6:	ee00 0a10 	vmov	s0, r0
   b61ea:	bd10      	pop	{r4, pc}
   b61ec:	f3af 8000 	nop.w
   b61f0:	487fcb92 	.word	0x487fcb92
   b61f4:	3fad7dbf 	.word	0x3fad7dbf

000b61f8 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   b61f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b61fa:	f7ff bf43 	b.w	b6084 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b61fe <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   b61fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6200:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b6202:	200c      	movs	r0, #12
{
   b6204:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b6206:	f7fd ff46 	bl	b4096 <_Znwj>
   b620a:	4605      	mov	r5, r0
   b620c:	b118      	cbz	r0, b6216 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   b620e:	9a03      	ldr	r2, [sp, #12]
   b6210:	2110      	movs	r1, #16
   b6212:	f7ff fe39 	bl	b5e88 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b6216:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   b6218:	4628      	mov	r0, r5
   b621a:	f7ff fe4e 	bl	b5eba <_ZN18Adafruit_I2CDevice5beginEv>
   b621e:	4605      	mov	r5, r0
   b6220:	2800      	cmp	r0, #0
   b6222:	f000 80d2 	beq.w	b63ca <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   b6226:	2010      	movs	r0, #16
   b6228:	f7fd ff35 	bl	b4096 <_Znwj>
   b622c:	4606      	mov	r6, r0
   b622e:	b138      	cbz	r0, b6240 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   b6230:	2301      	movs	r3, #1
   b6232:	2200      	movs	r2, #0
   b6234:	e9cd 2300 	strd	r2, r3, [sp]
   b6238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b623a:	2302      	movs	r3, #2
   b623c:	f7ff fea9 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b6240:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   b6242:	2010      	movs	r0, #16
   b6244:	f7fd ff27 	bl	b4096 <_Znwj>
   b6248:	4606      	mov	r6, r0
   b624a:	b138      	cbz	r0, b625c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   b624c:	2300      	movs	r3, #0
   b624e:	2201      	movs	r2, #1
   b6250:	e9cd 3200 	strd	r3, r2, [sp]
   b6254:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6256:	2302      	movs	r3, #2
   b6258:	f7ff fe9b 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b625c:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   b625e:	2010      	movs	r0, #16
   b6260:	f7fd ff19 	bl	b4096 <_Znwj>
   b6264:	4606      	mov	r6, r0
   b6266:	b140      	cbz	r0, b627a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   b6268:	2300      	movs	r3, #0
   b626a:	2201      	movs	r2, #1
   b626c:	e9cd 3200 	strd	r3, r2, [sp]
   b6270:	2302      	movs	r3, #2
   b6272:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6274:	461a      	mov	r2, r3
   b6276:	f7ff fe8c 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b627a:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   b627c:	2010      	movs	r0, #16
   b627e:	f7fd ff0a 	bl	b4096 <_Znwj>
   b6282:	4606      	mov	r6, r0
   b6284:	b148      	cbz	r0, b629a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   b6286:	2300      	movs	r3, #0
   b6288:	f04f 0e01 	mov.w	lr, #1
   b628c:	e9cd 3e00 	strd	r3, lr, [sp]
   b6290:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6292:	2302      	movs	r3, #2
   b6294:	2203      	movs	r2, #3
   b6296:	f7ff fe7c 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b629a:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   b629c:	2010      	movs	r0, #16
   b629e:	f7fd fefa 	bl	b4096 <_Znwj>
   b62a2:	4606      	mov	r6, r0
   b62a4:	b148      	cbz	r0, b62ba <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   b62a6:	2300      	movs	r3, #0
   b62a8:	f04f 0c01 	mov.w	ip, #1
   b62ac:	e9cd 3c00 	strd	r3, ip, [sp]
   b62b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b62b2:	2302      	movs	r3, #2
   b62b4:	2204      	movs	r2, #4
   b62b6:	f7ff fe6c 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b62ba:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   b62bc:	2010      	movs	r0, #16
   b62be:	f7fd feea 	bl	b4096 <_Znwj>
   b62c2:	4606      	mov	r6, r0
   b62c4:	b140      	cbz	r0, b62d8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   b62c6:	2300      	movs	r3, #0
   b62c8:	2101      	movs	r1, #1
   b62ca:	e9cd 3100 	strd	r3, r1, [sp]
   b62ce:	2205      	movs	r2, #5
   b62d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b62d2:	2302      	movs	r3, #2
   b62d4:	f7ff fe5d 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b62d8:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   b62da:	2010      	movs	r0, #16
   b62dc:	f7fd fedb 	bl	b4096 <_Znwj>
   b62e0:	4606      	mov	r6, r0
   b62e2:	b140      	cbz	r0, b62f6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   b62e4:	2300      	movs	r3, #0
   b62e6:	2201      	movs	r2, #1
   b62e8:	e9cd 3200 	strd	r3, r2, [sp]
   b62ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b62ee:	2302      	movs	r3, #2
   b62f0:	2206      	movs	r2, #6
   b62f2:	f7ff fe4e 	bl	b5f92 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b62f6:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   b62f8:	2008      	movs	r0, #8
   b62fa:	f7fd fecc 	bl	b4096 <_Znwj>
   b62fe:	4606      	mov	r6, r0
   b6300:	b120      	cbz	r0, b630c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   b6302:	6821      	ldr	r1, [r4, #0]
   b6304:	2300      	movs	r3, #0
   b6306:	2201      	movs	r2, #1
   b6308:	f7ff fea9 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b630c:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   b630e:	2008      	movs	r0, #8
   b6310:	f7fd fec1 	bl	b4096 <_Znwj>
   b6314:	4606      	mov	r6, r0
   b6316:	b120      	cbz	r0, b6322 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   b6318:	2301      	movs	r3, #1
   b631a:	6821      	ldr	r1, [r4, #0]
   b631c:	461a      	mov	r2, r3
   b631e:	f7ff fe9e 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6322:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   b6324:	2008      	movs	r0, #8
   b6326:	f7fd feb6 	bl	b4096 <_Znwj>
   b632a:	4606      	mov	r6, r0
   b632c:	b120      	cbz	r0, b6338 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   b632e:	6821      	ldr	r1, [r4, #0]
   b6330:	2304      	movs	r3, #4
   b6332:	2202      	movs	r2, #2
   b6334:	f7ff fe93 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6338:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   b633a:	2008      	movs	r0, #8
   b633c:	f7fd feab 	bl	b4096 <_Znwj>
   b6340:	4606      	mov	r6, r0
   b6342:	b120      	cbz	r0, b634e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   b6344:	6821      	ldr	r1, [r4, #0]
   b6346:	2306      	movs	r3, #6
   b6348:	2204      	movs	r2, #4
   b634a:	f7ff fe88 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b634e:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   b6350:	2008      	movs	r0, #8
   b6352:	f7fd fea0 	bl	b4096 <_Znwj>
   b6356:	4606      	mov	r6, r0
   b6358:	b120      	cbz	r0, b6364 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   b635a:	6821      	ldr	r1, [r4, #0]
   b635c:	230b      	movs	r3, #11
   b635e:	2202      	movs	r2, #2
   b6360:	f7ff fe7d 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6364:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   b6366:	2008      	movs	r0, #8
   b6368:	f7fd fe95 	bl	b4096 <_Znwj>
   b636c:	4606      	mov	r6, r0
   b636e:	b120      	cbz	r0, b637a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   b6370:	6961      	ldr	r1, [r4, #20]
   b6372:	2300      	movs	r3, #0
   b6374:	2201      	movs	r2, #1
   b6376:	f7ff fe72 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b637a:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b637c:	2008      	movs	r0, #8
   b637e:	f7fd fe8a 	bl	b4096 <_Znwj>
   b6382:	4606      	mov	r6, r0
   b6384:	b120      	cbz	r0, b6390 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   b6386:	6961      	ldr	r1, [r4, #20]
   b6388:	2301      	movs	r3, #1
   b638a:	2202      	movs	r2, #2
   b638c:	f7ff fe67 	bl	b605e <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   b6390:	2100      	movs	r1, #0
   b6392:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b6394:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   b6396:	f7ff fe96 	bl	b60c6 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   b639a:	2100      	movs	r1, #0
   b639c:	4620      	mov	r0, r4
   b639e:	f7ff fe97 	bl	b60d0 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   b63a2:	2100      	movs	r1, #0
   b63a4:	4620      	mov	r0, r4
   b63a6:	f7ff fe96 	bl	b60d6 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   b63aa:	2100      	movs	r1, #0
   b63ac:	4620      	mov	r0, r4
   b63ae:	f7ff fe9e 	bl	b60ee <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   b63b2:	2100      	movs	r1, #0
   b63b4:	4620      	mov	r0, r4
   b63b6:	f7ff fe91 	bl	b60dc <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   b63ba:	2100      	movs	r1, #0
   b63bc:	4620      	mov	r0, r4
   b63be:	f7ff ff1b 	bl	b61f8 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   b63c2:	2101      	movs	r1, #1
   b63c4:	4620      	mov	r0, r4
   b63c6:	f7ff fe7e 	bl	b60c6 <_ZN17Adafruit_VEML77006enableEb>
}
   b63ca:	4628      	mov	r0, r5
   b63cc:	b004      	add	sp, #16
   b63ce:	bd70      	pop	{r4, r5, r6, pc}

000b63d0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b63d0:	4770      	bx	lr

000b63d2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b63d2:	b510      	push	{r4, lr}
}
   b63d4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b63d6:	4604      	mov	r4, r0
}
   b63d8:	f7fd fe61 	bl	b409e <_ZdlPvj>
   b63dc:	4620      	mov	r0, r4
   b63de:	bd10      	pop	{r4, pc}

000b63e0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b63e0:	6803      	ldr	r3, [r0, #0]
   b63e2:	b2c9      	uxtb	r1, r1
   b63e4:	689b      	ldr	r3, [r3, #8]
   b63e6:	4718      	bx	r3

000b63e8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b63e8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b63ea:	4d03      	ldr	r5, [pc, #12]	; (b63f8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b63ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b63f0:	e9c0 5100 	strd	r5, r1, [r0]
}
   b63f4:	bd30      	pop	{r4, r5, pc}
   b63f6:	bf00      	nop
   b63f8:	000bc664 	.word	0x000bc664

000b63fc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b63fc:	6840      	ldr	r0, [r0, #4]
   b63fe:	f003 bc8b 	b.w	b9d18 <_ZN7TwoWire5beginEv>

000b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6402:	b510      	push	{r4, lr}
   b6404:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6406:	6800      	ldr	r0, [r0, #0]
   b6408:	f003 fce7 	bl	b9dda <_ZN7TwoWire6unlockEv>
   b640c:	4620      	mov	r0, r4
   b640e:	bd10      	pop	{r4, pc}

000b6410 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b6410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6414:	b08a      	sub	sp, #40	; 0x28
   b6416:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b6418:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b641a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b641c:	f003 fcd4 	bl	b9dc8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b6420:	221e      	movs	r2, #30
   b6422:	2100      	movs	r1, #0
   b6424:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b6426:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b6428:	f005 fb36 	bl	bba98 <memset>
		size_t framAddr = 0;
   b642c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b642e:	b1ef      	cbz	r7, b646c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b6430:	6823      	ldr	r3, [r4, #0]
   b6432:	2f1e      	cmp	r7, #30
   b6434:	46b8      	mov	r8, r7
   b6436:	bf28      	it	cs
   b6438:	f04f 081e 	movcs.w	r8, #30
   b643c:	68dd      	ldr	r5, [r3, #12]
   b643e:	aa02      	add	r2, sp, #8
   b6440:	4643      	mov	r3, r8
   b6442:	4631      	mov	r1, r6
   b6444:	4620      	mov	r0, r4
   b6446:	47a8      	blx	r5
			if (!result) {
   b6448:	4605      	mov	r5, r0
   b644a:	b958      	cbnz	r0, b6464 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b644c:	480a      	ldr	r0, [pc, #40]	; (b6478 <_ZN6MB85RC5eraseEv+0x68>)
   b644e:	490b      	ldr	r1, [pc, #44]	; (b647c <_ZN6MB85RC5eraseEv+0x6c>)
   b6450:	4632      	mov	r2, r6
   b6452:	f7fe f921 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b6456:	a801      	add	r0, sp, #4
   b6458:	f7ff ffd3 	bl	b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b645c:	4628      	mov	r0, r5
   b645e:	b00a      	add	sp, #40	; 0x28
   b6460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b6464:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b6468:	4446      	add	r6, r8
		while(totalLen > 0) {
   b646a:	e7e0      	b.n	b642e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b646c:	a801      	add	r0, sp, #4
   b646e:	f7ff ffc8 	bl	b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b6472:	2501      	movs	r5, #1
   b6474:	e7f2      	b.n	b645c <_ZN6MB85RC5eraseEv+0x4c>
   b6476:	bf00      	nop
   b6478:	2003e670 	.word	0x2003e670
   b647c:	000bc630 	.word	0x000bc630

000b6480 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6484:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6486:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6488:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b648a:	460d      	mov	r5, r1
   b648c:	4616      	mov	r6, r2
   b648e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6490:	f003 fc9a 	bl	b9dc8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6494:	b1a7      	cbz	r7, b64c0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6496:	68e1      	ldr	r1, [r4, #12]
   b6498:	6860      	ldr	r0, [r4, #4]
   b649a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b649e:	f003 fc71 	bl	b9d84 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b64a2:	0a29      	lsrs	r1, r5, #8
   b64a4:	6860      	ldr	r0, [r4, #4]
   b64a6:	f7ff ff9b 	bl	b63e0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b64aa:	4629      	mov	r1, r5
   b64ac:	6860      	ldr	r0, [r4, #4]
   b64ae:	f7ff ff97 	bl	b63e0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b64b2:	6860      	ldr	r0, [r4, #4]
   b64b4:	2100      	movs	r1, #0
   b64b6:	f003 fc80 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b64ba:	b148      	cbz	r0, b64d0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b64bc:	2400      	movs	r4, #0
   b64be:	e000      	b.n	b64c2 <_ZN6MB85RC8readDataEjPhj+0x42>
   b64c0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b64c2:	a801      	add	r0, sp, #4
   b64c4:	f7ff ff9d 	bl	b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b64c8:	4620      	mov	r0, r4
   b64ca:	b003      	add	sp, #12
   b64cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b64d0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b64d2:	7b21      	ldrb	r1, [r4, #12]
   b64d4:	6860      	ldr	r0, [r4, #4]
   b64d6:	46b8      	mov	r8, r7
   b64d8:	bf28      	it	cs
   b64da:	f04f 0820 	movcs.w	r8, #32
   b64de:	2301      	movs	r3, #1
   b64e0:	4642      	mov	r2, r8
   b64e2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b64e6:	f003 fc34 	bl	b9d52 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b64ea:	f004 fcc5 	bl	bae78 <_Z19__fetch_global_Wirev>
   b64ee:	6803      	ldr	r3, [r0, #0]
   b64f0:	691b      	ldr	r3, [r3, #16]
   b64f2:	4798      	blx	r3
   b64f4:	4540      	cmp	r0, r8
   b64f6:	dbe1      	blt.n	b64bc <_ZN6MB85RC8readDataEjPhj+0x3c>
   b64f8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b64fc:	f004 fcbc 	bl	bae78 <_Z19__fetch_global_Wirev>
   b6500:	6803      	ldr	r3, [r0, #0]
   b6502:	695b      	ldr	r3, [r3, #20]
   b6504:	4798      	blx	r3
   b6506:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b650a:	454e      	cmp	r6, r9
   b650c:	d1f6      	bne.n	b64fc <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b650e:	4445      	add	r5, r8
				dataLen--;
   b6510:	eba7 0708 	sub.w	r7, r7, r8
   b6514:	e7be      	b.n	b6494 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6516 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b651a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b651c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b651e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6520:	460e      	mov	r6, r1
   b6522:	4690      	mov	r8, r2
   b6524:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6526:	f003 fc4f 	bl	b9dc8 <_ZN7TwoWire4lockEv>
   b652a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b652e:	f1b9 0f00 	cmp.w	r9, #0
   b6532:	d02a      	beq.n	b658a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6534:	b34d      	cbz	r5, b658a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6536:	68e1      	ldr	r1, [r4, #12]
   b6538:	6860      	ldr	r0, [r4, #4]
   b653a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b653e:	f003 fc21 	bl	b9d84 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6542:	0a31      	lsrs	r1, r6, #8
   b6544:	6860      	ldr	r0, [r4, #4]
   b6546:	f7ff ff4b 	bl	b63e0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b654a:	6860      	ldr	r0, [r4, #4]
   b654c:	4631      	mov	r1, r6
   b654e:	f7ff ff47 	bl	b63e0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6552:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6556:	4647      	mov	r7, r8
   b6558:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b655c:	6860      	ldr	r0, [r4, #4]
   b655e:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6562:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6564:	3d01      	subs	r5, #1
				wire.write(*data);
   b6566:	689b      	ldr	r3, [r3, #8]
   b6568:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b656a:	4555      	cmp	r5, sl
   b656c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6570:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6572:	d001      	beq.n	b6578 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6574:	2d00      	cmp	r5, #0
   b6576:	d1f1      	bne.n	b655c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6578:	6860      	ldr	r0, [r4, #4]
   b657a:	2101      	movs	r1, #1
   b657c:	f003 fc1d 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6580:	2800      	cmp	r0, #0
   b6582:	d0d7      	beq.n	b6534 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6584:	f04f 0900 	mov.w	r9, #0
   b6588:	e7d1      	b.n	b652e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b658a:	a801      	add	r0, sp, #4
   b658c:	f7ff ff39 	bl	b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6590:	4648      	mov	r0, r9
   b6592:	b003      	add	sp, #12
   b6594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6598 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b659c:	b08b      	sub	sp, #44	; 0x2c
   b659e:	460e      	mov	r6, r1
   b65a0:	4615      	mov	r5, r2
   b65a2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b65a4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65a6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b65a8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b65aa:	f003 fc0d 	bl	b9dc8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b65ae:	42ae      	cmp	r6, r5
   b65b0:	d229      	bcs.n	b6606 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b65b2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b65b4:	4425      	add	r5, r4
			while(numBytes > 0) {
   b65b6:	b18c      	cbz	r4, b65dc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b65b8:	2c1e      	cmp	r4, #30
   b65ba:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b65bc:	f8d8 3000 	ldr.w	r3, [r8]
   b65c0:	bf28      	it	cs
   b65c2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b65c4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b65c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b65ca:	aa02      	add	r2, sp, #8
   b65cc:	463b      	mov	r3, r7
   b65ce:	4631      	mov	r1, r6
   b65d0:	4640      	mov	r0, r8
				framAddrTo -= count;
   b65d2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b65d4:	47c8      	blx	r9
				if (!result) {
   b65d6:	b948      	cbnz	r0, b65ec <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b65d8:	2400      	movs	r4, #0
   b65da:	e000      	b.n	b65de <_ZN6MB85RC8moveDataEjjj+0x46>
   b65dc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b65de:	a801      	add	r0, sp, #4
   b65e0:	f7ff ff0f 	bl	b6402 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b65e4:	4620      	mov	r0, r4
   b65e6:	b00b      	add	sp, #44	; 0x2c
   b65e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b65ec:	f8d8 3000 	ldr.w	r3, [r8]
   b65f0:	aa02      	add	r2, sp, #8
   b65f2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b65f6:	4629      	mov	r1, r5
   b65f8:	463b      	mov	r3, r7
   b65fa:	4640      	mov	r0, r8
   b65fc:	47c8      	blx	r9
				if (!result) {
   b65fe:	2800      	cmp	r0, #0
   b6600:	d0ea      	beq.n	b65d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6602:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6604:	e7d7      	b.n	b65b6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6606:	d9e9      	bls.n	b65dc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6608:	2c00      	cmp	r4, #0
   b660a:	d0e7      	beq.n	b65dc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b660c:	f8d8 3000 	ldr.w	r3, [r8]
   b6610:	2c1e      	cmp	r4, #30
   b6612:	4627      	mov	r7, r4
   b6614:	bf28      	it	cs
   b6616:	271e      	movcs	r7, #30
   b6618:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b661c:	aa02      	add	r2, sp, #8
   b661e:	463b      	mov	r3, r7
   b6620:	4631      	mov	r1, r6
   b6622:	4640      	mov	r0, r8
   b6624:	47c8      	blx	r9
				if (!result) {
   b6626:	2800      	cmp	r0, #0
   b6628:	d0d6      	beq.n	b65d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b662a:	f8d8 3000 	ldr.w	r3, [r8]
   b662e:	aa02      	add	r2, sp, #8
   b6630:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6634:	4629      	mov	r1, r5
   b6636:	463b      	mov	r3, r7
   b6638:	4640      	mov	r0, r8
   b663a:	47c8      	blx	r9
				if (!result) {
   b663c:	2800      	cmp	r0, #0
   b663e:	d0cb      	beq.n	b65d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6640:	443e      	add	r6, r7
				framAddrTo += count;
   b6642:	443d      	add	r5, r7
				numBytes -= count;
   b6644:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6646:	e7df      	b.n	b6608 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6648 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b6648:	4b01      	ldr	r3, [pc, #4]	; (b6650 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b664a:	4a02      	ldr	r2, [pc, #8]	; (b6654 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b664c:	601a      	str	r2, [r3, #0]
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b664e:	4770      	bx	lr
   b6650:	2003e614 	.word	0x2003e614
   b6654:	000bc678 	.word	0x000bc678

000b6658 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6658:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b665a:	2301      	movs	r3, #1
   b665c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b665e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6660:	4604      	mov	r4, r0
        if (th->func) {
   b6662:	b143      	cbz	r3, b6676 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6664:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6666:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6668:	2301      	movs	r3, #1
   b666a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b666c:	2000      	movs	r0, #0
    }
   b666e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6672:	f002 b9f7 	b.w	b8a64 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6676:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6678:	2800      	cmp	r0, #0
   b667a:	d0f5      	beq.n	b6668 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b667c:	6883      	ldr	r3, [r0, #8]
   b667e:	b90b      	cbnz	r3, b6684 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6680:	f004 fc8c 	bl	baf9c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6684:	68c3      	ldr	r3, [r0, #12]
   b6686:	e7ee      	b.n	b6666 <_ZN6Thread3runEPv+0xe>

000b6688 <_GLOBAL__sub_I_pubqLogger>:
   b6688:	4b01      	ldr	r3, [pc, #4]	; (b6690 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b668a:	4a02      	ldr	r2, [pc, #8]	; (b6694 <_GLOBAL__sub_I_pubqLogger+0xc>)
   b668c:	601a      	str	r2, [r3, #0]
   b668e:	4770      	bx	lr
   b6690:	2003e618 	.word	0x2003e618
   b6694:	000bc680 	.word	0x000bc680

000b6698 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6698:	4770      	bx	lr

000b669a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b669a:	b538      	push	{r3, r4, r5, lr}
   b669c:	4605      	mov	r5, r0
   b669e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b66a0:	f004 fbea 	bl	bae78 <_Z19__fetch_global_Wirev>
   b66a4:	7829      	ldrb	r1, [r5, #0]
   b66a6:	f003 fb69 	bl	b9d7c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b66aa:	f004 fbe5 	bl	bae78 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b66ae:	6803      	ldr	r3, [r0, #0]
   b66b0:	0a21      	lsrs	r1, r4, #8
   b66b2:	689b      	ldr	r3, [r3, #8]
   b66b4:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b66b6:	f004 fbdf 	bl	bae78 <_Z19__fetch_global_Wirev>
   b66ba:	6803      	ldr	r3, [r0, #0]
   b66bc:	b2e1      	uxtb	r1, r4
   b66be:	689b      	ldr	r3, [r3, #8]
   b66c0:	4798      	blx	r3
  Wire.endTransmission();  
   b66c2:	f004 fbd9 	bl	bae78 <_Z19__fetch_global_Wirev>
}
   b66c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b66ca:	f003 bb7a 	b.w	b9dc2 <_ZN7TwoWire15endTransmissionEv>

000b66ce <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b66ce:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b66d0:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b66d4:	f7ff ffe1 	bl	b669a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b66d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b66dc:	200a      	movs	r0, #10
   b66de:	f002 bdb7 	b.w	b9250 <delay>

000b66e2 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b66e2:	b538      	push	{r3, r4, r5, lr}
   b66e4:	4604      	mov	r4, r0
   b66e6:	460d      	mov	r5, r1
  Wire.begin();
   b66e8:	f004 fbc6 	bl	bae78 <_Z19__fetch_global_Wirev>
   b66ec:	f003 fb14 	bl	b9d18 <_ZN7TwoWire5beginEv>
  reset();
   b66f0:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b66f2:	7025      	strb	r5, [r4, #0]
  reset();
   b66f4:	f7ff ffeb 	bl	b66ce <_ZN14Adafruit_SHT315resetEv>
}
   b66f8:	2001      	movs	r0, #1
   b66fa:	bd38      	pop	{r3, r4, r5, pc}

000b66fc <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b66fc:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b66fe:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6700:	4291      	cmp	r1, r2
   b6702:	d00e      	beq.n	b6722 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b6704:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6708:	4058      	eors	r0, r3
   b670a:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b670c:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6710:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b6714:	bf18      	it	ne
   b6716:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b671a:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b671c:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b671e:	d1f5      	bne.n	b670c <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6720:	e7ee      	b.n	b6700 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b6722:	4770      	bx	lr
   b6724:	0000      	movs	r0, r0
	...

000b6728 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b6728:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b672a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b672e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b6730:	f7ff ffb3 	bl	b669a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b6734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6738:	f002 fd8a 	bl	b9250 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b673c:	f004 fb9c 	bl	bae78 <_Z19__fetch_global_Wirev>
   b6740:	7829      	ldrb	r1, [r5, #0]
   b6742:	2206      	movs	r2, #6
   b6744:	f003 fb17 	bl	b9d76 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b6748:	f004 fb96 	bl	bae78 <_Z19__fetch_global_Wirev>
   b674c:	6803      	ldr	r3, [r0, #0]
   b674e:	691b      	ldr	r3, [r3, #16]
   b6750:	4798      	blx	r3
   b6752:	2806      	cmp	r0, #6
   b6754:	4604      	mov	r4, r0
   b6756:	d002      	beq.n	b675e <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b6758:	2000      	movs	r0, #0
}
   b675a:	b002      	add	sp, #8
   b675c:	bd70      	pop	{r4, r5, r6, pc}
   b675e:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b6760:	f004 fb8a 	bl	bae78 <_Z19__fetch_global_Wirev>
   b6764:	6803      	ldr	r3, [r0, #0]
   b6766:	695b      	ldr	r3, [r3, #20]
   b6768:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b676a:	3c01      	subs	r4, #1
   b676c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b6770:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b6774:	4669      	mov	r1, sp
   b6776:	d1f3      	bne.n	b6760 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b6778:	2202      	movs	r2, #2
   b677a:	4628      	mov	r0, r5
   b677c:	f7ff ffbe 	bl	b66fc <_ZN14Adafruit_SHT314crc8EPKhi>
   b6780:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b6784:	4284      	cmp	r4, r0
   b6786:	d1e7      	bne.n	b6758 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6788:	2202      	movs	r2, #2
   b678a:	f10d 0103 	add.w	r1, sp, #3
   b678e:	4628      	mov	r0, r5
   b6790:	f7ff ffb4 	bl	b66fc <_ZN14Adafruit_SHT314crc8EPKhi>
   b6794:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6798:	4284      	cmp	r4, r0
   b679a:	d1dd      	bne.n	b6758 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b679c:	f8bd 0000 	ldrh.w	r0, [sp]
   b67a0:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b67a4:	ba40      	rev16	r0, r0
   b67a6:	b280      	uxth	r0, r0
   b67a8:	f004 fd3e 	bl	bb228 <__aeabi_ui2d>
  stemp *= 175;
   b67ac:	a316      	add	r3, pc, #88	; (adr r3, b6808 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b67ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67b2:	f004 fdb3 	bl	bb31c <__aeabi_dmul>
  stemp /= 0xffff;
   b67b6:	a310      	add	r3, pc, #64	; (adr r3, b67f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b67b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67bc:	f004 fed8 	bl	bb570 <__aeabi_ddiv>
  stemp = -45 + stemp;
   b67c0:	4b0f      	ldr	r3, [pc, #60]	; (b6800 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b67c2:	2200      	movs	r2, #0
   b67c4:	f004 fbf2 	bl	bafac <__aeabi_dsub>
  temp = stemp;
   b67c8:	f005 f8a0 	bl	bb90c <__aeabi_d2f>
   b67cc:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b67ce:	ba60      	rev16	r0, r4
   b67d0:	b280      	uxth	r0, r0
   b67d2:	f004 fd29 	bl	bb228 <__aeabi_ui2d>
  shum *= 100;
   b67d6:	4b0b      	ldr	r3, [pc, #44]	; (b6804 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b67d8:	2200      	movs	r2, #0
   b67da:	f004 fd9f 	bl	bb31c <__aeabi_dmul>
  shum /= 0xFFFF;
   b67de:	a306      	add	r3, pc, #24	; (adr r3, b67f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b67e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67e4:	f004 fec4 	bl	bb570 <__aeabi_ddiv>
  humidity = shum;
   b67e8:	f005 f890 	bl	bb90c <__aeabi_d2f>
   b67ec:	6068      	str	r0, [r5, #4]
  return true;
   b67ee:	2001      	movs	r0, #1
   b67f0:	e7b3      	b.n	b675a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b67f2:	bf00      	nop
   b67f4:	f3af 8000 	nop.w
   b67f8:	00000000 	.word	0x00000000
   b67fc:	40efffe0 	.word	0x40efffe0
   b6800:	40468000 	.word	0x40468000
   b6804:	40590000 	.word	0x40590000
   b6808:	00000000 	.word	0x00000000
   b680c:	4065e000 	.word	0x4065e000

000b6810 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6810:	b510      	push	{r4, lr}
   b6812:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6814:	f7ff ff88 	bl	b6728 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6818:	b110      	cbz	r0, b6820 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b681a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b681e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6820:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6828 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b6824:	e7fb      	b.n	b681e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b6826:	bf00      	nop
   b6828:	7fc00000 	.word	0x7fc00000

000b682c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b682c:	b510      	push	{r4, lr}
   b682e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6830:	f7ff ff7a 	bl	b6728 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6834:	b110      	cbz	r0, b683c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b6836:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b683a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b683c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6844 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b6840:	e7fb      	b.n	b683a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b6842:	bf00      	nop
   b6844:	7fc00000 	.word	0x7fc00000

000b6848 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6848:	2a01      	cmp	r2, #1
   b684a:	d102      	bne.n	b6852 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b684c:	6001      	str	r1, [r0, #0]
      }
   b684e:	2000      	movs	r0, #0
   b6850:	4770      	bx	lr
	  switch (__op)
   b6852:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6854:	bf04      	itt	eq
   b6856:	680b      	ldreq	r3, [r1, #0]
   b6858:	6003      	streq	r3, [r0, #0]
	      break;
   b685a:	e7f8      	b.n	b684e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b685c:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b685e:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6860:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b6862:	b135      	cbz	r5, b6872 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b6864:	4628      	mov	r0, r5
   b6866:	f7fd fe29 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b686a:	2110      	movs	r1, #16
   b686c:	4628      	mov	r0, r5
   b686e:	f7fd fc16 	bl	b409e <_ZdlPvj>
   b6872:	4620      	mov	r0, r4
   b6874:	2114      	movs	r1, #20
      }
   b6876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b687a:	f7fd bc10 	b.w	b409e <_ZdlPvj>

000b687e <_ZN6Thread7disposeEv>:
    void dispose()
   b687e:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6880:	6803      	ldr	r3, [r0, #0]
   b6882:	4604      	mov	r4, r0
        if (!isValid())
   b6884:	b1ab      	cbz	r3, b68b2 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b6886:	6858      	ldr	r0, [r3, #4]
   b6888:	f002 f874 	bl	b8974 <os_thread_is_current>
   b688c:	b988      	cbnz	r0, b68b2 <_ZN6Thread7disposeEv+0x34>
   b688e:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b6890:	7c5a      	ldrb	r2, [r3, #17]
   b6892:	b912      	cbnz	r2, b689a <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b6894:	6858      	ldr	r0, [r3, #4]
   b6896:	f002 f87d 	bl	b8994 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b689a:	6823      	ldr	r3, [r4, #0]
   b689c:	6858      	ldr	r0, [r3, #4]
   b689e:	f002 f881 	bl	b89a4 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b68a2:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b68a4:	2300      	movs	r3, #0
   b68a6:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b68a8:	b118      	cbz	r0, b68b2 <_ZN6Thread7disposeEv+0x34>
    }
   b68aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b68ae:	f7ff bfd5 	b.w	b685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b68b2:	bd10      	pop	{r4, pc}

000b68b4 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b68b4:	4a05      	ldr	r2, [pc, #20]	; (b68cc <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b68b6:	6002      	str	r2, [r0, #0]
   b68b8:	2200      	movs	r2, #0
   b68ba:	6042      	str	r2, [r0, #4]
   b68bc:	7302      	strb	r2, [r0, #12]
   b68be:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b68c2:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b68c6:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b68ca:	4770      	bx	lr
   b68cc:	000bc6a8 	.word	0x000bc6a8

000b68d0 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b68d0:	b510      	push	{r4, lr}
    if (!_instance) {
   b68d2:	4c07      	ldr	r4, [pc, #28]	; (b68f0 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b68d4:	6823      	ldr	r3, [r4, #0]
   b68d6:	b943      	cbnz	r3, b68ea <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b68d8:	f240 4064 	movw	r0, #1124	; 0x464
   b68dc:	f7fd fbdb 	bl	b4096 <_Znwj>
   b68e0:	4603      	mov	r3, r0
   b68e2:	b108      	cbz	r0, b68e8 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b68e4:	f7ff ffe6 	bl	b68b4 <_ZN19BackgroundPublishRKC1Ev>
   b68e8:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b68ea:	6820      	ldr	r0, [r4, #0]
   b68ec:	bd10      	pop	{r4, pc}
   b68ee:	bf00      	nop
   b68f0:	2003e61c 	.word	0x2003e61c

000b68f4 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b68f4:	b538      	push	{r3, r4, r5, lr}
   b68f6:	4604      	mov	r4, r0
    if(thread)
   b68f8:	6840      	ldr	r0, [r0, #4]
   b68fa:	b190      	cbz	r0, b6922 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b68fc:	2302      	movs	r3, #2
   b68fe:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6900:	f7ff ffbd 	bl	b687e <_ZN6Thread7disposeEv>
        delete thread;
   b6904:	6865      	ldr	r5, [r4, #4]
   b6906:	b155      	cbz	r5, b691e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b6908:	4628      	mov	r0, r5
   b690a:	f7ff ffb8 	bl	b687e <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b690e:	6828      	ldr	r0, [r5, #0]
   b6910:	b108      	cbz	r0, b6916 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b6912:	f7ff ffa3 	bl	b685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6916:	2104      	movs	r1, #4
   b6918:	4628      	mov	r0, r5
   b691a:	f7fd fbc0 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b691e:	2300      	movs	r3, #0
   b6920:	6063      	str	r3, [r4, #4]
    }
}
   b6922:	bd38      	pop	{r3, r4, r5, pc}

000b6924 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6924:	b510      	push	{r4, lr}
   b6926:	4b05      	ldr	r3, [pc, #20]	; (b693c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b6928:	6003      	str	r3, [r0, #0]
   b692a:	4604      	mov	r4, r0
    stop();
   b692c:	f7ff ffe2 	bl	b68f4 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6930:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6934:	f7fd fdc2 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
}
   b6938:	4620      	mov	r0, r4
   b693a:	bd10      	pop	{r4, pc}
   b693c:	000bc6a8 	.word	0x000bc6a8

000b6940 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6940:	b510      	push	{r4, lr}
   b6942:	4604      	mov	r4, r0
}
   b6944:	f7ff ffee 	bl	b6924 <_ZN19BackgroundPublishRKD1Ev>
   b6948:	4620      	mov	r0, r4
   b694a:	f240 4164 	movw	r1, #1124	; 0x464
   b694e:	f7fd fba6 	bl	b409e <_ZdlPvj>
   b6952:	4620      	mov	r0, r4
   b6954:	bd10      	pop	{r4, pc}

000b6956 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b6956:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6958:	4604      	mov	r4, r0
   b695a:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b695c:	f100 060d 	add.w	r6, r0, #13
   b6960:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6964:	7b23      	ldrb	r3, [r4, #12]
   b6966:	b91b      	cbnz	r3, b6970 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b6968:	2001      	movs	r0, #1
   b696a:	f002 fc71 	bl	b9250 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b696e:	e7f9      	b.n	b6964 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b6970:	7b23      	ldrb	r3, [r4, #12]
   b6972:	2b02      	cmp	r3, #2
   b6974:	d064      	beq.n	b6a40 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b6976:	68a0      	ldr	r0, [r4, #8]
   b6978:	f002 f84c 	bl	b8a14 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b697c:	68a0      	ldr	r0, [r4, #8]
   b697e:	f002 f851 	bl	b8a24 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6982:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6986:	f88d 3000 	strb.w	r3, [sp]
   b698a:	463a      	mov	r2, r7
   b698c:	233c      	movs	r3, #60	; 0x3c
   b698e:	4631      	mov	r1, r6
   b6990:	a806      	add	r0, sp, #24
   b6992:	f002 ff1b 	bl	b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6996:	9d06      	ldr	r5, [sp, #24]
   b6998:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b699a:	b933      	cbnz	r3, b69aa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b699c:	7b23      	ldrb	r3, [r4, #12]
   b699e:	2b02      	cmp	r3, #2
   b69a0:	d003      	beq.n	b69aa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b69a2:	2001      	movs	r0, #1
   b69a4:	f002 fc54 	bl	b9250 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b69a8:	e7f5      	b.n	b6996 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b69aa:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b69ae:	b31b      	cbz	r3, b69f8 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b69b0:	2000      	movs	r0, #0
   b69b2:	f002 faa9 	bl	b8f08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b69b6:	b120      	cbz	r0, b69c2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b69b8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b69ba:	b913      	cbnz	r3, b69c2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b69bc:	f002 fafc 	bl	b8fb8 <spark_process>
    }
   b69c0:	e7fa      	b.n	b69b8 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b69c2:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b69c4:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b69c8:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b69ca:	1e59      	subs	r1, r3, #1
   b69cc:	424b      	negs	r3, r1
   b69ce:	414b      	adcs	r3, r1
   b69d0:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b69d4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b69d8:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b69dc:	b90b      	cbnz	r3, b69e2 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b69de:	f004 fadd 	bl	baf9c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b69e2:	ab05      	add	r3, sp, #20
   b69e4:	9300      	str	r3, [sp, #0]
   b69e6:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b69ea:	ab04      	add	r3, sp, #16
   b69ec:	aa03      	add	r2, sp, #12
   b69ee:	f10d 010b 	add.w	r1, sp, #11
   b69f2:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b69f6:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b69f8:	68a0      	ldr	r0, [r4, #8]
   b69fa:	f002 f80b 	bl	b8a14 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b69fe:	7b23      	ldrb	r3, [r4, #12]
   b6a00:	2b02      	cmp	r3, #2
   b6a02:	d017      	beq.n	b6a34 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b6a04:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b6a08:	2500      	movs	r5, #0
   b6a0a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b6a0e:	b143      	cbz	r3, b6a22 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b6a10:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a14:	2203      	movs	r2, #3
   b6a16:	4608      	mov	r0, r1
   b6a18:	4798      	blx	r3
	    _M_manager = nullptr;
   b6a1a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b6a1e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b6a22:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b6a24:	68a0      	ldr	r0, [r4, #8]
   b6a26:	7323      	strb	r3, [r4, #12]
   b6a28:	f001 fffc 	bl	b8a24 <os_mutex_unlock>
   b6a2c:	a807      	add	r0, sp, #28
   b6a2e:	f7fe f864 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a32:	e797      	b.n	b6964 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b6a34:	68a0      	ldr	r0, [r4, #8]
   b6a36:	f001 fff5 	bl	b8a24 <os_mutex_unlock>
   b6a3a:	a807      	add	r0, sp, #28
   b6a3c:	f7fe f85d 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b6a40:	b009      	add	sp, #36	; 0x24
   b6a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a44 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b6a44:	6800      	ldr	r0, [r0, #0]
   b6a46:	f7ff bf86 	b.w	b6956 <_ZN19BackgroundPublishRK8thread_fEv>
	...

000b6a4c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b6a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6a50:	4606      	mov	r6, r0
   b6a52:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b6a54:	2014      	movs	r0, #20
   b6a56:	4926      	ldr	r1, [pc, #152]	; (b6af0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b6a58:	4617      	mov	r7, r2
   b6a5a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b6a5c:	f004 fa94 	bl	baf88 <_ZnwjRKSt9nothrow_t>
   b6a60:	4604      	mov	r4, r0
   b6a62:	b130      	cbz	r0, b6a72 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b6a64:	2000      	movs	r0, #0
            exited(false) {
   b6a66:	e9c4 0000 	strd	r0, r0, [r4]
   b6a6a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b6a6e:	7420      	strb	r0, [r4, #16]
   b6a70:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6a72:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b6a74:	2c00      	cmp	r4, #0
   b6a76:	d031      	beq.n	b6adc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b6a78:	491d      	ldr	r1, [pc, #116]	; (b6af0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b6a7a:	2010      	movs	r0, #16
   b6a7c:	f004 fa84 	bl	baf88 <_ZnwjRKSt9nothrow_t>
   b6a80:	4605      	mov	r5, r0
   b6a82:	b168      	cbz	r0, b6aa0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b6a84:	2300      	movs	r3, #0
   b6a86:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6a88:	4601      	mov	r1, r0
   b6a8a:	4638      	mov	r0, r7
   b6a8c:	f7fe fade 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a90:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6a92:	68aa      	ldr	r2, [r5, #8]
   b6a94:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a96:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6a98:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a9a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a9c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6a9e:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b6aa0:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b6aa2:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b6aa4:	b137      	cbz	r7, b6ab4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b6aa6:	4638      	mov	r0, r7
   b6aa8:	f7fd fd08 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6aac:	2110      	movs	r1, #16
   b6aae:	4638      	mov	r0, r7
   b6ab0:	f7fd faf5 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6ab4:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b6ab6:	6803      	ldr	r3, [r0, #0]
   b6ab8:	b183      	cbz	r3, b6adc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6abc:	464a      	mov	r2, r9
   b6abe:	e9cd 0300 	strd	r0, r3, [sp]
   b6ac2:	4641      	mov	r1, r8
   b6ac4:	4b0b      	ldr	r3, [pc, #44]	; (b6af4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b6ac6:	3004      	adds	r0, #4
   b6ac8:	f001 ff4c 	bl	b8964 <os_thread_create>
   b6acc:	b930      	cbnz	r0, b6adc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b6ace:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b6ad0:	7c1b      	ldrb	r3, [r3, #16]
   b6ad2:	b94b      	cbnz	r3, b6ae8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b6ad4:	2001      	movs	r0, #1
   b6ad6:	f001 ffed 	bl	b8ab4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6ada:	e7f8      	b.n	b6ace <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b6adc:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b6ade:	2300      	movs	r3, #0
   b6ae0:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b6ae2:	b108      	cbz	r0, b6ae8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b6ae4:	f7ff feba 	bl	b685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b6ae8:	4630      	mov	r0, r6
   b6aea:	b003      	add	sp, #12
   b6aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6af0:	000bcea8 	.word	0x000bcea8
   b6af4:	000b6659 	.word	0x000b6659

000b6af8 <_ZN19BackgroundPublishRK5startEv>:
{
   b6af8:	b530      	push	{r4, r5, lr}
    if(!thread)
   b6afa:	6843      	ldr	r3, [r0, #4]
{
   b6afc:	b087      	sub	sp, #28
   b6afe:	4604      	mov	r4, r0
    if(!thread)
   b6b00:	b9c3      	cbnz	r3, b6b34 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b6b02:	3008      	adds	r0, #8
   b6b04:	f001 ff7e 	bl	b8a04 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b6b08:	4b0b      	ldr	r3, [pc, #44]	; (b6b38 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b6b0a:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b6b0c:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b6b0e:	4b0b      	ldr	r3, [pc, #44]	; (b6b3c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6b10:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b6b12:	9304      	str	r3, [sp, #16]
   b6b14:	f7fd fabf 	bl	b4096 <_Znwj>
   b6b18:	4605      	mov	r5, r0
   b6b1a:	b138      	cbz	r0, b6b2c <_ZN19BackgroundPublishRK5startEv+0x34>
   b6b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b6b20:	9300      	str	r3, [sp, #0]
   b6b22:	4907      	ldr	r1, [pc, #28]	; (b6b40 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b6b24:	2302      	movs	r3, #2
   b6b26:	aa02      	add	r2, sp, #8
   b6b28:	f7ff ff90 	bl	b6a4c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b6b2c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b6b2e:	a802      	add	r0, sp, #8
   b6b30:	f7fd fcc4 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
}
   b6b34:	b007      	add	sp, #28
   b6b36:	bd30      	pop	{r4, r5, pc}
   b6b38:	000b6a45 	.word	0x000b6a45
   b6b3c:	000b6849 	.word	0x000b6849
   b6b40:	000bc689 	.word	0x000bc689

000b6b44 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b6b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b48:	4604      	mov	r4, r0
   b6b4a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b6b4c:	6880      	ldr	r0, [r0, #8]
   b6b4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b6b50:	4698      	mov	r8, r3
   b6b52:	460d      	mov	r5, r1
   b6b54:	4616      	mov	r6, r2
   b6b56:	f001 ff5d 	bl	b8a14 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b6b5a:	6863      	ldr	r3, [r4, #4]
   b6b5c:	b11b      	cbz	r3, b6b66 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b6b5e:	7b23      	ldrb	r3, [r4, #12]
   b6b60:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b6b64:	b133      	cbz	r3, b6b74 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b6b66:	68a0      	ldr	r0, [r4, #8]
   b6b68:	f001 ff5c 	bl	b8a24 <os_mutex_unlock>
    {
        return false;
   b6b6c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b6b6e:	b005      	add	sp, #20
   b6b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6b74:	68a0      	ldr	r0, [r4, #8]
   b6b76:	f001 ff55 	bl	b8a24 <os_mutex_unlock>
    if(!name)
   b6b7a:	2d00      	cmp	r5, #0
   b6b7c:	d03d      	beq.n	b6bfa <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b6b7e:	2240      	movs	r2, #64	; 0x40
   b6b80:	4629      	mov	r1, r5
   b6b82:	f104 000d 	add.w	r0, r4, #13
   b6b86:	f004 fff4 	bl	bbb72 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b6b8a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b6b8e:	b38e      	cbz	r6, b6bf4 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b6b90:	f240 4201 	movw	r2, #1025	; 0x401
   b6b94:	4631      	mov	r1, r6
   b6b96:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b6b9a:	f004 ffea 	bl	bbb72 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b6b9e:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b6ba2:	2300      	movs	r3, #0
   b6ba4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b6ba6:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b6ba8:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b6bac:	b13b      	cbz	r3, b6bbe <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6bae:	2202      	movs	r2, #2
   b6bb0:	4639      	mov	r1, r7
   b6bb2:	4668      	mov	r0, sp
   b6bb4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6bb6:	68fb      	ldr	r3, [r7, #12]
   b6bb8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b6bba:	68bb      	ldr	r3, [r7, #8]
   b6bbc:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b6bbe:	4629      	mov	r1, r5
   b6bc0:	4668      	mov	r0, sp
   b6bc2:	f7fe fa43 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6bc6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6bc8:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b6bcc:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6bd0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6bd2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b6bd4:	4668      	mov	r0, sp
   b6bd6:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b6bda:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b6bde:	9203      	str	r2, [sp, #12]
   b6be0:	f7fd fc6c 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b6be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6be6:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b6bea:	2001      	movs	r0, #1
    event_flags = flags;
   b6bec:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b6bf0:	7320      	strb	r0, [r4, #12]
    return true;
   b6bf2:	e7bc      	b.n	b6b6e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b6bf4:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b6bf8:	e7d3      	b.n	b6ba2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b6bfa:	4628      	mov	r0, r5
   b6bfc:	e7b7      	b.n	b6b6e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b6bfe <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b6bfe:	6803      	ldr	r3, [r0, #0]
   b6c00:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b6c02:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b6c06:	2101      	movs	r1, #1
   b6c08:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b6c0c:	4770      	bx	lr

000b6c0e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c0e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b6c10:	6842      	ldr	r2, [r0, #4]
   b6c12:	4603      	mov	r3, r0
   b6c14:	1054      	asrs	r4, r2, #1
   b6c16:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b6c1a:	07d2      	lsls	r2, r2, #31
   b6c1c:	bf48      	it	mi
   b6c1e:	590a      	ldrmi	r2, [r1, r4]
   b6c20:	681b      	ldr	r3, [r3, #0]
      }
   b6c22:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6c26:	bf48      	it	mi
   b6c28:	58d3      	ldrmi	r3, [r2, r3]
   b6c2a:	4718      	bx	r3

000b6c2c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b6c2c:	2a01      	cmp	r2, #1
   b6c2e:	d102      	bne.n	b6c36 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6c30:	6001      	str	r1, [r0, #0]
      }
   b6c32:	2000      	movs	r0, #0
   b6c34:	4770      	bx	lr
	  switch (__op)
   b6c36:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6c38:	bf04      	itt	eq
   b6c3a:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b6c3e:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b6c42:	e7f6      	b.n	b6c32 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b6c44 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b6c44:	2a01      	cmp	r2, #1
   b6c46:	d102      	bne.n	b6c4e <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6c48:	6001      	str	r1, [r0, #0]
      }
   b6c4a:	2000      	movs	r0, #0
   b6c4c:	4770      	bx	lr
	  switch (__op)
   b6c4e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6c50:	bf04      	itt	eq
   b6c52:	680b      	ldreq	r3, [r1, #0]
   b6c54:	6003      	streq	r3, [r0, #0]
	      break;
   b6c56:	e7f8      	b.n	b6c4a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b6c58 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6c58:	b510      	push	{r4, lr}
   b6c5a:	4604      	mov	r4, r0
   b6c5c:	b08a      	sub	sp, #40	; 0x28
   b6c5e:	4608      	mov	r0, r1
    attr.flags = 0;
   b6c60:	f04f 0c20 	mov.w	ip, #32
   b6c64:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6c66:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6c6a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6c6e:	460b      	mov	r3, r1
   b6c70:	aa02      	add	r2, sp, #8
   b6c72:	6821      	ldr	r1, [r4, #0]
   b6c74:	f002 f906 	bl	b8e84 <log_message_v>
}
   b6c78:	b00a      	add	sp, #40	; 0x28
   b6c7a:	bd10      	pop	{r4, pc}

000b6c7c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6c7c:	b40e      	push	{r1, r2, r3}
   b6c7e:	b503      	push	{r0, r1, lr}
   b6c80:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6c82:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6c84:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6c88:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6c8a:	f7ff ffe5 	bl	b6c58 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6c8e:	b002      	add	sp, #8
   b6c90:	f85d eb04 	ldr.w	lr, [sp], #4
   b6c94:	b003      	add	sp, #12
   b6c96:	4770      	bx	lr

000b6c98 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6c98:	b40e      	push	{r1, r2, r3}
   b6c9a:	b503      	push	{r0, r1, lr}
   b6c9c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6c9e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6ca0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6ca4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6ca6:	f7ff ffd7 	bl	b6c58 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6caa:	b002      	add	sp, #8
   b6cac:	f85d eb04 	ldr.w	lr, [sp], #4
   b6cb0:	b003      	add	sp, #12
   b6cb2:	4770      	bx	lr

000b6cb4 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b6cb4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b6cb6:	f001 bec5 	b.w	b8a44 <os_mutex_recursive_lock>

000b6cba <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b6cba:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b6cbe:	4601      	mov	r1, r0
    if (stateHandler) {
   b6cc0:	b11b      	cbz	r3, b6cca <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cc2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b6cc6:	30c0      	adds	r0, #192	; 0xc0
   b6cc8:	4718      	bx	r3
}
   b6cca:	4770      	bx	lr

000b6ccc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b6ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b6cce:	4d12      	ldr	r5, [pc, #72]	; (b6d18 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b6cd0:	4608      	mov	r0, r1
        eventData = "";
   b6cd2:	2a00      	cmp	r2, #0
   b6cd4:	bf18      	it	ne
   b6cd6:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b6cd8:	460e      	mov	r6, r1
   b6cda:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b6cdc:	f004 ff41 	bl	bbb62 <strlen>
   b6ce0:	2840      	cmp	r0, #64	; 0x40
   b6ce2:	d816      	bhi.n	b6d12 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b6ce4:	4628      	mov	r0, r5
   b6ce6:	f004 ff3c 	bl	bbb62 <strlen>
   b6cea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b6cee:	d810      	bhi.n	b6d12 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b6cf0:	3043      	adds	r0, #67	; 0x43
   b6cf2:	f7fd f9d2 	bl	b409a <_Znaj>
    if (event) {
   b6cf6:	4604      	mov	r4, r0
   b6cf8:	b148      	cbz	r0, b6d0e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b6cfa:	4631      	mov	r1, r6
        event->flags = flags;
   b6cfc:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b6d00:	f004 ff0a 	bl	bbb18 <strcpy>
        strcpy(event->eventData, eventData);
   b6d04:	4629      	mov	r1, r5
   b6d06:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b6d0a:	f004 ff05 	bl	bbb18 <strcpy>
}
   b6d0e:	4620      	mov	r0, r4
   b6d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b6d12:	2400      	movs	r4, #0
   b6d14:	e7fb      	b.n	b6d0e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b6d16:	bf00      	nop
   b6d18:	000bcec8 	.word	0x000bcec8

000b6d1c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d1e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b6d20:	460a      	mov	r2, r1
   b6d22:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b6d24:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b6d26:	1d01      	adds	r1, r0, #4
   b6d28:	a808      	add	r0, sp, #32
   b6d2a:	f000 fe41 	bl	b79b0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b6d2e:	9808      	ldr	r0, [sp, #32]
   b6d30:	2100      	movs	r1, #0
   b6d32:	f004 ffd7 	bl	bbce4 <open>
   b6d36:	4605      	mov	r5, r0
   b6d38:	a808      	add	r0, sp, #32
   b6d3a:	f003 fae7 	bl	ba30c <_ZN6StringD1Ev>
    if (fd) {
   b6d3e:	2d00      	cmp	r5, #0
   b6d40:	d060      	beq.n	b6e04 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b6d42:	a908      	add	r1, sp, #32
   b6d44:	4628      	mov	r0, r5
   b6d46:	f004 ffbb 	bl	bbcc0 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b6d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6d4c:	492e      	ldr	r1, [pc, #184]	; (b6e08 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b6d4e:	482f      	ldr	r0, [pc, #188]	; (b6e0c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b6d50:	4632      	mov	r2, r6
   b6d52:	f7ff ff93 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b6d56:	2200      	movs	r2, #0
   b6d58:	4611      	mov	r1, r2
   b6d5a:	4628      	mov	r0, r5
   b6d5c:	f004 ffb8 	bl	bbcd0 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b6d60:	2208      	movs	r2, #8
   b6d62:	a906      	add	r1, sp, #24
   b6d64:	4628      	mov	r0, r5
   b6d66:	f004 ffd1 	bl	bbd0c <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b6d6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b6d6c:	2f4a      	cmp	r7, #74	; 0x4a
   b6d6e:	dd39      	ble.n	b6de4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b6d70:	4b27      	ldr	r3, [pc, #156]	; (b6e10 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b6d72:	9a06      	ldr	r2, [sp, #24]
   b6d74:	429a      	cmp	r2, r3
   b6d76:	d135      	bne.n	b6de4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b6d78:	4b26      	ldr	r3, [pc, #152]	; (b6e14 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b6d7a:	9a07      	ldr	r2, [sp, #28]
   b6d7c:	429a      	cmp	r2, r3
   b6d7e:	d131      	bne.n	b6de4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b6d80:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b6d84:	4610      	mov	r0, r2
   b6d86:	9205      	str	r2, [sp, #20]
   b6d88:	f7fd f987 	bl	b409a <_Znaj>
            if (result) {
   b6d8c:	4604      	mov	r4, r0
   b6d8e:	b1c0      	cbz	r0, b6dc2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b6d90:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b6d92:	4601      	mov	r1, r0
   b6d94:	9a05      	ldr	r2, [sp, #20]
   b6d96:	4628      	mov	r0, r5
   b6d98:	f004 ffb8 	bl	bbd0c <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b6d9c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b6da0:	b9ab      	cbnz	r3, b6dce <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b6da2:	1c63      	adds	r3, r4, #1
   b6da4:	4618      	mov	r0, r3
   b6da6:	9305      	str	r3, [sp, #20]
   b6da8:	f004 fedb 	bl	bbb62 <strlen>
   b6dac:	283f      	cmp	r0, #63	; 0x3f
   b6dae:	9b05      	ldr	r3, [sp, #20]
   b6db0:	d80d      	bhi.n	b6dce <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b6db2:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b6db6:	9200      	str	r2, [sp, #0]
   b6db8:	4917      	ldr	r1, [pc, #92]	; (b6e18 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b6dba:	4814      	ldr	r0, [pc, #80]	; (b6e0c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b6dbc:	4632      	mov	r2, r6
   b6dbe:	f7ff ff5d 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b6dc2:	4628      	mov	r0, r5
   b6dc4:	f004 ff74 	bl	bbcb0 <close>
}
   b6dc8:	4620      	mov	r0, r4
   b6dca:	b01f      	add	sp, #124	; 0x7c
   b6dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b6dce:	4913      	ldr	r1, [pc, #76]	; (b6e1c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b6dd0:	480e      	ldr	r0, [pc, #56]	; (b6e0c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b6dd2:	4632      	mov	r2, r6
   b6dd4:	f7ff ff52 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b6dd8:	2143      	movs	r1, #67	; 0x43
   b6dda:	4620      	mov	r0, r4
   b6ddc:	f7fd f95f 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b6de0:	2400      	movs	r4, #0
   b6de2:	e7ee      	b.n	b6dc2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b6de4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b6de8:	9302      	str	r3, [sp, #8]
   b6dea:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b6dee:	9301      	str	r3, [sp, #4]
   b6df0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b6df4:	9300      	str	r3, [sp, #0]
   b6df6:	490a      	ldr	r1, [pc, #40]	; (b6e20 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b6df8:	9b06      	ldr	r3, [sp, #24]
   b6dfa:	4804      	ldr	r0, [pc, #16]	; (b6e0c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b6dfc:	4632      	mov	r2, r6
   b6dfe:	f7ff ff3d 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
   b6e02:	e7ed      	b.n	b6de0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b6e04:	462c      	mov	r4, r5
    return result;
   b6e06:	e7df      	b.n	b6dc8 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b6e08:	000bc6b0 	.word	0x000bc6b0
   b6e0c:	2003e620 	.word	0x2003e620
   b6e10:	31b67663 	.word	0x31b67663
   b6e14:	00410801 	.word	0x00410801
   b6e18:	000bc6c4 	.word	0x000bc6c4
   b6e1c:	000bc6e6 	.word	0x000bc6e6
   b6e20:	000bc714 	.word	0x000bc714

000b6e24 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b6e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e28:	4680      	mov	r8, r0
   b6e2a:	4b28      	ldr	r3, [pc, #160]	; (b6ecc <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b6e2c:	f848 3b04 	str.w	r3, [r8], #4
   b6e30:	4604      	mov	r4, r0
   b6e32:	4640      	mov	r0, r8
   b6e34:	f000 fcd4 	bl	b77e0 <_ZN14SequentialFileC1Ev>
   b6e38:	2202      	movs	r2, #2
   b6e3a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b6e3c:	2500      	movs	r5, #0
   b6e3e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b6e42:	2308      	movs	r3, #8
   b6e44:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b6e46:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b6e4a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b6e4e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b6e52:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b6e56:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6e58:	2020      	movs	r0, #32
   b6e5a:	f7fd f91c 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b6e5e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b6e60:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b6e62:	3e01      	subs	r6, #1
   b6e64:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b6e66:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b6e6a:	4607      	mov	r7, r0
   b6e6c:	f44f 7000 	mov.w	r0, #512	; 0x200
   b6e70:	f7fd f911 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b6e74:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b6e78:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b6e7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6e80:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e88:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b6e8c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b6e90:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b6e94:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b6e98:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b6e9c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b6ea0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b6ea4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b6ea8:	4909      	ldr	r1, [pc, #36]	; (b6ed0 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b6eaa:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b6eae:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b6eb2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b6eb6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b6eba:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b6ebe:	4640      	mov	r0, r8
   b6ec0:	f000 fcd4 	bl	b786c <_ZN14SequentialFile11withDirPathEPKc>
}
   b6ec4:	4620      	mov	r0, r4
   b6ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6eca:	bf00      	nop
   b6ecc:	000bc924 	.word	0x000bc924
   b6ed0:	000bc759 	.word	0x000bc759

000b6ed4 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b6ed4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b6ed6:	4d06      	ldr	r5, [pc, #24]	; (b6ef0 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b6ed8:	682b      	ldr	r3, [r5, #0]
   b6eda:	b93b      	cbnz	r3, b6eec <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b6edc:	20d0      	movs	r0, #208	; 0xd0
   b6ede:	f7fd f8da 	bl	b4096 <_Znwj>
   b6ee2:	4604      	mov	r4, r0
   b6ee4:	b108      	cbz	r0, b6eea <_ZN17PublishQueuePosix8instanceEv+0x16>
   b6ee6:	f7ff ff9d 	bl	b6e24 <_ZN17PublishQueuePosixC1Ev>
   b6eea:	602c      	str	r4, [r5, #0]
}
   b6eec:	6828      	ldr	r0, [r5, #0]
   b6eee:	bd38      	pop	{r3, r4, r5, pc}
   b6ef0:	2003e624 	.word	0x2003e624

000b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b6ef4:	6942      	ldr	r2, [r0, #20]
   b6ef6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6ef8:	1a9b      	subs	r3, r3, r2
   b6efa:	109b      	asrs	r3, r3, #2
   b6efc:	1e5a      	subs	r2, r3, #1
   b6efe:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b6f02:	1a5b      	subs	r3, r3, r1
   b6f04:	109b      	asrs	r3, r3, #2
   b6f06:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b6f0a:	6902      	ldr	r2, [r0, #16]
   b6f0c:	6880      	ldr	r0, [r0, #8]
   b6f0e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b6f10:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b6f14:	4770      	bx	lr

000b6f16 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b6f16:	b538      	push	{r3, r4, r5, lr}
   b6f18:	4605      	mov	r5, r0
   b6f1a:	f7ff fecb 	bl	b6cb4 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b6f1e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b6f22:	f7ff ffe7 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b6f26:	4604      	mov	r4, r0
   b6f28:	b950      	cbnz	r0, b6f40 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b6f2a:	1d28      	adds	r0, r5, #4
   b6f2c:	f000 ff94 	bl	b7e58 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b6f30:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b6f34:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b6f36:	b11b      	cbz	r3, b6f40 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b6f38:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b6f3c:	b903      	cbnz	r3, b6f40 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b6f3e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b6f40:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b6f42:	f001 fd87 	bl	b8a54 <os_mutex_recursive_unlock>
}
   b6f46:	4620      	mov	r0, r4
   b6f48:	bd38      	pop	{r3, r4, r5, pc}

000b6f4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b6f4a:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b6f4c:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b6f4e:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b6f50:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b6f52:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b6f54:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b6f56:	d002      	beq.n	b6f5e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b6f58:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b6f5a:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b6f5c:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f5e:	68c0      	ldr	r0, [r0, #12]
   b6f60:	f44f 7100 	mov.w	r1, #512	; 0x200
   b6f64:	f7fd f89b 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b6f68:	6963      	ldr	r3, [r4, #20]
   b6f6a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b6f6c:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b6f6e:	685b      	ldr	r3, [r3, #4]
   b6f70:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b6f72:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b6f76:	6122      	str	r2, [r4, #16]
   b6f78:	e7ef      	b.n	b6f5a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b6f7c <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b6f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f80:	b085      	sub	sp, #20
   b6f82:	4604      	mov	r4, r0
   b6f84:	f7ff fe96 	bl	b6cb4 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b6f88:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7030 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b6f8c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b7034 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b6f90:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b7038 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b6f94:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b6f98:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b6f9c:	4293      	cmp	r3, r2
   b6f9e:	d105      	bne.n	b6fac <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b6fa0:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b6fa2:	b005      	add	sp, #20
   b6fa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fa8:	f001 bd54 	b.w	b8a54 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b6fac:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b6fb0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b6fb4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b6fb6:	f7ff ffc8 	bl	b6f4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b6fba:	4640      	mov	r0, r8
   b6fbc:	f000 fef0 	bl	b7da0 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b6fc0:	2300      	movs	r3, #0
   b6fc2:	4602      	mov	r2, r0
   b6fc4:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b6fc6:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b6fc8:	4668      	mov	r0, sp
   b6fca:	f000 fcf1 	bl	b79b0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b6fce:	9800      	ldr	r0, [sp, #0]
   b6fd0:	f240 2102 	movw	r1, #514	; 0x202
   b6fd4:	f004 fe86 	bl	bbce4 <open>
   b6fd8:	4605      	mov	r5, r0
   b6fda:	4668      	mov	r0, sp
   b6fdc:	f003 f996 	bl	ba30c <_ZN6StringD1Ev>
            if (fd) {
   b6fe0:	b1c5      	cbz	r5, b7014 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b6fe2:	2208      	movs	r2, #8
   b6fe4:	4669      	mov	r1, sp
   b6fe6:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b6fe8:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b6fec:	f004 fea0 	bl	bbd30 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b6ff0:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b6ff4:	f004 fdb5 	bl	bbb62 <strlen>
   b6ff8:	4639      	mov	r1, r7
   b6ffa:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b6ffe:	4628      	mov	r0, r5
   b7000:	f004 fe96 	bl	bbd30 <write>
                close(fd);
   b7004:	4628      	mov	r0, r5
   b7006:	f004 fe53 	bl	bbcb0 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b700a:	4808      	ldr	r0, [pc, #32]	; (b702c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b700c:	4632      	mov	r2, r6
   b700e:	4659      	mov	r1, fp
   b7010:	f7ff fe34 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b7014:	4631      	mov	r1, r6
   b7016:	4640      	mov	r0, r8
   b7018:	f000 ff04 	bl	b7e24 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b701c:	2f00      	cmp	r7, #0
   b701e:	d0b9      	beq.n	b6f94 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b7020:	2143      	movs	r1, #67	; 0x43
   b7022:	4638      	mov	r0, r7
   b7024:	f7fd f83b 	bl	b409e <_ZdlPvj>
   b7028:	e7b2      	b.n	b6f90 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b702a:	bf00      	nop
   b702c:	2003e620 	.word	0x2003e620
   b7030:	31b67663 	.word	0x31b67663
   b7034:	00410801 	.word	0x00410801
   b7038:	000bc767 	.word	0x000bc767

000b703c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7040:	4604      	mov	r4, r0
   b7042:	f7ff fe37 	bl	b6cb4 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b7046:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b704a:	f7ff ff53 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b704e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7050:	4298      	cmp	r0, r3
   b7052:	d902      	bls.n	b705a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b7054:	4620      	mov	r0, r4
   b7056:	f7ff ff91 	bl	b6f7c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b705a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b70a0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b705e:	4f0f      	ldr	r7, [pc, #60]	; (b709c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b7060:	1d26      	adds	r6, r4, #4
   b7062:	4630      	mov	r0, r6
   b7064:	f000 fef8 	bl	b7e58 <_ZNK14SequentialFile11getQueueLenEv>
   b7068:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b706a:	4298      	cmp	r0, r3
   b706c:	dc04      	bgt.n	b7078 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b706e:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7074:	f001 bcee 	b.w	b8a54 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b7078:	2101      	movs	r1, #1
   b707a:	4630      	mov	r0, r6
   b707c:	f000 fe9c 	bl	b7db8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b7080:	4605      	mov	r5, r0
   b7082:	2800      	cmp	r0, #0
   b7084:	d0ed      	beq.n	b7062 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b7086:	4601      	mov	r1, r0
   b7088:	2200      	movs	r2, #0
   b708a:	4630      	mov	r0, r6
   b708c:	f000 fccc 	bl	b7a28 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b7090:	462a      	mov	r2, r5
   b7092:	4641      	mov	r1, r8
   b7094:	4638      	mov	r0, r7
   b7096:	f7fd faff 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b709a:	e7e2      	b.n	b7062 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b709c:	2003e620 	.word	0x2003e620
   b70a0:	000bc784 	.word	0x000bc784

000b70a4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b70a4:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b70a6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b70aa:	430b      	orrs	r3, r1
   b70ac:	d005      	beq.n	b70ba <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b70ae:	3840      	subs	r0, #64	; 0x40
   b70b0:	ea50 0301 	orrs.w	r3, r0, r1
   b70b4:	d10b      	bne.n	b70ce <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b70b6:	2a09      	cmp	r2, #9
   b70b8:	d109      	bne.n	b70ce <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b70ba:	4905      	ldr	r1, [pc, #20]	; (b70d0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b70bc:	4805      	ldr	r0, [pc, #20]	; (b70d4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b70be:	f7ff fddd 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b70c2:	f7ff ff07 	bl	b6ed4 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b70c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b70ca:	f7ff bf57 	b.w	b6f7c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	000bc797 	.word	0x000bc797
   b70d4:	2003e620 	.word	0x2003e620

000b70d8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b70d8:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b70da:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b70dc:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b70de:	b183      	cbz	r3, b7102 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b70e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b70e2:	6945      	ldr	r5, [r0, #20]
   b70e4:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b70e6:	42ae      	cmp	r6, r5
   b70e8:	d906      	bls.n	b70f8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b70ea:	f855 0b04 	ldr.w	r0, [r5], #4
   b70ee:	f44f 7100 	mov.w	r1, #512	; 0x200
   b70f2:	f7fc ffd4 	bl	b409e <_ZdlPvj>
   b70f6:	e7f6      	b.n	b70e6 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b70f8:	6861      	ldr	r1, [r4, #4]
   b70fa:	6820      	ldr	r0, [r4, #0]
   b70fc:	0089      	lsls	r1, r1, #2
   b70fe:	f7fc ffce 	bl	b409e <_ZdlPvj>
    }
   b7102:	4620      	mov	r0, r4
   b7104:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b7108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b710a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b710e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b7110:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7112:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b7114:	b90a      	cbnz	r2, b711a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b7116:	07d9      	lsls	r1, r3, #31
   b7118:	d505      	bpl.n	b7126 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b711a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b711e:	4b0a      	ldr	r3, [pc, #40]	; (b7148 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b7120:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7122:	4b0a      	ldr	r3, [pc, #40]	; (b714c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b7124:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7126:	4621      	mov	r1, r4
   b7128:	4668      	mov	r0, sp
   b712a:	f7fd ff8f 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b712e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7130:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7132:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7134:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7136:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7138:	4668      	mov	r0, sp
   b713a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b713c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b713e:	9203      	str	r2, [sp, #12]
   b7140:	f7fd f9bc 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	}
   b7144:	b004      	add	sp, #16
   b7146:	bd10      	pop	{r4, pc}
   b7148:	000b6c0f 	.word	0x000b6c0f
   b714c:	000b6c2d 	.word	0x000b6c2d

000b7150 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b7150:	b570      	push	{r4, r5, r6, lr}
   b7152:	b086      	sub	sp, #24
   b7154:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7156:	f001 ff3f 	bl	b8fd8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b715a:	b948      	cbnz	r0, b7170 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b715c:	4b48      	ldr	r3, [pc, #288]	; (b7280 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b715e:	a902      	add	r1, sp, #8
   b7160:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b7164:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7168:	f7ff ffce 	bl	b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b716c:	b006      	add	sp, #24
   b716e:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b7170:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b7174:	b11d      	cbz	r5, b717e <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b7176:	2301      	movs	r3, #1
   b7178:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b717c:	e7f6      	b.n	b716c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b717e:	f001 fca9 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b7182:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b7186:	1ac0      	subs	r0, r0, r3
   b7188:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b718c:	4298      	cmp	r0, r3
   b718e:	d208      	bcs.n	b71a2 <_ZN17PublishQueuePosix9stateWaitEv+0x52>
        canSleep = (getNumEvents() == 0);
   b7190:	4620      	mov	r0, r4
   b7192:	f7ff fec0 	bl	b6f16 <_ZN17PublishQueuePosix12getNumEventsEv>
   b7196:	fab0 f080 	clz	r0, r0
   b719a:	0940      	lsrs	r0, r0, #5
   b719c:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        return;
   b71a0:	e7e4      	b.n	b716c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b71a2:	1d26      	adds	r6, r4, #4
   b71a4:	4629      	mov	r1, r5
   b71a6:	4630      	mov	r0, r6
   b71a8:	f000 fe06 	bl	b7db8 <_ZN14SequentialFile16getFileFromQueueEb>
   b71ac:	4601      	mov	r1, r0
   b71ae:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b71b2:	2800      	cmp	r0, #0
   b71b4:	d052      	beq.n	b725c <_ZN17PublishQueuePosix9stateWaitEv+0x10c>
        curEvent = readQueueFile(curFileNum);
   b71b6:	4620      	mov	r0, r4
   b71b8:	f7ff fdb0 	bl	b6d1c <_ZN17PublishQueuePosix13readQueueFileEi>
   b71bc:	4605      	mov	r5, r0
   b71be:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b71c2:	2800      	cmp	r0, #0
   b71c4:	d035      	beq.n	b7232 <_ZN17PublishQueuePosix9stateWaitEv+0xe2>
   b71c6:	f001 fc85 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b71ca:	ae02      	add	r6, sp, #8
   b71cc:	2500      	movs	r5, #0
   b71ce:	4b2d      	ldr	r3, [pc, #180]	; (b7284 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
        stateTime = millis();
   b71d0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b71d4:	4631      	mov	r1, r6
   b71d6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b71da:	9302      	str	r3, [sp, #8]
   b71dc:	9503      	str	r5, [sp, #12]
   b71de:	f7ff ff93 	bl	b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b71e2:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b71e6:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b71ea:	9200      	str	r2, [sp, #0]
   b71ec:	4926      	ldr	r1, [pc, #152]	; (b7288 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
   b71ee:	4a27      	ldr	r2, [pc, #156]	; (b728c <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
        publishComplete = false;
   b71f0:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b71f4:	42a8      	cmp	r0, r5
   b71f6:	bf08      	it	eq
   b71f8:	460a      	moveq	r2, r1
   b71fa:	3301      	adds	r3, #1
   b71fc:	4924      	ldr	r1, [pc, #144]	; (b7290 <_ZN17PublishQueuePosix9stateWaitEv+0x140>)
   b71fe:	4825      	ldr	r0, [pc, #148]	; (b7294 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
        canSleep = false;
   b7200:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7204:	f7ff fd3a 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b7208:	f7ff fb62 	bl	b68d0 <_ZN19BackgroundPublishRK8instanceEv>
   b720c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b7210:	4b21      	ldr	r3, [pc, #132]	; (b7298 <_ZN17PublishQueuePosix9stateWaitEv+0x148>)
   b7212:	9305      	str	r3, [sp, #20]
   b7214:	e9cd 6500 	strd	r6, r5, [sp]
   b7218:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b721a:	4b20      	ldr	r3, [pc, #128]	; (b729c <_ZN17PublishQueuePosix9stateWaitEv+0x14c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b721c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b721e:	9304      	str	r3, [sp, #16]
   b7220:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7224:	3242      	adds	r2, #66	; 0x42
   b7226:	f7ff fc8d 	bl	b6b44 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b722a:	4630      	mov	r0, r6
   b722c:	f7fd f946 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b7230:	e79c      	b.n	b716c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b7232:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b7236:	491a      	ldr	r1, [pc, #104]	; (b72a0 <_ZN17PublishQueuePosix9stateWaitEv+0x150>)
   b7238:	4816      	ldr	r0, [pc, #88]	; (b7294 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
   b723a:	f7fd fa2d 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b723e:	2101      	movs	r1, #1
   b7240:	4630      	mov	r0, r6
   b7242:	f000 fdb9 	bl	b7db8 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b7246:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b724a:	462a      	mov	r2, r5
   b724c:	4630      	mov	r0, r6
   b724e:	f000 fbeb 	bl	b7a28 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b7252:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7256:	2b00      	cmp	r3, #0
   b7258:	d1b5      	bne.n	b71c6 <_ZN17PublishQueuePosix9stateWaitEv+0x76>
   b725a:	e78c      	b.n	b7176 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b725c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b7260:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7264:	429a      	cmp	r2, r3
   b7266:	d007      	beq.n	b7278 <_ZN17PublishQueuePosix9stateWaitEv+0x128>
            curEvent = ramQueue.front();
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b726e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b7272:	f7ff fe6a 	bl	b6f4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b7276:	e7ec      	b.n	b7252 <_ZN17PublishQueuePosix9stateWaitEv+0x102>
            curEvent = NULL;
   b7278:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b727c:	e77b      	b.n	b7176 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b727e:	bf00      	nop
   b7280:	000b72a5 	.word	0x000b72a5
   b7284:	000b761d 	.word	0x000b761d
   b7288:	000bc7c6 	.word	0x000bc7c6
   b728c:	000bca1e 	.word	0x000bca1e
   b7290:	000bc7e7 	.word	0x000bc7e7
   b7294:	2003e620 	.word	0x2003e620
   b7298:	000b6bff 	.word	0x000b6bff
   b729c:	000b6c45 	.word	0x000b6c45
   b72a0:	000bc7ca 	.word	0x000bc7ca

000b72a4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b72a4:	b513      	push	{r0, r1, r4, lr}
    canSleep = (pausePublishing || getNumEvents() == 0);
   b72a6:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
void PublishQueuePosix::stateConnectWait() {
   b72aa:	4604      	mov	r4, r0
    canSleep = (pausePublishing || getNumEvents() == 0);
   b72ac:	b923      	cbnz	r3, b72b8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x14>
   b72ae:	f7ff fe32 	bl	b6f16 <_ZN17PublishQueuePosix12getNumEventsEv>
   b72b2:	fab0 f380 	clz	r3, r0
   b72b6:	095b      	lsrs	r3, r3, #5
   b72b8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b72bc:	f001 fe8c 	bl	b8fd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b72c0:	b180      	cbz	r0, b72e4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x40>
   b72c2:	f001 fc07 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b72c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b72ca:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b72ce:	4b06      	ldr	r3, [pc, #24]	; (b72e8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x44>)
        stateTime = millis();
   b72d0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b72d4:	9300      	str	r3, [sp, #0]
   b72d6:	4669      	mov	r1, sp
   b72d8:	2300      	movs	r3, #0
   b72da:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b72de:	9301      	str	r3, [sp, #4]
   b72e0:	f7ff ff12 	bl	b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b72e4:	b002      	add	sp, #8
   b72e6:	bd10      	pop	{r4, pc}
   b72e8:	000b7151 	.word	0x000b7151

000b72ec <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b72ec:	b570      	push	{r4, r5, r6, lr}
   b72ee:	4605      	mov	r5, r0
   b72f0:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b72f2:	2000      	movs	r0, #0
   b72f4:	f001 fe18 	bl	b8f28 <system_thread_get_state>
   b72f8:	2801      	cmp	r0, #1
   b72fa:	d005      	beq.n	b7308 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b72fc:	493e      	ldr	r1, [pc, #248]	; (b73f8 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b72fe:	483f      	ldr	r0, [pc, #252]	; (b73fc <_ZN17PublishQueuePosix5setupEv+0x110>)
   b7300:	f7ff fcca 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
}
   b7304:	b018      	add	sp, #96	; 0x60
   b7306:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b7308:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b730c:	f001 fb92 	bl	b8a34 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7310:	4b3b      	ldr	r3, [pc, #236]	; (b7400 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b7312:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7314:	4b3b      	ldr	r3, [pc, #236]	; (b7404 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b7316:	9307      	str	r3, [sp, #28]
        };
   b7318:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b731a:	4b3b      	ldr	r3, [pc, #236]	; (b7408 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b731c:	9306      	str	r3, [sp, #24]
   b731e:	a808      	add	r0, sp, #32
   b7320:	f7fd fbb8 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b7324:	a908      	add	r1, sp, #32
   b7326:	a80c      	add	r0, sp, #48	; 0x30
   b7328:	f7fd fbb4 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b732c:	a90c      	add	r1, sp, #48	; 0x30
   b732e:	a810      	add	r0, sp, #64	; 0x40
   b7330:	f7fd fbb0 	bl	b4a94 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b7334:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7336:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b7338:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b733a:	f7fc feac 	bl	b4096 <_Znwj>
   b733e:	4604      	mov	r4, r0
   b7340:	b160      	cbz	r0, b735c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b7342:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7344:	4601      	mov	r1, r0
   b7346:	a810      	add	r0, sp, #64	; 0x40
   b7348:	f7fd fe80 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b734c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b734e:	68a2      	ldr	r2, [r4, #8]
   b7350:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b7352:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7354:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b7358:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b735a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b735c:	4b2b      	ldr	r3, [pc, #172]	; (b740c <_ZN17PublishQueuePosix5setupEv+0x120>)
   b735e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b7360:	4b2b      	ldr	r3, [pc, #172]	; (b7410 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b7362:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b7364:	4b2b      	ldr	r3, [pc, #172]	; (b7414 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7366:	9414      	str	r4, [sp, #80]	; 0x50
   b7368:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b736a:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b736c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b7370:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b7372:	f7fc fe90 	bl	b4096 <_Znwj>
   b7376:	4604      	mov	r4, r0
   b7378:	b1d8      	cbz	r0, b73b2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b737a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b737c:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b737e:	b133      	cbz	r3, b738e <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7380:	2202      	movs	r2, #2
   b7382:	a914      	add	r1, sp, #80	; 0x50
   b7384:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7388:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b738a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b738c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b738e:	4b22      	ldr	r3, [pc, #136]	; (b7418 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b7390:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7392:	4a22      	ldr	r2, [pc, #136]	; (b741c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b7394:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7396:	ab01      	add	r3, sp, #4
   b7398:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b739c:	2100      	movs	r1, #0
   b739e:	f001 fd9b 	bl	b8ed8 <system_subscribe_event>
        if (r) {
   b73a2:	b130      	cbz	r0, b73b2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b73a4:	4620      	mov	r0, r4
   b73a6:	f7fd f889 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b73aa:	2110      	movs	r1, #16
   b73ac:	4620      	mov	r0, r4
   b73ae:	f7fc fe76 	bl	b409e <_ZdlPvj>
   b73b2:	a814      	add	r0, sp, #80	; 0x50
   b73b4:	f7fd f882 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b73b8:	a810      	add	r0, sp, #64	; 0x40
   b73ba:	f7fd f87f 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b73be:	a80c      	add	r0, sp, #48	; 0x30
   b73c0:	f7fd f87c 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b73c4:	a808      	add	r0, sp, #32
   b73c6:	f7fd f879 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b73ca:	a804      	add	r0, sp, #16
   b73cc:	f7fd f876 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b73d0:	f7ff fa7e 	bl	b68d0 <_ZN19BackgroundPublishRK8instanceEv>
   b73d4:	f7ff fb90 	bl	b6af8 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b73d8:	1d28      	adds	r0, r5, #4
   b73da:	f000 fc69 	bl	b7cb0 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b73de:	4628      	mov	r0, r5
   b73e0:	f7ff fe2c 	bl	b703c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b73e4:	4b0e      	ldr	r3, [pc, #56]	; (b7420 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b73e6:	9314      	str	r3, [sp, #80]	; 0x50
   b73e8:	a914      	add	r1, sp, #80	; 0x50
   b73ea:	2300      	movs	r3, #0
   b73ec:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b73f0:	9315      	str	r3, [sp, #84]	; 0x54
   b73f2:	f7ff fe89 	bl	b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b73f6:	e785      	b.n	b7304 <_ZN17PublishQueuePosix5setupEv+0x18>
   b73f8:	000bc806 	.word	0x000bc806
   b73fc:	2003e620 	.word	0x2003e620
   b7400:	000b70a5 	.word	0x000b70a5
   b7404:	000b41f9 	.word	0x000b41f9
   b7408:	000b41e5 	.word	0x000b41e5
   b740c:	000b41bf 	.word	0x000b41bf
   b7410:	000b4ab3 	.word	0x000b4ab3
   b7414:	000c0002 	.word	0x000c0002
   b7418:	000b44cf 	.word	0x000b44cf
   b741c:	000b40e5 	.word	0x000b40e5
   b7420:	000b72a5 	.word	0x000b72a5

000b7424 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b7424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7428:	4606      	mov	r6, r0
   b742a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b742c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b742e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7430:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7432:	1a47      	subs	r7, r0, r1
   b7434:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b7438:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b743a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b743e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7440:	d927      	bls.n	b7492 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b7442:	1b5d      	subs	r5, r3, r5
   b7444:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7446:	6832      	ldr	r2, [r6, #0]
   b7448:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b744a:	b10c      	cbz	r4, b7450 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b744c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b7450:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7452:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b7454:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b7456:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b7458:	eba3 0201 	sub.w	r2, r3, r1
   b745c:	d913      	bls.n	b7486 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b745e:	4299      	cmp	r1, r3
   b7460:	d002      	beq.n	b7468 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7462:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7464:	f004 fafe 	bl	bba64 <memmove>
	_M_node = __new_node;
   b7468:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b746a:	6823      	ldr	r3, [r4, #0]
   b746c:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b746e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7472:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b7474:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b7476:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b7478:	59e3      	ldr	r3, [r4, r7]
   b747a:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b747c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7480:	6233      	str	r3, [r6, #32]
    }
   b7482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b7486:	4299      	cmp	r1, r3
   b7488:	d0ee      	beq.n	b7468 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b748a:	1d38      	adds	r0, r7, #4
   b748c:	1a80      	subs	r0, r0, r2
   b748e:	4420      	add	r0, r4
   b7490:	e7e8      	b.n	b7464 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b7492:	f103 0802 	add.w	r8, r3, #2
   b7496:	454b      	cmp	r3, r9
   b7498:	bf2c      	ite	cs
   b749a:	4498      	addcs	r8, r3
   b749c:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b749e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b74a2:	d301      	bcc.n	b74a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b74a4:	f003 fd74 	bl	baf90 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b74a8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b74ac:	f7fc fdf3 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b74b0:	eba8 0505 	sub.w	r5, r8, r5
   b74b4:	086d      	lsrs	r5, r5, #1
   b74b6:	4682      	mov	sl, r0
   b74b8:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b74ba:	b10c      	cbz	r4, b74c0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b74bc:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b74c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b74c2:	6971      	ldr	r1, [r6, #20]
   b74c4:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b74c6:	442c      	add	r4, r5
	  if (_Num)
   b74c8:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b74ca:	4454      	add	r4, sl
   b74cc:	d003      	beq.n	b74d6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b74ce:	1a52      	subs	r2, r2, r1
   b74d0:	4620      	mov	r0, r4
   b74d2:	f004 fac7 	bl	bba64 <memmove>
	::operator delete(__p
   b74d6:	6871      	ldr	r1, [r6, #4]
   b74d8:	6830      	ldr	r0, [r6, #0]
   b74da:	0089      	lsls	r1, r1, #2
   b74dc:	f7fc fddf 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b74e0:	e9c6 a800 	strd	sl, r8, [r6]
   b74e4:	e7c0      	b.n	b7468 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b74e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b74e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74ea:	b085      	sub	sp, #20
   b74ec:	4604      	mov	r4, r0
   b74ee:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b74f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b74f6:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b74f8:	460f      	mov	r7, r1
   b74fa:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b74fc:	f7ff fbe6 	bl	b6ccc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b7500:	4605      	mov	r5, r0
   b7502:	2800      	cmp	r0, #0
   b7504:	d03c      	beq.n	b7580 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b7506:	4b3f      	ldr	r3, [pc, #252]	; (b7604 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b7508:	493f      	ldr	r1, [pc, #252]	; (b7608 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b750a:	4840      	ldr	r0, [pc, #256]	; (b760c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b750c:	2e00      	cmp	r6, #0
   b750e:	bf18      	it	ne
   b7510:	4633      	movne	r3, r6
   b7512:	463a      	mov	r2, r7
   b7514:	f7ff fbb2 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
   b7518:	4620      	mov	r0, r4
   b751a:	f7ff fbcb 	bl	b6cb4 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b751e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b7522:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b7526:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b7528:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b752a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b752e:	d029      	beq.n	b7584 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7530:	b103      	cbz	r3, b7534 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b7532:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b7534:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b7538:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b753a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b753c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b7540:	4628      	mov	r0, r5
   b7542:	f000 fc89 	bl	b7e58 <_ZNK14SequentialFile11getQueueLenEv>
   b7546:	9003      	str	r0, [sp, #12]
   b7548:	4630      	mov	r0, r6
   b754a:	f7ff fcd3 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b754e:	9002      	str	r0, [sp, #8]
   b7550:	f001 fd42 	bl	b8fd8 <spark_cloud_flag_connected>
   b7554:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b7558:	9000      	str	r0, [sp, #0]
   b755a:	492d      	ldr	r1, [pc, #180]	; (b7610 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b755c:	482b      	ldr	r0, [pc, #172]	; (b760c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b755e:	f7ff fb8d 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b7562:	4628      	mov	r0, r5
   b7564:	f000 fc78 	bl	b7e58 <_ZNK14SequentialFile11getQueueLenEv>
   b7568:	2800      	cmp	r0, #0
   b756a:	d03b      	beq.n	b75e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b756c:	4620      	mov	r0, r4
   b756e:	f7ff fd05 	bl	b6f7c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b7572:	4620      	mov	r0, r4
   b7574:	f7ff fd62 	bl	b703c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b7578:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b757a:	f001 fa6b 	bl	b8a54 <os_mutex_recursive_unlock>
    return true;
   b757e:	2001      	movs	r0, #1
}
   b7580:	b005      	add	sp, #20
   b7582:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b7584:	4630      	mov	r0, r6
   b7586:	f7ff fcb5 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b758a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b758e:	4298      	cmp	r0, r3
   b7590:	d102      	bne.n	b7598 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b7592:	4820      	ldr	r0, [pc, #128]	; (b7614 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b7594:	f003 fcff 	bl	baf96 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b7598:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b759c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b759e:	1a9a      	subs	r2, r3, r2
   b75a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b75a2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b75a6:	2b01      	cmp	r3, #1
   b75a8:	d804      	bhi.n	b75b4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b75aa:	2200      	movs	r2, #0
   b75ac:	2101      	movs	r1, #1
   b75ae:	4630      	mov	r0, r6
   b75b0:	f7ff ff38 	bl	b7424 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b75b4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b75b8:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b75bc:	f7fc fd6b 	bl	b4096 <_Znwj>
   b75c0:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b75c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b75c6:	b103      	cbz	r3, b75ca <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b75c8:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b75ca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b75ce:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b75d0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b75d4:	685b      	ldr	r3, [r3, #4]
   b75d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b75da:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b75de:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b75e2:	e7aa      	b.n	b753a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b75e4:	4630      	mov	r0, r6
   b75e6:	f7ff fc85 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b75ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b75ec:	4298      	cmp	r0, r3
   b75ee:	d8bd      	bhi.n	b756c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b75f0:	f001 fcf2 	bl	b8fd8 <spark_cloud_flag_connected>
   b75f4:	2800      	cmp	r0, #0
   b75f6:	d0b9      	beq.n	b756c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b75f8:	4907      	ldr	r1, [pc, #28]	; (b7618 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b75fa:	4804      	ldr	r0, [pc, #16]	; (b760c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b75fc:	f7ff fb3e 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
   b7600:	e7b7      	b.n	b7572 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b7602:	bf00      	nop
   b7604:	000bcec8 	.word	0x000bcec8
   b7608:	000bc829 	.word	0x000bc829
   b760c:	2003e620 	.word	0x2003e620
   b7610:	000bc881 	.word	0x000bc881
   b7614:	000bc851 	.word	0x000bc851
   b7618:	000bc8ad 	.word	0x000bc8ad

000b761c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b761c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b761e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b7622:	4604      	mov	r4, r0
    if (!publishComplete) {
   b7624:	2b00      	cmp	r3, #0
   b7626:	d041      	beq.n	b76ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b7628:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b762c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b7630:	2b00      	cmp	r3, #0
   b7632:	d03d      	beq.n	b76b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b7634:	4950      	ldr	r1, [pc, #320]	; (b7778 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b7636:	4851      	ldr	r0, [pc, #324]	; (b777c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7638:	f7ff fb20 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b763c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7640:	b1d3      	cbz	r3, b7678 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b7642:	1d26      	adds	r6, r4, #4
   b7644:	2100      	movs	r1, #0
   b7646:	4630      	mov	r0, r6
   b7648:	f000 fbb6 	bl	b7db8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b764c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7650:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b7652:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b7654:	d10d      	bne.n	b7672 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b7656:	2101      	movs	r1, #1
   b7658:	4630      	mov	r0, r6
   b765a:	f000 fbad 	bl	b7db8 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b765e:	2200      	movs	r2, #0
   b7660:	4629      	mov	r1, r5
   b7662:	4630      	mov	r0, r6
   b7664:	f000 f9e0 	bl	b7a28 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b7668:	4945      	ldr	r1, [pc, #276]	; (b7780 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b766a:	4844      	ldr	r0, [pc, #272]	; (b777c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b766c:	462a      	mov	r2, r5
   b766e:	f7ff fb05 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b7672:	2300      	movs	r3, #0
   b7674:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b7678:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b767c:	b110      	cbz	r0, b7684 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b767e:	2143      	movs	r1, #67	; 0x43
   b7680:	f7fc fd0d 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b7684:	2300      	movs	r3, #0
   b7686:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b768a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b768e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b7692:	4b3c      	ldr	r3, [pc, #240]	; (b7784 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b7694:	9300      	str	r3, [sp, #0]
   b7696:	4669      	mov	r1, sp
   b7698:	2300      	movs	r3, #0
   b769a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b769e:	9301      	str	r3, [sp, #4]
   b76a0:	f7ff fd32 	bl	b7108 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b76a4:	f001 fa16 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b76a8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b76ac:	b002      	add	sp, #8
   b76ae:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b76b0:	4935      	ldr	r1, [pc, #212]	; (b7788 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b76b2:	4832      	ldr	r0, [pc, #200]	; (b777c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b76b4:	f7ff fae2 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b76b8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b76bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b76c0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b76c4:	b14b      	cbz	r3, b76da <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b76c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b76ca:	b110      	cbz	r0, b76d2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b76cc:	2143      	movs	r1, #67	; 0x43
   b76ce:	f7fc fce6 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b76d2:	2300      	movs	r3, #0
   b76d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b76d8:	e7db      	b.n	b7692 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b76da:	4620      	mov	r0, r4
   b76dc:	f7ff faea 	bl	b6cb4 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b76e0:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b76e4:	4293      	cmp	r3, r2
   b76e6:	d013      	beq.n	b7710 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b76e8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b76ec:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b76f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b76f4:	3b04      	subs	r3, #4
   b76f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b76fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b76fc:	f001 f9aa 	bl	b8a54 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b7700:	4922      	ldr	r1, [pc, #136]	; (b778c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b7702:	481e      	ldr	r0, [pc, #120]	; (b777c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7704:	f7ff faba 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b7708:	4620      	mov	r0, r4
   b770a:	f7ff fc37 	bl	b6f7c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b770e:	e7c0      	b.n	b7692 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b7710:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b7714:	4628      	mov	r0, r5
   b7716:	f7ff fbed 	bl	b6ef4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b771a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b771e:	4298      	cmp	r0, r3
   b7720:	d102      	bne.n	b7728 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b7722:	481b      	ldr	r0, [pc, #108]	; (b7790 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b7724:	f003 fc37 	bl	baf96 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b7728:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b772c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b772e:	429a      	cmp	r2, r3
   b7730:	d104      	bne.n	b773c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b7732:	2201      	movs	r2, #1
   b7734:	4611      	mov	r1, r2
   b7736:	4628      	mov	r0, r5
   b7738:	f7ff fe74 	bl	b7424 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b773c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b7740:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b7744:	f7fc fca7 	bl	b4096 <_Znwj>
   b7748:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b774c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b7750:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b7752:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b7756:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b775a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b775e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7762:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b7766:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b776a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b776e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7772:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b7776:	e7c0      	b.n	b76fa <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b7778:	000bc8c0 	.word	0x000bc8c0
   b777c:	2003e620 	.word	0x2003e620
   b7780:	000bc8d3 	.word	0x000bc8d3
   b7784:	000b7151 	.word	0x000b7151
   b7788:	000bc8e3 	.word	0x000bc8e3
   b778c:	000bc8f5 	.word	0x000bc8f5
   b7790:	000bc851 	.word	0x000bc851

000b7794 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   b7794:	4b01      	ldr	r3, [pc, #4]	; (b779c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b7796:	4a02      	ldr	r2, [pc, #8]	; (b77a0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b7798:	601a      	str	r2, [r3, #0]
}
   b779a:	4770      	bx	lr
   b779c:	2003e620 	.word	0x2003e620
   b77a0:	000bc680 	.word	0x000bc680

000b77a4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b77a4:	b510      	push	{r4, lr}
   b77a6:	4b07      	ldr	r3, [pc, #28]	; (b77c4 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b77a8:	4604      	mov	r4, r0
   b77aa:	f840 3bc0 	str.w	r3, [r0], #192
   b77ae:	f7fc fe85 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b77b2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b77b6:	f7ff fc8f 	bl	b70d8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b77ba:	1d20      	adds	r0, r4, #4
   b77bc:	f000 f9b8 	bl	b7b30 <_ZN14SequentialFileD1Ev>
}
   b77c0:	4620      	mov	r0, r4
   b77c2:	bd10      	pop	{r4, pc}
   b77c4:	000bc924 	.word	0x000bc924

000b77c8 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b77c8:	b510      	push	{r4, lr}
   b77ca:	4604      	mov	r4, r0
}
   b77cc:	f7ff ffea 	bl	b77a4 <_ZN17PublishQueuePosixD1Ev>
   b77d0:	4620      	mov	r0, r4
   b77d2:	21d0      	movs	r1, #208	; 0xd0
   b77d4:	f7fc fc63 	bl	b409e <_ZdlPvj>
   b77d8:	4620      	mov	r0, r4
   b77da:	bd10      	pop	{r4, pc}

000b77dc <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b77dc:	2001      	movs	r0, #1
   b77de:	4770      	bx	lr

000b77e0 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b77e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77e2:	4d1f      	ldr	r5, [pc, #124]	; (b7860 <_ZN14SequentialFileC1Ev+0x80>)
   b77e4:	4b1f      	ldr	r3, [pc, #124]	; (b7864 <_ZN14SequentialFileC1Ev+0x84>)
   b77e6:	4604      	mov	r4, r0
   b77e8:	4629      	mov	r1, r5
   b77ea:	f840 3b04 	str.w	r3, [r0], #4
   b77ee:	f002 fdd8 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b77f2:	491d      	ldr	r1, [pc, #116]	; (b7868 <_ZN14SequentialFileC1Ev+0x88>)
   b77f4:	f104 0014 	add.w	r0, r4, #20
   b77f8:	f002 fdd3 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b77fc:	4629      	mov	r1, r5
   b77fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7802:	f002 fdce 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7806:	2300      	movs	r3, #0
   b7808:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b780c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b7810:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b7814:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b7818:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b781c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7820:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7822:	2308      	movs	r3, #8
   b7824:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7826:	2020      	movs	r0, #32
   b7828:	f7fc fc35 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b782c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b782e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7830:	3d01      	subs	r5, #1
   b7832:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7834:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b7838:	4606      	mov	r6, r0
   b783a:	f44f 7000 	mov.w	r0, #512	; 0x200
   b783e:	f7fc fc2a 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7842:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b7846:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b784a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b784e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b7850:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7852:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b7854:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7856:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b7858:	6667      	str	r7, [r4, #100]	; 0x64

}
   b785a:	4620      	mov	r0, r4
   b785c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b785e:	bf00      	nop
   b7860:	000bcec8 	.word	0x000bcec8
   b7864:	000bca2c 	.word	0x000bca2c
   b7868:	000bc930 	.word	0x000bc930

000b786c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b786c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b786e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b7870:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b7872:	4628      	mov	r0, r5
   b7874:	f002 fde8 	bl	ba448 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b7878:	490e      	ldr	r1, [pc, #56]	; (b78b4 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b787a:	4668      	mov	r0, sp
   b787c:	f002 fd91 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7880:	4669      	mov	r1, sp
   b7882:	4628      	mov	r0, r5
   b7884:	f002 fe4d 	bl	ba522 <_ZNK6String8endsWithERKS_>
   b7888:	4606      	mov	r6, r0
   b788a:	4668      	mov	r0, sp
   b788c:	f002 fd3e 	bl	ba30c <_ZN6StringD1Ev>
   b7890:	b16e      	cbz	r6, b78ae <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b7892:	68e3      	ldr	r3, [r4, #12]
   b7894:	2200      	movs	r2, #0
   b7896:	3b01      	subs	r3, #1
   b7898:	4629      	mov	r1, r5
   b789a:	4668      	mov	r0, sp
   b789c:	f002 fe56 	bl	ba54c <_ZNK6String9substringEjj>
   b78a0:	4669      	mov	r1, sp
   b78a2:	4628      	mov	r0, r5
   b78a4:	f002 fdc8 	bl	ba438 <_ZN6StringaSEOS_>
   b78a8:	4668      	mov	r0, sp
   b78aa:	f002 fd2f 	bl	ba30c <_ZN6StringD1Ev>
    }
    return *this; 
};
   b78ae:	4620      	mov	r0, r4
   b78b0:	b004      	add	sp, #16
   b78b2:	bd70      	pop	{r4, r5, r6, pc}
   b78b4:	000bc2ce 	.word	0x000bc2ce

000b78b8 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b78b8:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b78ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b78bc:	4604      	mov	r4, r0
    if (!queueMutex) {
   b78be:	b913      	cbnz	r3, b78c6 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b78c0:	303c      	adds	r0, #60	; 0x3c
   b78c2:	f001 f89f 	bl	b8a04 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b78c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b78c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b78cc:	f001 b8a2 	b.w	b8a14 <os_mutex_lock>

000b78d0 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b78d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b78d2:	f001 b8a7 	b.w	b8a24 <os_mutex_unlock>
	...

000b78d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b78d8:	b510      	push	{r4, lr}
   b78da:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b78dc:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b78de:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b78e0:	f001 fa20 	bl	b8d24 <stat>
    if (result == 0) {
   b78e4:	b9d0      	cbnz	r0, b791c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b78e6:	9b01      	ldr	r3, [sp, #4]
   b78e8:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b78ea:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b78ec:	d506      	bpl.n	b78fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b78ee:	4915      	ldr	r1, [pc, #84]	; (b7944 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b78f0:	4815      	ldr	r0, [pc, #84]	; (b7948 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b78f2:	f7fc fed1 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b78f6:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b78f8:	b016      	add	sp, #88	; 0x58
   b78fa:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b78fc:	4812      	ldr	r0, [pc, #72]	; (b7948 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b78fe:	4913      	ldr	r1, [pc, #76]	; (b794c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b7900:	f7ff f9ca 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b7904:	4620      	mov	r0, r4
   b7906:	f004 fa0b 	bl	bbd20 <unlink>
    result = mkdir(path, 0777);
   b790a:	f240 11ff 	movw	r1, #511	; 0x1ff
   b790e:	4620      	mov	r0, r4
   b7910:	f001 fa10 	bl	b8d34 <mkdir>
    if (result == 0) {
   b7914:	b980      	cbnz	r0, b7938 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b7916:	490e      	ldr	r1, [pc, #56]	; (b7950 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b7918:	4622      	mov	r2, r4
   b791a:	e7e9      	b.n	b78f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b791c:	f001 fc54 	bl	b91c8 <__errno>
   b7920:	6803      	ldr	r3, [r0, #0]
   b7922:	2b02      	cmp	r3, #2
   b7924:	d0f1      	beq.n	b790a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b7926:	f001 fc4f 	bl	b91c8 <__errno>
   b792a:	490a      	ldr	r1, [pc, #40]	; (b7954 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b792c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b792e:	4806      	ldr	r0, [pc, #24]	; (b7948 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b7930:	f7ff f9b2 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b7934:	2000      	movs	r0, #0
   b7936:	e7df      	b.n	b78f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b7938:	f001 fc46 	bl	b91c8 <__errno>
   b793c:	4906      	ldr	r1, [pc, #24]	; (b7958 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b793e:	6802      	ldr	r2, [r0, #0]
   b7940:	e7f5      	b.n	b792e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b7942:	bf00      	nop
   b7944:	000bc940 	.word	0x000bc940
   b7948:	2003e628 	.word	0x2003e628
   b794c:	000bc95d 	.word	0x000bc95d
   b7950:	000bc98e 	.word	0x000bc98e
   b7954:	000bc97a 	.word	0x000bc97a
   b7958:	000bc99d 	.word	0x000bc99d

000b795c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b795c:	b538      	push	{r3, r4, r5, lr}
   b795e:	4615      	mov	r5, r2
   b7960:	4604      	mov	r4, r0
    String result = name;
   b7962:	f002 fd1e 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b7966:	b14d      	cbz	r5, b797c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b7968:	782b      	ldrb	r3, [r5, #0]
   b796a:	b13b      	cbz	r3, b797c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b796c:	4904      	ldr	r1, [pc, #16]	; (b7980 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b796e:	4620      	mov	r0, r4
   b7970:	f002 fd93 	bl	ba49a <_ZN6String6concatEPKc>
   b7974:	4629      	mov	r1, r5
   b7976:	4620      	mov	r0, r4
   b7978:	f002 fd8f 	bl	ba49a <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b797c:	4620      	mov	r0, r4
   b797e:	bd38      	pop	{r3, r4, r5, pc}
   b7980:	000bce1c 	.word	0x000bce1c

000b7984 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b7984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7986:	4605      	mov	r5, r0
   b7988:	460e      	mov	r6, r1
   b798a:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b798c:	6949      	ldr	r1, [r1, #20]
   b798e:	4668      	mov	r0, sp
   b7990:	f002 fdfc 	bl	ba58c <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b7994:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b7996:	b904      	cbnz	r4, b799a <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b7998:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b799a:	4622      	mov	r2, r4
   b799c:	4628      	mov	r0, r5
   b799e:	f7ff ffdd 	bl	b795c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b79a2:	4668      	mov	r0, sp
   b79a4:	f002 fcb2 	bl	ba30c <_ZN6StringD1Ev>
}
   b79a8:	4628      	mov	r0, r5
   b79aa:	b004      	add	sp, #16
   b79ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000b79b0 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b79b0:	b570      	push	{r4, r5, r6, lr}
   b79b2:	460c      	mov	r4, r1
   b79b4:	b08e      	sub	sp, #56	; 0x38
    String result;
   b79b6:	491a      	ldr	r1, [pc, #104]	; (b7a20 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b79b8:	e9cd 3200 	strd	r3, r2, [sp]
   b79bc:	4605      	mov	r5, r0
    String result;
   b79be:	f002 fcf0 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b79c2:	68e0      	ldr	r0, [r4, #12]
   b79c4:	69e1      	ldr	r1, [r4, #28]
   b79c6:	4401      	add	r1, r0
   b79c8:	3104      	adds	r1, #4
   b79ca:	4628      	mov	r0, r5
   b79cc:	f002 fcbc 	bl	ba348 <_ZN6String7reserveEj>
	StringSumHelper(const String &s) : String(s) {}
   b79d0:	1d21      	adds	r1, r4, #4
   b79d2:	a806      	add	r0, sp, #24
   b79d4:	f002 fd25 	bl	ba422 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b79d8:	4912      	ldr	r1, [pc, #72]	; (b7a24 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b79da:	a802      	add	r0, sp, #8
   b79dc:	f002 fce1 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b79e0:	a902      	add	r1, sp, #8
   b79e2:	a806      	add	r0, sp, #24
   b79e4:	f002 fd6a 	bl	ba4bc <_ZplRK15StringSumHelperRK6String>
   b79e8:	e9dd 3200 	ldrd	r3, r2, [sp]
   b79ec:	4606      	mov	r6, r0
   b79ee:	4621      	mov	r1, r4
   b79f0:	a80a      	add	r0, sp, #40	; 0x28
   b79f2:	f7ff ffc7 	bl	b7984 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b79f6:	a90a      	add	r1, sp, #40	; 0x28
   b79f8:	4630      	mov	r0, r6
   b79fa:	f002 fd5f 	bl	ba4bc <_ZplRK15StringSumHelperRK6String>
   b79fe:	4601      	mov	r1, r0
   b7a00:	4628      	mov	r0, r5
   b7a02:	f002 fcff 	bl	ba404 <_ZN6StringaSERKS_>
   b7a06:	a80a      	add	r0, sp, #40	; 0x28
   b7a08:	f002 fc80 	bl	ba30c <_ZN6StringD1Ev>
   b7a0c:	a802      	add	r0, sp, #8
   b7a0e:	f002 fc7d 	bl	ba30c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7a12:	a806      	add	r0, sp, #24
   b7a14:	f002 fc7a 	bl	ba30c <_ZN6StringD1Ev>
}
   b7a18:	4628      	mov	r0, r5
   b7a1a:	b00e      	add	sp, #56	; 0x38
   b7a1c:	bd70      	pop	{r4, r5, r6, pc}
   b7a1e:	bf00      	nop
   b7a20:	000bcec8 	.word	0x000bcec8
   b7a24:	000bc2ce 	.word	0x000bc2ce

000b7a28 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b7a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b7a2c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b7a2e:	b08e      	sub	sp, #56	; 0x38
   b7a30:	4605      	mov	r5, r0
   b7a32:	460f      	mov	r7, r1
    if (allExtensions) {
   b7a34:	2a00      	cmp	r2, #0
   b7a36:	d04a      	beq.n	b7ace <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b7a38:	6840      	ldr	r0, [r0, #4]
   b7a3a:	f001 f98b 	bl	b8d54 <opendir>
        if (dir) {
   b7a3e:	4606      	mov	r6, r0
   b7a40:	2800      	cmp	r0, #0
   b7a42:	d054      	beq.n	b7aee <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b7a44:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b7afc <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b7a48:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b7af8 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b7a4c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b7af4 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b7a50:	4630      	mov	r0, r6
   b7a52:	f001 f987 	bl	b8d64 <readdir>
                if (!ent) {
   b7a56:	2800      	cmp	r0, #0
   b7a58:	d033      	beq.n	b7ac2 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b7a5a:	7a82      	ldrb	r2, [r0, #10]
   b7a5c:	2a08      	cmp	r2, #8
   b7a5e:	d1f7      	bne.n	b7a50 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b7a60:	f100 040b 	add.w	r4, r0, #11
   b7a64:	6969      	ldr	r1, [r5, #20]
   b7a66:	aa01      	add	r2, sp, #4
   b7a68:	4620      	mov	r0, r4
   b7a6a:	f001 fb85 	bl	b9178 <sscanf>
   b7a6e:	2801      	cmp	r0, #1
   b7a70:	d1ee      	bne.n	b7a50 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b7a72:	9b01      	ldr	r3, [sp, #4]
   b7a74:	42bb      	cmp	r3, r7
   b7a76:	d1eb      	bne.n	b7a50 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b7a78:	1d29      	adds	r1, r5, #4
   b7a7a:	a80a      	add	r0, sp, #40	; 0x28
   b7a7c:	f002 fcd1 	bl	ba422 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b7a80:	4651      	mov	r1, sl
   b7a82:	a806      	add	r0, sp, #24
   b7a84:	f002 fc8d 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7a88:	a906      	add	r1, sp, #24
   b7a8a:	a80a      	add	r0, sp, #40	; 0x28
   b7a8c:	f002 fd16 	bl	ba4bc <_ZplRK15StringSumHelperRK6String>
   b7a90:	4621      	mov	r1, r4
   b7a92:	f002 fd1f 	bl	ba4d4 <_ZplRK15StringSumHelperPKc>
   b7a96:	4601      	mov	r1, r0
   b7a98:	a802      	add	r0, sp, #8
   b7a9a:	f002 fcc2 	bl	ba422 <_ZN6StringC1ERKS_>
   b7a9e:	a806      	add	r0, sp, #24
   b7aa0:	f002 fc34 	bl	ba30c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7aa4:	a80a      	add	r0, sp, #40	; 0x28
   b7aa6:	f002 fc31 	bl	ba30c <_ZN6StringD1Ev>
                        unlink(path);
   b7aaa:	9802      	ldr	r0, [sp, #8]
   b7aac:	f004 f938 	bl	bbd20 <unlink>
                        _log.trace("removed %s", path.c_str());
   b7ab0:	4640      	mov	r0, r8
   b7ab2:	9a02      	ldr	r2, [sp, #8]
   b7ab4:	4649      	mov	r1, r9
   b7ab6:	f7ff f8e1 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b7aba:	a802      	add	r0, sp, #8
   b7abc:	f002 fc26 	bl	ba30c <_ZN6StringD1Ev>
                    continue;
   b7ac0:	e7c6      	b.n	b7a50 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b7ac2:	4630      	mov	r0, r6
}
   b7ac4:	b00e      	add	sp, #56	; 0x38
   b7ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b7aca:	f001 b953 	b.w	b8d74 <closedir>
        String path = getPathForFileNum(fileNum); 
   b7ace:	460a      	mov	r2, r1
   b7ad0:	4601      	mov	r1, r0
   b7ad2:	a80a      	add	r0, sp, #40	; 0x28
   b7ad4:	f7ff ff6c 	bl	b79b0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b7ad8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7ada:	f004 f921 	bl	bbd20 <unlink>
        _log.trace("removed %s", path.c_str());
   b7ade:	4805      	ldr	r0, [pc, #20]	; (b7af4 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b7ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7ae2:	4905      	ldr	r1, [pc, #20]	; (b7af8 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b7ae4:	f7ff f8ca 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b7ae8:	a80a      	add	r0, sp, #40	; 0x28
   b7aea:	f002 fc0f 	bl	ba30c <_ZN6StringD1Ev>
}
   b7aee:	b00e      	add	sp, #56	; 0x38
   b7af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7af4:	2003e628 	.word	0x2003e628
   b7af8:	000bc935 	.word	0x000bc935
   b7afc:	000bc2ce 	.word	0x000bc2ce

000b7b00 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b7b00:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b7b02:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b7b04:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b7b06:	b183      	cbz	r3, b7b2a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b7b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7b0a:	6945      	ldr	r5, [r0, #20]
   b7b0c:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b7b0e:	42ae      	cmp	r6, r5
   b7b10:	d906      	bls.n	b7b20 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b7b12:	f855 0b04 	ldr.w	r0, [r5], #4
   b7b16:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7b1a:	f7fc fac0 	bl	b409e <_ZdlPvj>
   b7b1e:	e7f6      	b.n	b7b0e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b7b20:	6861      	ldr	r1, [r4, #4]
   b7b22:	6820      	ldr	r0, [r4, #0]
   b7b24:	0089      	lsls	r1, r1, #2
   b7b26:	f7fc faba 	bl	b409e <_ZdlPvj>
    }
   b7b2a:	4620      	mov	r0, r4
   b7b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7b30 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   b7b30:	b510      	push	{r4, lr}
   b7b32:	4b09      	ldr	r3, [pc, #36]	; (b7b58 <_ZN14SequentialFileD1Ev+0x28>)
   b7b34:	4604      	mov	r4, r0
   b7b36:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b7b3a:	f7ff ffe1 	bl	b7b00 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   b7b3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7b42:	f002 fbe3 	bl	ba30c <_ZN6StringD1Ev>
   b7b46:	f104 0014 	add.w	r0, r4, #20
   b7b4a:	f002 fbdf 	bl	ba30c <_ZN6StringD1Ev>
   b7b4e:	1d20      	adds	r0, r4, #4
   b7b50:	f002 fbdc 	bl	ba30c <_ZN6StringD1Ev>
}
   b7b54:	4620      	mov	r0, r4
   b7b56:	bd10      	pop	{r4, pc}
   b7b58:	000bca2c 	.word	0x000bca2c

000b7b5c <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   b7b5c:	b510      	push	{r4, lr}
   b7b5e:	4604      	mov	r4, r0
}
   b7b60:	f7ff ffe6 	bl	b7b30 <_ZN14SequentialFileD1Ev>
   b7b64:	4620      	mov	r0, r4
   b7b66:	2168      	movs	r1, #104	; 0x68
   b7b68:	f7fc fa99 	bl	b409e <_ZdlPvj>
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	bd10      	pop	{r4, pc}

000b7b70 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7b70:	68c3      	ldr	r3, [r0, #12]
   b7b72:	68ca      	ldr	r2, [r1, #12]
   b7b74:	1a9b      	subs	r3, r3, r2
   b7b76:	109b      	asrs	r3, r3, #2
   b7b78:	1e5a      	subs	r2, r3, #1
   b7b7a:	e9d0 3000 	ldrd	r3, r0, [r0]
   b7b7e:	1a1b      	subs	r3, r3, r0
   b7b80:	109b      	asrs	r3, r3, #2
   b7b82:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b7b86:	6888      	ldr	r0, [r1, #8]
   b7b88:	680a      	ldr	r2, [r1, #0]
   b7b8a:	1a80      	subs	r0, r0, r2
      }
   b7b8c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7b90:	4770      	bx	lr
	...

000b7b94 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   b7b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b7b98:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b7b9a:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b7b9c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b7b9e:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   b7ba0:	4604      	mov	r4, r0
   b7ba2:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   b7ba4:	d007      	beq.n	b7bb6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7ba6:	b10b      	cbz	r3, b7bac <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   b7ba8:	680a      	ldr	r2, [r1, #0]
   b7baa:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b7bac:	69a3      	ldr	r3, [r4, #24]
   b7bae:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b7bb0:	61a3      	str	r3, [r4, #24]
      }
   b7bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7bb6:	f100 0108 	add.w	r1, r0, #8
   b7bba:	3018      	adds	r0, #24
   b7bbc:	f7ff ffd8 	bl	b7b70 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   b7bc0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b7bc4:	4298      	cmp	r0, r3
   b7bc6:	d102      	bne.n	b7bce <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   b7bc8:	4838      	ldr	r0, [pc, #224]	; (b7cac <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   b7bca:	f003 f9e4 	bl	baf96 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b7bce:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b7bd0:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b7bd2:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b7bd4:	1a11      	subs	r1, r2, r0
   b7bd6:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b7bda:	2901      	cmp	r1, #1
   b7bdc:	d825      	bhi.n	b7c2a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7bde:	6961      	ldr	r1, [r4, #20]
   b7be0:	eba2 0801 	sub.w	r8, r2, r1
   b7be4:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b7be8:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7bea:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   b7bee:	d936      	bls.n	b7c5e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   b7bf0:	1b5d      	subs	r5, r3, r5
   b7bf2:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7bf4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   b7bf8:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b7bfa:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   b7bfc:	eba3 0201 	sub.w	r2, r3, r1
   b7c00:	d926      	bls.n	b7c50 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   b7c02:	428b      	cmp	r3, r1
   b7c04:	d002      	beq.n	b7c0c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7c06:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7c08:	f003 ff2c 	bl	bba64 <memmove>
	_M_node = __new_node;
   b7c0c:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   b7c0e:	682b      	ldr	r3, [r5, #0]
   b7c10:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7c12:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7c16:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b7c18:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   b7c1c:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b7c1e:	f855 3008 	ldr.w	r3, [r5, r8]
   b7c22:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7c24:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7c28:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c2a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b7c2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b7c30:	f7fc fa31 	bl	b4096 <_Znwj>
   b7c34:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b7c36:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c38:	b10b      	cbz	r3, b7c3e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   b7c3a:	683a      	ldr	r2, [r7, #0]
   b7c3c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b7c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7c40:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7c42:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b7c44:	685b      	ldr	r3, [r3, #4]
   b7c46:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7c48:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7c4c:	6222      	str	r2, [r4, #32]
   b7c4e:	e7af      	b.n	b7bb0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   b7c50:	428b      	cmp	r3, r1
   b7c52:	d0db      	beq.n	b7c0c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7c54:	f108 0004 	add.w	r0, r8, #4
   b7c58:	1a80      	subs	r0, r0, r2
   b7c5a:	4428      	add	r0, r5
   b7c5c:	e7d4      	b.n	b7c08 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b7c5e:	f103 0902 	add.w	r9, r3, #2
   b7c62:	2b01      	cmp	r3, #1
   b7c64:	bf2c      	ite	cs
   b7c66:	4499      	addcs	r9, r3
   b7c68:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   b7c6c:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   b7c70:	d301      	bcc.n	b7c76 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   b7c72:	f003 f98d 	bl	baf90 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c76:	ea4f 0089 	mov.w	r0, r9, lsl #2
   b7c7a:	f7fc fa0c 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b7c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b7c80:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b7c82:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   b7c86:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b7c88:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   b7c8a:	4291      	cmp	r1, r2
   b7c8c:	4682      	mov	sl, r0
   b7c8e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   b7c92:	d003      	beq.n	b7c9c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7c94:	1a52      	subs	r2, r2, r1
   b7c96:	4628      	mov	r0, r5
   b7c98:	f003 fee4 	bl	bba64 <memmove>
	::operator delete(__p
   b7c9c:	6861      	ldr	r1, [r4, #4]
   b7c9e:	6820      	ldr	r0, [r4, #0]
   b7ca0:	0089      	lsls	r1, r1, #2
   b7ca2:	f7fc f9fc 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b7ca6:	e9c4 a900 	strd	sl, r9, [r4]
   b7caa:	e7af      	b.n	b7c0c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   b7cac:	000bc851 	.word	0x000bc851

000b7cb0 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   b7cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   b7cb4:	68c3      	ldr	r3, [r0, #12]
   b7cb6:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   b7cb8:	b086      	sub	sp, #24
   b7cba:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   b7cbc:	d808      	bhi.n	b7cd0 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   b7cbe:	4934      	ldr	r1, [pc, #208]	; (b7d90 <_ZN14SequentialFile7scanDirEv+0xe0>)
   b7cc0:	4834      	ldr	r0, [pc, #208]	; (b7d94 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b7cc2:	f7fe ffe9 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b7cc6:	2600      	movs	r6, #0
}
   b7cc8:	4630      	mov	r0, r6
   b7cca:	b006      	add	sp, #24
   b7ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   b7cd0:	6840      	ldr	r0, [r0, #4]
   b7cd2:	f7ff fe01 	bl	b78d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   b7cd6:	4606      	mov	r6, r0
   b7cd8:	2800      	cmp	r0, #0
   b7cda:	d0f4      	beq.n	b7cc6 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   b7cdc:	6963      	ldr	r3, [r4, #20]
   b7cde:	6862      	ldr	r2, [r4, #4]
   b7ce0:	492d      	ldr	r1, [pc, #180]	; (b7d98 <_ZN14SequentialFile7scanDirEv+0xe8>)
   b7ce2:	482c      	ldr	r0, [pc, #176]	; (b7d94 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b7ce4:	f7fe ffca 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   b7ce8:	6860      	ldr	r0, [r4, #4]
   b7cea:	f001 f833 	bl	b8d54 <opendir>
    if (!dir) {
   b7cee:	4607      	mov	r7, r0
   b7cf0:	2800      	cmp	r0, #0
   b7cf2:	d0e8      	beq.n	b7cc6 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   b7cf4:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b7cf6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7d9c <_ZN14SequentialFile7scanDirEv+0xec>
   b7cfa:	f8df 8098 	ldr.w	r8, [pc, #152]	; b7d94 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   b7cfe:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   b7d00:	4638      	mov	r0, r7
   b7d02:	f001 f82f 	bl	b8d64 <readdir>
        if (!ent) {
   b7d06:	4605      	mov	r5, r0
   b7d08:	2800      	cmp	r0, #0
   b7d0a:	d039      	beq.n	b7d80 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   b7d0c:	7a83      	ldrb	r3, [r0, #10]
   b7d0e:	2b08      	cmp	r3, #8
   b7d10:	d1f6      	bne.n	b7d00 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   b7d12:	350b      	adds	r5, #11
   b7d14:	6961      	ldr	r1, [r4, #20]
   b7d16:	aa01      	add	r2, sp, #4
   b7d18:	4628      	mov	r0, r5
   b7d1a:	f001 fa2d 	bl	b9178 <sscanf>
   b7d1e:	2801      	cmp	r0, #1
   b7d20:	d1ee      	bne.n	b7d00 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   b7d22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7d24:	b17b      	cbz	r3, b7d46 <_ZN14SequentialFile7scanDirEv+0x96>
   b7d26:	4629      	mov	r1, r5
   b7d28:	a802      	add	r0, sp, #8
   b7d2a:	f002 fb3a 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d2e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   b7d32:	a802      	add	r0, sp, #8
   b7d34:	f002 fbf5 	bl	ba522 <_ZNK6String8endsWithERKS_>
   b7d38:	4682      	mov	sl, r0
   b7d3a:	a802      	add	r0, sp, #8
   b7d3c:	f002 fae6 	bl	ba30c <_ZN6StringD1Ev>
   b7d40:	f1ba 0f00 	cmp.w	sl, #0
   b7d44:	d0dc      	beq.n	b7d00 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   b7d46:	6823      	ldr	r3, [r4, #0]
   b7d48:	4629      	mov	r1, r5
   b7d4a:	689b      	ldr	r3, [r3, #8]
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	4798      	blx	r3
   b7d50:	2800      	cmp	r0, #0
   b7d52:	d0d5      	beq.n	b7d00 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   b7d54:	9a01      	ldr	r2, [sp, #4]
   b7d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b7d58:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   b7d5a:	bfb8      	it	lt
   b7d5c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b7d5e:	462b      	mov	r3, r5
   b7d60:	4649      	mov	r1, r9
   b7d62:	4640      	mov	r0, r8
   b7d64:	f7fe ff8a 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   b7d68:	4620      	mov	r0, r4
   b7d6a:	f7ff fda5 	bl	b78b8 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   b7d6e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b7d72:	a901      	add	r1, sp, #4
   b7d74:	f7ff ff0e 	bl	b7b94 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   b7d78:	4620      	mov	r0, r4
   b7d7a:	f7ff fda9 	bl	b78d0 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   b7d7e:	e7bf      	b.n	b7d00 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   b7d80:	4638      	mov	r0, r7
   b7d82:	f000 fff7 	bl	b8d74 <closedir>
    scanDirCompleted = true;
   b7d86:	2301      	movs	r3, #1
   b7d88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   b7d8c:	e79c      	b.n	b7cc8 <_ZN14SequentialFile7scanDirEv+0x18>
   b7d8e:	bf00      	nop
   b7d90:	000bc9b3 	.word	0x000bc9b3
   b7d94:	2003e628 	.word	0x2003e628
   b7d98:	000bc9c8 	.word	0x000bc9c8
   b7d9c:	000bc9e4 	.word	0x000bc9e4

000b7da0 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   b7da0:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   b7da2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   b7da6:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b7da8:	b90b      	cbnz	r3, b7dae <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   b7daa:	f7ff ff81 	bl	b7cb0 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   b7dae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b7db0:	3001      	adds	r0, #1
   b7db2:	63a0      	str	r0, [r4, #56]	; 0x38
}
   b7db4:	bd10      	pop	{r4, pc}
	...

000b7db8 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   b7db8:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   b7dba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   b7dbe:	4604      	mov	r4, r0
   b7dc0:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   b7dc2:	b90b      	cbnz	r3, b7dc8 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   b7dc4:	f7ff ff74 	bl	b7cb0 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   b7dc8:	4620      	mov	r0, r4
   b7dca:	f7ff fd75 	bl	b78b8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   b7dce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   b7dd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   b7dd2:	429a      	cmp	r2, r3
   b7dd4:	d020      	beq.n	b7e18 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   b7dd6:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   b7dda:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   b7ddc:	b126      	cbz	r6, b7de8 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   b7dde:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7de0:	4293      	cmp	r3, r2
   b7de2:	d00c      	beq.n	b7dfe <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   b7de4:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b7de6:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   b7de8:	4620      	mov	r0, r4
   b7dea:	f7ff fd71 	bl	b78d0 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   b7dee:	b125      	cbz	r5, b7dfa <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   b7df0:	490a      	ldr	r1, [pc, #40]	; (b7e1c <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   b7df2:	480b      	ldr	r0, [pc, #44]	; (b7e20 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   b7df4:	462a      	mov	r2, r5
   b7df6:	f7fe ff41 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
}
   b7dfa:	4628      	mov	r0, r5
   b7dfc:	bd70      	pop	{r4, r5, r6, pc}
   b7dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7e02:	f7fc f94c 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b7e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7e08:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7e0a:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b7e0c:	685b      	ldr	r3, [r3, #4]
   b7e0e:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7e10:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7e14:	6522      	str	r2, [r4, #80]	; 0x50
   b7e16:	e7e6      	b.n	b7de6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   b7e18:	2500      	movs	r5, #0
   b7e1a:	e7e5      	b.n	b7de8 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   b7e1c:	000bc9fa 	.word	0x000bc9fa
   b7e20:	2003e628 	.word	0x2003e628

000b7e24 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   b7e24:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   b7e26:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   b7e2a:	9101      	str	r1, [sp, #4]
   b7e2c:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b7e2e:	b90b      	cbnz	r3, b7e34 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   b7e30:	f7ff ff3e 	bl	b7cb0 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   b7e34:	9b01      	ldr	r3, [sp, #4]
   b7e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b7e38:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   b7e3a:	bfb8      	it	lt
   b7e3c:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   b7e3e:	4620      	mov	r0, r4
   b7e40:	f7ff fd3a 	bl	b78b8 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   b7e44:	a901      	add	r1, sp, #4
   b7e46:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b7e4a:	f7ff fea3 	bl	b7b94 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   b7e4e:	4620      	mov	r0, r4
   b7e50:	f7ff fd3e 	bl	b78d0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b7e54:	b002      	add	sp, #8
   b7e56:	bd10      	pop	{r4, pc}

000b7e58 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   b7e58:	b538      	push	{r3, r4, r5, lr}
   b7e5a:	4604      	mov	r4, r0
    queueMutexLock();
   b7e5c:	f7ff fd2c 	bl	b78b8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7e60:	f104 0148 	add.w	r1, r4, #72	; 0x48
   b7e64:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b7e68:	f7ff fe82 	bl	b7b70 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   b7e6c:	4605      	mov	r5, r0
    queueMutexUnlock();
   b7e6e:	4620      	mov	r0, r4
   b7e70:	f7ff fd2e 	bl	b78d0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b7e74:	4628      	mov	r0, r5
   b7e76:	bd38      	pop	{r3, r4, r5, pc}

000b7e78 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   b7e78:	4b01      	ldr	r3, [pc, #4]	; (b7e80 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   b7e7a:	4a02      	ldr	r2, [pc, #8]	; (b7e84 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   b7e7c:	601a      	str	r2, [r3, #0]
}
   b7e7e:	4770      	bx	lr
   b7e80:	2003e628 	.word	0x2003e628
   b7e84:	000bca17 	.word	0x000bca17

000b7e88 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b7e88:	4770      	bx	lr

000b7e8a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b7e8a:	b510      	push	{r4, lr}
}
   b7e8c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b7e8e:	4604      	mov	r4, r0
}
   b7e90:	f7fc f905 	bl	b409e <_ZdlPvj>
   b7e94:	4620      	mov	r0, r4
   b7e96:	bd10      	pop	{r4, pc}

000b7e98 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7e98:	b510      	push	{r4, lr}
   b7e9a:	7202      	strb	r2, [r0, #8]
   b7e9c:	22ff      	movs	r2, #255	; 0xff
   b7e9e:	8142      	strh	r2, [r0, #10]
   b7ea0:	2200      	movs	r2, #0
   b7ea2:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7ea6:	6142      	str	r2, [r0, #20]
   b7ea8:	7602      	strb	r2, [r0, #24]
   b7eaa:	61c2      	str	r2, [r0, #28]
    instance = this;
   b7eac:	4a02      	ldr	r2, [pc, #8]	; (b7eb8 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7eae:	4c03      	ldr	r4, [pc, #12]	; (b7ebc <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b7eb0:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7eb2:	e9c0 4100 	strd	r4, r1, [r0]
}
   b7eb6:	bd10      	pop	{r4, pc}
   b7eb8:	2003e630 	.word	0x2003e630
   b7ebc:	000bcc88 	.word	0x000bcc88

000b7ec0 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b7ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7ec4:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b7ec8:	4604      	mov	r4, r0
   b7eca:	4689      	mov	r9, r1
   b7ecc:	4616      	mov	r6, r2
   b7ece:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b7ed0:	f1b8 0f00 	cmp.w	r8, #0
   b7ed4:	d002      	beq.n	b7edc <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b7ed6:	6840      	ldr	r0, [r0, #4]
   b7ed8:	f001 ff76 	bl	b9dc8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7edc:	7a21      	ldrb	r1, [r4, #8]
   b7ede:	6860      	ldr	r0, [r4, #4]
   b7ee0:	f001 ff4c 	bl	b9d7c <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7ee4:	6860      	ldr	r0, [r4, #4]
   b7ee6:	6803      	ldr	r3, [r0, #0]
   b7ee8:	4649      	mov	r1, r9
   b7eea:	689b      	ldr	r3, [r3, #8]
   b7eec:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7eee:	6860      	ldr	r0, [r4, #4]
   b7ef0:	2100      	movs	r1, #0
   b7ef2:	f001 ff62 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7ef6:	4605      	mov	r5, r0
   b7ef8:	bb00      	cbnz	r0, b7f3c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7efa:	2301      	movs	r3, #1
   b7efc:	7a21      	ldrb	r1, [r4, #8]
   b7efe:	6860      	ldr	r0, [r4, #4]
   b7f00:	463a      	mov	r2, r7
   b7f02:	f001 ff26 	bl	b9d52 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7f06:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7f08:	4603      	mov	r3, r0
        if (count == num) {
   b7f0a:	d109      	bne.n	b7f20 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b7f0c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b7f0e:	42be      	cmp	r6, r7
   b7f10:	d01c      	beq.n	b7f4c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7f12:	6860      	ldr	r0, [r4, #4]
   b7f14:	6803      	ldr	r3, [r0, #0]
   b7f16:	695b      	ldr	r3, [r3, #20]
   b7f18:	4798      	blx	r3
   b7f1a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7f1e:	e7f6      	b.n	b7f0e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7f20:	490b      	ldr	r1, [pc, #44]	; (b7f50 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7f22:	480c      	ldr	r0, [pc, #48]	; (b7f54 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7f24:	464a      	mov	r2, r9
   b7f26:	f7fe feb7 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7f2a:	f1b8 0f00 	cmp.w	r8, #0
   b7f2e:	d002      	beq.n	b7f36 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7f30:	6860      	ldr	r0, [r4, #4]
   b7f32:	f001 ff52 	bl	b9dda <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7f36:	4628      	mov	r0, r5
   b7f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7f3c:	4603      	mov	r3, r0
   b7f3e:	4906      	ldr	r1, [pc, #24]	; (b7f58 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7f40:	4804      	ldr	r0, [pc, #16]	; (b7f54 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7f42:	464a      	mov	r2, r9
   b7f44:	f7fe fea8 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7f48:	2500      	movs	r5, #0
   b7f4a:	e7ee      	b.n	b7f2a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7f4c:	2501      	movs	r5, #1
   b7f4e:	e7ec      	b.n	b7f2a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7f50:	000bca38 	.word	0x000bca38
   b7f54:	2003e62c 	.word	0x2003e62c
   b7f58:	000bca5d 	.word	0x000bca5d

000b7f5c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7f5c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7f5e:	9300      	str	r3, [sp, #0]
   b7f60:	2301      	movs	r3, #1
   b7f62:	f7ff ffad 	bl	b7ec0 <_ZN6AB180513readRegistersEhPhjb>
}
   b7f66:	b003      	add	sp, #12
   b7f68:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f6c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7f6e:	8943      	ldrh	r3, [r0, #10]
   b7f70:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7f72:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7f74:	d010      	beq.n	b7f98 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7f76:	4e19      	ldr	r6, [pc, #100]	; (b7fdc <_ZN6AB180510detectChipEv+0x70>)
   b7f78:	4d19      	ldr	r5, [pc, #100]	; (b7fe0 <_ZN6AB180510detectChipEv+0x74>)
   b7f7a:	f000 fdab 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7f7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7f82:	d209      	bcs.n	b7f98 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7f84:	8960      	ldrh	r0, [r4, #10]
   b7f86:	f002 ff1e 	bl	badc6 <digitalRead>
   b7f8a:	2801      	cmp	r0, #1
   b7f8c:	d004      	beq.n	b7f98 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7f8e:	4631      	mov	r1, r6
   b7f90:	4628      	mov	r0, r5
   b7f92:	f7fc fb81 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b7f96:	e7f0      	b.n	b7f7a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7f98:	2301      	movs	r3, #1
   b7f9a:	f10d 0207 	add.w	r2, sp, #7
   b7f9e:	2128      	movs	r1, #40	; 0x28
   b7fa0:	4620      	mov	r0, r4
   b7fa2:	f7ff ffdb 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7fa6:	b930      	cbnz	r0, b7fb6 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7fa8:	480d      	ldr	r0, [pc, #52]	; (b7fe0 <_ZN6AB180510detectChipEv+0x74>)
   b7faa:	490e      	ldr	r1, [pc, #56]	; (b7fe4 <_ZN6AB180510detectChipEv+0x78>)
   b7fac:	f7fc fb74 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b7fb0:	2000      	movs	r0, #0
}
   b7fb2:	b002      	add	sp, #8
   b7fb4:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7fb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7fba:	2b18      	cmp	r3, #24
   b7fbc:	d1f4      	bne.n	b7fa8 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7fbe:	2301      	movs	r3, #1
   b7fc0:	f10d 0207 	add.w	r2, sp, #7
   b7fc4:	2129      	movs	r1, #41	; 0x29
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	f7ff ffc8 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7fcc:	2800      	cmp	r0, #0
   b7fce:	d0eb      	beq.n	b7fa8 <_ZN6AB180510detectChipEv+0x3c>
   b7fd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7fd4:	2b05      	cmp	r3, #5
   b7fd6:	d1e7      	bne.n	b7fa8 <_ZN6AB180510detectChipEv+0x3c>
   b7fd8:	e7eb      	b.n	b7fb2 <_ZN6AB180510detectChipEv+0x46>
   b7fda:	bf00      	nop
   b7fdc:	000bca81 	.word	0x000bca81
   b7fe0:	2003e62c 	.word	0x2003e62c
   b7fe4:	000bca96 	.word	0x000bca96

000b7fe8 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7fe8:	b507      	push	{r0, r1, r2, lr}
   b7fea:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7fec:	2200      	movs	r2, #0
   b7fee:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7ff2:	f10d 0207 	add.w	r2, sp, #7
   b7ff6:	f7ff ffb1 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b7ffa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7ffe:	b003      	add	sp, #12
   b8000:	f85d fb04 	ldr.w	pc, [sp], #4

000b8004 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b8004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8008:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b800c:	4604      	mov	r4, r0
   b800e:	460f      	mov	r7, r1
   b8010:	4615      	mov	r5, r2
   b8012:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b8014:	f1b8 0f00 	cmp.w	r8, #0
   b8018:	d002      	beq.n	b8020 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b801a:	6840      	ldr	r0, [r0, #4]
   b801c:	f001 fed4 	bl	b9dc8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b8020:	7a21      	ldrb	r1, [r4, #8]
   b8022:	6860      	ldr	r0, [r4, #4]
   b8024:	f001 feaa 	bl	b9d7c <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b8028:	6860      	ldr	r0, [r4, #4]
   b802a:	6803      	ldr	r3, [r0, #0]
   b802c:	4639      	mov	r1, r7
   b802e:	689b      	ldr	r3, [r3, #8]
   b8030:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b8032:	442e      	add	r6, r5
   b8034:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b8036:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b8038:	d005      	beq.n	b8046 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b803a:	6803      	ldr	r3, [r0, #0]
   b803c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8040:	689b      	ldr	r3, [r3, #8]
   b8042:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b8044:	e7f6      	b.n	b8034 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b8046:	2101      	movs	r1, #1
   b8048:	f001 feb7 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b804c:	4603      	mov	r3, r0
   b804e:	b170      	cbz	r0, b806e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b8050:	4908      	ldr	r1, [pc, #32]	; (b8074 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b8052:	4809      	ldr	r0, [pc, #36]	; (b8078 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b8054:	463a      	mov	r2, r7
   b8056:	f7fe fe1f 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b805a:	2500      	movs	r5, #0
    }

    if (lock) {
   b805c:	f1b8 0f00 	cmp.w	r8, #0
   b8060:	d002      	beq.n	b8068 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b8062:	6860      	ldr	r0, [r4, #4]
   b8064:	f001 feb9 	bl	b9dda <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b8068:	4628      	mov	r0, r5
   b806a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b806e:	2501      	movs	r5, #1
   b8070:	e7f4      	b.n	b805c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b8072:	bf00      	nop
   b8074:	000bcaa3 	.word	0x000bcaa3
   b8078:	2003e62c 	.word	0x2003e62c

000b807c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b807c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b807e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b8082:	9300      	str	r3, [sp, #0]
   b8084:	f10d 020f 	add.w	r2, sp, #15
   b8088:	2301      	movs	r3, #1
   b808a:	f7ff ffbb 	bl	b8004 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b808e:	b005      	add	sp, #20
   b8090:	f85d fb04 	ldr.w	pc, [sp], #4

000b8094 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b8094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b8096:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b8098:	460c      	mov	r4, r1
   b809a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b809c:	491a      	ldr	r1, [pc, #104]	; (b8108 <_ZN6AB18056setWDTEi+0x74>)
   b809e:	481b      	ldr	r0, [pc, #108]	; (b810c <_ZN6AB18056setWDTEi+0x78>)
   b80a0:	f7fc fafa 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b80a4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b80a6:	bfb8      	it	lt
   b80a8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b80aa:	b97c      	cbnz	r4, b80cc <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b80ac:	2301      	movs	r3, #1
   b80ae:	4622      	mov	r2, r4
   b80b0:	211b      	movs	r1, #27
   b80b2:	4628      	mov	r0, r5
   b80b4:	f7ff ffe2 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b80b8:	4915      	ldr	r1, [pc, #84]	; (b8110 <_ZN6AB18056setWDTEi+0x7c>)
   b80ba:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b80bc:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b80be:	4813      	ldr	r0, [pc, #76]	; (b810c <_ZN6AB18056setWDTEi+0x78>)
   b80c0:	f7fe fddc 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b80c4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b80c6:	616c      	str	r4, [r5, #20]
}
   b80c8:	4630      	mov	r0, r6
   b80ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b80cc:	2c03      	cmp	r4, #3
   b80ce:	dd19      	ble.n	b8104 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b80d0:	10a7      	asrs	r7, r4, #2
   b80d2:	2f1f      	cmp	r7, #31
   b80d4:	bfa8      	it	ge
   b80d6:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b80d8:	00ba      	lsls	r2, r7, #2
   b80da:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b80de:	2301      	movs	r3, #1
   b80e0:	b2d2      	uxtb	r2, r2
   b80e2:	211b      	movs	r1, #27
   b80e4:	4628      	mov	r0, r5
   b80e6:	f7ff ffc9 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b80ea:	463a      	mov	r2, r7
   b80ec:	4603      	mov	r3, r0
   b80ee:	4909      	ldr	r1, [pc, #36]	; (b8114 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b80f0:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b80f2:	4806      	ldr	r0, [pc, #24]	; (b810c <_ZN6AB18056setWDTEi+0x78>)
   b80f4:	f7fe fdc2 	bl	b6c7c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b80f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b80fc:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b80fe:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b8100:	616f      	str	r7, [r5, #20]
   b8102:	e7e1      	b.n	b80c8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b8104:	2701      	movs	r7, #1
   b8106:	e7e7      	b.n	b80d8 <_ZN6AB18056setWDTEi+0x44>
   b8108:	000bcac8 	.word	0x000bcac8
   b810c:	2003e62c 	.word	0x2003e62c
   b8110:	000bcad2 	.word	0x000bcad2
   b8114:	000bcaee 	.word	0x000bcaee

000b8118 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b8118:	4b06      	ldr	r3, [pc, #24]	; (b8134 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b811a:	681a      	ldr	r2, [r3, #0]
   b811c:	b14a      	cbz	r2, b8132 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b811e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8122:	430b      	orrs	r3, r1
   b8124:	d105      	bne.n	b8132 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b8126:	68d3      	ldr	r3, [r2, #12]
   b8128:	b11b      	cbz	r3, b8132 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b812a:	2100      	movs	r1, #0
   b812c:	4610      	mov	r0, r2
   b812e:	f7ff bfb1 	b.w	b8094 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b8132:	4770      	bx	lr
   b8134:	2003e630 	.word	0x2003e630

000b8138 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b8138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b813c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8140:	4605      	mov	r5, r0
   b8142:	4616      	mov	r6, r2
   b8144:	461f      	mov	r7, r3
    if (lock) {
   b8146:	f1b8 0f00 	cmp.w	r8, #0
   b814a:	d004      	beq.n	b8156 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b814c:	6840      	ldr	r0, [r0, #4]
   b814e:	9101      	str	r1, [sp, #4]
   b8150:	f001 fe3a 	bl	b9dc8 <_ZN7TwoWire4lockEv>
   b8154:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b8156:	9101      	str	r1, [sp, #4]
   b8158:	2300      	movs	r3, #0
   b815a:	f10d 020f 	add.w	r2, sp, #15
   b815e:	4628      	mov	r0, r5
   b8160:	f7ff fefc 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b8164:	4604      	mov	r4, r0
   b8166:	b160      	cbz	r0, b8182 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b8168:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b816c:	ea03 0206 	and.w	r2, r3, r6
   b8170:	433a      	orrs	r2, r7
        if (newValue != value) {
   b8172:	4293      	cmp	r3, r2
   b8174:	d005      	beq.n	b8182 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b8176:	9901      	ldr	r1, [sp, #4]
   b8178:	2300      	movs	r3, #0
   b817a:	4628      	mov	r0, r5
   b817c:	f7ff ff7e 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
   b8180:	4604      	mov	r4, r0
    if (lock) {
   b8182:	f1b8 0f00 	cmp.w	r8, #0
   b8186:	d002      	beq.n	b818e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b8188:	6868      	ldr	r0, [r5, #4]
   b818a:	f001 fe26 	bl	b9dda <_ZN7TwoWire6unlockEv>
}
   b818e:	4620      	mov	r0, r4
   b8190:	b004      	add	sp, #16
   b8192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8196 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8196:	b513      	push	{r0, r1, r4, lr}
   b8198:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b819a:	f10d 0207 	add.w	r2, sp, #7
   b819e:	f7ff fedd 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b81a2:	b128      	cbz	r0, b81b0 <_ZN6AB180510isBitClearEhhb+0x1a>
   b81a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b81a8:	421c      	tst	r4, r3
   b81aa:	bf0c      	ite	eq
   b81ac:	2001      	moveq	r0, #1
   b81ae:	2000      	movne	r0, #0
}
   b81b0:	b002      	add	sp, #8
   b81b2:	bd10      	pop	{r4, pc}

000b81b4 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b81b4:	b513      	push	{r0, r1, r4, lr}
   b81b6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b81b8:	f10d 0207 	add.w	r2, sp, #7
   b81bc:	f7ff fece 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b81c0:	b128      	cbz	r0, b81ce <_ZN6AB18058isBitSetEhhb+0x1a>
   b81c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b81c6:	421c      	tst	r4, r3
   b81c8:	bf14      	ite	ne
   b81ca:	2001      	movne	r0, #1
   b81cc:	2000      	moveq	r0, #0
}
   b81ce:	b002      	add	sp, #8
   b81d0:	bd10      	pop	{r4, pc}

000b81d2 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b81d2:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b81d4:	43d2      	mvns	r2, r2
   b81d6:	9300      	str	r3, [sp, #0]
   b81d8:	b2d2      	uxtb	r2, r2
   b81da:	2300      	movs	r3, #0
   b81dc:	f7ff ffac 	bl	b8138 <_ZN6AB180512maskRegisterEhhhb>
}
   b81e0:	b003      	add	sp, #12
   b81e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b81e8 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b81e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b81ea:	2301      	movs	r3, #1
   b81ec:	f10d 0207 	add.w	r2, sp, #7
   b81f0:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b81f2:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b81f4:	f7ff feb2 	bl	b7f5c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b81f8:	4605      	mov	r5, r0
   b81fa:	b938      	cbnz	r0, b820c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b81fc:	491e      	ldr	r1, [pc, #120]	; (b8278 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b81fe:	481f      	ldr	r0, [pc, #124]	; (b827c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b8200:	22ad      	movs	r2, #173	; 0xad
   b8202:	f7fe fd49 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
}
   b8206:	4628      	mov	r0, r5
   b8208:	b003      	add	sp, #12
   b820a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b820c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8210:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b8214:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b8218:	d00b      	beq.n	b8232 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b821a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b821c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b821e:	210f      	movs	r1, #15
   b8220:	4620      	mov	r0, r4
   b8222:	f7ff ffd6 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b8226:	4a16      	ldr	r2, [pc, #88]	; (b8280 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b8228:	4916      	ldr	r1, [pc, #88]	; (b8284 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b822a:	4814      	ldr	r0, [pc, #80]	; (b827c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b822c:	f7fc fa34 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b8230:	e7e9      	b.n	b8206 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b8232:	2208      	movs	r2, #8
   b8234:	2117      	movs	r1, #23
   b8236:	4620      	mov	r0, r4
   b8238:	f7ff ffbc 	bl	b81b4 <_ZN6AB18058isBitSetEhhb>
   b823c:	b118      	cbz	r0, b8246 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b823e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b8240:	4a11      	ldr	r2, [pc, #68]	; (b8288 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b8242:	61e3      	str	r3, [r4, #28]
   b8244:	e7f0      	b.n	b8228 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b8246:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b824a:	071a      	lsls	r2, r3, #28
   b824c:	d509      	bpl.n	b8262 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b824e:	2303      	movs	r3, #3
   b8250:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b8252:	2208      	movs	r2, #8
   b8254:	2301      	movs	r3, #1
   b8256:	210f      	movs	r1, #15
   b8258:	4620      	mov	r0, r4
   b825a:	f7ff ffba 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b825e:	4a0b      	ldr	r2, [pc, #44]	; (b828c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b8260:	e7e2      	b.n	b8228 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b8262:	075b      	lsls	r3, r3, #29
   b8264:	d5cf      	bpl.n	b8206 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b8266:	2204      	movs	r2, #4
   b8268:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b826a:	2301      	movs	r3, #1
   b826c:	210f      	movs	r1, #15
   b826e:	4620      	mov	r0, r4
   b8270:	f7ff ffaf 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b8274:	4a06      	ldr	r2, [pc, #24]	; (b8290 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b8276:	e7d7      	b.n	b8228 <_ZN6AB180516updateWakeReasonEv+0x40>
   b8278:	000bcb41 	.word	0x000bcb41
   b827c:	2003e62c 	.word	0x2003e62c
   b8280:	000bcb12 	.word	0x000bcb12
   b8284:	000bcb60 	.word	0x000bcb60
   b8288:	000bcb1b 	.word	0x000bcb1b
   b828c:	000bcb2b 	.word	0x000bcb2b
   b8290:	000bcb3b 	.word	0x000bcb3b

000b8294 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8294:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b8296:	9300      	str	r3, [sp, #0]
   b8298:	4613      	mov	r3, r2
   b829a:	22ff      	movs	r2, #255	; 0xff
   b829c:	f7ff ff4c 	bl	b8138 <_ZN6AB180512maskRegisterEhhhb>
}
   b82a0:	b003      	add	sp, #12
   b82a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b82a8 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b82a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82aa:	460f      	mov	r7, r1
   b82ac:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b82ae:	2301      	movs	r3, #1
   b82b0:	2200      	movs	r2, #0
   b82b2:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b82b4:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b82b6:	f7ff fee1 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b82ba:	4604      	mov	r4, r0
   b82bc:	b938      	cbnz	r0, b82ce <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b82be:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b82c2:	491f      	ldr	r1, [pc, #124]	; (b8340 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b82c4:	481f      	ldr	r0, [pc, #124]	; (b8344 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b82c6:	f7fe fce7 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
}
   b82ca:	4620      	mov	r0, r4
   b82cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b82ce:	2301      	movs	r3, #1
   b82d0:	2223      	movs	r2, #35	; 0x23
   b82d2:	2118      	movs	r1, #24
   b82d4:	4628      	mov	r0, r5
   b82d6:	f7ff fed1 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b82da:	4604      	mov	r4, r0
   b82dc:	b910      	cbnz	r0, b82e4 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b82de:	f240 229b 	movw	r2, #667	; 0x29b
   b82e2:	e7ee      	b.n	b82c2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b82e4:	2fff      	cmp	r7, #255	; 0xff
   b82e6:	bfa8      	it	ge
   b82e8:	27ff      	movge	r7, #255	; 0xff
   b82ea:	2f01      	cmp	r7, #1
   b82ec:	bfb8      	it	lt
   b82ee:	2701      	movlt	r7, #1
   b82f0:	2301      	movs	r3, #1
   b82f2:	b2fa      	uxtb	r2, r7
   b82f4:	2119      	movs	r1, #25
   b82f6:	4628      	mov	r0, r5
   b82f8:	f7ff fec0 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b82fc:	4604      	mov	r4, r0
   b82fe:	b910      	cbnz	r0, b8306 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b8300:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b8304:	e7dd      	b.n	b82c2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b8306:	2301      	movs	r3, #1
   b8308:	2208      	movs	r2, #8
   b830a:	2112      	movs	r1, #18
   b830c:	4628      	mov	r0, r5
   b830e:	f7ff ffc1 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b8312:	4604      	mov	r4, r0
   b8314:	b910      	cbnz	r0, b831c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b8316:	f240 22af 	movw	r2, #687	; 0x2af
   b831a:	e7d2      	b.n	b82c2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b831c:	2e00      	cmp	r6, #0
   b831e:	bf14      	ite	ne
   b8320:	2203      	movne	r2, #3
   b8322:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b8324:	2301      	movs	r3, #1
   b8326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b832a:	2118      	movs	r1, #24
   b832c:	4628      	mov	r0, r5
   b832e:	f7ff fea5 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b8332:	4604      	mov	r4, r0
   b8334:	2800      	cmp	r0, #0
   b8336:	d1c8      	bne.n	b82ca <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b8338:	f240 22b9 	movw	r2, #697	; 0x2b9
   b833c:	e7c1      	b.n	b82c2 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b833e:	bf00      	nop
   b8340:	000bcb71 	.word	0x000bcb71
   b8344:	2003e62c 	.word	0x2003e62c

000b8348 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b8348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b834c:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b834e:	4605      	mov	r5, r0
   b8350:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b8352:	484f      	ldr	r0, [pc, #316]	; (b8490 <_ZN6AB180513deepPowerDownEi+0x148>)
   b8354:	494f      	ldr	r1, [pc, #316]	; (b8494 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b8356:	f7fc f99f 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b835a:	2100      	movs	r1, #0
   b835c:	4628      	mov	r0, r5
   b835e:	f7ff fe99 	bl	b8094 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b8362:	4604      	mov	r4, r0
   b8364:	b948      	cbnz	r0, b837a <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b8366:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b836a:	494b      	ldr	r1, [pc, #300]	; (b8498 <_ZN6AB180513deepPowerDownEi+0x150>)
   b836c:	4848      	ldr	r0, [pc, #288]	; (b8490 <_ZN6AB180513deepPowerDownEi+0x148>)
   b836e:	f7fe fc93 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
}
   b8372:	4620      	mov	r0, r4
   b8374:	b003      	add	sp, #12
   b8376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b837a:	2301      	movs	r3, #1
   b837c:	461a      	mov	r2, r3
   b837e:	2130      	movs	r1, #48	; 0x30
   b8380:	4628      	mov	r0, r5
   b8382:	f7ff ff87 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b8386:	4604      	mov	r4, r0
   b8388:	b910      	cbnz	r0, b8390 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b838a:	f240 2205 	movw	r2, #517	; 0x205
   b838e:	e7ec      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b8390:	2210      	movs	r2, #16
   b8392:	2301      	movs	r3, #1
   b8394:	4611      	mov	r1, r2
   b8396:	4628      	mov	r0, r5
   b8398:	f7ff ff1b 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b839c:	4604      	mov	r4, r0
   b839e:	b910      	cbnz	r0, b83a6 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b83a0:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b83a4:	e7e1      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b83a6:	2301      	movs	r3, #1
   b83a8:	2226      	movs	r2, #38	; 0x26
   b83aa:	2113      	movs	r1, #19
   b83ac:	4628      	mov	r0, r5
   b83ae:	f7ff fe65 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b83b2:	4604      	mov	r4, r0
   b83b4:	b910      	cbnz	r0, b83bc <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b83b6:	f240 2213 	movw	r2, #531	; 0x213
   b83ba:	e7d6      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b83bc:	2601      	movs	r6, #1
   b83be:	9600      	str	r6, [sp, #0]
   b83c0:	4633      	mov	r3, r6
   b83c2:	22fc      	movs	r2, #252	; 0xfc
   b83c4:	2111      	movs	r1, #17
   b83c6:	4628      	mov	r0, r5
   b83c8:	f7ff feb6 	bl	b8138 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b83cc:	4604      	mov	r4, r0
   b83ce:	b910      	cbnz	r0, b83d6 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b83d0:	f240 221b 	movw	r2, #539	; 0x21b
   b83d4:	e7c9      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b83d6:	2200      	movs	r2, #0
   b83d8:	4639      	mov	r1, r7
   b83da:	4628      	mov	r0, r5
   b83dc:	f7ff ff64 	bl	b82a8 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b83e0:	4604      	mov	r4, r0
   b83e2:	b910      	cbnz	r0, b83ea <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b83e4:	f240 2222 	movw	r2, #546	; 0x222
   b83e8:	e7bf      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b83ea:	9600      	str	r6, [sp, #0]
   b83ec:	2302      	movs	r3, #2
   b83ee:	2277      	movs	r2, #119	; 0x77
   b83f0:	2110      	movs	r1, #16
   b83f2:	4628      	mov	r0, r5
   b83f4:	f7ff fea0 	bl	b8138 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b83f8:	4604      	mov	r4, r0
   b83fa:	b910      	cbnz	r0, b8402 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b83fc:	f240 222b 	movw	r2, #555	; 0x22b
   b8400:	e7b3      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b8402:	4633      	mov	r3, r6
   b8404:	2204      	movs	r2, #4
   b8406:	211c      	movs	r1, #28
   b8408:	4628      	mov	r0, r5
   b840a:	f7ff ff43 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b840e:	4604      	mov	r4, r0
   b8410:	b910      	cbnz	r0, b8418 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b8412:	f240 2232 	movw	r2, #562	; 0x232
   b8416:	e7a8      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b8418:	9600      	str	r6, [sp, #0]
   b841a:	2318      	movs	r3, #24
   b841c:	22e3      	movs	r2, #227	; 0xe3
   b841e:	2111      	movs	r1, #17
   b8420:	4628      	mov	r0, r5
   b8422:	f7ff fe89 	bl	b8138 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b8426:	4604      	mov	r4, r0
   b8428:	b910      	cbnz	r0, b8430 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b842a:	f240 2239 	movw	r2, #569	; 0x239
   b842e:	e79c      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b8430:	4633      	mov	r3, r6
   b8432:	22c0      	movs	r2, #192	; 0xc0
   b8434:	2117      	movs	r1, #23
   b8436:	4628      	mov	r0, r5
   b8438:	f7ff fe20 	bl	b807c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b843c:	4604      	mov	r4, r0
   b843e:	b910      	cbnz	r0, b8446 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b8440:	f44f 7210 	mov.w	r2, #576	; 0x240
   b8444:	e791      	b.n	b836a <_ZN6AB180513deepPowerDownEi+0x22>
   b8446:	f000 fb45 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b844a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b84a0 <_ZN6AB180513deepPowerDownEi+0x158>
   b844e:	f8df 8040 	ldr.w	r8, [pc, #64]	; b8490 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b8452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b8456:	4606      	mov	r6, r0
   b8458:	434f      	muls	r7, r1
   b845a:	f000 fb3b 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
   b845e:	1b80      	subs	r0, r0, r6
   b8460:	42b8      	cmp	r0, r7
   b8462:	d20e      	bcs.n	b8482 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b8464:	2201      	movs	r2, #1
   b8466:	2117      	movs	r1, #23
   b8468:	4628      	mov	r0, r5
   b846a:	f7ff fdbd 	bl	b7fe8 <_ZN6AB180512readRegisterEhb>
   b846e:	4649      	mov	r1, r9
   b8470:	4602      	mov	r2, r0
   b8472:	4640      	mov	r0, r8
   b8474:	f7fc f910 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b8478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b847c:	f000 fee8 	bl	b9250 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b8480:	e7eb      	b.n	b845a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b8482:	4906      	ldr	r1, [pc, #24]	; (b849c <_ZN6AB180513deepPowerDownEi+0x154>)
   b8484:	4802      	ldr	r0, [pc, #8]	; (b8490 <_ZN6AB180513deepPowerDownEi+0x148>)
   b8486:	f7fe fc07 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b848a:	f002 f8dd 	bl	ba648 <_ZN11SystemClass5resetEv>
    return true;
   b848e:	e770      	b.n	b8372 <_ZN6AB180513deepPowerDownEi+0x2a>
   b8490:	2003e62c 	.word	0x2003e62c
   b8494:	000bcb9c 	.word	0x000bcb9c
   b8498:	000bcb91 	.word	0x000bcb91
   b849c:	000bcbc2 	.word	0x000bcbc2
   b84a0:	000bcbad 	.word	0x000bcbad

000b84a4 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b84a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b84a8:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b84ac:	4605      	mov	r5, r0
   b84ae:	460c      	mov	r4, r1
   b84b0:	4691      	mov	r9, r2
   b84b2:	461f      	mov	r7, r3
    if (lock) {
   b84b4:	f1ba 0f00 	cmp.w	sl, #0
   b84b8:	d002      	beq.n	b84c0 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b84ba:	6840      	ldr	r0, [r0, #4]
   b84bc:	f001 fc84 	bl	b9dc8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b84c0:	b307      	cbz	r7, b8504 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b84c2:	2f20      	cmp	r7, #32
   b84c4:	463e      	mov	r6, r7
   b84c6:	bf28      	it	cs
   b84c8:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b84ca:	2c7f      	cmp	r4, #127	; 0x7f
   b84cc:	d826      	bhi.n	b851c <_ZN6AB18057readRamEjPhjb+0x78>
   b84ce:	1933      	adds	r3, r6, r4
   b84d0:	2b80      	cmp	r3, #128	; 0x80
   b84d2:	d901      	bls.n	b84d8 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b84d4:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b84d8:	2301      	movs	r3, #1
   b84da:	2204      	movs	r2, #4
   b84dc:	213f      	movs	r1, #63	; 0x3f
   b84de:	4628      	mov	r0, r5
   b84e0:	f7ff fe77 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b84e4:	2300      	movs	r3, #0
   b84e6:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b84ea:	9300      	str	r3, [sp, #0]
   b84ec:	464a      	mov	r2, r9
   b84ee:	4633      	mov	r3, r6
   b84f0:	b2c9      	uxtb	r1, r1
   b84f2:	4628      	mov	r0, r5
   b84f4:	f7ff fce4 	bl	b7ec0 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b84f8:	4680      	mov	r8, r0
   b84fa:	b128      	cbz	r0, b8508 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b84fc:	4434      	add	r4, r6
        dataLen -= count;
   b84fe:	1bbf      	subs	r7, r7, r6
        data += count;
   b8500:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b8502:	e7dd      	b.n	b84c0 <_ZN6AB18057readRamEjPhjb+0x1c>
   b8504:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8508:	f1ba 0f00 	cmp.w	sl, #0
   b850c:	d002      	beq.n	b8514 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b850e:	6868      	ldr	r0, [r5, #4]
   b8510:	f001 fc63 	bl	b9dda <_ZN7TwoWire6unlockEv>
}
   b8514:	4640      	mov	r0, r8
   b8516:	b002      	add	sp, #8
   b8518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b851c:	2301      	movs	r3, #1
   b851e:	2204      	movs	r2, #4
   b8520:	213f      	movs	r1, #63	; 0x3f
   b8522:	4628      	mov	r0, r5
   b8524:	f7ff feb6 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
   b8528:	e7dc      	b.n	b84e4 <_ZN6AB18057readRamEjPhjb+0x40>

000b852a <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b852a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b852e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b8532:	4605      	mov	r5, r0
   b8534:	460c      	mov	r4, r1
   b8536:	4691      	mov	r9, r2
   b8538:	461f      	mov	r7, r3
    if (lock) {
   b853a:	f1ba 0f00 	cmp.w	sl, #0
   b853e:	d002      	beq.n	b8546 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b8540:	6840      	ldr	r0, [r0, #4]
   b8542:	f001 fc41 	bl	b9dc8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b8546:	b307      	cbz	r7, b858a <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b8548:	2f1f      	cmp	r7, #31
   b854a:	463e      	mov	r6, r7
   b854c:	bf28      	it	cs
   b854e:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8550:	2c7f      	cmp	r4, #127	; 0x7f
   b8552:	d826      	bhi.n	b85a2 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b8554:	1933      	adds	r3, r6, r4
   b8556:	2b80      	cmp	r3, #128	; 0x80
   b8558:	d901      	bls.n	b855e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b855a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b855e:	2301      	movs	r3, #1
   b8560:	2204      	movs	r2, #4
   b8562:	213f      	movs	r1, #63	; 0x3f
   b8564:	4628      	mov	r0, r5
   b8566:	f7ff fe34 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b856a:	2300      	movs	r3, #0
   b856c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8570:	9300      	str	r3, [sp, #0]
   b8572:	464a      	mov	r2, r9
   b8574:	4633      	mov	r3, r6
   b8576:	b2c9      	uxtb	r1, r1
   b8578:	4628      	mov	r0, r5
   b857a:	f7ff fd43 	bl	b8004 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b857e:	4680      	mov	r8, r0
   b8580:	b128      	cbz	r0, b858e <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b8582:	4434      	add	r4, r6
        dataLen -= count;
   b8584:	1bbf      	subs	r7, r7, r6
        data += count;
   b8586:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b8588:	e7dd      	b.n	b8546 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b858a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b858e:	f1ba 0f00 	cmp.w	sl, #0
   b8592:	d002      	beq.n	b859a <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b8594:	6868      	ldr	r0, [r5, #4]
   b8596:	f001 fc20 	bl	b9dda <_ZN7TwoWire6unlockEv>
}
   b859a:	4640      	mov	r0, r8
   b859c:	b002      	add	sp, #8
   b859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b85a2:	2301      	movs	r3, #1
   b85a4:	2204      	movs	r2, #4
   b85a6:	213f      	movs	r1, #63	; 0x3f
   b85a8:	4628      	mov	r0, r5
   b85aa:	f7ff fe73 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
   b85ae:	e7dc      	b.n	b856a <_ZN6AB18058writeRamEjPKhjb+0x40>

000b85b0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b85b0:	b530      	push	{r4, r5, lr}
   b85b2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b85b4:	680d      	ldr	r5, [r1, #0]
   b85b6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b85ba:	9503      	str	r5, [sp, #12]
   b85bc:	684d      	ldr	r5, [r1, #4]
   b85be:	9502      	str	r5, [sp, #8]
   b85c0:	688d      	ldr	r5, [r1, #8]
   b85c2:	9501      	str	r5, [sp, #4]
   b85c4:	68c9      	ldr	r1, [r1, #12]
   b85c6:	9100      	str	r1, [sp, #0]
   b85c8:	3301      	adds	r3, #1
   b85ca:	4904      	ldr	r1, [pc, #16]	; (b85dc <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b85cc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b85d0:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b85d2:	f001 ffdb 	bl	ba58c <_ZN6String6formatEPKcz>
}
   b85d6:	4620      	mov	r0, r4
   b85d8:	b005      	add	sp, #20
   b85da:	bd30      	pop	{r4, r5, pc}
   b85dc:	000bcbd4 	.word	0x000bcbd4

000b85e0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b85e0:	0903      	lsrs	r3, r0, #4
}
   b85e2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b85e4:	f000 000f 	and.w	r0, r0, #15
}
   b85e8:	fb02 0003 	mla	r0, r2, r3, r0
   b85ec:	4770      	bx	lr

000b85ee <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b85ee:	b538      	push	{r3, r4, r5, lr}
   b85f0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b85f2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b85f4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b85f6:	f7ff fff3 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b85fa:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b85fc:	7860      	ldrb	r0, [r4, #1]
   b85fe:	f7ff ffef 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b8602:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b8604:	78a0      	ldrb	r0, [r4, #2]
   b8606:	f7ff ffeb 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b860a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b860c:	78e0      	ldrb	r0, [r4, #3]
   b860e:	f7ff ffe7 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b8612:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8614:	7920      	ldrb	r0, [r4, #4]
   b8616:	f7ff ffe3 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b861a:	3801      	subs	r0, #1
   b861c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b861e:	b92d      	cbnz	r5, b862c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8620:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b8622:	7828      	ldrb	r0, [r5, #0]
   b8624:	f7ff ffdc 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b8628:	6188      	str	r0, [r1, #24]
}
   b862a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b862c:	7960      	ldrb	r0, [r4, #5]
   b862e:	f7ff ffd7 	bl	b85e0 <_ZN6AB180510bcdToValueEh>
   b8632:	3064      	adds	r0, #100	; 0x64
   b8634:	1da5      	adds	r5, r4, #6
   b8636:	6148      	str	r0, [r1, #20]
   b8638:	e7f3      	b.n	b8622 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b863c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b863c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b863e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8640:	b088      	sub	sp, #32
   b8642:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8644:	461a      	mov	r2, r3
   b8646:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8648:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b864a:	f7ff fda4 	bl	b8196 <_ZN6AB180510isBitClearEhhb>
   b864e:	b1f0      	cbz	r0, b868e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b8650:	2308      	movs	r3, #8
   b8652:	2601      	movs	r6, #1
   b8654:	4620      	mov	r0, r4
   b8656:	9600      	str	r6, [sp, #0]
   b8658:	eb0d 0203 	add.w	r2, sp, r3
   b865c:	2100      	movs	r1, #0
   b865e:	f7ff fc2f 	bl	b7ec0 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b8662:	4604      	mov	r4, r0
   b8664:	b198      	cbz	r0, b868e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b8666:	4632      	mov	r2, r6
   b8668:	4629      	mov	r1, r5
   b866a:	f10d 0009 	add.w	r0, sp, #9
   b866e:	f7ff ffbe 	bl	b85ee <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b8672:	a804      	add	r0, sp, #16
   b8674:	f7ff ff9c 	bl	b85b0 <_ZN6AB180510tmToStringEPK2tm>
   b8678:	4808      	ldr	r0, [pc, #32]	; (b869c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b867a:	9a04      	ldr	r2, [sp, #16]
   b867c:	4908      	ldr	r1, [pc, #32]	; (b86a0 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b867e:	f7fc f80b 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b8682:	a804      	add	r0, sp, #16
   b8684:	f001 fe42 	bl	ba30c <_ZN6StringD1Ev>
}
   b8688:	4620      	mov	r0, r4
   b868a:	b008      	add	sp, #32
   b868c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b868e:	2224      	movs	r2, #36	; 0x24
   b8690:	2100      	movs	r1, #0
   b8692:	4628      	mov	r0, r5
   b8694:	f003 fa00 	bl	bba98 <memset>
   b8698:	2400      	movs	r4, #0
   b869a:	e7f5      	b.n	b8688 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b869c:	2003e62c 	.word	0x2003e62c
   b86a0:	000bcbf2 	.word	0x000bcbf2

000b86a4 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b86a4:	b530      	push	{r4, r5, lr}
   b86a6:	b08b      	sub	sp, #44	; 0x2c
   b86a8:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b86aa:	a901      	add	r1, sp, #4
   b86ac:	f7ff ffc6 	bl	b863c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b86b0:	4604      	mov	r4, r0
   b86b2:	b120      	cbz	r0, b86be <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b86b4:	a801      	add	r0, sp, #4
   b86b6:	f000 fdb7 	bl	b9228 <mktime>
   b86ba:	e9c5 0100 	strd	r0, r1, [r5]
}
   b86be:	4620      	mov	r0, r4
   b86c0:	b00b      	add	sp, #44	; 0x2c
   b86c2:	bd30      	pop	{r4, r5, pc}

000b86c4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b86c4:	230a      	movs	r3, #10
   b86c6:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b86ca:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b86ce:	fb91 f2f3 	sdiv	r2, r1, r3
   b86d2:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b86d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b86da:	b2c0      	uxtb	r0, r0
   b86dc:	4770      	bx	lr

000b86de <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b86de:	b570      	push	{r4, r5, r6, lr}
   b86e0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b86e2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b86e4:	460c      	mov	r4, r1
   b86e6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b86e8:	f7ff ffec 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b86ec:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b86ee:	6868      	ldr	r0, [r5, #4]
   b86f0:	f7ff ffe8 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b86f4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b86f6:	68a8      	ldr	r0, [r5, #8]
   b86f8:	f7ff ffe4 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b86fc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b86fe:	68e8      	ldr	r0, [r5, #12]
   b8700:	f7ff ffe0 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b8704:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8706:	6928      	ldr	r0, [r5, #16]
   b8708:	3001      	adds	r0, #1
   b870a:	f7ff ffdb 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b870e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b8710:	b92e      	cbnz	r6, b871e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8712:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b8714:	69a8      	ldr	r0, [r5, #24]
   b8716:	f7ff ffd5 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b871a:	7030      	strb	r0, [r6, #0]
}
   b871c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b871e:	696a      	ldr	r2, [r5, #20]
   b8720:	2364      	movs	r3, #100	; 0x64
   b8722:	fb92 f0f3 	sdiv	r0, r2, r3
   b8726:	fb03 2010 	mls	r0, r3, r0, r2
   b872a:	f7ff ffcb 	bl	b86c4 <_ZN6AB180510valueToBcdEi>
   b872e:	1da6      	adds	r6, r4, #6
   b8730:	7160      	strb	r0, [r4, #5]
   b8732:	e7ef      	b.n	b8714 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b8734 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b8734:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8736:	b087      	sub	sp, #28
   b8738:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b873a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b873c:	4616      	mov	r6, r2
   b873e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b8740:	f7ff ff36 	bl	b85b0 <_ZN6AB180510tmToStringEPK2tm>
   b8744:	481e      	ldr	r0, [pc, #120]	; (b87c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8746:	9a02      	ldr	r2, [sp, #8]
   b8748:	491e      	ldr	r1, [pc, #120]	; (b87c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b874a:	f7fb ffa5 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b874e:	a802      	add	r0, sp, #8
   b8750:	f001 fddc 	bl	ba30c <_ZN6StringD1Ev>
    if (lock) {
   b8754:	b116      	cbz	r6, b875c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b8756:	6868      	ldr	r0, [r5, #4]
   b8758:	f001 fb36 	bl	b9dc8 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b875c:	4620      	mov	r0, r4
   b875e:	2201      	movs	r2, #1
   b8760:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b8764:	2700      	movs	r7, #0
   b8766:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b876a:	f7ff ffb8 	bl	b86de <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b876e:	2301      	movs	r3, #1
   b8770:	461a      	mov	r2, r3
   b8772:	2110      	movs	r1, #16
   b8774:	4628      	mov	r0, r5
   b8776:	f7ff fd8d 	bl	b8294 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b877a:	4604      	mov	r4, r0
   b877c:	b1e8      	cbz	r0, b87ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b877e:	2308      	movs	r3, #8
   b8780:	9700      	str	r7, [sp, #0]
   b8782:	eb0d 0203 	add.w	r2, sp, r3
   b8786:	4639      	mov	r1, r7
   b8788:	4628      	mov	r0, r5
   b878a:	f7ff fc3b 	bl	b8004 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b878e:	4604      	mov	r4, r0
   b8790:	b160      	cbz	r0, b87ac <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8792:	2301      	movs	r3, #1
   b8794:	461a      	mov	r2, r3
   b8796:	2110      	movs	r1, #16
   b8798:	4628      	mov	r0, r5
   b879a:	f7ff fd1a 	bl	b81d2 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b879e:	b116      	cbz	r6, b87a6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b87a0:	6868      	ldr	r0, [r5, #4]
   b87a2:	f001 fb1a 	bl	b9dda <_ZN7TwoWire6unlockEv>
}
   b87a6:	4620      	mov	r0, r4
   b87a8:	b007      	add	sp, #28
   b87aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b87ac:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b87b0:	4905      	ldr	r1, [pc, #20]	; (b87c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b87b2:	4803      	ldr	r0, [pc, #12]	; (b87c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b87b4:	f7fe fa70 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
   b87b8:	e7f1      	b.n	b879e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b87ba:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b87be:	e7f7      	b.n	b87b0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b87c0:	2003e62c 	.word	0x2003e62c
   b87c4:	000bcc00 	.word	0x000bcc00
   b87c8:	000bcc0e 	.word	0x000bcc0e

000b87cc <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b87cc:	b513      	push	{r0, r1, r4, lr}
   b87ce:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b87d0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b87d2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b87d6:	f003 f919 	bl	bba0c <gmtime>
    return setRtcFromTm(tm, lock);
   b87da:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b87de:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b87e0:	4620      	mov	r0, r4
   b87e2:	f7ff ffa7 	bl	b8734 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b87e6:	b002      	add	sp, #8
   b87e8:	bd10      	pop	{r4, pc}
	...

000b87ec <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b87ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b87ee:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b87f0:	b089      	sub	sp, #36	; 0x24
   b87f2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b87f4:	bb75      	cbnz	r5, b8854 <_ZN6AB18054loopEv+0x68>
   b87f6:	f002 f8e5 	bl	ba9c4 <_ZN9TimeClass7isValidEv>
   b87fa:	b358      	cbz	r0, b8854 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b87fc:	2600      	movs	r6, #0
   b87fe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b8800:	a904      	add	r1, sp, #16
   b8802:	4628      	mov	r0, r5
        tm = 0;
   b8804:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b8808:	f000 fc16 	bl	b9038 <spark_sync_time_last>
   b880c:	b310      	cbz	r0, b8854 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b880e:	2501      	movs	r5, #1
   b8810:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b8812:	f002 f8f4 	bl	ba9fe <_ZN9TimeClass3nowEv>
   b8816:	17c3      	asrs	r3, r0, #31
   b8818:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b881c:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b881e:	9500      	str	r5, [sp, #0]
   b8820:	4620      	mov	r0, r4
   b8822:	f7ff ffd3 	bl	b87cc <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b8826:	a902      	add	r1, sp, #8
   b8828:	4620      	mov	r0, r4
        time = 0;
   b882a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b882e:	f7ff ff39 	bl	b86a4 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8832:	4b13      	ldr	r3, [pc, #76]	; (b8880 <_ZN6AB18054loopEv+0x94>)
   b8834:	4913      	ldr	r1, [pc, #76]	; (b8884 <_ZN6AB18054loopEv+0x98>)
   b8836:	681b      	ldr	r3, [r3, #0]
   b8838:	9300      	str	r3, [sp, #0]
   b883a:	a804      	add	r0, sp, #16
   b883c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8840:	f002 f87e 	bl	ba940 <_ZN9TimeClass6formatExPKc>
   b8844:	4810      	ldr	r0, [pc, #64]	; (b8888 <_ZN6AB18054loopEv+0x9c>)
   b8846:	9a04      	ldr	r2, [sp, #16]
   b8848:	4910      	ldr	r1, [pc, #64]	; (b888c <_ZN6AB18054loopEv+0xa0>)
   b884a:	f7fb ff25 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b884e:	a804      	add	r0, sp, #16
   b8850:	f001 fd5c 	bl	ba30c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b8854:	6963      	ldr	r3, [r4, #20]
   b8856:	b18b      	cbz	r3, b887c <_ZN6AB18054loopEv+0x90>
   b8858:	f000 f93c 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b885c:	6923      	ldr	r3, [r4, #16]
   b885e:	1ac0      	subs	r0, r0, r3
   b8860:	6963      	ldr	r3, [r4, #20]
   b8862:	4298      	cmp	r0, r3
   b8864:	d30a      	bcc.n	b887c <_ZN6AB18054loopEv+0x90>
   b8866:	f000 f935 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b886a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b886e:	6120      	str	r0, [r4, #16]
            setWDT();
   b8870:	4620      	mov	r0, r4
}
   b8872:	b009      	add	sp, #36	; 0x24
   b8874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b8878:	f7ff bc0c 	b.w	b8094 <_ZN6AB18056setWDTEi>
}
   b887c:	b009      	add	sp, #36	; 0x24
   b887e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8880:	2003e374 	.word	0x2003e374
   b8884:	2003e69c 	.word	0x2003e69c
   b8888:	2003e62c 	.word	0x2003e62c
   b888c:	000bcc29 	.word	0x000bcc29

000b8890 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b8890:	b530      	push	{r4, r5, lr}
   b8892:	4604      	mov	r4, r0
   b8894:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b8896:	b111      	cbz	r1, b889e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b8898:	6840      	ldr	r0, [r0, #4]
   b889a:	f001 fa3d 	bl	b9d18 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b889e:	4620      	mov	r0, r4
   b88a0:	f7ff fb64 	bl	b7f6c <_ZN6AB180510detectChipEv>
   b88a4:	ad06      	add	r5, sp, #24
   b88a6:	2800      	cmp	r0, #0
   b88a8:	d037      	beq.n	b891a <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b88aa:	4620      	mov	r0, r4
   b88ac:	f7ff fc9c 	bl	b81e8 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b88b0:	2301      	movs	r3, #1
   b88b2:	461a      	mov	r2, r3
   b88b4:	2110      	movs	r1, #16
   b88b6:	4620      	mov	r0, r4
   b88b8:	f7ff fc6d 	bl	b8196 <_ZN6AB180510isBitClearEhhb>
   b88bc:	b1d8      	cbz	r0, b88f6 <_ZN6AB18055setupEb+0x66>
   b88be:	f002 f881 	bl	ba9c4 <_ZN9TimeClass7isValidEv>
   b88c2:	b9c0      	cbnz	r0, b88f6 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b88c4:	a902      	add	r1, sp, #8
   b88c6:	4620      	mov	r0, r4
   b88c8:	f7ff feec 	bl	b86a4 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b88cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b88d0:	f001 ff7c 	bl	ba7cc <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b88d4:	4b13      	ldr	r3, [pc, #76]	; (b8924 <_ZN6AB18055setupEb+0x94>)
   b88d6:	4914      	ldr	r1, [pc, #80]	; (b8928 <_ZN6AB18055setupEb+0x98>)
   b88d8:	681b      	ldr	r3, [r3, #0]
   b88da:	9300      	str	r3, [sp, #0]
   b88dc:	4628      	mov	r0, r5
   b88de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b88e2:	f002 f82d 	bl	ba940 <_ZN9TimeClass6formatExPKc>
   b88e6:	4811      	ldr	r0, [pc, #68]	; (b892c <_ZN6AB18055setupEb+0x9c>)
   b88e8:	9a06      	ldr	r2, [sp, #24]
   b88ea:	4911      	ldr	r1, [pc, #68]	; (b8930 <_ZN6AB18055setupEb+0xa0>)
   b88ec:	f7fb fed4 	bl	b4698 <_ZNK5spark6Logger4infoEPKcz>
   b88f0:	4628      	mov	r0, r5
   b88f2:	f001 fd0b 	bl	ba30c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b88f6:	4b0f      	ldr	r3, [pc, #60]	; (b8934 <_ZN6AB18055setupEb+0xa4>)
   b88f8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b88fa:	4b0f      	ldr	r3, [pc, #60]	; (b8938 <_ZN6AB18055setupEb+0xa8>)
   b88fc:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b88fe:	4b0f      	ldr	r3, [pc, #60]	; (b893c <_ZN6AB18055setupEb+0xac>)
   b8900:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b8902:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b8906:	2300      	movs	r3, #0
   b8908:	a802      	add	r0, sp, #8
   b890a:	9500      	str	r5, [sp, #0]
   b890c:	f7fc fbb0 	bl	b5070 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b8910:	4628      	mov	r0, r5
   b8912:	f7fb fdd3 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
}
   b8916:	b00b      	add	sp, #44	; 0x2c
   b8918:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b891a:	4909      	ldr	r1, [pc, #36]	; (b8940 <_ZN6AB18055setupEb+0xb0>)
   b891c:	4803      	ldr	r0, [pc, #12]	; (b892c <_ZN6AB18055setupEb+0x9c>)
   b891e:	f7fe f9bb 	bl	b6c98 <_ZNK5spark6Logger5errorEPKcz>
   b8922:	e7e8      	b.n	b88f6 <_ZN6AB18055setupEb+0x66>
   b8924:	2003e374 	.word	0x2003e374
   b8928:	2003e69c 	.word	0x2003e69c
   b892c:	2003e62c 	.word	0x2003e62c
   b8930:	000bcc3f 	.word	0x000bcc3f
   b8934:	000b8119 	.word	0x000b8119
   b8938:	000b41f9 	.word	0x000b41f9
   b893c:	000b41e5 	.word	0x000b41e5
   b8940:	000bcc5c 	.word	0x000bcc5c

000b8944 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
   b8944:	4b01      	ldr	r3, [pc, #4]	; (b894c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b8946:	4a02      	ldr	r2, [pc, #8]	; (b8950 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b8948:	601a      	str	r2, [r3, #0]
}
   b894a:	4770      	bx	lr
   b894c:	2003e62c 	.word	0x2003e62c
   b8950:	000bcc74 	.word	0x000bcc74

000b8954 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8954:	b508      	push	{r3, lr}
   b8956:	4b02      	ldr	r3, [pc, #8]	; (b8960 <cellular_signal+0xc>)
   b8958:	681b      	ldr	r3, [r3, #0]
   b895a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b895c:	9301      	str	r3, [sp, #4]
   b895e:	bd08      	pop	{r3, pc}
   b8960:	00030274 	.word	0x00030274

000b8964 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b8964:	b508      	push	{r3, lr}
   b8966:	4b02      	ldr	r3, [pc, #8]	; (b8970 <os_thread_create+0xc>)
   b8968:	681b      	ldr	r3, [r3, #0]
   b896a:	685b      	ldr	r3, [r3, #4]
   b896c:	9301      	str	r3, [sp, #4]
   b896e:	bd08      	pop	{r3, pc}
   b8970:	00030248 	.word	0x00030248

000b8974 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   b8974:	b508      	push	{r3, lr}
   b8976:	4b02      	ldr	r3, [pc, #8]	; (b8980 <os_thread_is_current+0xc>)
   b8978:	681b      	ldr	r3, [r3, #0]
   b897a:	689b      	ldr	r3, [r3, #8]
   b897c:	9301      	str	r3, [sp, #4]
   b897e:	bd08      	pop	{r3, pc}
   b8980:	00030248 	.word	0x00030248

000b8984 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b8984:	b508      	push	{r3, lr}
   b8986:	4b02      	ldr	r3, [pc, #8]	; (b8990 <os_thread_yield+0xc>)
   b8988:	681b      	ldr	r3, [r3, #0]
   b898a:	68db      	ldr	r3, [r3, #12]
   b898c:	9301      	str	r3, [sp, #4]
   b898e:	bd08      	pop	{r3, pc}
   b8990:	00030248 	.word	0x00030248

000b8994 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   b8994:	b508      	push	{r3, lr}
   b8996:	4b02      	ldr	r3, [pc, #8]	; (b89a0 <os_thread_join+0xc>)
   b8998:	681b      	ldr	r3, [r3, #0]
   b899a:	691b      	ldr	r3, [r3, #16]
   b899c:	9301      	str	r3, [sp, #4]
   b899e:	bd08      	pop	{r3, pc}
   b89a0:	00030248 	.word	0x00030248

000b89a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   b89a4:	b508      	push	{r3, lr}
   b89a6:	4b02      	ldr	r3, [pc, #8]	; (b89b0 <os_thread_cleanup+0xc>)
   b89a8:	681b      	ldr	r3, [r3, #0]
   b89aa:	695b      	ldr	r3, [r3, #20]
   b89ac:	9301      	str	r3, [sp, #4]
   b89ae:	bd08      	pop	{r3, pc}
   b89b0:	00030248 	.word	0x00030248

000b89b4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b89b4:	b508      	push	{r3, lr}
   b89b6:	4b02      	ldr	r3, [pc, #8]	; (b89c0 <os_thread_scheduling+0xc>)
   b89b8:	681b      	ldr	r3, [r3, #0]
   b89ba:	69db      	ldr	r3, [r3, #28]
   b89bc:	9301      	str	r3, [sp, #4]
   b89be:	bd08      	pop	{r3, pc}
   b89c0:	00030248 	.word	0x00030248

000b89c4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b89c4:	b508      	push	{r3, lr}
   b89c6:	4b02      	ldr	r3, [pc, #8]	; (b89d0 <os_timer_create+0xc>)
   b89c8:	681b      	ldr	r3, [r3, #0]
   b89ca:	6a1b      	ldr	r3, [r3, #32]
   b89cc:	9301      	str	r3, [sp, #4]
   b89ce:	bd08      	pop	{r3, pc}
   b89d0:	00030248 	.word	0x00030248

000b89d4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b89d4:	b508      	push	{r3, lr}
   b89d6:	4b02      	ldr	r3, [pc, #8]	; (b89e0 <os_timer_destroy+0xc>)
   b89d8:	681b      	ldr	r3, [r3, #0]
   b89da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89dc:	9301      	str	r3, [sp, #4]
   b89de:	bd08      	pop	{r3, pc}
   b89e0:	00030248 	.word	0x00030248

000b89e4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b89e4:	b508      	push	{r3, lr}
   b89e6:	4b02      	ldr	r3, [pc, #8]	; (b89f0 <os_timer_get_id+0xc>)
   b89e8:	681b      	ldr	r3, [r3, #0]
   b89ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89ec:	9301      	str	r3, [sp, #4]
   b89ee:	bd08      	pop	{r3, pc}
   b89f0:	00030248 	.word	0x00030248

000b89f4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b02      	ldr	r3, [pc, #8]	; (b8a00 <os_timer_change+0xc>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b89fc:	9301      	str	r3, [sp, #4]
   b89fe:	bd08      	pop	{r3, pc}
   b8a00:	00030248 	.word	0x00030248

000b8a04 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b8a04:	b508      	push	{r3, lr}
   b8a06:	4b02      	ldr	r3, [pc, #8]	; (b8a10 <os_mutex_create+0xc>)
   b8a08:	681b      	ldr	r3, [r3, #0]
   b8a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a0c:	9301      	str	r3, [sp, #4]
   b8a0e:	bd08      	pop	{r3, pc}
   b8a10:	00030248 	.word	0x00030248

000b8a14 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <os_mutex_lock+0xc>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8a1c:	9301      	str	r3, [sp, #4]
   b8a1e:	bd08      	pop	{r3, pc}
   b8a20:	00030248 	.word	0x00030248

000b8a24 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b8a24:	b508      	push	{r3, lr}
   b8a26:	4b02      	ldr	r3, [pc, #8]	; (b8a30 <os_mutex_unlock+0xc>)
   b8a28:	681b      	ldr	r3, [r3, #0]
   b8a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a2c:	9301      	str	r3, [sp, #4]
   b8a2e:	bd08      	pop	{r3, pc}
   b8a30:	00030248 	.word	0x00030248

000b8a34 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8a34:	b508      	push	{r3, lr}
   b8a36:	4b02      	ldr	r3, [pc, #8]	; (b8a40 <os_mutex_recursive_create+0xc>)
   b8a38:	681b      	ldr	r3, [r3, #0]
   b8a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8a3c:	9301      	str	r3, [sp, #4]
   b8a3e:	bd08      	pop	{r3, pc}
   b8a40:	00030248 	.word	0x00030248

000b8a44 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8a44:	b508      	push	{r3, lr}
   b8a46:	4b02      	ldr	r3, [pc, #8]	; (b8a50 <os_mutex_recursive_lock+0xc>)
   b8a48:	681b      	ldr	r3, [r3, #0]
   b8a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8a4c:	9301      	str	r3, [sp, #4]
   b8a4e:	bd08      	pop	{r3, pc}
   b8a50:	00030248 	.word	0x00030248

000b8a54 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8a54:	b508      	push	{r3, lr}
   b8a56:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <os_mutex_recursive_unlock+0xc>)
   b8a58:	681b      	ldr	r3, [r3, #0]
   b8a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8a5c:	9301      	str	r3, [sp, #4]
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	00030248 	.word	0x00030248

000b8a64 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b02      	ldr	r3, [pc, #8]	; (b8a70 <os_thread_exit+0xc>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8a6c:	9301      	str	r3, [sp, #4]
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	00030248 	.word	0x00030248

000b8a74 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b8a74:	b508      	push	{r3, lr}
   b8a76:	4b02      	ldr	r3, [pc, #8]	; (b8a80 <os_timer_set_id+0xc>)
   b8a78:	681b      	ldr	r3, [r3, #0]
   b8a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8a7c:	9301      	str	r3, [sp, #4]
   b8a7e:	bd08      	pop	{r3, pc}
   b8a80:	00030248 	.word	0x00030248

000b8a84 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8a84:	b508      	push	{r3, lr}
   b8a86:	4b02      	ldr	r3, [pc, #8]	; (b8a90 <HAL_Feature_Set+0xc>)
   b8a88:	681b      	ldr	r3, [r3, #0]
   b8a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8a8c:	9301      	str	r3, [sp, #4]
   b8a8e:	bd08      	pop	{r3, pc}
   b8a90:	00030234 	.word	0x00030234

000b8a94 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   b8a94:	b508      	push	{r3, lr}
   b8a96:	4b02      	ldr	r3, [pc, #8]	; (b8aa0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   b8a98:	681b      	ldr	r3, [r3, #0]
   b8a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8a9c:	9301      	str	r3, [sp, #4]
   b8a9e:	bd08      	pop	{r3, pc}
   b8aa0:	00030234 	.word	0x00030234

000b8aa4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4b02      	ldr	r3, [pc, #8]	; (b8ab0 <HAL_RNG_GetRandomNumber+0xc>)
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	685b      	ldr	r3, [r3, #4]
   b8aac:	9301      	str	r3, [sp, #4]
   b8aae:	bd08      	pop	{r3, pc}
   b8ab0:	00030218 	.word	0x00030218

000b8ab4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b8ab4:	b508      	push	{r3, lr}
   b8ab6:	4b02      	ldr	r3, [pc, #8]	; (b8ac0 <HAL_Delay_Milliseconds+0xc>)
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	689b      	ldr	r3, [r3, #8]
   b8abc:	9301      	str	r3, [sp, #4]
   b8abe:	bd08      	pop	{r3, pc}
   b8ac0:	00030218 	.word	0x00030218

000b8ac4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8ac4:	b508      	push	{r3, lr}
   b8ac6:	4b02      	ldr	r3, [pc, #8]	; (b8ad0 <HAL_Delay_Microseconds+0xc>)
   b8ac8:	681b      	ldr	r3, [r3, #0]
   b8aca:	68db      	ldr	r3, [r3, #12]
   b8acc:	9301      	str	r3, [sp, #4]
   b8ace:	bd08      	pop	{r3, pc}
   b8ad0:	00030218 	.word	0x00030218

000b8ad4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8ad4:	b508      	push	{r3, lr}
   b8ad6:	4b02      	ldr	r3, [pc, #8]	; (b8ae0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8ad8:	681b      	ldr	r3, [r3, #0]
   b8ada:	695b      	ldr	r3, [r3, #20]
   b8adc:	9301      	str	r3, [sp, #4]
   b8ade:	bd08      	pop	{r3, pc}
   b8ae0:	00030218 	.word	0x00030218

000b8ae4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8ae4:	b508      	push	{r3, lr}
   b8ae6:	4b02      	ldr	r3, [pc, #8]	; (b8af0 <hal_rtc_time_is_valid+0xc>)
   b8ae8:	681b      	ldr	r3, [r3, #0]
   b8aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8aec:	9301      	str	r3, [sp, #4]
   b8aee:	bd08      	pop	{r3, pc}
   b8af0:	00030218 	.word	0x00030218

000b8af4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8af4:	b508      	push	{r3, lr}
   b8af6:	4b02      	ldr	r3, [pc, #8]	; (b8b00 <hal_timer_millis+0xc>)
   b8af8:	681b      	ldr	r3, [r3, #0]
   b8afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8afc:	9301      	str	r3, [sp, #4]
   b8afe:	bd08      	pop	{r3, pc}
   b8b00:	00030218 	.word	0x00030218

000b8b04 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8b04:	b508      	push	{r3, lr}
   b8b06:	4b02      	ldr	r3, [pc, #8]	; (b8b10 <hal_rtc_get_time+0xc>)
   b8b08:	681b      	ldr	r3, [r3, #0]
   b8b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8b0c:	9301      	str	r3, [sp, #4]
   b8b0e:	bd08      	pop	{r3, pc}
   b8b10:	00030218 	.word	0x00030218

000b8b14 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8b14:	b508      	push	{r3, lr}
   b8b16:	4b02      	ldr	r3, [pc, #8]	; (b8b20 <hal_rtc_set_time+0xc>)
   b8b18:	681b      	ldr	r3, [r3, #0]
   b8b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8b1c:	9301      	str	r3, [sp, #4]
   b8b1e:	bd08      	pop	{r3, pc}
   b8b20:	00030218 	.word	0x00030218

000b8b24 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8b24:	b508      	push	{r3, lr}
   b8b26:	4b02      	ldr	r3, [pc, #8]	; (b8b30 <HAL_Pin_Map+0xc>)
   b8b28:	681b      	ldr	r3, [r3, #0]
   b8b2a:	681b      	ldr	r3, [r3, #0]
   b8b2c:	9301      	str	r3, [sp, #4]
   b8b2e:	bd08      	pop	{r3, pc}
   b8b30:	0003022c 	.word	0x0003022c

000b8b34 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8b34:	b508      	push	{r3, lr}
   b8b36:	4b02      	ldr	r3, [pc, #8]	; (b8b40 <HAL_Validate_Pin_Function+0xc>)
   b8b38:	681b      	ldr	r3, [r3, #0]
   b8b3a:	685b      	ldr	r3, [r3, #4]
   b8b3c:	9301      	str	r3, [sp, #4]
   b8b3e:	bd08      	pop	{r3, pc}
   b8b40:	0003022c 	.word	0x0003022c

000b8b44 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8b44:	b508      	push	{r3, lr}
   b8b46:	4b02      	ldr	r3, [pc, #8]	; (b8b50 <HAL_Pin_Mode+0xc>)
   b8b48:	681b      	ldr	r3, [r3, #0]
   b8b4a:	689b      	ldr	r3, [r3, #8]
   b8b4c:	9301      	str	r3, [sp, #4]
   b8b4e:	bd08      	pop	{r3, pc}
   b8b50:	0003022c 	.word	0x0003022c

000b8b54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8b54:	b508      	push	{r3, lr}
   b8b56:	4b02      	ldr	r3, [pc, #8]	; (b8b60 <HAL_Get_Pin_Mode+0xc>)
   b8b58:	681b      	ldr	r3, [r3, #0]
   b8b5a:	68db      	ldr	r3, [r3, #12]
   b8b5c:	9301      	str	r3, [sp, #4]
   b8b5e:	bd08      	pop	{r3, pc}
   b8b60:	0003022c 	.word	0x0003022c

000b8b64 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8b64:	b508      	push	{r3, lr}
   b8b66:	4b02      	ldr	r3, [pc, #8]	; (b8b70 <HAL_GPIO_Read+0xc>)
   b8b68:	681b      	ldr	r3, [r3, #0]
   b8b6a:	695b      	ldr	r3, [r3, #20]
   b8b6c:	9301      	str	r3, [sp, #4]
   b8b6e:	bd08      	pop	{r3, pc}
   b8b70:	0003022c 	.word	0x0003022c

000b8b74 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8b74:	b508      	push	{r3, lr}
   b8b76:	4b02      	ldr	r3, [pc, #8]	; (b8b80 <HAL_Interrupts_Attach+0xc>)
   b8b78:	681b      	ldr	r3, [r3, #0]
   b8b7a:	699b      	ldr	r3, [r3, #24]
   b8b7c:	9301      	str	r3, [sp, #4]
   b8b7e:	bd08      	pop	{r3, pc}
   b8b80:	0003022c 	.word	0x0003022c

000b8b84 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8b84:	b508      	push	{r3, lr}
   b8b86:	4b02      	ldr	r3, [pc, #8]	; (b8b90 <HAL_Interrupts_Detach+0xc>)
   b8b88:	681b      	ldr	r3, [r3, #0]
   b8b8a:	69db      	ldr	r3, [r3, #28]
   b8b8c:	9301      	str	r3, [sp, #4]
   b8b8e:	bd08      	pop	{r3, pc}
   b8b90:	0003022c 	.word	0x0003022c

000b8b94 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8b94:	b508      	push	{r3, lr}
   b8b96:	4b02      	ldr	r3, [pc, #8]	; (b8ba0 <hal_adc_read+0xc>)
   b8b98:	681b      	ldr	r3, [r3, #0]
   b8b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b9c:	9301      	str	r3, [sp, #4]
   b8b9e:	bd08      	pop	{r3, pc}
   b8ba0:	0003022c 	.word	0x0003022c

000b8ba4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8ba4:	b508      	push	{r3, lr}
   b8ba6:	4b02      	ldr	r3, [pc, #8]	; (b8bb0 <hal_i2c_begin+0xc>)
   b8ba8:	681b      	ldr	r3, [r3, #0]
   b8baa:	68db      	ldr	r3, [r3, #12]
   b8bac:	9301      	str	r3, [sp, #4]
   b8bae:	bd08      	pop	{r3, pc}
   b8bb0:	00030228 	.word	0x00030228

000b8bb4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8bb4:	b508      	push	{r3, lr}
   b8bb6:	4b02      	ldr	r3, [pc, #8]	; (b8bc0 <hal_i2c_begin_transmission+0xc>)
   b8bb8:	681b      	ldr	r3, [r3, #0]
   b8bba:	699b      	ldr	r3, [r3, #24]
   b8bbc:	9301      	str	r3, [sp, #4]
   b8bbe:	bd08      	pop	{r3, pc}
   b8bc0:	00030228 	.word	0x00030228

000b8bc4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8bc4:	b508      	push	{r3, lr}
   b8bc6:	4b02      	ldr	r3, [pc, #8]	; (b8bd0 <hal_i2c_end_transmission+0xc>)
   b8bc8:	681b      	ldr	r3, [r3, #0]
   b8bca:	69db      	ldr	r3, [r3, #28]
   b8bcc:	9301      	str	r3, [sp, #4]
   b8bce:	bd08      	pop	{r3, pc}
   b8bd0:	00030228 	.word	0x00030228

000b8bd4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8bd4:	b508      	push	{r3, lr}
   b8bd6:	4b02      	ldr	r3, [pc, #8]	; (b8be0 <hal_i2c_write+0xc>)
   b8bd8:	681b      	ldr	r3, [r3, #0]
   b8bda:	6a1b      	ldr	r3, [r3, #32]
   b8bdc:	9301      	str	r3, [sp, #4]
   b8bde:	bd08      	pop	{r3, pc}
   b8be0:	00030228 	.word	0x00030228

000b8be4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8be4:	b508      	push	{r3, lr}
   b8be6:	4b02      	ldr	r3, [pc, #8]	; (b8bf0 <hal_i2c_available+0xc>)
   b8be8:	681b      	ldr	r3, [r3, #0]
   b8bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8bec:	9301      	str	r3, [sp, #4]
   b8bee:	bd08      	pop	{r3, pc}
   b8bf0:	00030228 	.word	0x00030228

000b8bf4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8bf4:	b508      	push	{r3, lr}
   b8bf6:	4b02      	ldr	r3, [pc, #8]	; (b8c00 <hal_i2c_read+0xc>)
   b8bf8:	681b      	ldr	r3, [r3, #0]
   b8bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8bfc:	9301      	str	r3, [sp, #4]
   b8bfe:	bd08      	pop	{r3, pc}
   b8c00:	00030228 	.word	0x00030228

000b8c04 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8c04:	b508      	push	{r3, lr}
   b8c06:	4b02      	ldr	r3, [pc, #8]	; (b8c10 <hal_i2c_peek+0xc>)
   b8c08:	681b      	ldr	r3, [r3, #0]
   b8c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c0c:	9301      	str	r3, [sp, #4]
   b8c0e:	bd08      	pop	{r3, pc}
   b8c10:	00030228 	.word	0x00030228

000b8c14 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8c14:	b508      	push	{r3, lr}
   b8c16:	4b02      	ldr	r3, [pc, #8]	; (b8c20 <hal_i2c_flush+0xc>)
   b8c18:	681b      	ldr	r3, [r3, #0]
   b8c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8c1c:	9301      	str	r3, [sp, #4]
   b8c1e:	bd08      	pop	{r3, pc}
   b8c20:	00030228 	.word	0x00030228

000b8c24 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8c24:	b508      	push	{r3, lr}
   b8c26:	4b02      	ldr	r3, [pc, #8]	; (b8c30 <hal_i2c_is_enabled+0xc>)
   b8c28:	681b      	ldr	r3, [r3, #0]
   b8c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8c2c:	9301      	str	r3, [sp, #4]
   b8c2e:	bd08      	pop	{r3, pc}
   b8c30:	00030228 	.word	0x00030228

000b8c34 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8c34:	b508      	push	{r3, lr}
   b8c36:	4b02      	ldr	r3, [pc, #8]	; (b8c40 <hal_i2c_init+0xc>)
   b8c38:	681b      	ldr	r3, [r3, #0]
   b8c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8c3c:	9301      	str	r3, [sp, #4]
   b8c3e:	bd08      	pop	{r3, pc}
   b8c40:	00030228 	.word	0x00030228

000b8c44 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8c44:	b508      	push	{r3, lr}
   b8c46:	4b02      	ldr	r3, [pc, #8]	; (b8c50 <hal_i2c_lock+0xc>)
   b8c48:	681b      	ldr	r3, [r3, #0]
   b8c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8c4c:	9301      	str	r3, [sp, #4]
   b8c4e:	bd08      	pop	{r3, pc}
   b8c50:	00030228 	.word	0x00030228

000b8c54 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8c54:	b508      	push	{r3, lr}
   b8c56:	4b02      	ldr	r3, [pc, #8]	; (b8c60 <hal_i2c_unlock+0xc>)
   b8c58:	681b      	ldr	r3, [r3, #0]
   b8c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8c5c:	9301      	str	r3, [sp, #4]
   b8c5e:	bd08      	pop	{r3, pc}
   b8c60:	00030228 	.word	0x00030228

000b8c64 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8c64:	b508      	push	{r3, lr}
   b8c66:	4b02      	ldr	r3, [pc, #8]	; (b8c70 <hal_i2c_request_ex+0xc>)
   b8c68:	681b      	ldr	r3, [r3, #0]
   b8c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8c6c:	9301      	str	r3, [sp, #4]
   b8c6e:	bd08      	pop	{r3, pc}
   b8c70:	00030228 	.word	0x00030228

000b8c74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8c74:	b508      	push	{r3, lr}
   b8c76:	4b02      	ldr	r3, [pc, #8]	; (b8c80 <inet_inet_ntop+0xc>)
   b8c78:	681b      	ldr	r3, [r3, #0]
   b8c7a:	695b      	ldr	r3, [r3, #20]
   b8c7c:	9301      	str	r3, [sp, #4]
   b8c7e:	bd08      	pop	{r3, pc}
   b8c80:	00030264 	.word	0x00030264

000b8c84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8c84:	b508      	push	{r3, lr}
   b8c86:	4b02      	ldr	r3, [pc, #8]	; (b8c90 <netdb_freeaddrinfo+0xc>)
   b8c88:	681b      	ldr	r3, [r3, #0]
   b8c8a:	689b      	ldr	r3, [r3, #8]
   b8c8c:	9301      	str	r3, [sp, #4]
   b8c8e:	bd08      	pop	{r3, pc}
   b8c90:	00030268 	.word	0x00030268

000b8c94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8c94:	b508      	push	{r3, lr}
   b8c96:	4b02      	ldr	r3, [pc, #8]	; (b8ca0 <netdb_getaddrinfo+0xc>)
   b8c98:	681b      	ldr	r3, [r3, #0]
   b8c9a:	68db      	ldr	r3, [r3, #12]
   b8c9c:	9301      	str	r3, [sp, #4]
   b8c9e:	bd08      	pop	{r3, pc}
   b8ca0:	00030268 	.word	0x00030268

000b8ca4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8ca4:	b508      	push	{r3, lr}
   b8ca6:	4b02      	ldr	r3, [pc, #8]	; (b8cb0 <hal_spi_init+0xc>)
   b8ca8:	681b      	ldr	r3, [r3, #0]
   b8caa:	69db      	ldr	r3, [r3, #28]
   b8cac:	9301      	str	r3, [sp, #4]
   b8cae:	bd08      	pop	{r3, pc}
   b8cb0:	00030230 	.word	0x00030230

000b8cb4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8cb4:	b508      	push	{r3, lr}
   b8cb6:	4b02      	ldr	r3, [pc, #8]	; (b8cc0 <hal_spi_is_enabled+0xc>)
   b8cb8:	681b      	ldr	r3, [r3, #0]
   b8cba:	6a1b      	ldr	r3, [r3, #32]
   b8cbc:	9301      	str	r3, [sp, #4]
   b8cbe:	bd08      	pop	{r3, pc}
   b8cc0:	00030230 	.word	0x00030230

000b8cc4 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b8cc4:	b508      	push	{r3, lr}
   b8cc6:	4b02      	ldr	r3, [pc, #8]	; (b8cd0 <_open+0xc>)
   b8cc8:	681b      	ldr	r3, [r3, #0]
   b8cca:	681b      	ldr	r3, [r3, #0]
   b8ccc:	9301      	str	r3, [sp, #4]
   b8cce:	bd08      	pop	{r3, pc}
   b8cd0:	00030284 	.word	0x00030284

000b8cd4 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   b8cd4:	b508      	push	{r3, lr}
   b8cd6:	4b02      	ldr	r3, [pc, #8]	; (b8ce0 <_write+0xc>)
   b8cd8:	681b      	ldr	r3, [r3, #0]
   b8cda:	685b      	ldr	r3, [r3, #4]
   b8cdc:	9301      	str	r3, [sp, #4]
   b8cde:	bd08      	pop	{r3, pc}
   b8ce0:	00030284 	.word	0x00030284

000b8ce4 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   b8ce4:	b508      	push	{r3, lr}
   b8ce6:	4b02      	ldr	r3, [pc, #8]	; (b8cf0 <_read+0xc>)
   b8ce8:	681b      	ldr	r3, [r3, #0]
   b8cea:	689b      	ldr	r3, [r3, #8]
   b8cec:	9301      	str	r3, [sp, #4]
   b8cee:	bd08      	pop	{r3, pc}
   b8cf0:	00030284 	.word	0x00030284

000b8cf4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   b8cf4:	b508      	push	{r3, lr}
   b8cf6:	4b02      	ldr	r3, [pc, #8]	; (b8d00 <_close+0xc>)
   b8cf8:	681b      	ldr	r3, [r3, #0]
   b8cfa:	68db      	ldr	r3, [r3, #12]
   b8cfc:	9301      	str	r3, [sp, #4]
   b8cfe:	bd08      	pop	{r3, pc}
   b8d00:	00030284 	.word	0x00030284

000b8d04 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   b8d04:	b508      	push	{r3, lr}
   b8d06:	4b02      	ldr	r3, [pc, #8]	; (b8d10 <_fstat+0xc>)
   b8d08:	681b      	ldr	r3, [r3, #0]
   b8d0a:	695b      	ldr	r3, [r3, #20]
   b8d0c:	9301      	str	r3, [sp, #4]
   b8d0e:	bd08      	pop	{r3, pc}
   b8d10:	00030284 	.word	0x00030284

000b8d14 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   b8d14:	b508      	push	{r3, lr}
   b8d16:	4b02      	ldr	r3, [pc, #8]	; (b8d20 <_lseek+0xc>)
   b8d18:	681b      	ldr	r3, [r3, #0]
   b8d1a:	6a1b      	ldr	r3, [r3, #32]
   b8d1c:	9301      	str	r3, [sp, #4]
   b8d1e:	bd08      	pop	{r3, pc}
   b8d20:	00030284 	.word	0x00030284

000b8d24 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   b8d24:	b508      	push	{r3, lr}
   b8d26:	4b02      	ldr	r3, [pc, #8]	; (b8d30 <stat+0xc>)
   b8d28:	681b      	ldr	r3, [r3, #0]
   b8d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8d2c:	9301      	str	r3, [sp, #4]
   b8d2e:	bd08      	pop	{r3, pc}
   b8d30:	00030284 	.word	0x00030284

000b8d34 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   b8d34:	b508      	push	{r3, lr}
   b8d36:	4b02      	ldr	r3, [pc, #8]	; (b8d40 <mkdir+0xc>)
   b8d38:	681b      	ldr	r3, [r3, #0]
   b8d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8d3c:	9301      	str	r3, [sp, #4]
   b8d3e:	bd08      	pop	{r3, pc}
   b8d40:	00030284 	.word	0x00030284

000b8d44 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   b8d44:	b508      	push	{r3, lr}
   b8d46:	4b02      	ldr	r3, [pc, #8]	; (b8d50 <_unlink+0xc>)
   b8d48:	681b      	ldr	r3, [r3, #0]
   b8d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8d4c:	9301      	str	r3, [sp, #4]
   b8d4e:	bd08      	pop	{r3, pc}
   b8d50:	00030284 	.word	0x00030284

000b8d54 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   b8d54:	b508      	push	{r3, lr}
   b8d56:	4b02      	ldr	r3, [pc, #8]	; (b8d60 <opendir+0xc>)
   b8d58:	681b      	ldr	r3, [r3, #0]
   b8d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8d5c:	9301      	str	r3, [sp, #4]
   b8d5e:	bd08      	pop	{r3, pc}
   b8d60:	00030284 	.word	0x00030284

000b8d64 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   b8d64:	b508      	push	{r3, lr}
   b8d66:	4b02      	ldr	r3, [pc, #8]	; (b8d70 <readdir+0xc>)
   b8d68:	681b      	ldr	r3, [r3, #0]
   b8d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8d6c:	9301      	str	r3, [sp, #4]
   b8d6e:	bd08      	pop	{r3, pc}
   b8d70:	00030284 	.word	0x00030284

000b8d74 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   b8d74:	b508      	push	{r3, lr}
   b8d76:	4b02      	ldr	r3, [pc, #8]	; (b8d80 <closedir+0xc>)
   b8d78:	681b      	ldr	r3, [r3, #0]
   b8d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8d7c:	9301      	str	r3, [sp, #4]
   b8d7e:	bd08      	pop	{r3, pc}
   b8d80:	00030284 	.word	0x00030284

000b8d84 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8d84:	b508      	push	{r3, lr}
   b8d86:	4b02      	ldr	r3, [pc, #8]	; (b8d90 <hal_usart_write+0xc>)
   b8d88:	681b      	ldr	r3, [r3, #0]
   b8d8a:	68db      	ldr	r3, [r3, #12]
   b8d8c:	9301      	str	r3, [sp, #4]
   b8d8e:	bd08      	pop	{r3, pc}
   b8d90:	0003023c 	.word	0x0003023c

000b8d94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8d94:	b508      	push	{r3, lr}
   b8d96:	4b02      	ldr	r3, [pc, #8]	; (b8da0 <hal_usart_available+0xc>)
   b8d98:	681b      	ldr	r3, [r3, #0]
   b8d9a:	691b      	ldr	r3, [r3, #16]
   b8d9c:	9301      	str	r3, [sp, #4]
   b8d9e:	bd08      	pop	{r3, pc}
   b8da0:	0003023c 	.word	0x0003023c

000b8da4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8da4:	b508      	push	{r3, lr}
   b8da6:	4b02      	ldr	r3, [pc, #8]	; (b8db0 <hal_usart_read+0xc>)
   b8da8:	681b      	ldr	r3, [r3, #0]
   b8daa:	695b      	ldr	r3, [r3, #20]
   b8dac:	9301      	str	r3, [sp, #4]
   b8dae:	bd08      	pop	{r3, pc}
   b8db0:	0003023c 	.word	0x0003023c

000b8db4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8db4:	b508      	push	{r3, lr}
   b8db6:	4b02      	ldr	r3, [pc, #8]	; (b8dc0 <hal_usart_peek+0xc>)
   b8db8:	681b      	ldr	r3, [r3, #0]
   b8dba:	699b      	ldr	r3, [r3, #24]
   b8dbc:	9301      	str	r3, [sp, #4]
   b8dbe:	bd08      	pop	{r3, pc}
   b8dc0:	0003023c 	.word	0x0003023c

000b8dc4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8dc4:	b508      	push	{r3, lr}
   b8dc6:	4b02      	ldr	r3, [pc, #8]	; (b8dd0 <hal_usart_flush+0xc>)
   b8dc8:	681b      	ldr	r3, [r3, #0]
   b8dca:	69db      	ldr	r3, [r3, #28]
   b8dcc:	9301      	str	r3, [sp, #4]
   b8dce:	bd08      	pop	{r3, pc}
   b8dd0:	0003023c 	.word	0x0003023c

000b8dd4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8dd4:	b508      	push	{r3, lr}
   b8dd6:	4b02      	ldr	r3, [pc, #8]	; (b8de0 <hal_usart_is_enabled+0xc>)
   b8dd8:	681b      	ldr	r3, [r3, #0]
   b8dda:	6a1b      	ldr	r3, [r3, #32]
   b8ddc:	9301      	str	r3, [sp, #4]
   b8dde:	bd08      	pop	{r3, pc}
   b8de0:	0003023c 	.word	0x0003023c

000b8de4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8de4:	b508      	push	{r3, lr}
   b8de6:	4b02      	ldr	r3, [pc, #8]	; (b8df0 <hal_usart_available_data_for_write+0xc>)
   b8de8:	681b      	ldr	r3, [r3, #0]
   b8dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8dec:	9301      	str	r3, [sp, #4]
   b8dee:	bd08      	pop	{r3, pc}
   b8df0:	0003023c 	.word	0x0003023c

000b8df4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8df4:	b508      	push	{r3, lr}
   b8df6:	4b02      	ldr	r3, [pc, #8]	; (b8e00 <hal_usart_init_ex+0xc>)
   b8df8:	681b      	ldr	r3, [r3, #0]
   b8dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8dfc:	9301      	str	r3, [sp, #4]
   b8dfe:	bd08      	pop	{r3, pc}
   b8e00:	0003023c 	.word	0x0003023c

000b8e04 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8e04:	b508      	push	{r3, lr}
   b8e06:	4b02      	ldr	r3, [pc, #8]	; (b8e10 <HAL_USB_USART_Init+0xc>)
   b8e08:	681b      	ldr	r3, [r3, #0]
   b8e0a:	681b      	ldr	r3, [r3, #0]
   b8e0c:	9301      	str	r3, [sp, #4]
   b8e0e:	bd08      	pop	{r3, pc}
   b8e10:	0003024c 	.word	0x0003024c

000b8e14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8e14:	b508      	push	{r3, lr}
   b8e16:	4b02      	ldr	r3, [pc, #8]	; (b8e20 <HAL_USB_USART_Available_Data+0xc>)
   b8e18:	681b      	ldr	r3, [r3, #0]
   b8e1a:	691b      	ldr	r3, [r3, #16]
   b8e1c:	9301      	str	r3, [sp, #4]
   b8e1e:	bd08      	pop	{r3, pc}
   b8e20:	0003024c 	.word	0x0003024c

000b8e24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8e24:	b508      	push	{r3, lr}
   b8e26:	4b02      	ldr	r3, [pc, #8]	; (b8e30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8e28:	681b      	ldr	r3, [r3, #0]
   b8e2a:	695b      	ldr	r3, [r3, #20]
   b8e2c:	9301      	str	r3, [sp, #4]
   b8e2e:	bd08      	pop	{r3, pc}
   b8e30:	0003024c 	.word	0x0003024c

000b8e34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8e34:	b508      	push	{r3, lr}
   b8e36:	4b02      	ldr	r3, [pc, #8]	; (b8e40 <HAL_USB_USART_Receive_Data+0xc>)
   b8e38:	681b      	ldr	r3, [r3, #0]
   b8e3a:	699b      	ldr	r3, [r3, #24]
   b8e3c:	9301      	str	r3, [sp, #4]
   b8e3e:	bd08      	pop	{r3, pc}
   b8e40:	0003024c 	.word	0x0003024c

000b8e44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8e44:	b508      	push	{r3, lr}
   b8e46:	4b02      	ldr	r3, [pc, #8]	; (b8e50 <HAL_USB_USART_Send_Data+0xc>)
   b8e48:	681b      	ldr	r3, [r3, #0]
   b8e4a:	69db      	ldr	r3, [r3, #28]
   b8e4c:	9301      	str	r3, [sp, #4]
   b8e4e:	bd08      	pop	{r3, pc}
   b8e50:	0003024c 	.word	0x0003024c

000b8e54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8e54:	b508      	push	{r3, lr}
   b8e56:	4b02      	ldr	r3, [pc, #8]	; (b8e60 <HAL_USB_USART_Flush_Data+0xc>)
   b8e58:	681b      	ldr	r3, [r3, #0]
   b8e5a:	6a1b      	ldr	r3, [r3, #32]
   b8e5c:	9301      	str	r3, [sp, #4]
   b8e5e:	bd08      	pop	{r3, pc}
   b8e60:	0003024c 	.word	0x0003024c

000b8e64 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8e64:	b508      	push	{r3, lr}
   b8e66:	4b02      	ldr	r3, [pc, #8]	; (b8e70 <panic_+0xc>)
   b8e68:	681b      	ldr	r3, [r3, #0]
   b8e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e6c:	9301      	str	r3, [sp, #4]
   b8e6e:	bd08      	pop	{r3, pc}
   b8e70:	00030260 	.word	0x00030260

000b8e74 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8e74:	b508      	push	{r3, lr}
   b8e76:	4b02      	ldr	r3, [pc, #8]	; (b8e80 <log_message+0xc>)
   b8e78:	681b      	ldr	r3, [r3, #0]
   b8e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8e7c:	9301      	str	r3, [sp, #4]
   b8e7e:	bd08      	pop	{r3, pc}
   b8e80:	00030260 	.word	0x00030260

000b8e84 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8e84:	b508      	push	{r3, lr}
   b8e86:	4b02      	ldr	r3, [pc, #8]	; (b8e90 <log_message_v+0xc>)
   b8e88:	681b      	ldr	r3, [r3, #0]
   b8e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8e8c:	9301      	str	r3, [sp, #4]
   b8e8e:	bd08      	pop	{r3, pc}
   b8e90:	00030260 	.word	0x00030260

000b8e94 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8e94:	b508      	push	{r3, lr}
   b8e96:	4b03      	ldr	r3, [pc, #12]	; (b8ea4 <diag_get_source+0x10>)
   b8e98:	681b      	ldr	r3, [r3, #0]
   b8e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8e9e:	9301      	str	r3, [sp, #4]
   b8ea0:	bd08      	pop	{r3, pc}
   b8ea2:	0000      	.short	0x0000
   b8ea4:	00030260 	.word	0x00030260

000b8ea8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8ea8:	b508      	push	{r3, lr}
   b8eaa:	4b02      	ldr	r3, [pc, #8]	; (b8eb4 <system_mode+0xc>)
   b8eac:	681b      	ldr	r3, [r3, #0]
   b8eae:	681b      	ldr	r3, [r3, #0]
   b8eb0:	9301      	str	r3, [sp, #4]
   b8eb2:	bd08      	pop	{r3, pc}
   b8eb4:	00030220 	.word	0x00030220

000b8eb8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8eb8:	b508      	push	{r3, lr}
   b8eba:	4b02      	ldr	r3, [pc, #8]	; (b8ec4 <set_system_mode+0xc>)
   b8ebc:	681b      	ldr	r3, [r3, #0]
   b8ebe:	685b      	ldr	r3, [r3, #4]
   b8ec0:	9301      	str	r3, [sp, #4]
   b8ec2:	bd08      	pop	{r3, pc}
   b8ec4:	00030220 	.word	0x00030220

000b8ec8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8ec8:	b508      	push	{r3, lr}
   b8eca:	4b02      	ldr	r3, [pc, #8]	; (b8ed4 <system_delay_ms+0xc>)
   b8ecc:	681b      	ldr	r3, [r3, #0]
   b8ece:	695b      	ldr	r3, [r3, #20]
   b8ed0:	9301      	str	r3, [sp, #4]
   b8ed2:	bd08      	pop	{r3, pc}
   b8ed4:	00030220 	.word	0x00030220

000b8ed8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8ed8:	b508      	push	{r3, lr}
   b8eda:	4b02      	ldr	r3, [pc, #8]	; (b8ee4 <system_subscribe_event+0xc>)
   b8edc:	681b      	ldr	r3, [r3, #0]
   b8ede:	6a1b      	ldr	r3, [r3, #32]
   b8ee0:	9301      	str	r3, [sp, #4]
   b8ee2:	bd08      	pop	{r3, pc}
   b8ee4:	00030220 	.word	0x00030220

000b8ee8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8ee8:	b508      	push	{r3, lr}
   b8eea:	4b02      	ldr	r3, [pc, #8]	; (b8ef4 <system_thread_set_state+0xc>)
   b8eec:	681b      	ldr	r3, [r3, #0]
   b8eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8ef0:	9301      	str	r3, [sp, #4]
   b8ef2:	bd08      	pop	{r3, pc}
   b8ef4:	00030220 	.word	0x00030220

000b8ef8 <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b8ef8:	b508      	push	{r3, lr}
   b8efa:	4b02      	ldr	r3, [pc, #8]	; (b8f04 <system_set_flag+0xc>)
   b8efc:	681b      	ldr	r3, [r3, #0]
   b8efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8f00:	9301      	str	r3, [sp, #4]
   b8f02:	bd08      	pop	{r3, pc}
   b8f04:	00030220 	.word	0x00030220

000b8f08 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b8f08:	b508      	push	{r3, lr}
   b8f0a:	4b02      	ldr	r3, [pc, #8]	; (b8f14 <application_thread_current+0xc>)
   b8f0c:	681b      	ldr	r3, [r3, #0]
   b8f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8f10:	9301      	str	r3, [sp, #4]
   b8f12:	bd08      	pop	{r3, pc}
   b8f14:	00030220 	.word	0x00030220

000b8f18 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b8f18:	b508      	push	{r3, lr}
   b8f1a:	4b02      	ldr	r3, [pc, #8]	; (b8f24 <application_thread_invoke+0xc>)
   b8f1c:	681b      	ldr	r3, [r3, #0]
   b8f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8f20:	9301      	str	r3, [sp, #4]
   b8f22:	bd08      	pop	{r3, pc}
   b8f24:	00030220 	.word	0x00030220

000b8f28 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8f28:	b508      	push	{r3, lr}
   b8f2a:	4b02      	ldr	r3, [pc, #8]	; (b8f34 <system_thread_get_state+0xc>)
   b8f2c:	681b      	ldr	r3, [r3, #0]
   b8f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8f30:	9301      	str	r3, [sp, #4]
   b8f32:	bd08      	pop	{r3, pc}
   b8f34:	00030220 	.word	0x00030220

000b8f38 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b8f38:	b508      	push	{r3, lr}
   b8f3a:	4b02      	ldr	r3, [pc, #8]	; (b8f44 <system_notify_time_changed+0xc>)
   b8f3c:	681b      	ldr	r3, [r3, #0]
   b8f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8f40:	9301      	str	r3, [sp, #4]
   b8f42:	bd08      	pop	{r3, pc}
   b8f44:	00030220 	.word	0x00030220

000b8f48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8f48:	b508      	push	{r3, lr}
   b8f4a:	4b03      	ldr	r3, [pc, #12]	; (b8f58 <system_ctrl_set_app_request_handler+0x10>)
   b8f4c:	681b      	ldr	r3, [r3, #0]
   b8f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8f52:	9301      	str	r3, [sp, #4]
   b8f54:	bd08      	pop	{r3, pc}
   b8f56:	0000      	.short	0x0000
   b8f58:	00030220 	.word	0x00030220

000b8f5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8f5c:	b508      	push	{r3, lr}
   b8f5e:	4b03      	ldr	r3, [pc, #12]	; (b8f6c <system_ctrl_set_result+0x10>)
   b8f60:	681b      	ldr	r3, [r3, #0]
   b8f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8f66:	9301      	str	r3, [sp, #4]
   b8f68:	bd08      	pop	{r3, pc}
   b8f6a:	0000      	.short	0x0000
   b8f6c:	00030220 	.word	0x00030220

000b8f70 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8f70:	b508      	push	{r3, lr}
   b8f72:	4b03      	ldr	r3, [pc, #12]	; (b8f80 <system_sleep_ext+0x10>)
   b8f74:	681b      	ldr	r3, [r3, #0]
   b8f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8f7a:	9301      	str	r3, [sp, #4]
   b8f7c:	bd08      	pop	{r3, pc}
   b8f7e:	0000      	.short	0x0000
   b8f80:	00030220 	.word	0x00030220

000b8f84 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8f84:	b508      	push	{r3, lr}
   b8f86:	4b03      	ldr	r3, [pc, #12]	; (b8f94 <system_reset+0x10>)
   b8f88:	681b      	ldr	r3, [r3, #0]
   b8f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8f8e:	9301      	str	r3, [sp, #4]
   b8f90:	bd08      	pop	{r3, pc}
   b8f92:	0000      	.short	0x0000
   b8f94:	00030220 	.word	0x00030220

000b8f98 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b8f98:	b508      	push	{r3, lr}
   b8f9a:	4b02      	ldr	r3, [pc, #8]	; (b8fa4 <spark_variable+0xc>)
   b8f9c:	681b      	ldr	r3, [r3, #0]
   b8f9e:	681b      	ldr	r3, [r3, #0]
   b8fa0:	9301      	str	r3, [sp, #4]
   b8fa2:	bd08      	pop	{r3, pc}
   b8fa4:	00030244 	.word	0x00030244

000b8fa8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b8fa8:	b508      	push	{r3, lr}
   b8faa:	4b02      	ldr	r3, [pc, #8]	; (b8fb4 <spark_function+0xc>)
   b8fac:	681b      	ldr	r3, [r3, #0]
   b8fae:	685b      	ldr	r3, [r3, #4]
   b8fb0:	9301      	str	r3, [sp, #4]
   b8fb2:	bd08      	pop	{r3, pc}
   b8fb4:	00030244 	.word	0x00030244

000b8fb8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8fb8:	b508      	push	{r3, lr}
   b8fba:	4b02      	ldr	r3, [pc, #8]	; (b8fc4 <spark_process+0xc>)
   b8fbc:	681b      	ldr	r3, [r3, #0]
   b8fbe:	689b      	ldr	r3, [r3, #8]
   b8fc0:	9301      	str	r3, [sp, #4]
   b8fc2:	bd08      	pop	{r3, pc}
   b8fc4:	00030244 	.word	0x00030244

000b8fc8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b8fc8:	b508      	push	{r3, lr}
   b8fca:	4b02      	ldr	r3, [pc, #8]	; (b8fd4 <spark_cloud_flag_connect+0xc>)
   b8fcc:	681b      	ldr	r3, [r3, #0]
   b8fce:	68db      	ldr	r3, [r3, #12]
   b8fd0:	9301      	str	r3, [sp, #4]
   b8fd2:	bd08      	pop	{r3, pc}
   b8fd4:	00030244 	.word	0x00030244

000b8fd8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8fd8:	b508      	push	{r3, lr}
   b8fda:	4b02      	ldr	r3, [pc, #8]	; (b8fe4 <spark_cloud_flag_connected+0xc>)
   b8fdc:	681b      	ldr	r3, [r3, #0]
   b8fde:	695b      	ldr	r3, [r3, #20]
   b8fe0:	9301      	str	r3, [sp, #4]
   b8fe2:	bd08      	pop	{r3, pc}
   b8fe4:	00030244 	.word	0x00030244

000b8fe8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8fe8:	b508      	push	{r3, lr}
   b8fea:	4b02      	ldr	r3, [pc, #8]	; (b8ff4 <spark_deviceID+0xc>)
   b8fec:	681b      	ldr	r3, [r3, #0]
   b8fee:	69db      	ldr	r3, [r3, #28]
   b8ff0:	9301      	str	r3, [sp, #4]
   b8ff2:	bd08      	pop	{r3, pc}
   b8ff4:	00030244 	.word	0x00030244

000b8ff8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b8ff8:	b508      	push	{r3, lr}
   b8ffa:	4b02      	ldr	r3, [pc, #8]	; (b9004 <spark_send_event+0xc>)
   b8ffc:	681b      	ldr	r3, [r3, #0]
   b8ffe:	6a1b      	ldr	r3, [r3, #32]
   b9000:	9301      	str	r3, [sp, #4]
   b9002:	bd08      	pop	{r3, pc}
   b9004:	00030244 	.word	0x00030244

000b9008 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9008:	b508      	push	{r3, lr}
   b900a:	4b02      	ldr	r3, [pc, #8]	; (b9014 <spark_subscribe+0xc>)
   b900c:	681b      	ldr	r3, [r3, #0]
   b900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9010:	9301      	str	r3, [sp, #4]
   b9012:	bd08      	pop	{r3, pc}
   b9014:	00030244 	.word	0x00030244

000b9018 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b9018:	b508      	push	{r3, lr}
   b901a:	4b02      	ldr	r3, [pc, #8]	; (b9024 <spark_sync_time+0xc>)
   b901c:	681b      	ldr	r3, [r3, #0]
   b901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9020:	9301      	str	r3, [sp, #4]
   b9022:	bd08      	pop	{r3, pc}
   b9024:	00030244 	.word	0x00030244

000b9028 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9028:	b508      	push	{r3, lr}
   b902a:	4b02      	ldr	r3, [pc, #8]	; (b9034 <spark_sync_time_pending+0xc>)
   b902c:	681b      	ldr	r3, [r3, #0]
   b902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9030:	9301      	str	r3, [sp, #4]
   b9032:	bd08      	pop	{r3, pc}
   b9034:	00030244 	.word	0x00030244

000b9038 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b9038:	b508      	push	{r3, lr}
   b903a:	4b02      	ldr	r3, [pc, #8]	; (b9044 <spark_sync_time_last+0xc>)
   b903c:	681b      	ldr	r3, [r3, #0]
   b903e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9040:	9301      	str	r3, [sp, #4]
   b9042:	bd08      	pop	{r3, pc}
   b9044:	00030244 	.word	0x00030244

000b9048 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b9048:	b508      	push	{r3, lr}
   b904a:	4b02      	ldr	r3, [pc, #8]	; (b9054 <spark_set_connection_property+0xc>)
   b904c:	681b      	ldr	r3, [r3, #0]
   b904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9050:	9301      	str	r3, [sp, #4]
   b9052:	bd08      	pop	{r3, pc}
   b9054:	00030244 	.word	0x00030244

000b9058 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9058:	b508      	push	{r3, lr}
   b905a:	4b02      	ldr	r3, [pc, #8]	; (b9064 <spark_set_random_seed_from_cloud_handler+0xc>)
   b905c:	681b      	ldr	r3, [r3, #0]
   b905e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9060:	9301      	str	r3, [sp, #4]
   b9062:	bd08      	pop	{r3, pc}
   b9064:	00030244 	.word	0x00030244

000b9068 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b9068:	b508      	push	{r3, lr}
   b906a:	4b02      	ldr	r3, [pc, #8]	; (b9074 <spark_cloud_disconnect+0xc>)
   b906c:	681b      	ldr	r3, [r3, #0]
   b906e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9070:	9301      	str	r3, [sp, #4]
   b9072:	bd08      	pop	{r3, pc}
   b9074:	00030244 	.word	0x00030244

000b9078 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9078:	b508      	push	{r3, lr}
   b907a:	4b02      	ldr	r3, [pc, #8]	; (b9084 <network_connect+0xc>)
   b907c:	681b      	ldr	r3, [r3, #0]
   b907e:	685b      	ldr	r3, [r3, #4]
   b9080:	9301      	str	r3, [sp, #4]
   b9082:	bd08      	pop	{r3, pc}
   b9084:	00030240 	.word	0x00030240

000b9088 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9088:	b508      	push	{r3, lr}
   b908a:	4b02      	ldr	r3, [pc, #8]	; (b9094 <network_connecting+0xc>)
   b908c:	681b      	ldr	r3, [r3, #0]
   b908e:	689b      	ldr	r3, [r3, #8]
   b9090:	9301      	str	r3, [sp, #4]
   b9092:	bd08      	pop	{r3, pc}
   b9094:	00030240 	.word	0x00030240

000b9098 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9098:	b508      	push	{r3, lr}
   b909a:	4b02      	ldr	r3, [pc, #8]	; (b90a4 <network_disconnect+0xc>)
   b909c:	681b      	ldr	r3, [r3, #0]
   b909e:	68db      	ldr	r3, [r3, #12]
   b90a0:	9301      	str	r3, [sp, #4]
   b90a2:	bd08      	pop	{r3, pc}
   b90a4:	00030240 	.word	0x00030240

000b90a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b90a8:	b508      	push	{r3, lr}
   b90aa:	4b02      	ldr	r3, [pc, #8]	; (b90b4 <network_ready+0xc>)
   b90ac:	681b      	ldr	r3, [r3, #0]
   b90ae:	691b      	ldr	r3, [r3, #16]
   b90b0:	9301      	str	r3, [sp, #4]
   b90b2:	bd08      	pop	{r3, pc}
   b90b4:	00030240 	.word	0x00030240

000b90b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b90b8:	b508      	push	{r3, lr}
   b90ba:	4b02      	ldr	r3, [pc, #8]	; (b90c4 <network_on+0xc>)
   b90bc:	681b      	ldr	r3, [r3, #0]
   b90be:	695b      	ldr	r3, [r3, #20]
   b90c0:	9301      	str	r3, [sp, #4]
   b90c2:	bd08      	pop	{r3, pc}
   b90c4:	00030240 	.word	0x00030240

000b90c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b90c8:	b508      	push	{r3, lr}
   b90ca:	4b02      	ldr	r3, [pc, #8]	; (b90d4 <network_off+0xc>)
   b90cc:	681b      	ldr	r3, [r3, #0]
   b90ce:	699b      	ldr	r3, [r3, #24]
   b90d0:	9301      	str	r3, [sp, #4]
   b90d2:	bd08      	pop	{r3, pc}
   b90d4:	00030240 	.word	0x00030240

000b90d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b90d8:	b508      	push	{r3, lr}
   b90da:	4b02      	ldr	r3, [pc, #8]	; (b90e4 <network_listen+0xc>)
   b90dc:	681b      	ldr	r3, [r3, #0]
   b90de:	69db      	ldr	r3, [r3, #28]
   b90e0:	9301      	str	r3, [sp, #4]
   b90e2:	bd08      	pop	{r3, pc}
   b90e4:	00030240 	.word	0x00030240

000b90e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b90e8:	b508      	push	{r3, lr}
   b90ea:	4b02      	ldr	r3, [pc, #8]	; (b90f4 <network_listening+0xc>)
   b90ec:	681b      	ldr	r3, [r3, #0]
   b90ee:	6a1b      	ldr	r3, [r3, #32]
   b90f0:	9301      	str	r3, [sp, #4]
   b90f2:	bd08      	pop	{r3, pc}
   b90f4:	00030240 	.word	0x00030240

000b90f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b90f8:	b508      	push	{r3, lr}
   b90fa:	4b02      	ldr	r3, [pc, #8]	; (b9104 <network_set_listen_timeout+0xc>)
   b90fc:	681b      	ldr	r3, [r3, #0]
   b90fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9100:	9301      	str	r3, [sp, #4]
   b9102:	bd08      	pop	{r3, pc}
   b9104:	00030240 	.word	0x00030240

000b9108 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9108:	b508      	push	{r3, lr}
   b910a:	4b02      	ldr	r3, [pc, #8]	; (b9114 <network_get_listen_timeout+0xc>)
   b910c:	681b      	ldr	r3, [r3, #0]
   b910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9110:	9301      	str	r3, [sp, #4]
   b9112:	bd08      	pop	{r3, pc}
   b9114:	00030240 	.word	0x00030240

000b9118 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9118:	b508      	push	{r3, lr}
   b911a:	4b02      	ldr	r3, [pc, #8]	; (b9124 <network_is_on+0xc>)
   b911c:	681b      	ldr	r3, [r3, #0]
   b911e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9120:	9301      	str	r3, [sp, #4]
   b9122:	bd08      	pop	{r3, pc}
   b9124:	00030240 	.word	0x00030240

000b9128 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9128:	b508      	push	{r3, lr}
   b912a:	4b02      	ldr	r3, [pc, #8]	; (b9134 <network_is_off+0xc>)
   b912c:	681b      	ldr	r3, [r3, #0]
   b912e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9130:	9301      	str	r3, [sp, #4]
   b9132:	bd08      	pop	{r3, pc}
   b9134:	00030240 	.word	0x00030240

000b9138 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9138:	b508      	push	{r3, lr}
   b913a:	4b02      	ldr	r3, [pc, #8]	; (b9144 <malloc+0xc>)
   b913c:	681b      	ldr	r3, [r3, #0]
   b913e:	681b      	ldr	r3, [r3, #0]
   b9140:	9301      	str	r3, [sp, #4]
   b9142:	bd08      	pop	{r3, pc}
   b9144:	0003021c 	.word	0x0003021c

000b9148 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9148:	b508      	push	{r3, lr}
   b914a:	4b02      	ldr	r3, [pc, #8]	; (b9154 <free+0xc>)
   b914c:	681b      	ldr	r3, [r3, #0]
   b914e:	685b      	ldr	r3, [r3, #4]
   b9150:	9301      	str	r3, [sp, #4]
   b9152:	bd08      	pop	{r3, pc}
   b9154:	0003021c 	.word	0x0003021c

000b9158 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9158:	b508      	push	{r3, lr}
   b915a:	4b02      	ldr	r3, [pc, #8]	; (b9164 <realloc+0xc>)
   b915c:	681b      	ldr	r3, [r3, #0]
   b915e:	689b      	ldr	r3, [r3, #8]
   b9160:	9301      	str	r3, [sp, #4]
   b9162:	bd08      	pop	{r3, pc}
   b9164:	0003021c 	.word	0x0003021c

000b9168 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b9168:	b508      	push	{r3, lr}
   b916a:	4b02      	ldr	r3, [pc, #8]	; (b9174 <siprintf+0xc>)
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	691b      	ldr	r3, [r3, #16]
   b9170:	9301      	str	r3, [sp, #4]
   b9172:	bd08      	pop	{r3, pc}
   b9174:	0003021c 	.word	0x0003021c

000b9178 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9178:	b508      	push	{r3, lr}
   b917a:	4b02      	ldr	r3, [pc, #8]	; (b9184 <sscanf+0xc>)
   b917c:	681b      	ldr	r3, [r3, #0]
   b917e:	695b      	ldr	r3, [r3, #20]
   b9180:	9301      	str	r3, [sp, #4]
   b9182:	bd08      	pop	{r3, pc}
   b9184:	0003021c 	.word	0x0003021c

000b9188 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9188:	b508      	push	{r3, lr}
   b918a:	4b02      	ldr	r3, [pc, #8]	; (b9194 <snprintf+0xc>)
   b918c:	681b      	ldr	r3, [r3, #0]
   b918e:	69db      	ldr	r3, [r3, #28]
   b9190:	9301      	str	r3, [sp, #4]
   b9192:	bd08      	pop	{r3, pc}
   b9194:	0003021c 	.word	0x0003021c

000b9198 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9198:	b508      	push	{r3, lr}
   b919a:	4b02      	ldr	r3, [pc, #8]	; (b91a4 <vsnprintf+0xc>)
   b919c:	681b      	ldr	r3, [r3, #0]
   b919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b91a0:	9301      	str	r3, [sp, #4]
   b91a2:	bd08      	pop	{r3, pc}
   b91a4:	0003021c 	.word	0x0003021c

000b91a8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b91a8:	b508      	push	{r3, lr}
   b91aa:	4b02      	ldr	r3, [pc, #8]	; (b91b4 <abort+0xc>)
   b91ac:	681b      	ldr	r3, [r3, #0]
   b91ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91b0:	9301      	str	r3, [sp, #4]
   b91b2:	bd08      	pop	{r3, pc}
   b91b4:	0003021c 	.word	0x0003021c

000b91b8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b91b8:	b508      	push	{r3, lr}
   b91ba:	4b02      	ldr	r3, [pc, #8]	; (b91c4 <_malloc_r+0xc>)
   b91bc:	681b      	ldr	r3, [r3, #0]
   b91be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b91c0:	9301      	str	r3, [sp, #4]
   b91c2:	bd08      	pop	{r3, pc}
   b91c4:	0003021c 	.word	0x0003021c

000b91c8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b91c8:	b508      	push	{r3, lr}
   b91ca:	4b02      	ldr	r3, [pc, #8]	; (b91d4 <__errno+0xc>)
   b91cc:	681b      	ldr	r3, [r3, #0]
   b91ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b91d0:	9301      	str	r3, [sp, #4]
   b91d2:	bd08      	pop	{r3, pc}
   b91d4:	0003021c 	.word	0x0003021c

000b91d8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b91d8:	b508      	push	{r3, lr}
   b91da:	4b02      	ldr	r3, [pc, #8]	; (b91e4 <__assert_func+0xc>)
   b91dc:	681b      	ldr	r3, [r3, #0]
   b91de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b91e0:	9301      	str	r3, [sp, #4]
   b91e2:	bd08      	pop	{r3, pc}
   b91e4:	0003021c 	.word	0x0003021c

000b91e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b91e8:	b508      	push	{r3, lr}
   b91ea:	4b02      	ldr	r3, [pc, #8]	; (b91f4 <newlib_impure_ptr_callback+0xc>)
   b91ec:	681b      	ldr	r3, [r3, #0]
   b91ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b91f0:	9301      	str	r3, [sp, #4]
   b91f2:	bd08      	pop	{r3, pc}
   b91f4:	0003021c 	.word	0x0003021c

000b91f8 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b91f8:	b508      	push	{r3, lr}
   b91fa:	4b02      	ldr	r3, [pc, #8]	; (b9204 <strftime+0xc>)
   b91fc:	681b      	ldr	r3, [r3, #0]
   b91fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9200:	9301      	str	r3, [sp, #4]
   b9202:	bd08      	pop	{r3, pc}
   b9204:	0003021c 	.word	0x0003021c

000b9208 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9208:	b508      	push	{r3, lr}
   b920a:	4b02      	ldr	r3, [pc, #8]	; (b9214 <localtime_r+0xc>)
   b920c:	681b      	ldr	r3, [r3, #0]
   b920e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9210:	9301      	str	r3, [sp, #4]
   b9212:	bd08      	pop	{r3, pc}
   b9214:	0003021c 	.word	0x0003021c

000b9218 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9218:	b508      	push	{r3, lr}
   b921a:	4b02      	ldr	r3, [pc, #8]	; (b9224 <gmtime_r+0xc>)
   b921c:	681b      	ldr	r3, [r3, #0]
   b921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9220:	9301      	str	r3, [sp, #4]
   b9222:	bd08      	pop	{r3, pc}
   b9224:	0003021c 	.word	0x0003021c

000b9228 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b9228:	b508      	push	{r3, lr}
   b922a:	4b02      	ldr	r3, [pc, #8]	; (b9234 <mktime+0xc>)
   b922c:	681b      	ldr	r3, [r3, #0]
   b922e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9230:	9301      	str	r3, [sp, #4]
   b9232:	bd08      	pop	{r3, pc}
   b9234:	0003021c 	.word	0x0003021c

000b9238 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b9238:	428a      	cmp	r2, r1
{
   b923a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b923c:	d007      	beq.n	b924e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b923e:	1a44      	subs	r4, r0, r1
   b9240:	9802      	ldr	r0, [sp, #8]
   b9242:	1ac0      	subs	r0, r0, r3
   b9244:	4344      	muls	r4, r0
   b9246:	1a50      	subs	r0, r2, r1
   b9248:	fb94 f0f0 	sdiv	r0, r4, r0
   b924c:	4418      	add	r0, r3
}
   b924e:	bd10      	pop	{r4, pc}

000b9250 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9250:	2100      	movs	r1, #0
   b9252:	f7ff be39 	b.w	b8ec8 <system_delay_ms>

000b9256 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9256:	b510      	push	{r4, lr}
      if (_M_empty())
   b9258:	6883      	ldr	r3, [r0, #8]
   b925a:	4604      	mov	r4, r0
   b925c:	b90b      	cbnz	r3, b9262 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b925e:	f001 fe9d 	bl	baf9c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9262:	68c3      	ldr	r3, [r0, #12]
   b9264:	4798      	blx	r3
      if (_M_manager)
   b9266:	68a3      	ldr	r3, [r4, #8]
   b9268:	b11b      	cbz	r3, b9272 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b926a:	2203      	movs	r2, #3
   b926c:	4621      	mov	r1, r4
   b926e:	4620      	mov	r0, r4
   b9270:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9272:	4620      	mov	r0, r4
   b9274:	2110      	movs	r1, #16
}
   b9276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b927a:	f7fa bf10 	b.w	b409e <_ZdlPvj>
	...

000b9280 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9280:	4802      	ldr	r0, [pc, #8]	; (b928c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9282:	2300      	movs	r3, #0
   b9284:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b9286:	f7ff bbd5 	b.w	b8a34 <os_mutex_recursive_create>
   b928a:	bf00      	nop
   b928c:	2003e634 	.word	0x2003e634

000b9290 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9290:	2200      	movs	r2, #0
   b9292:	6840      	ldr	r0, [r0, #4]
   b9294:	4611      	mov	r1, r2
   b9296:	f7ff bf07 	b.w	b90a8 <network_ready>

000b929a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b929a:	2200      	movs	r2, #0
   b929c:	6840      	ldr	r0, [r0, #4]
   b929e:	4611      	mov	r1, r2
   b92a0:	f7ff bf22 	b.w	b90e8 <network_listening>

000b92a4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b92a4:	2200      	movs	r2, #0
   b92a6:	6840      	ldr	r0, [r0, #4]
   b92a8:	4611      	mov	r1, r2
   b92aa:	f7ff bf2d 	b.w	b9108 <network_get_listen_timeout>

000b92ae <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b92ae:	6840      	ldr	r0, [r0, #4]
   b92b0:	2200      	movs	r2, #0
   b92b2:	f7ff bf21 	b.w	b90f8 <network_set_listen_timeout>

000b92b6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b92b6:	6840      	ldr	r0, [r0, #4]
   b92b8:	2200      	movs	r2, #0
   b92ba:	f081 0101 	eor.w	r1, r1, #1
   b92be:	f7ff bf0b 	b.w	b90d8 <network_listen>

000b92c2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b92c2:	2300      	movs	r3, #0
   b92c4:	6840      	ldr	r0, [r0, #4]
   b92c6:	461a      	mov	r2, r3
   b92c8:	4619      	mov	r1, r3
   b92ca:	f7ff befd 	b.w	b90c8 <network_off>

000b92ce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b92ce:	2200      	movs	r2, #0
   b92d0:	6840      	ldr	r0, [r0, #4]
   b92d2:	4611      	mov	r1, r2
   b92d4:	f7ff bed8 	b.w	b9088 <network_connecting>

000b92d8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b92d8:	6840      	ldr	r0, [r0, #4]
   b92da:	2200      	movs	r2, #0
   b92dc:	2102      	movs	r1, #2
   b92de:	f7ff bedb 	b.w	b9098 <network_disconnect>

000b92e2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b92e2:	2300      	movs	r3, #0
   b92e4:	6840      	ldr	r0, [r0, #4]
   b92e6:	461a      	mov	r2, r3
   b92e8:	f7ff bec6 	b.w	b9078 <network_connect>

000b92ec <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b92ec:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b92ee:	4b13      	ldr	r3, [pc, #76]	; (b933c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b92f0:	6003      	str	r3, [r0, #0]
   b92f2:	2518      	movs	r5, #24
   b92f4:	3330      	adds	r3, #48	; 0x30
   b92f6:	b086      	sub	sp, #24
   b92f8:	460e      	mov	r6, r1
   b92fa:	6043      	str	r3, [r0, #4]
   b92fc:	462a      	mov	r2, r5
   b92fe:	2100      	movs	r1, #0
   b9300:	4604      	mov	r4, r0
   b9302:	3008      	adds	r0, #8
   b9304:	f002 fbc8 	bl	bba98 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b9308:	2200      	movs	r2, #0
   b930a:	6870      	ldr	r0, [r6, #4]
   b930c:	4611      	mov	r1, r2
   b930e:	f7ff fecb 	bl	b90a8 <network_ready>
   b9312:	b178      	cbz	r0, b9334 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b9314:	2100      	movs	r1, #0
   b9316:	462a      	mov	r2, r5
   b9318:	4668      	mov	r0, sp
   b931a:	f002 fbbd 	bl	bba98 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b931e:	4669      	mov	r1, sp
   b9320:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b9322:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b9326:	f7ff fb15 	bl	b8954 <cellular_signal>
   b932a:	b918      	cbnz	r0, b9334 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b932c:	4669      	mov	r1, sp
   b932e:	4620      	mov	r0, r4
   b9330:	f000 f8b8 	bl	b94a4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b9334:	4620      	mov	r0, r4
   b9336:	b006      	add	sp, #24
   b9338:	bd70      	pop	{r4, r5, r6, pc}
   b933a:	bf00      	nop
   b933c:	000bccdc 	.word	0x000bccdc

000b9340 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b9340:	4b08      	ldr	r3, [pc, #32]	; (b9364 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b9342:	b510      	push	{r4, lr}
   b9344:	2428      	movs	r4, #40	; 0x28
   b9346:	4622      	mov	r2, r4
   b9348:	4618      	mov	r0, r3
   b934a:	2100      	movs	r1, #0
   b934c:	f002 fba4 	bl	bba98 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9350:	4b05      	ldr	r3, [pc, #20]	; (b9368 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b9352:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9358:	6042      	str	r2, [r0, #4]
   b935a:	2204      	movs	r2, #4
   b935c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b935e:	4a03      	ldr	r2, [pc, #12]	; (b936c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9360:	601a      	str	r2, [r3, #0]
   b9362:	bd10      	pop	{r4, pc}
   b9364:	2003e640 	.word	0x2003e640
   b9368:	2003e638 	.word	0x2003e638
   b936c:	000bcca0 	.word	0x000bcca0

000b9370 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b9370:	4770      	bx	lr

000b9372 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b9372:	7b00      	ldrb	r0, [r0, #12]
   b9374:	4770      	bx	lr

000b9376 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9376:	7b03      	ldrb	r3, [r0, #12]
   b9378:	b14b      	cbz	r3, b938e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b937a:	6903      	ldr	r3, [r0, #16]
   b937c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9380:	d005      	beq.n	b938e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9382:	6980      	ldr	r0, [r0, #24]
   b9384:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b9388:	bf18      	it	ne
   b938a:	2001      	movne	r0, #1
   b938c:	4770      	bx	lr
   b938e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b9390:	4770      	bx	lr

000b9392 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b9392:	6803      	ldr	r3, [r0, #0]
   b9394:	6a1b      	ldr	r3, [r3, #32]
   b9396:	4718      	bx	r3

000b9398 <_ZNK14CellularSignal7printToER5Print>:
{
   b9398:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b939a:	6803      	ldr	r3, [r0, #0]
{
   b939c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b939e:	691b      	ldr	r3, [r3, #16]
{
   b93a0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b93a2:	4798      	blx	r3
   b93a4:	2102      	movs	r1, #2
   b93a6:	4628      	mov	r0, r5
   b93a8:	f000 ff90 	bl	ba2cc <_ZN5Print5printEfi>
    n += p.print(',');
   b93ac:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b93ae:	4604      	mov	r4, r0
    n += p.print(',');
   b93b0:	4628      	mov	r0, r5
   b93b2:	f000 fea1 	bl	ba0f8 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b93b6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b93b8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b93ba:	699b      	ldr	r3, [r3, #24]
   b93bc:	4630      	mov	r0, r6
   b93be:	4798      	blx	r3
   b93c0:	2102      	movs	r1, #2
   b93c2:	4628      	mov	r0, r5
   b93c4:	f000 ff82 	bl	ba2cc <_ZN5Print5printEfi>
}
   b93c8:	4420      	add	r0, r4
   b93ca:	bd70      	pop	{r4, r5, r6, pc}

000b93cc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b93cc:	f1a0 0004 	sub.w	r0, r0, #4
   b93d0:	f7ff bfe2 	b.w	b9398 <_ZNK14CellularSignal7printToER5Print>

000b93d4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b93d4:	b510      	push	{r4, lr}
   b93d6:	2120      	movs	r1, #32
   b93d8:	4604      	mov	r4, r0
   b93da:	f7fa fe60 	bl	b409e <_ZdlPvj>
   b93de:	4620      	mov	r0, r4
   b93e0:	bd10      	pop	{r4, pc}
	...

000b93e4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b93e4:	7b03      	ldrb	r3, [r0, #12]
   b93e6:	b17b      	cbz	r3, b9408 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b93e8:	6943      	ldr	r3, [r0, #20]
   b93ea:	2b00      	cmp	r3, #0
   b93ec:	db0c      	blt.n	b9408 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b93ee:	ee07 3a90 	vmov	s15, r3
   b93f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9410 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b93f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b93fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b93fe:	eddf 7a05 	vldr	s15, [pc, #20]	; b9414 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b9402:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9406:	4770      	bx	lr
    return -1.0f;
   b9408:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b940c:	4770      	bx	lr
   b940e:	bf00      	nop
   b9410:	477fff00 	.word	0x477fff00
   b9414:	42c80000 	.word	0x42c80000

000b9418 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b9418:	7b03      	ldrb	r3, [r0, #12]
   b941a:	b163      	cbz	r3, b9436 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b941c:	6903      	ldr	r3, [r0, #16]
   b941e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9422:	d008      	beq.n	b9436 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b9424:	ee07 3a90 	vmov	s15, r3
   b9428:	ed9f 7a04 	vldr	s14, [pc, #16]	; b943c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b942c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9430:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9434:	4770      	bx	lr
    return 0.0f;
   b9436:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9440 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b943a:	4770      	bx	lr
   b943c:	42c80000 	.word	0x42c80000
   b9440:	00000000 	.word	0x00000000

000b9444 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b9444:	7b03      	ldrb	r3, [r0, #12]
   b9446:	b17b      	cbz	r3, b9468 <_ZNK14CellularSignal10getQualityEv+0x24>
   b9448:	69c3      	ldr	r3, [r0, #28]
   b944a:	2b00      	cmp	r3, #0
   b944c:	db0c      	blt.n	b9468 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b944e:	ee07 3a90 	vmov	s15, r3
   b9452:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9470 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b9456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b945a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b945e:	eddf 7a05 	vldr	s15, [pc, #20]	; b9474 <_ZNK14CellularSignal10getQualityEv+0x30>
   b9462:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9466:	4770      	bx	lr
    return -1.0f;
   b9468:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b946c:	4770      	bx	lr
   b946e:	bf00      	nop
   b9470:	477fff00 	.word	0x477fff00
   b9474:	42c80000 	.word	0x42c80000

000b9478 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b9478:	7b03      	ldrb	r3, [r0, #12]
   b947a:	b163      	cbz	r3, b9496 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b947c:	6983      	ldr	r3, [r0, #24]
   b947e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9482:	d008      	beq.n	b9496 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b9484:	ee07 3a90 	vmov	s15, r3
   b9488:	ed9f 7a04 	vldr	s14, [pc, #16]	; b949c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b948c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9490:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9494:	4770      	bx	lr
    return 0.0f;
   b9496:	ed9f 0a02 	vldr	s0, [pc, #8]	; b94a0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b949a:	4770      	bx	lr
   b949c:	42c80000 	.word	0x42c80000
   b94a0:	00000000 	.word	0x00000000

000b94a4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b94a4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b94a6:	460d      	mov	r5, r1
   b94a8:	f100 0408 	add.w	r4, r0, #8
   b94ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b94ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b94b0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b94b4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b94b8:	2001      	movs	r0, #1
   b94ba:	bd30      	pop	{r4, r5, pc}

000b94bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b94bc:	4770      	bx	lr

000b94be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b94be:	2000      	movs	r0, #0
   b94c0:	4770      	bx	lr

000b94c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b94c2:	b510      	push	{r4, lr}
   b94c4:	2110      	movs	r1, #16
   b94c6:	4604      	mov	r4, r0
   b94c8:	f7fa fde9 	bl	b409e <_ZdlPvj>
   b94cc:	4620      	mov	r0, r4
   b94ce:	bd10      	pop	{r4, pc}

000b94d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b94d0:	b508      	push	{r3, lr}
      { delete this; }
   b94d2:	f7ff fff6 	bl	b94c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b94d6:	bd08      	pop	{r3, pc}

000b94d8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b94d8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b94da:	2200      	movs	r2, #0
   b94dc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b94e0:	6002      	str	r2, [r0, #0]
   b94e2:	8084      	strh	r4, [r0, #4]
   b94e4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b94e6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b94e8:	680c      	ldr	r4, [r1, #0]
   b94ea:	8085      	strh	r5, [r0, #4]
   b94ec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b94ee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b94f0:	bd30      	pop	{r4, r5, pc}

000b94f2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b94f2:	b510      	push	{r4, lr}
   b94f4:	4604      	mov	r4, r0
    free((void*)msg_);
   b94f6:	6800      	ldr	r0, [r0, #0]
   b94f8:	f7ff fe26 	bl	b9148 <free>
}
   b94fc:	4620      	mov	r0, r4
   b94fe:	bd10      	pop	{r4, pc}

000b9500 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9500:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9502:	68c4      	ldr	r4, [r0, #12]
   b9504:	b1f4      	cbz	r4, b9544 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b9506:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9508:	2b02      	cmp	r3, #2
   b950a:	d103      	bne.n	b9514 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b950c:	f104 000c 	add.w	r0, r4, #12
   b9510:	f7ff ffef 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9514:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9516:	b135      	cbz	r5, b9526 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9518:	4628      	mov	r0, r5
   b951a:	f7fa ffcf 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b951e:	2110      	movs	r1, #16
   b9520:	4628      	mov	r0, r5
   b9522:	f7fa fdbc 	bl	b409e <_ZdlPvj>
   b9526:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b9528:	b135      	cbz	r5, b9538 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b952a:	4628      	mov	r0, r5
   b952c:	f7fa ffc6 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
   b9530:	2110      	movs	r1, #16
   b9532:	4628      	mov	r0, r5
   b9534:	f7fa fdb3 	bl	b409e <_ZdlPvj>
   b9538:	4620      	mov	r0, r4
   b953a:	2114      	movs	r1, #20
   b953c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9540:	f7fa bdad 	b.w	b409e <_ZdlPvj>
   b9544:	bd38      	pop	{r3, r4, r5, pc}

000b9546 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b9546:	b510      	push	{r4, lr}
   b9548:	b088      	sub	sp, #32
   b954a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b954c:	4668      	mov	r0, sp
   b954e:	f000 ff28 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b9552:	4669      	mov	r1, sp
   b9554:	a804      	add	r0, sp, #16
   b9556:	f000 ff64 	bl	ba422 <_ZN6StringC1ERKS_>
   b955a:	a804      	add	r0, sp, #16
   b955c:	47a0      	blx	r4
   b955e:	4604      	mov	r4, r0
   b9560:	a804      	add	r0, sp, #16
   b9562:	f000 fed3 	bl	ba30c <_ZN6StringD1Ev>
    String p(param);
   b9566:	4668      	mov	r0, sp
   b9568:	f000 fed0 	bl	ba30c <_ZN6StringD1Ev>
}
   b956c:	4620      	mov	r0, r4
   b956e:	b008      	add	sp, #32
   b9570:	bd10      	pop	{r4, pc}

000b9572 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b9572:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b9574:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b9576:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b957a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b957c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b957e:	461a      	mov	r2, r3
   b9580:	4669      	mov	r1, sp
   b9582:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b9584:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b9588:	f8ad 4000 	strh.w	r4, [sp]
   b958c:	f7ff fd0c 	bl	b8fa8 <spark_function>
}
   b9590:	b004      	add	sp, #16
   b9592:	bd10      	pop	{r4, pc}

000b9594 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b9596:	230c      	movs	r3, #12
   b9598:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b959c:	6803      	ldr	r3, [r0, #0]
   b959e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b95a2:	7a03      	ldrb	r3, [r0, #8]
   b95a4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b95a8:	6843      	ldr	r3, [r0, #4]
   b95aa:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b95ac:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b95ae:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b95b0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b95b4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b95b6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b95ba:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b95be:	f7ff fd53 	bl	b9068 <spark_cloud_disconnect>
}
   b95c2:	b005      	add	sp, #20
   b95c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b95c8 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b95c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b95ca:	220c      	movs	r2, #12
   b95cc:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b95d0:	6802      	ldr	r2, [r0, #0]
   b95d2:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b95d6:	7a02      	ldrb	r2, [r0, #8]
   b95d8:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b95dc:	6842      	ldr	r2, [r0, #4]
   b95de:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b95e0:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b95e2:	7a42      	ldrb	r2, [r0, #9]
   b95e4:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b95e8:	4619      	mov	r1, r3
   b95ea:	aa01      	add	r2, sp, #4
   b95ec:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b95ee:	f8ad 300d 	strh.w	r3, [sp, #13]
   b95f2:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b95f6:	f7ff fd27 	bl	b9048 <spark_set_connection_property>
}
   b95fa:	b005      	add	sp, #20
   b95fc:	f85d fb04 	ldr.w	pc, [sp], #4

000b9600 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9600:	680b      	ldr	r3, [r1, #0]
   b9602:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9604:	684b      	ldr	r3, [r1, #4]
   b9606:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9608:	b113      	cbz	r3, b9610 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b960a:	685a      	ldr	r2, [r3, #4]
   b960c:	3201      	adds	r2, #1
   b960e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9610:	4770      	bx	lr

000b9612 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b9612:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9614:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9616:	4668      	mov	r0, sp
   b9618:	460d      	mov	r5, r1
   b961a:	f7ff fff1 	bl	b9600 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b961e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9620:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9622:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b9624:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b9626:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9628:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b962a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b962c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b962e:	f7fb fa64 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b9632:	b135      	cbz	r5, b9642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b9634:	1d28      	adds	r0, r5, #4
   b9636:	f7fb fa60 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b963a:	2108      	movs	r1, #8
   b963c:	4628      	mov	r0, r5
   b963e:	f7fa fd2e 	bl	b409e <_ZdlPvj>
        return p;
    }
   b9642:	4620      	mov	r0, r4
   b9644:	b003      	add	sp, #12
   b9646:	bd30      	pop	{r4, r5, pc}

000b9648 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b9648:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b964a:	b510      	push	{r4, lr}
      if (_M_empty())
   b964c:	b90a      	cbnz	r2, b9652 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b964e:	f001 fca5 	bl	baf9c <_ZSt25__throw_bad_function_callv>
    }
   b9652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9656:	68c3      	ldr	r3, [r0, #12]
   b9658:	4718      	bx	r3

000b965a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b965a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b965c:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b965e:	f100 0110 	add.w	r1, r0, #16
   b9662:	f7ff fff1 	bl	b9648 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b9666:	bd08      	pop	{r3, pc}

000b9668 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b9668:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b966a:	b510      	push	{r4, lr}
      if (_M_empty())
   b966c:	b90a      	cbnz	r2, b9672 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b966e:	f001 fc95 	bl	baf9c <_ZSt25__throw_bad_function_callv>
    }
   b9672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9676:	68c3      	ldr	r3, [r0, #12]
   b9678:	4718      	bx	r3

000b967a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b967a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b967c:	6800      	ldr	r0, [r0, #0]
   b967e:	f100 0110 	add.w	r1, r0, #16
   b9682:	f7ff fff1 	bl	b9668 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9686:	bd08      	pop	{r3, pc}

000b9688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b9688:	b538      	push	{r3, r4, r5, lr}
   b968a:	2300      	movs	r3, #0
   b968c:	4604      	mov	r4, r0
   b968e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9690:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9692:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9694:	f7fa fcff 	bl	b4096 <_Znwj>
   b9698:	b128      	cbz	r0, b96a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b969a:	2301      	movs	r3, #1
   b969c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b96a0:	4b02      	ldr	r3, [pc, #8]	; (b96ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b96a2:	6003      	str	r3, [r0, #0]
   b96a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b96a6:	6020      	str	r0, [r4, #0]
	}
   b96a8:	4620      	mov	r0, r4
   b96aa:	bd38      	pop	{r3, r4, r5, pc}
   b96ac:	000bcd18 	.word	0x000bcd18

000b96b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b96b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b96b2:	2300      	movs	r3, #0
   b96b4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b96b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b96b8:	4604      	mov	r4, r0
   b96ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b96bc:	b12b      	cbz	r3, b96ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b96be:	2202      	movs	r2, #2
   b96c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b96c2:	68eb      	ldr	r3, [r5, #12]
   b96c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b96c6:	68ab      	ldr	r3, [r5, #8]
   b96c8:	60a3      	str	r3, [r4, #8]
    }
   b96ca:	4620      	mov	r0, r4
   b96cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b96d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b96d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b96d2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b96d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b96d6:	4668      	mov	r0, sp
   b96d8:	f7ff fefe 	bl	b94d8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b96dc:	f04f 0302 	mov.w	r3, #2
   b96e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b96e4:	2a00      	cmp	r2, #0
   b96e6:	d103      	bne.n	b96f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b96e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b96ec:	2900      	cmp	r1, #0
   b96ee:	d1f7      	bne.n	b96e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b96f0:	d125      	bne.n	b973e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b96f2:	f104 050c 	add.w	r5, r4, #12
   b96f6:	4669      	mov	r1, sp
   b96f8:	4628      	mov	r0, r5
   b96fa:	f7ff feed 	bl	b94d8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b96fe:	f3bf 8f5b 	dmb	ish
   b9702:	2301      	movs	r3, #1
   b9704:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9706:	2000      	movs	r0, #0
   b9708:	f104 0308 	add.w	r3, r4, #8
   b970c:	f3bf 8f5b 	dmb	ish
   b9710:	e853 6f00 	ldrex	r6, [r3]
   b9714:	e843 0200 	strex	r2, r0, [r3]
   b9718:	2a00      	cmp	r2, #0
   b971a:	d1f9      	bne.n	b9710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b971c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9720:	b16e      	cbz	r6, b973e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b9722:	f7ff fbf1 	bl	b8f08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9726:	b178      	cbz	r0, b9748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b9728:	4629      	mov	r1, r5
   b972a:	4630      	mov	r0, r6
   b972c:	f7ff ff8c 	bl	b9648 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b9730:	4630      	mov	r0, r6
   b9732:	f7fa fec3 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b9736:	2110      	movs	r1, #16
   b9738:	4630      	mov	r0, r6
   b973a:	f7fa fcb0 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b973e:	4668      	mov	r0, sp
   b9740:	f7ff fed7 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
    }
   b9744:	b009      	add	sp, #36	; 0x24
   b9746:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9748:	4631      	mov	r1, r6
   b974a:	a802      	add	r0, sp, #8
   b974c:	f7ff ffb0 	bl	b96b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9750:	68e0      	ldr	r0, [r4, #12]
   b9752:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9756:	b108      	cbz	r0, b975c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b9758:	f002 f9e6 	bl	bbb28 <strdup>
        type_(type) {
   b975c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b975e:	2010      	movs	r0, #16
   b9760:	f8ad 501c 	strh.w	r5, [sp, #28]
   b9764:	f7fa fc97 	bl	b4096 <_Znwj>
   b9768:	4605      	mov	r5, r0
   b976a:	b1e8      	cbz	r0, b97a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b976c:	2700      	movs	r7, #0
   b976e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9770:	2018      	movs	r0, #24
   b9772:	f7fa fc90 	bl	b4096 <_Znwj>
   b9776:	4604      	mov	r4, r0
   b9778:	b188      	cbz	r0, b979e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b977a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b977c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b977e:	a802      	add	r0, sp, #8
   b9780:	f7fb fc64 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9784:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9786:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9788:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b978a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b978c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b978e:	a906      	add	r1, sp, #24
   b9790:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9792:	60e3      	str	r3, [r4, #12]
   b9794:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b9798:	9205      	str	r2, [sp, #20]
   b979a:	f7ff fe9d 	bl	b94d8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b979e:	4b08      	ldr	r3, [pc, #32]	; (b97c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b97a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b97a2:	4b08      	ldr	r3, [pc, #32]	; (b97c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b97a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b97a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b97a8:	a806      	add	r0, sp, #24
   b97aa:	f7ff fea2 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b97ae:	a802      	add	r0, sp, #8
   b97b0:	f7fa fe84 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b97b4:	2200      	movs	r2, #0
   b97b6:	4629      	mov	r1, r5
   b97b8:	4803      	ldr	r0, [pc, #12]	; (b97c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b97ba:	f7ff fbad 	bl	b8f18 <application_thread_invoke>
   b97be:	e7b7      	b.n	b9730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b97c0:	000b965b 	.word	0x000b965b
   b97c4:	000b98dd 	.word	0x000b98dd
   b97c8:	000b9257 	.word	0x000b9257

000b97cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b97cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97d0:	b08b      	sub	sp, #44	; 0x2c
   b97d2:	4605      	mov	r5, r0
   b97d4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b97d8:	460f      	mov	r7, r1
   b97da:	4690      	mov	r8, r2
   b97dc:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b97de:	f7ff fbfb 	bl	b8fd8 <spark_cloud_flag_connected>
   b97e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b97e4:	4683      	mov	fp, r0
   b97e6:	bb38      	cbnz	r0, b9838 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b97e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b97ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b97ee:	a905      	add	r1, sp, #20
   b97f0:	4630      	mov	r0, r6
   b97f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b97f6:	f7ff fe6f 	bl	b94d8 <_ZN8particle5ErrorC1EOS0_>
   b97fa:	2014      	movs	r0, #20
   b97fc:	f7fa fc4b 	bl	b4096 <_Znwj>
   b9800:	4604      	mov	r4, r0
   b9802:	b148      	cbz	r0, b9818 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9804:	2302      	movs	r3, #2
   b9806:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9808:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b980a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b980e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b9810:	4631      	mov	r1, r6
   b9812:	300c      	adds	r0, #12
   b9814:	f7ff fe60 	bl	b94d8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9818:	4628      	mov	r0, r5
	: __shared_count(__p)
   b981a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b981c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b9820:	f7ff ff32 	bl	b9688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9824:	4630      	mov	r0, r6
   b9826:	f7ff fe64 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b982a:	a805      	add	r0, sp, #20
   b982c:	f7ff fe61 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
}
   b9830:	4628      	mov	r0, r5
   b9832:	b00b      	add	sp, #44	; 0x2c
   b9834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b9838:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b983a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b983c:	2014      	movs	r0, #20
   b983e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b9842:	9307      	str	r3, [sp, #28]
   b9844:	f7fa fc27 	bl	b4096 <_Znwj>
   b9848:	4601      	mov	r1, r0
   b984a:	b118      	cbz	r0, b9854 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b984c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9850:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9852:	7044      	strb	r4, [r0, #1]
   b9854:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9856:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b9858:	f7ff ff16 	bl	b9688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b985c:	4b1e      	ldr	r3, [pc, #120]	; (b98d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b985e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b9860:	2008      	movs	r0, #8
   b9862:	f7fa fc18 	bl	b4096 <_Znwj>
   b9866:	4604      	mov	r4, r0
   b9868:	b110      	cbz	r0, b9870 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b986a:	a903      	add	r1, sp, #12
   b986c:	f7ff fec8 	bl	b9600 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9870:	9600      	str	r6, [sp, #0]
   b9872:	fa5f f38a 	uxtb.w	r3, sl
   b9876:	464a      	mov	r2, r9
   b9878:	4641      	mov	r1, r8
   b987a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b987c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b987e:	f7ff fbbb 	bl	b8ff8 <spark_send_event>
   b9882:	b9b8      	cbnz	r0, b98b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b9884:	9b03      	ldr	r3, [sp, #12]
   b9886:	785b      	ldrb	r3, [r3, #1]
   b9888:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b988c:	b993      	cbnz	r3, b98b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b988e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9892:	a905      	add	r1, sp, #20
   b9894:	a803      	add	r0, sp, #12
   b9896:	9205      	str	r2, [sp, #20]
   b9898:	f8ad 3018 	strh.w	r3, [sp, #24]
   b989c:	f7ff ff18 	bl	b96d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b98a0:	a805      	add	r0, sp, #20
   b98a2:	f7ff fe26 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b98a6:	a805      	add	r0, sp, #20
   b98a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b98aa:	f7ff feb2 	bl	b9612 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b98ae:	a806      	add	r0, sp, #24
   b98b0:	f7fb f923 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98b4:	a903      	add	r1, sp, #12
   b98b6:	a805      	add	r0, sp, #20
   b98b8:	f7ff fea2 	bl	b9600 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b98bc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b98be:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b98c0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b98c2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b98c4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b98c6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b98c8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b98ca:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b98cc:	f7fb f915 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98d0:	a804      	add	r0, sp, #16
   b98d2:	f7fb f912 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b98d6:	e7ab      	b.n	b9830 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b98d8:	000b9959 	.word	0x000b9959

000b98dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b98dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b98de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b98e0:	4605      	mov	r5, r0
	switch (__op)
   b98e2:	d103      	bne.n	b98ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b98e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b98e6:	6003      	str	r3, [r0, #0]
      }
   b98e8:	2000      	movs	r0, #0
   b98ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b98ec:	2a02      	cmp	r2, #2
   b98ee:	d010      	beq.n	b9912 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b98f0:	2a03      	cmp	r2, #3
   b98f2:	d1f9      	bne.n	b98e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b98f4:	6804      	ldr	r4, [r0, #0]
   b98f6:	2c00      	cmp	r4, #0
   b98f8:	d0f6      	beq.n	b98e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b98fa:	f104 0010 	add.w	r0, r4, #16
   b98fe:	f7ff fdf8 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9902:	4620      	mov	r0, r4
   b9904:	f7fa fdda 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9908:	2118      	movs	r1, #24
   b990a:	4620      	mov	r0, r4
   b990c:	f7fa fbc7 	bl	b409e <_ZdlPvj>
   b9910:	e7ea      	b.n	b98e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9912:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b9914:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9916:	f7fa fbbe 	bl	b4096 <_Znwj>
   b991a:	4604      	mov	r4, r0
   b991c:	b150      	cbz	r0, b9934 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b991e:	4631      	mov	r1, r6
   b9920:	f7ff fec6 	bl	b96b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9924:	6930      	ldr	r0, [r6, #16]
   b9926:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b992a:	b108      	cbz	r0, b9930 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b992c:	f002 f8fc 	bl	bbb28 <strdup>
        type_(type) {
   b9930:	6120      	str	r0, [r4, #16]
   b9932:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b9934:	602c      	str	r4, [r5, #0]
	}
   b9936:	e7d7      	b.n	b98e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b9938 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b9938:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b993a:	2300      	movs	r3, #0
   b993c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b993e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9940:	4604      	mov	r4, r0
   b9942:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9944:	b12b      	cbz	r3, b9952 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9946:	2202      	movs	r2, #2
   b9948:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b994a:	68eb      	ldr	r3, [r5, #12]
   b994c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b994e:	68ab      	ldr	r3, [r5, #8]
   b9950:	60a3      	str	r3, [r4, #8]
    }
   b9952:	4620      	mov	r0, r4
   b9954:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b9958:	b5f0      	push	{r4, r5, r6, r7, lr}
   b995a:	b089      	sub	sp, #36	; 0x24
   b995c:	4604      	mov	r4, r0
   b995e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b9960:	a801      	add	r0, sp, #4
   b9962:	4611      	mov	r1, r2
   b9964:	f7ff fe55 	bl	b9612 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b9968:	b1a4      	cbz	r4, b9994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b996a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b996c:	b11d      	cbz	r5, b9976 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b996e:	4628      	mov	r0, r5
   b9970:	f002 f8da 	bl	bbb28 <strdup>
   b9974:	4605      	mov	r5, r0
   b9976:	a801      	add	r0, sp, #4
   b9978:	a903      	add	r1, sp, #12
        type_(type) {
   b997a:	9503      	str	r5, [sp, #12]
   b997c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9980:	f7ff fea6 	bl	b96d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9984:	a803      	add	r0, sp, #12
   b9986:	f7ff fdb4 	bl	b94f2 <_ZN8particle5ErrorD1Ev>
   b998a:	a802      	add	r0, sp, #8
   b998c:	f7fb f8b5 	bl	b4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9990:	b009      	add	sp, #36	; 0x24
   b9992:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b9994:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9996:	2301      	movs	r3, #1
   b9998:	e8d5 2f4f 	ldrexb	r2, [r5]
   b999c:	2a00      	cmp	r2, #0
   b999e:	d103      	bne.n	b99a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b99a0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b99a4:	2900      	cmp	r1, #0
   b99a6:	d1f7      	bne.n	b9998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b99a8:	d1ef      	bne.n	b998a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b99aa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b99ac:	f3bf 8f5b 	dmb	ish
   b99b0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b99b2:	1d2b      	adds	r3, r5, #4
   b99b4:	f3bf 8f5b 	dmb	ish
   b99b8:	e853 6f00 	ldrex	r6, [r3]
   b99bc:	e843 4200 	strex	r2, r4, [r3]
   b99c0:	2a00      	cmp	r2, #0
   b99c2:	d1f9      	bne.n	b99b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b99c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b99c8:	2e00      	cmp	r6, #0
   b99ca:	d0de      	beq.n	b998a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b99cc:	4620      	mov	r0, r4
   b99ce:	f7ff fa9b 	bl	b8f08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b99d2:	4607      	mov	r7, r0
   b99d4:	b160      	cbz	r0, b99f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b99d6:	f105 010c 	add.w	r1, r5, #12
   b99da:	4630      	mov	r0, r6
   b99dc:	f7ff fe44 	bl	b9668 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b99e0:	4630      	mov	r0, r6
   b99e2:	f7fa fd6b 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b99e6:	2110      	movs	r1, #16
   b99e8:	4630      	mov	r0, r6
   b99ea:	f7fa fb58 	bl	b409e <_ZdlPvj>
   b99ee:	e7cc      	b.n	b998a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b99f0:	4631      	mov	r1, r6
   b99f2:	a803      	add	r0, sp, #12
   b99f4:	f7ff ffa0 	bl	b9938 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b99f8:	7b2b      	ldrb	r3, [r5, #12]
   b99fa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b99fe:	2010      	movs	r0, #16
   b9a00:	f7fa fb49 	bl	b4096 <_Znwj>
   b9a04:	4605      	mov	r5, r0
   b9a06:	b1d0      	cbz	r0, b9a3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b9a08:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9a0a:	2014      	movs	r0, #20
   b9a0c:	f7fa fb43 	bl	b4096 <_Znwj>
   b9a10:	4604      	mov	r4, r0
   b9a12:	b178      	cbz	r0, b9a34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b9a14:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9a16:	4601      	mov	r1, r0
   b9a18:	a803      	add	r0, sp, #12
   b9a1a:	f7fb fb17 	bl	b504c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9a1e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9a20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a22:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9a24:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b9a26:	9205      	str	r2, [sp, #20]
   b9a28:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a2a:	60e3      	str	r3, [r4, #12]
   b9a2c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b9a30:	9206      	str	r2, [sp, #24]
   b9a32:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9a34:	4b06      	ldr	r3, [pc, #24]	; (b9a50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b9a36:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9a38:	4b06      	ldr	r3, [pc, #24]	; (b9a54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9a3a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9a3c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b9a3e:	a803      	add	r0, sp, #12
   b9a40:	f7fa fd3c 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9a44:	2200      	movs	r2, #0
   b9a46:	4629      	mov	r1, r5
   b9a48:	4803      	ldr	r0, [pc, #12]	; (b9a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b9a4a:	f7ff fa65 	bl	b8f18 <application_thread_invoke>
   b9a4e:	e7c7      	b.n	b99e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b9a50:	000b967b 	.word	0x000b967b
   b9a54:	000b9a5d 	.word	0x000b9a5d
   b9a58:	000b9257 	.word	0x000b9257

000b9a5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b9a5c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9a5e:	b570      	push	{r4, r5, r6, lr}
   b9a60:	4604      	mov	r4, r0
	switch (__op)
   b9a62:	d103      	bne.n	b9a6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9a64:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9a66:	6003      	str	r3, [r0, #0]
      }
   b9a68:	2000      	movs	r0, #0
   b9a6a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b9a6c:	2a02      	cmp	r2, #2
   b9a6e:	d00c      	beq.n	b9a8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b9a70:	2a03      	cmp	r2, #3
   b9a72:	d1f9      	bne.n	b9a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9a74:	6804      	ldr	r4, [r0, #0]
   b9a76:	2c00      	cmp	r4, #0
   b9a78:	d0f6      	beq.n	b9a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b9a7a:	4620      	mov	r0, r4
   b9a7c:	f7fa fd1e 	bl	b44bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9a80:	2114      	movs	r1, #20
   b9a82:	4620      	mov	r0, r4
   b9a84:	f7fa fb0b 	bl	b409e <_ZdlPvj>
   b9a88:	e7ee      	b.n	b9a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9a8a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9a8c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9a8e:	f7fa fb02 	bl	b4096 <_Znwj>
   b9a92:	4605      	mov	r5, r0
   b9a94:	b120      	cbz	r0, b9aa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b9a96:	4631      	mov	r1, r6
   b9a98:	f7ff ff4e 	bl	b9938 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9a9c:	7c33      	ldrb	r3, [r6, #16]
   b9a9e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9aa0:	6025      	str	r5, [r4, #0]
	}
   b9aa2:	e7e1      	b.n	b9a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b9aa4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9aa4:	2200      	movs	r2, #0
   b9aa6:	6840      	ldr	r0, [r0, #4]
   b9aa8:	4611      	mov	r1, r2
   b9aaa:	f7ff bb1d 	b.w	b90e8 <network_listening>

000b9aae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9aae:	2200      	movs	r2, #0
   b9ab0:	6840      	ldr	r0, [r0, #4]
   b9ab2:	4611      	mov	r1, r2
   b9ab4:	f7ff bb28 	b.w	b9108 <network_get_listen_timeout>

000b9ab8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ab8:	6840      	ldr	r0, [r0, #4]
   b9aba:	2200      	movs	r2, #0
   b9abc:	f7ff bb1c 	b.w	b90f8 <network_set_listen_timeout>

000b9ac0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9ac0:	6840      	ldr	r0, [r0, #4]
   b9ac2:	2200      	movs	r2, #0
   b9ac4:	f081 0101 	eor.w	r1, r1, #1
   b9ac8:	f7ff bb06 	b.w	b90d8 <network_listen>

000b9acc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9acc:	2300      	movs	r3, #0
   b9ace:	6840      	ldr	r0, [r0, #4]
   b9ad0:	461a      	mov	r2, r3
   b9ad2:	4619      	mov	r1, r3
   b9ad4:	f7ff baf8 	b.w	b90c8 <network_off>

000b9ad8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9ad8:	2300      	movs	r3, #0
   b9ada:	6840      	ldr	r0, [r0, #4]
   b9adc:	461a      	mov	r2, r3
   b9ade:	4619      	mov	r1, r3
   b9ae0:	f7ff baea 	b.w	b90b8 <network_on>

000b9ae4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9ae4:	2200      	movs	r2, #0
   b9ae6:	6840      	ldr	r0, [r0, #4]
   b9ae8:	4611      	mov	r1, r2
   b9aea:	f7ff badd 	b.w	b90a8 <network_ready>

000b9aee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9aee:	2200      	movs	r2, #0
   b9af0:	6840      	ldr	r0, [r0, #4]
   b9af2:	4611      	mov	r1, r2
   b9af4:	f7ff bac8 	b.w	b9088 <network_connecting>

000b9af8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9af8:	6840      	ldr	r0, [r0, #4]
   b9afa:	2200      	movs	r2, #0
   b9afc:	2102      	movs	r1, #2
   b9afe:	f7ff bacb 	b.w	b9098 <network_disconnect>

000b9b02 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9b02:	2300      	movs	r3, #0
   b9b04:	6840      	ldr	r0, [r0, #4]
   b9b06:	461a      	mov	r2, r3
   b9b08:	f7ff bab6 	b.w	b9078 <network_connect>

000b9b0c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b9b0c:	4b02      	ldr	r3, [pc, #8]	; (b9b18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9b0e:	2203      	movs	r2, #3
   b9b10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9b12:	4a02      	ldr	r2, [pc, #8]	; (b9b1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9b14:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9b16:	4770      	bx	lr
   b9b18:	2003e668 	.word	0x2003e668
   b9b1c:	000bcd34 	.word	0x000bcd34

000b9b20 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b9b20:	6800      	ldr	r0, [r0, #0]
   b9b22:	f000 b951 	b.w	b9dc8 <_ZN7TwoWire4lockEv>

000b9b26 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b9b26:	b510      	push	{r4, lr}
   b9b28:	4604      	mov	r4, r0
      lock_(_lock) {
   b9b2a:	6001      	str	r1, [r0, #0]
   b9b2c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b9b2e:	b10a      	cbz	r2, b9b34 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b9b30:	f7ff fff6 	bl	b9b20 <_ZN9FuelGauge4lockEv>
}
   b9b34:	4620      	mov	r0, r4
   b9b36:	bd10      	pop	{r4, pc}

000b9b38 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b9b38:	b513      	push	{r0, r1, r4, lr}
   b9b3a:	4604      	mov	r4, r0
   b9b3c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b9b3e:	f001 f9bf 	bl	baec0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b9b42:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b9b44:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7ff ffed 	bl	b9b26 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b9b4c:	4620      	mov	r0, r4
   b9b4e:	b002      	add	sp, #8
   b9b50:	bd10      	pop	{r4, pc}

000b9b52 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b9b52:	6800      	ldr	r0, [r0, #0]
   b9b54:	f000 b941 	b.w	b9dda <_ZN7TwoWire6unlockEv>

000b9b58 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b9b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9b5c:	4604      	mov	r4, r0
   b9b5e:	460d      	mov	r5, r1
   b9b60:	4617      	mov	r7, r2
   b9b62:	461e      	mov	r6, r3
   b9b64:	f7ff ffdc 	bl	b9b20 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9b68:	2236      	movs	r2, #54	; 0x36
   b9b6a:	2300      	movs	r3, #0
   b9b6c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9b70:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b9b72:	230a      	movs	r3, #10
   b9b74:	f04f 0801 	mov.w	r8, #1
   b9b78:	4669      	mov	r1, sp
   b9b7a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9b7e:	f000 f904 	bl	b9d8a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b9b82:	6820      	ldr	r0, [r4, #0]
   b9b84:	6803      	ldr	r3, [r0, #0]
   b9b86:	4629      	mov	r1, r5
   b9b88:	689b      	ldr	r3, [r3, #8]
   b9b8a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9b8c:	6820      	ldr	r0, [r4, #0]
   b9b8e:	4641      	mov	r1, r8
   b9b90:	f000 f913 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
   b9b94:	4605      	mov	r5, r0
   b9b96:	b140      	cbz	r0, b9baa <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b9b98:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	f7ff ffd8 	bl	b9b52 <_ZN9FuelGauge6unlockEv>
}
   b9ba2:	4628      	mov	r0, r5
   b9ba4:	b004      	add	sp, #16
   b9ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b9baa:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b9bac:	6820      	ldr	r0, [r4, #0]
   b9bae:	9301      	str	r3, [sp, #4]
   b9bb0:	4669      	mov	r1, sp
   b9bb2:	f000 f8b7 	bl	b9d24 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b9bb6:	2802      	cmp	r0, #2
   b9bb8:	d1ee      	bne.n	b9b98 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b9bba:	6820      	ldr	r0, [r4, #0]
   b9bbc:	6803      	ldr	r3, [r0, #0]
   b9bbe:	695b      	ldr	r3, [r3, #20]
   b9bc0:	4798      	blx	r3
   b9bc2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b9bc4:	6820      	ldr	r0, [r4, #0]
   b9bc6:	6803      	ldr	r3, [r0, #0]
   b9bc8:	695b      	ldr	r3, [r3, #20]
   b9bca:	4798      	blx	r3
   b9bcc:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b9bce:	e7e5      	b.n	b9b9c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b9bd0 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   b9bd0:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   b9bd2:	460a      	mov	r2, r1
   b9bd4:	210c      	movs	r1, #12
   b9bd6:	f7ff bfbf 	b.w	b9b58 <_ZN9FuelGauge12readRegisterEhRhS0_>

000b9bda <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b9bda:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9bde:	4604      	mov	r4, r0
   b9be0:	461d      	mov	r5, r3
   b9be2:	460f      	mov	r7, r1
   b9be4:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b9be6:	f7ff ff9b 	bl	b9b20 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9bea:	2236      	movs	r2, #54	; 0x36
   b9bec:	2300      	movs	r3, #0
   b9bee:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9bf2:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   b9bf4:	f04f 0801 	mov.w	r8, #1
   b9bf8:	230a      	movs	r3, #10
   b9bfa:	4669      	mov	r1, sp
   b9bfc:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9c00:	f000 f8c3 	bl	b9d8a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b9c04:	6820      	ldr	r0, [r4, #0]
   b9c06:	6803      	ldr	r3, [r0, #0]
   b9c08:	4639      	mov	r1, r7
   b9c0a:	689b      	ldr	r3, [r3, #8]
   b9c0c:	4798      	blx	r3
    i2c_.write(MSB);
   b9c0e:	6820      	ldr	r0, [r4, #0]
   b9c10:	6803      	ldr	r3, [r0, #0]
   b9c12:	4631      	mov	r1, r6
   b9c14:	689b      	ldr	r3, [r3, #8]
   b9c16:	4798      	blx	r3
    i2c_.write(LSB);
   b9c18:	6820      	ldr	r0, [r4, #0]
   b9c1a:	6803      	ldr	r3, [r0, #0]
   b9c1c:	4629      	mov	r1, r5
   b9c1e:	689b      	ldr	r3, [r3, #8]
   b9c20:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9c22:	4641      	mov	r1, r8
   b9c24:	6820      	ldr	r0, [r4, #0]
   b9c26:	f000 f8c8 	bl	b9dba <_ZN7TwoWire15endTransmissionEh>
   b9c2a:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b9c2c:	4620      	mov	r0, r4
   b9c2e:	bf0c      	ite	eq
   b9c30:	2500      	moveq	r5, #0
   b9c32:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b9c36:	f7ff ff8c 	bl	b9b52 <_ZN9FuelGauge6unlockEv>
}
   b9c3a:	4628      	mov	r0, r5
   b9c3c:	b004      	add	sp, #16
   b9c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9c42 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b9c42:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b9c44:	2240      	movs	r2, #64	; 0x40
   b9c46:	2300      	movs	r3, #0
   b9c48:	2106      	movs	r1, #6
   b9c4a:	f7ff ffc6 	bl	b9bda <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9c4e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9c52:	bd08      	pop	{r3, pc}

000b9c54 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   b9c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9c56:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b9c58:	f7ff ff62 	bl	b9b20 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   b9c5c:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   b9c5e:	f10d 0207 	add.w	r2, sp, #7
   b9c62:	f10d 0106 	add.w	r1, sp, #6
   b9c66:	4628      	mov	r0, r5
    byte MSB = 0;
   b9c68:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b9c6c:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   b9c70:	f7ff ffae 	bl	b9bd0 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   b9c74:	1e04      	subs	r4, r0, #0
   b9c76:	db0b      	blt.n	b9c90 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   b9c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b9c7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b9c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   b9c84:	210c      	movs	r1, #12
   b9c86:	4628      	mov	r0, r5
   b9c88:	f7ff ffa7 	bl	b9bda <_ZN9FuelGauge13writeRegisterEhhh>
   b9c8c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   b9c90:	4628      	mov	r0, r5
   b9c92:	f7ff ff5e 	bl	b9b52 <_ZN9FuelGauge6unlockEv>
}
   b9c96:	4620      	mov	r0, r4
   b9c98:	b003      	add	sp, #12
   b9c9a:	bd30      	pop	{r4, r5, pc}

000b9c9c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9c9c:	4770      	bx	lr

000b9c9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ca0:	4606      	mov	r6, r0
   b9ca2:	4615      	mov	r5, r2
   b9ca4:	460c      	mov	r4, r1
   b9ca6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9ca8:	42bc      	cmp	r4, r7
   b9caa:	d006      	beq.n	b9cba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9cac:	6833      	ldr	r3, [r6, #0]
   b9cae:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9cb2:	689b      	ldr	r3, [r3, #8]
   b9cb4:	4630      	mov	r0, r6
   b9cb6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9cb8:	e7f6      	b.n	b9ca8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9cba:	4628      	mov	r0, r5
   b9cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9cbe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9cbe:	7c00      	ldrb	r0, [r0, #16]
   b9cc0:	2200      	movs	r2, #0
   b9cc2:	f7fe bf87 	b.w	b8bd4 <hal_i2c_write>

000b9cc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9cc6:	7c00      	ldrb	r0, [r0, #16]
   b9cc8:	2100      	movs	r1, #0
   b9cca:	f7fe bf8b 	b.w	b8be4 <hal_i2c_available>

000b9cce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9cce:	7c00      	ldrb	r0, [r0, #16]
   b9cd0:	2100      	movs	r1, #0
   b9cd2:	f7fe bf8f 	b.w	b8bf4 <hal_i2c_read>

000b9cd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9cd6:	7c00      	ldrb	r0, [r0, #16]
   b9cd8:	2100      	movs	r1, #0
   b9cda:	f7fe bf93 	b.w	b8c04 <hal_i2c_peek>

000b9cde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9cde:	7c00      	ldrb	r0, [r0, #16]
   b9ce0:	2100      	movs	r1, #0
   b9ce2:	f7fe bf97 	b.w	b8c14 <hal_i2c_flush>

000b9ce6 <_ZN7TwoWireD0Ev>:
   b9ce6:	b510      	push	{r4, lr}
   b9ce8:	2114      	movs	r1, #20
   b9cea:	4604      	mov	r4, r0
   b9cec:	f7fa f9d7 	bl	b409e <_ZdlPvj>
   b9cf0:	4620      	mov	r0, r4
   b9cf2:	bd10      	pop	{r4, pc}

000b9cf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9cf4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9cfa:	4604      	mov	r4, r0
   b9cfc:	4608      	mov	r0, r1
   b9cfe:	2100      	movs	r1, #0
   b9d00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9d04:	4b03      	ldr	r3, [pc, #12]	; (b9d14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9d06:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9d08:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9d0a:	4611      	mov	r1, r2
   b9d0c:	f7fe ff92 	bl	b8c34 <hal_i2c_init>
}
   b9d10:	4620      	mov	r0, r4
   b9d12:	bd10      	pop	{r4, pc}
   b9d14:	000bcd70 	.word	0x000bcd70

000b9d18 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9d18:	2300      	movs	r3, #0
   b9d1a:	7c00      	ldrb	r0, [r0, #16]
   b9d1c:	461a      	mov	r2, r3
   b9d1e:	4619      	mov	r1, r3
   b9d20:	f7fe bf40 	b.w	b8ba4 <hal_i2c_begin>

000b9d24 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9d26:	2200      	movs	r2, #0
   b9d28:	2314      	movs	r3, #20
   b9d2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9d2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9d32:	780b      	ldrb	r3, [r1, #0]
   b9d34:	f88d 3008 	strb.w	r3, [sp, #8]
   b9d38:	684b      	ldr	r3, [r1, #4]
   b9d3a:	9303      	str	r3, [sp, #12]
   b9d3c:	68cb      	ldr	r3, [r1, #12]
   b9d3e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9d40:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9d42:	7a0b      	ldrb	r3, [r1, #8]
   b9d44:	9305      	str	r3, [sp, #20]
   b9d46:	a901      	add	r1, sp, #4
   b9d48:	f7fe ff8c 	bl	b8c64 <hal_i2c_request_ex>
}
   b9d4c:	b007      	add	sp, #28
   b9d4e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9d52 <_ZN7TwoWire11requestFromEhjh>:
{
   b9d52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9d54:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9d56:	f88d 1000 	strb.w	r1, [sp]
   b9d5a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9d5e:	9103      	str	r1, [sp, #12]
   b9d60:	bf18      	it	ne
   b9d62:	2301      	movne	r3, #1
   b9d64:	4669      	mov	r1, sp
    size_ = size;
   b9d66:	9201      	str	r2, [sp, #4]
   b9d68:	f88d 3008 	strb.w	r3, [sp, #8]
   b9d6c:	f7ff ffda 	bl	b9d24 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9d70:	b005      	add	sp, #20
   b9d72:	f85d fb04 	ldr.w	pc, [sp], #4

000b9d76 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b9d76:	2301      	movs	r3, #1
   b9d78:	f7ff bfeb 	b.w	b9d52 <_ZN7TwoWire11requestFromEhjh>

000b9d7c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9d7c:	7c00      	ldrb	r0, [r0, #16]
   b9d7e:	2200      	movs	r2, #0
   b9d80:	f7fe bf18 	b.w	b8bb4 <hal_i2c_begin_transmission>

000b9d84 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9d84:	b2c9      	uxtb	r1, r1
   b9d86:	f7ff bff9 	b.w	b9d7c <_ZN7TwoWire17beginTransmissionEh>

000b9d8a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9d8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9d8c:	2300      	movs	r3, #0
   b9d8e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b9d92:	684a      	ldr	r2, [r1, #4]
   b9d94:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9d96:	2314      	movs	r3, #20
    };
   b9d98:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9d9a:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9d9e:	780b      	ldrb	r3, [r1, #0]
    };
   b9da0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9da2:	7a0a      	ldrb	r2, [r1, #8]
   b9da4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9da6:	7c00      	ldrb	r0, [r0, #16]
    };
   b9da8:	f88d 3008 	strb.w	r3, [sp, #8]
   b9dac:	aa01      	add	r2, sp, #4
   b9dae:	4619      	mov	r1, r3
   b9db0:	f7fe ff00 	bl	b8bb4 <hal_i2c_begin_transmission>
}
   b9db4:	b007      	add	sp, #28
   b9db6:	f85d fb04 	ldr.w	pc, [sp], #4

000b9dba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9dba:	7c00      	ldrb	r0, [r0, #16]
   b9dbc:	2200      	movs	r2, #0
   b9dbe:	f7fe bf01 	b.w	b8bc4 <hal_i2c_end_transmission>

000b9dc2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9dc2:	2101      	movs	r1, #1
   b9dc4:	f7ff bff9 	b.w	b9dba <_ZN7TwoWire15endTransmissionEh>

000b9dc8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9dc8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b9dca:	2100      	movs	r1, #0
   b9dcc:	7c00      	ldrb	r0, [r0, #16]
   b9dce:	f7fe ff39 	bl	b8c44 <hal_i2c_lock>
}
   b9dd2:	fab0 f080 	clz	r0, r0
   b9dd6:	0940      	lsrs	r0, r0, #5
   b9dd8:	bd08      	pop	{r3, pc}

000b9dda <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b9dda:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9ddc:	2100      	movs	r1, #0
   b9dde:	7c00      	ldrb	r0, [r0, #16]
   b9de0:	f7fe ff38 	bl	b8c54 <hal_i2c_unlock>
}
   b9de4:	fab0 f080 	clz	r0, r0
   b9de8:	0940      	lsrs	r0, r0, #5
   b9dea:	bd08      	pop	{r3, pc}

000b9dec <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9dec:	4700      	bx	r0
	...

000b9df0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9df0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9df4:	2400      	movs	r4, #0
{
   b9df6:	461d      	mov	r5, r3
   b9df8:	460f      	mov	r7, r1
   b9dfa:	4690      	mov	r8, r2
   b9dfc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9dfe:	f7fe fec1 	bl	b8b84 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9e02:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9e04:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9e08:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9e0c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9e10:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9e14:	bfa2      	ittt	ge
   b9e16:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9e1a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9e1e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9e20:	4907      	ldr	r1, [pc, #28]	; (b9e40 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9e22:	9400      	str	r4, [sp, #0]
   b9e24:	4643      	mov	r3, r8
   b9e26:	463a      	mov	r2, r7
   b9e28:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9e2a:	bfa8      	it	ge
   b9e2c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9e30:	f7fe fea0 	bl	b8b74 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9e34:	fab0 f080 	clz	r0, r0
   b9e38:	0940      	lsrs	r0, r0, #5
   b9e3a:	b004      	add	sp, #16
   b9e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9e40:	000b9ded 	.word	0x000b9ded

000b9e44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9e44:	4770      	bx	lr

000b9e46 <_ZN9IPAddressD0Ev>:
   b9e46:	b510      	push	{r4, lr}
   b9e48:	2118      	movs	r1, #24
   b9e4a:	4604      	mov	r4, r0
   b9e4c:	f7fa f927 	bl	b409e <_ZdlPvj>
   b9e50:	4620      	mov	r0, r4
   b9e52:	bd10      	pop	{r4, pc}

000b9e54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9e54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9e56:	7d03      	ldrb	r3, [r0, #20]
   b9e58:	2b06      	cmp	r3, #6
{
   b9e5a:	b08d      	sub	sp, #52	; 0x34
   b9e5c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9e5e:	f100 0704 	add.w	r7, r0, #4
   b9e62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9e66:	d012      	beq.n	b9e8e <_ZNK9IPAddress7printToER5Print+0x3a>
   b9e68:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9e6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9e70:	220a      	movs	r2, #10
   b9e72:	4630      	mov	r0, r6
   b9e74:	f000 f943 	bl	ba0fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9e78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9e7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9e7c:	d019      	beq.n	b9eb2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9e7e:	2c00      	cmp	r4, #0
   b9e80:	d0f4      	beq.n	b9e6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9e82:	212e      	movs	r1, #46	; 0x2e
   b9e84:	4630      	mov	r0, r6
   b9e86:	f000 f937 	bl	ba0f8 <_ZN5Print5printEc>
   b9e8a:	4404      	add	r4, r0
   b9e8c:	e7ee      	b.n	b9e6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9e8e:	232f      	movs	r3, #47	; 0x2f
   b9e90:	466a      	mov	r2, sp
   b9e92:	4639      	mov	r1, r7
   b9e94:	200a      	movs	r0, #10
		buf[0] = 0;
   b9e96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9e9a:	f7fe feeb 	bl	b8c74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9e9e:	4668      	mov	r0, sp
   b9ea0:	f001 fe5f 	bl	bbb62 <strlen>
   b9ea4:	6833      	ldr	r3, [r6, #0]
   b9ea6:	4602      	mov	r2, r0
   b9ea8:	68db      	ldr	r3, [r3, #12]
   b9eaa:	4669      	mov	r1, sp
   b9eac:	4630      	mov	r0, r6
   b9eae:	4798      	blx	r3
   b9eb0:	4604      	mov	r4, r0
    }
    return n;
}
   b9eb2:	4620      	mov	r0, r4
   b9eb4:	b00d      	add	sp, #52	; 0x34
   b9eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9eb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9eb8:	b510      	push	{r4, lr}
   b9eba:	4b05      	ldr	r3, [pc, #20]	; (b9ed0 <_ZN9IPAddressC1Ev+0x18>)
   b9ebc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9ebe:	2211      	movs	r2, #17
   b9ec0:	f840 3b04 	str.w	r3, [r0], #4
   b9ec4:	2100      	movs	r1, #0
   b9ec6:	f001 fde7 	bl	bba98 <memset>
}
   b9eca:	4620      	mov	r0, r4
   b9ecc:	bd10      	pop	{r4, pc}
   b9ece:	bf00      	nop
   b9ed0:	000bcd98 	.word	0x000bcd98

000b9ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9ed4:	4603      	mov	r3, r0
   b9ed6:	4a07      	ldr	r2, [pc, #28]	; (b9ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9ed8:	b510      	push	{r4, lr}
   b9eda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9ede:	f101 0210 	add.w	r2, r1, #16
   b9ee2:	f851 4b04 	ldr.w	r4, [r1], #4
   b9ee6:	f843 4b04 	str.w	r4, [r3], #4
   b9eea:	4291      	cmp	r1, r2
   b9eec:	d1f9      	bne.n	b9ee2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9eee:	780a      	ldrb	r2, [r1, #0]
   b9ef0:	701a      	strb	r2, [r3, #0]
}
   b9ef2:	bd10      	pop	{r4, pc}
   b9ef4:	000bcd98 	.word	0x000bcd98

000b9ef8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9ef8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9efa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9efe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9f02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9f06:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9f0a:	2304      	movs	r3, #4
   b9f0c:	6041      	str	r1, [r0, #4]
   b9f0e:	7503      	strb	r3, [r0, #20]
}
   b9f10:	bd10      	pop	{r4, pc}
	...

000b9f14 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9f14:	b507      	push	{r0, r1, r2, lr}
   b9f16:	4b06      	ldr	r3, [pc, #24]	; (b9f30 <_ZN9IPAddressC1EPKh+0x1c>)
   b9f18:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9f1a:	78cb      	ldrb	r3, [r1, #3]
   b9f1c:	9300      	str	r3, [sp, #0]
   b9f1e:	788b      	ldrb	r3, [r1, #2]
   b9f20:	784a      	ldrb	r2, [r1, #1]
   b9f22:	7809      	ldrb	r1, [r1, #0]
   b9f24:	f7ff ffe8 	bl	b9ef8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9f28:	b003      	add	sp, #12
   b9f2a:	f85d fb04 	ldr.w	pc, [sp], #4
   b9f2e:	bf00      	nop
   b9f30:	000bcd98 	.word	0x000bcd98

000b9f34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9f34:	4b01      	ldr	r3, [pc, #4]	; (b9f3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9f36:	4a02      	ldr	r2, [pc, #8]	; (b9f40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9f38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9f3a:	4770      	bx	lr
   b9f3c:	2003e670 	.word	0x2003e670
   b9f40:	000bcda4 	.word	0x000bcda4

000b9f44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9f44:	2300      	movs	r3, #0
   b9f46:	6840      	ldr	r0, [r0, #4]
   b9f48:	461a      	mov	r2, r3
   b9f4a:	f7ff b895 	b.w	b9078 <network_connect>

000b9f4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9f4e:	6840      	ldr	r0, [r0, #4]
   b9f50:	2200      	movs	r2, #0
   b9f52:	2102      	movs	r1, #2
   b9f54:	f7ff b8a0 	b.w	b9098 <network_disconnect>

000b9f58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9f58:	2200      	movs	r2, #0
   b9f5a:	6840      	ldr	r0, [r0, #4]
   b9f5c:	4611      	mov	r1, r2
   b9f5e:	f7ff b893 	b.w	b9088 <network_connecting>

000b9f62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9f62:	2200      	movs	r2, #0
   b9f64:	6840      	ldr	r0, [r0, #4]
   b9f66:	4611      	mov	r1, r2
   b9f68:	f7ff b89e 	b.w	b90a8 <network_ready>

000b9f6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9f6c:	2300      	movs	r3, #0
   b9f6e:	6840      	ldr	r0, [r0, #4]
   b9f70:	461a      	mov	r2, r3
   b9f72:	4619      	mov	r1, r3
   b9f74:	f7ff b8a0 	b.w	b90b8 <network_on>

000b9f78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9f78:	2300      	movs	r3, #0
   b9f7a:	6840      	ldr	r0, [r0, #4]
   b9f7c:	461a      	mov	r2, r3
   b9f7e:	4619      	mov	r1, r3
   b9f80:	f7ff b8a2 	b.w	b90c8 <network_off>

000b9f84 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9f84:	6840      	ldr	r0, [r0, #4]
   b9f86:	2100      	movs	r1, #0
   b9f88:	f7ff b8c6 	b.w	b9118 <network_is_on>

000b9f8c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9f8c:	6840      	ldr	r0, [r0, #4]
   b9f8e:	2100      	movs	r1, #0
   b9f90:	f7ff b8ca 	b.w	b9128 <network_is_off>

000b9f94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9f94:	6840      	ldr	r0, [r0, #4]
   b9f96:	2200      	movs	r2, #0
   b9f98:	f081 0101 	eor.w	r1, r1, #1
   b9f9c:	f7ff b89c 	b.w	b90d8 <network_listen>

000b9fa0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9fa0:	6840      	ldr	r0, [r0, #4]
   b9fa2:	2200      	movs	r2, #0
   b9fa4:	f7ff b8a8 	b.w	b90f8 <network_set_listen_timeout>

000b9fa8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9fa8:	2200      	movs	r2, #0
   b9faa:	6840      	ldr	r0, [r0, #4]
   b9fac:	4611      	mov	r1, r2
   b9fae:	f7ff b8ab 	b.w	b9108 <network_get_listen_timeout>

000b9fb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9fb2:	2200      	movs	r2, #0
   b9fb4:	6840      	ldr	r0, [r0, #4]
   b9fb6:	4611      	mov	r1, r2
   b9fb8:	f7ff b896 	b.w	b90e8 <network_listening>

000b9fbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9fc0:	b095      	sub	sp, #84	; 0x54
   b9fc2:	4614      	mov	r4, r2
   b9fc4:	460d      	mov	r5, r1
   b9fc6:	4607      	mov	r7, r0
    IPAddress addr;
   b9fc8:	f7ff ff76 	bl	b9eb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9fcc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9fce:	221c      	movs	r2, #28
   b9fd0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9fd2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9fd4:	f001 fd60 	bl	bba98 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9fd8:	2340      	movs	r3, #64	; 0x40
   b9fda:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9fdc:	4620      	mov	r0, r4
   b9fde:	466b      	mov	r3, sp
   b9fe0:	aa0c      	add	r2, sp, #48	; 0x30
   b9fe2:	2100      	movs	r1, #0
   b9fe4:	f7fe fe56 	bl	b8c94 <netdb_getaddrinfo>
    if (!r) {
   b9fe8:	4604      	mov	r4, r0
   b9fea:	2800      	cmp	r0, #0
   b9fec:	d14b      	bne.n	ba086 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9fee:	4602      	mov	r2, r0
   b9ff0:	2101      	movs	r1, #1
   b9ff2:	6868      	ldr	r0, [r5, #4]
   b9ff4:	f7ff f858 	bl	b90a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9ff8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9ffa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9ffc:	4622      	mov	r2, r4
   b9ffe:	6868      	ldr	r0, [r5, #4]
   ba000:	f7ff f852 	bl	b90a8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba004:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba006:	4681      	mov	r9, r0
        bool ok = false;
   ba008:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba00a:	2e00      	cmp	r6, #0
   ba00c:	d03b      	beq.n	ba086 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba00e:	2900      	cmp	r1, #0
   ba010:	d139      	bne.n	ba086 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba012:	6873      	ldr	r3, [r6, #4]
   ba014:	2b02      	cmp	r3, #2
   ba016:	d003      	beq.n	ba020 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba018:	2b0a      	cmp	r3, #10
   ba01a:	d011      	beq.n	ba040 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba01c:	69f6      	ldr	r6, [r6, #28]
   ba01e:	e7f4      	b.n	ba00a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba020:	f1b8 0f00 	cmp.w	r8, #0
   ba024:	d0fa      	beq.n	ba01c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba026:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba028:	a806      	add	r0, sp, #24
   ba02a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba02c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba02e:	f7ff ff71 	bl	b9f14 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba034:	1d3c      	adds	r4, r7, #4
   ba036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba038:	682b      	ldr	r3, [r5, #0]
   ba03a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba03c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba03e:	e7ed      	b.n	ba01c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba040:	f1b9 0f00 	cmp.w	r9, #0
   ba044:	d0ea      	beq.n	ba01c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba046:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba048:	2210      	movs	r2, #16
   ba04a:	a801      	add	r0, sp, #4
   ba04c:	f001 fd24 	bl	bba98 <memset>
                    a.v = 6;
   ba050:	2306      	movs	r3, #6
   ba052:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba056:	ad01      	add	r5, sp, #4
   ba058:	f104 0308 	add.w	r3, r4, #8
   ba05c:	3418      	adds	r4, #24
   ba05e:	6818      	ldr	r0, [r3, #0]
   ba060:	6859      	ldr	r1, [r3, #4]
   ba062:	462a      	mov	r2, r5
   ba064:	c203      	stmia	r2!, {r0, r1}
   ba066:	3308      	adds	r3, #8
   ba068:	42a3      	cmp	r3, r4
   ba06a:	4615      	mov	r5, r2
   ba06c:	d1f7      	bne.n	ba05e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba06e:	a901      	add	r1, sp, #4
   ba070:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba072:	ad07      	add	r5, sp, #28
   ba074:	f7ff ff2e 	bl	b9ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba07a:	1d3c      	adds	r4, r7, #4
   ba07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba07e:	682b      	ldr	r3, [r5, #0]
   ba080:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba082:	4649      	mov	r1, r9
   ba084:	e7ca      	b.n	ba01c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba086:	9800      	ldr	r0, [sp, #0]
   ba088:	f7fe fdfc 	bl	b8c84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba08c:	4638      	mov	r0, r7
   ba08e:	b015      	add	sp, #84	; 0x54
   ba090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba094 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba094:	4b02      	ldr	r3, [pc, #8]	; (ba0a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba096:	4a03      	ldr	r2, [pc, #12]	; (ba0a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba098:	601a      	str	r2, [r3, #0]
   ba09a:	2200      	movs	r2, #0
   ba09c:	605a      	str	r2, [r3, #4]

} // spark
   ba09e:	4770      	bx	lr
   ba0a0:	2003e674 	.word	0x2003e674
   ba0a4:	000bcdb0 	.word	0x000bcdb0

000ba0a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0aa:	4606      	mov	r6, r0
   ba0ac:	460d      	mov	r5, r1
  size_t n = 0;
   ba0ae:	188f      	adds	r7, r1, r2
   ba0b0:	2400      	movs	r4, #0
  while (size--) {
   ba0b2:	42bd      	cmp	r5, r7
   ba0b4:	d00c      	beq.n	ba0d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba0b6:	6833      	ldr	r3, [r6, #0]
   ba0b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba0bc:	689b      	ldr	r3, [r3, #8]
   ba0be:	4630      	mov	r0, r6
   ba0c0:	4798      	blx	r3
     if (chunk>=0)
   ba0c2:	1e03      	subs	r3, r0, #0
   ba0c4:	db01      	blt.n	ba0ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba0c6:	441c      	add	r4, r3
  while (size--) {
   ba0c8:	e7f3      	b.n	ba0b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba0ca:	2c00      	cmp	r4, #0
   ba0cc:	bf08      	it	eq
   ba0ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba0d0:	4620      	mov	r0, r4
   ba0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba0d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba0d4:	b513      	push	{r0, r1, r4, lr}
   ba0d6:	4604      	mov	r4, r0
    }
   ba0d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba0da:	b159      	cbz	r1, ba0f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba0dc:	9101      	str	r1, [sp, #4]
   ba0de:	f001 fd40 	bl	bbb62 <strlen>
   ba0e2:	6823      	ldr	r3, [r4, #0]
   ba0e4:	9901      	ldr	r1, [sp, #4]
   ba0e6:	68db      	ldr	r3, [r3, #12]
   ba0e8:	4602      	mov	r2, r0
   ba0ea:	4620      	mov	r0, r4
    }
   ba0ec:	b002      	add	sp, #8
   ba0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba0f2:	4718      	bx	r3
    }
   ba0f4:	b002      	add	sp, #8
   ba0f6:	bd10      	pop	{r4, pc}

000ba0f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   ba0f8:	6803      	ldr	r3, [r0, #0]
   ba0fa:	689b      	ldr	r3, [r3, #8]
   ba0fc:	4718      	bx	r3

000ba0fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba0fe:	b530      	push	{r4, r5, lr}
   ba100:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba102:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba104:	2a01      	cmp	r2, #1
  *str = '\0';
   ba106:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba10a:	bf98      	it	ls
   ba10c:	220a      	movls	r2, #10
   ba10e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba110:	460d      	mov	r5, r1
   ba112:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba116:	fb01 5312 	mls	r3, r1, r2, r5
   ba11a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba11e:	2b09      	cmp	r3, #9
   ba120:	bf94      	ite	ls
   ba122:	3330      	addls	r3, #48	; 0x30
   ba124:	3337      	addhi	r3, #55	; 0x37
   ba126:	b2db      	uxtb	r3, r3
  } while(n);
   ba128:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba12a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba12e:	d9ef      	bls.n	ba110 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba130:	4621      	mov	r1, r4
   ba132:	f7ff ffcf 	bl	ba0d4 <_ZN5Print5writeEPKc>
}
   ba136:	b00b      	add	sp, #44	; 0x2c
   ba138:	bd30      	pop	{r4, r5, pc}
	...

000ba13c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba140:	ec55 4b10 	vmov	r4, r5, d0
   ba144:	4606      	mov	r6, r0
   ba146:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba148:	ee10 2a10 	vmov	r2, s0
   ba14c:	ee10 0a10 	vmov	r0, s0
   ba150:	462b      	mov	r3, r5
   ba152:	4629      	mov	r1, r5
   ba154:	f001 fb7c 	bl	bb850 <__aeabi_dcmpun>
   ba158:	b140      	cbz	r0, ba16c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba15a:	4953      	ldr	r1, [pc, #332]	; (ba2a8 <_ZN5Print10printFloatEdh+0x16c>)
   ba15c:	4630      	mov	r0, r6
   ba15e:	f7ff ffb9 	bl	ba0d4 <_ZN5Print5writeEPKc>
   ba162:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba164:	4650      	mov	r0, sl
   ba166:	b003      	add	sp, #12
   ba168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba16c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba170:	4b4e      	ldr	r3, [pc, #312]	; (ba2ac <_ZN5Print10printFloatEdh+0x170>)
   ba172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba176:	4620      	mov	r0, r4
   ba178:	4649      	mov	r1, r9
   ba17a:	f001 fb69 	bl	bb850 <__aeabi_dcmpun>
   ba17e:	b948      	cbnz	r0, ba194 <_ZN5Print10printFloatEdh+0x58>
   ba180:	4b4a      	ldr	r3, [pc, #296]	; (ba2ac <_ZN5Print10printFloatEdh+0x170>)
   ba182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba186:	4620      	mov	r0, r4
   ba188:	4649      	mov	r1, r9
   ba18a:	f001 fb43 	bl	bb814 <__aeabi_dcmple>
   ba18e:	b908      	cbnz	r0, ba194 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba190:	4947      	ldr	r1, [pc, #284]	; (ba2b0 <_ZN5Print10printFloatEdh+0x174>)
   ba192:	e7e3      	b.n	ba15c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba194:	4b47      	ldr	r3, [pc, #284]	; (ba2b4 <_ZN5Print10printFloatEdh+0x178>)
   ba196:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba19a:	4620      	mov	r0, r4
   ba19c:	4629      	mov	r1, r5
   ba19e:	f001 fb4d 	bl	bb83c <__aeabi_dcmpgt>
   ba1a2:	b108      	cbz	r0, ba1a8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba1a4:	4944      	ldr	r1, [pc, #272]	; (ba2b8 <_ZN5Print10printFloatEdh+0x17c>)
   ba1a6:	e7d9      	b.n	ba15c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba1a8:	4b44      	ldr	r3, [pc, #272]	; (ba2bc <_ZN5Print10printFloatEdh+0x180>)
   ba1aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba1ae:	4620      	mov	r0, r4
   ba1b0:	4629      	mov	r1, r5
   ba1b2:	f001 fb25 	bl	bb800 <__aeabi_dcmplt>
   ba1b6:	2800      	cmp	r0, #0
   ba1b8:	d1f4      	bne.n	ba1a4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba1ba:	2200      	movs	r2, #0
   ba1bc:	2300      	movs	r3, #0
   ba1be:	4620      	mov	r0, r4
   ba1c0:	4629      	mov	r1, r5
   ba1c2:	f001 fb1d 	bl	bb800 <__aeabi_dcmplt>
   ba1c6:	b1d0      	cbz	r0, ba1fe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba1c8:	212d      	movs	r1, #45	; 0x2d
   ba1ca:	4630      	mov	r0, r6
   ba1cc:	f7ff ff94 	bl	ba0f8 <_ZN5Print5printEc>
     number = -number;
   ba1d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba1d4:	4682      	mov	sl, r0
     number = -number;
   ba1d6:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba1d8:	4939      	ldr	r1, [pc, #228]	; (ba2c0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba1da:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba2c8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba1de:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba1e2:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba1e4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba1e8:	fa5f f38b 	uxtb.w	r3, fp
   ba1ec:	429f      	cmp	r7, r3
   ba1ee:	d908      	bls.n	ba202 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba1f0:	4642      	mov	r2, r8
   ba1f2:	464b      	mov	r3, r9
   ba1f4:	f001 f9bc 	bl	bb570 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba1f8:	f10b 0b01 	add.w	fp, fp, #1
   ba1fc:	e7f4      	b.n	ba1e8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba1fe:	4682      	mov	sl, r0
   ba200:	e7ea      	b.n	ba1d8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba202:	4622      	mov	r2, r4
   ba204:	462b      	mov	r3, r5
   ba206:	f000 fed3 	bl	bafb0 <__adddf3>
   ba20a:	460d      	mov	r5, r1
   ba20c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba20e:	f001 fb5d 	bl	bb8cc <__aeabi_d2uiz>
   ba212:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba214:	f001 f808 	bl	bb228 <__aeabi_ui2d>
   ba218:	4602      	mov	r2, r0
   ba21a:	460b      	mov	r3, r1
   ba21c:	4620      	mov	r0, r4
   ba21e:	4629      	mov	r1, r5
   ba220:	f000 fec4 	bl	bafac <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba224:	220a      	movs	r2, #10
   ba226:	4604      	mov	r4, r0
   ba228:	460d      	mov	r5, r1
   ba22a:	4630      	mov	r0, r6
   ba22c:	4641      	mov	r1, r8
   ba22e:	f7ff ff66 	bl	ba0fe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba232:	4482      	add	sl, r0
  if (digits > 0) {
   ba234:	2f00      	cmp	r7, #0
   ba236:	d095      	beq.n	ba164 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba238:	4922      	ldr	r1, [pc, #136]	; (ba2c4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba23a:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba2c8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba23e:	4630      	mov	r0, r6
   ba240:	f7ff ff48 	bl	ba0d4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba244:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba248:	4482      	add	sl, r0
  while (digits-- > 0)
   ba24a:	2f00      	cmp	r7, #0
   ba24c:	d08a      	beq.n	ba164 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba24e:	4642      	mov	r2, r8
   ba250:	464b      	mov	r3, r9
   ba252:	4620      	mov	r0, r4
   ba254:	4629      	mov	r1, r5
   ba256:	f001 f861 	bl	bb31c <__aeabi_dmul>
   ba25a:	4604      	mov	r4, r0
   ba25c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba25e:	f001 fb0d 	bl	bb87c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba262:	f1b0 0b00 	subs.w	fp, r0, #0
   ba266:	da1c      	bge.n	ba2a2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba268:	212d      	movs	r1, #45	; 0x2d
   ba26a:	4630      	mov	r0, r6
   ba26c:	f7ff ff44 	bl	ba0f8 <_ZN5Print5printEc>
            val = -n;
   ba270:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba274:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba276:	220a      	movs	r2, #10
   ba278:	4630      	mov	r0, r6
   ba27a:	9301      	str	r3, [sp, #4]
   ba27c:	f7ff ff3f 	bl	ba0fe <_ZN5Print11printNumberEmh>
   ba280:	9b01      	ldr	r3, [sp, #4]
   ba282:	4418      	add	r0, r3
    n += print(toPrint);
   ba284:	4482      	add	sl, r0
    remainder -= toPrint;
   ba286:	4658      	mov	r0, fp
   ba288:	f000 ffde 	bl	bb248 <__aeabi_i2d>
   ba28c:	4602      	mov	r2, r0
   ba28e:	460b      	mov	r3, r1
   ba290:	4620      	mov	r0, r4
   ba292:	4629      	mov	r1, r5
   ba294:	f000 fe8a 	bl	bafac <__aeabi_dsub>
   ba298:	3f01      	subs	r7, #1
   ba29a:	4604      	mov	r4, r0
   ba29c:	460d      	mov	r5, r1
   ba29e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba2a0:	e7d3      	b.n	ba24a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba2a2:	4659      	mov	r1, fp
        size_t t = 0;
   ba2a4:	2300      	movs	r3, #0
   ba2a6:	e7e6      	b.n	ba276 <_ZN5Print10printFloatEdh+0x13a>
   ba2a8:	000bcde4 	.word	0x000bcde4
   ba2ac:	7fefffff 	.word	0x7fefffff
   ba2b0:	000bcde8 	.word	0x000bcde8
   ba2b4:	41efffff 	.word	0x41efffff
   ba2b8:	000bcdec 	.word	0x000bcdec
   ba2bc:	c1efffff 	.word	0xc1efffff
   ba2c0:	3fe00000 	.word	0x3fe00000
   ba2c4:	000bce1c 	.word	0x000bce1c
   ba2c8:	40240000 	.word	0x40240000

000ba2cc <_ZN5Print5printEfi>:
{
   ba2cc:	b538      	push	{r3, r4, r5, lr}
   ba2ce:	4604      	mov	r4, r0
   ba2d0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba2d4:	b2cd      	uxtb	r5, r1
   ba2d6:	f000 ffc9 	bl	bb26c <__aeabi_f2d>
   ba2da:	ec41 0b10 	vmov	d0, r0, r1
   ba2de:	4629      	mov	r1, r5
   ba2e0:	4620      	mov	r0, r4
}
   ba2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba2e6:	f7ff bf29 	b.w	ba13c <_ZN5Print10printFloatEdh>
	...

000ba2ec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba2ec:	4b01      	ldr	r3, [pc, #4]	; (ba2f4 <_GLOBAL__sub_I_RGB+0x8>)
   ba2ee:	2200      	movs	r2, #0
   ba2f0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba2f2:	4770      	bx	lr
   ba2f4:	2003e67c 	.word	0x2003e67c

000ba2f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba2f8:	b510      	push	{r4, lr}
   ba2fa:	4604      	mov	r4, r0
   ba2fc:	4608      	mov	r0, r1
{
    _spi = spi;
   ba2fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba300:	f7fe fcd0 	bl	b8ca4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba304:	2300      	movs	r3, #0
   ba306:	6063      	str	r3, [r4, #4]
}
   ba308:	4620      	mov	r0, r4
   ba30a:	bd10      	pop	{r4, pc}

000ba30c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba30c:	b510      	push	{r4, lr}
   ba30e:	4604      	mov	r4, r0
{
	free(buffer);
   ba310:	6800      	ldr	r0, [r0, #0]
   ba312:	f7fe ff19 	bl	b9148 <free>
}
   ba316:	4620      	mov	r0, r4
   ba318:	bd10      	pop	{r4, pc}

000ba31a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba31a:	b510      	push	{r4, lr}
   ba31c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba31e:	6800      	ldr	r0, [r0, #0]
   ba320:	b108      	cbz	r0, ba326 <_ZN6String10invalidateEv+0xc>
   ba322:	f7fe ff11 	bl	b9148 <free>
	buffer = NULL;
   ba326:	2300      	movs	r3, #0
	capacity = len = 0;
   ba328:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba32c:	6023      	str	r3, [r4, #0]
}
   ba32e:	bd10      	pop	{r4, pc}

000ba330 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba330:	b538      	push	{r3, r4, r5, lr}
   ba332:	4604      	mov	r4, r0
   ba334:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba336:	6800      	ldr	r0, [r0, #0]
   ba338:	3101      	adds	r1, #1
   ba33a:	f7fe ff0d 	bl	b9158 <realloc>
	if (newbuffer) {
   ba33e:	b110      	cbz	r0, ba346 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba340:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba344:	2001      	movs	r0, #1
	}
	return 0;
}
   ba346:	bd38      	pop	{r3, r4, r5, pc}

000ba348 <_ZN6String7reserveEj>:
{
   ba348:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba34a:	6803      	ldr	r3, [r0, #0]
{
   ba34c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba34e:	b123      	cbz	r3, ba35a <_ZN6String7reserveEj+0x12>
   ba350:	6843      	ldr	r3, [r0, #4]
   ba352:	428b      	cmp	r3, r1
   ba354:	d301      	bcc.n	ba35a <_ZN6String7reserveEj+0x12>
   ba356:	2001      	movs	r0, #1
}
   ba358:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba35a:	4620      	mov	r0, r4
   ba35c:	f7ff ffe8 	bl	ba330 <_ZN6String12changeBufferEj>
   ba360:	2800      	cmp	r0, #0
   ba362:	d0f9      	beq.n	ba358 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba364:	68a3      	ldr	r3, [r4, #8]
   ba366:	2b00      	cmp	r3, #0
   ba368:	d1f5      	bne.n	ba356 <_ZN6String7reserveEj+0xe>
   ba36a:	6822      	ldr	r2, [r4, #0]
   ba36c:	7013      	strb	r3, [r2, #0]
   ba36e:	e7f2      	b.n	ba356 <_ZN6String7reserveEj+0xe>

000ba370 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba370:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba372:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba374:	4611      	mov	r1, r2
   ba376:	9201      	str	r2, [sp, #4]
{
   ba378:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba37a:	f7ff ffe5 	bl	ba348 <_ZN6String7reserveEj>
   ba37e:	9a01      	ldr	r2, [sp, #4]
   ba380:	b928      	cbnz	r0, ba38e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba382:	4620      	mov	r0, r4
   ba384:	f7ff ffc9 	bl	ba31a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba388:	4620      	mov	r0, r4
   ba38a:	b003      	add	sp, #12
   ba38c:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba38e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba390:	4629      	mov	r1, r5
   ba392:	6820      	ldr	r0, [r4, #0]
   ba394:	f001 fb58 	bl	bba48 <memcpy>
	buffer[len] = 0;
   ba398:	6822      	ldr	r2, [r4, #0]
   ba39a:	68a3      	ldr	r3, [r4, #8]
   ba39c:	2100      	movs	r1, #0
   ba39e:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba3a0:	e7f2      	b.n	ba388 <_ZN6String4copyEPKcj+0x18>

000ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba3a2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba3a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba3a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba3aa:	4604      	mov	r4, r0
	len = 0;
   ba3ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba3ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba3b0:	b141      	cbz	r1, ba3c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba3b2:	4608      	mov	r0, r1
   ba3b4:	9101      	str	r1, [sp, #4]
   ba3b6:	f001 fbd4 	bl	bbb62 <strlen>
   ba3ba:	9901      	ldr	r1, [sp, #4]
   ba3bc:	4602      	mov	r2, r0
   ba3be:	4620      	mov	r0, r4
   ba3c0:	f7ff ffd6 	bl	ba370 <_ZN6String4copyEPKcj>
}
   ba3c4:	4620      	mov	r0, r4
   ba3c6:	b002      	add	sp, #8
   ba3c8:	bd10      	pop	{r4, pc}

000ba3ca <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba3ca:	b538      	push	{r3, r4, r5, lr}
   ba3cc:	4605      	mov	r5, r0
	if (buffer) {
   ba3ce:	6800      	ldr	r0, [r0, #0]
{
   ba3d0:	460c      	mov	r4, r1
	if (buffer) {
   ba3d2:	b168      	cbz	r0, ba3f0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba3d4:	686a      	ldr	r2, [r5, #4]
   ba3d6:	688b      	ldr	r3, [r1, #8]
   ba3d8:	429a      	cmp	r2, r3
   ba3da:	d307      	bcc.n	ba3ec <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba3dc:	6809      	ldr	r1, [r1, #0]
   ba3de:	f001 fb9b 	bl	bbb18 <strcpy>
			len = rhs.len;
   ba3e2:	68a3      	ldr	r3, [r4, #8]
   ba3e4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba3e6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba3e8:	60a3      	str	r3, [r4, #8]
}
   ba3ea:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba3ec:	f7fe feac 	bl	b9148 <free>
	buffer = rhs.buffer;
   ba3f0:	6823      	ldr	r3, [r4, #0]
   ba3f2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba3f4:	6863      	ldr	r3, [r4, #4]
   ba3f6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba3f8:	68a3      	ldr	r3, [r4, #8]
   ba3fa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba3fc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba3fe:	e9c4 3300 	strd	r3, r3, [r4]
   ba402:	e7f1      	b.n	ba3e8 <_ZN6String4moveERS_+0x1e>

000ba404 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba404:	4288      	cmp	r0, r1
{
   ba406:	b510      	push	{r4, lr}
   ba408:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba40a:	d005      	beq.n	ba418 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba40c:	680b      	ldr	r3, [r1, #0]
   ba40e:	b12b      	cbz	r3, ba41c <_ZN6StringaSERKS_+0x18>
   ba410:	688a      	ldr	r2, [r1, #8]
   ba412:	4619      	mov	r1, r3
   ba414:	f7ff ffac 	bl	ba370 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba418:	4620      	mov	r0, r4
   ba41a:	bd10      	pop	{r4, pc}
	else invalidate();
   ba41c:	f7ff ff7d 	bl	ba31a <_ZN6String10invalidateEv>
   ba420:	e7fa      	b.n	ba418 <_ZN6StringaSERKS_+0x14>

000ba422 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba422:	b510      	push	{r4, lr}
	buffer = NULL;
   ba424:	2300      	movs	r3, #0
String::String(const String &value)
   ba426:	4604      	mov	r4, r0
	capacity = 0;
   ba428:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba42c:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba42e:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba430:	f7ff ffe8 	bl	ba404 <_ZN6StringaSERKS_>
}
   ba434:	4620      	mov	r0, r4
   ba436:	bd10      	pop	{r4, pc}

000ba438 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba438:	4288      	cmp	r0, r1
{
   ba43a:	b510      	push	{r4, lr}
   ba43c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba43e:	d001      	beq.n	ba444 <_ZN6StringaSEOS_+0xc>
   ba440:	f7ff ffc3 	bl	ba3ca <_ZN6String4moveERS_>
	return *this;
}
   ba444:	4620      	mov	r0, r4
   ba446:	bd10      	pop	{r4, pc}

000ba448 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba448:	b513      	push	{r0, r1, r4, lr}
   ba44a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba44c:	b159      	cbz	r1, ba466 <_ZN6StringaSEPKc+0x1e>
   ba44e:	4608      	mov	r0, r1
   ba450:	9101      	str	r1, [sp, #4]
   ba452:	f001 fb86 	bl	bbb62 <strlen>
   ba456:	9901      	ldr	r1, [sp, #4]
   ba458:	4602      	mov	r2, r0
   ba45a:	4620      	mov	r0, r4
   ba45c:	f7ff ff88 	bl	ba370 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba460:	4620      	mov	r0, r4
   ba462:	b002      	add	sp, #8
   ba464:	bd10      	pop	{r4, pc}
	else invalidate();
   ba466:	f7ff ff58 	bl	ba31a <_ZN6String10invalidateEv>
   ba46a:	e7f9      	b.n	ba460 <_ZN6StringaSEPKc+0x18>

000ba46c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba46c:	b570      	push	{r4, r5, r6, lr}
   ba46e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba470:	460e      	mov	r6, r1
   ba472:	b909      	cbnz	r1, ba478 <_ZN6String6concatEPKcj+0xc>
   ba474:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba476:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba478:	b16a      	cbz	r2, ba496 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba47a:	6884      	ldr	r4, [r0, #8]
   ba47c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba47e:	4621      	mov	r1, r4
   ba480:	f7ff ff62 	bl	ba348 <_ZN6String7reserveEj>
   ba484:	2800      	cmp	r0, #0
   ba486:	d0f5      	beq.n	ba474 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba488:	6828      	ldr	r0, [r5, #0]
   ba48a:	68ab      	ldr	r3, [r5, #8]
   ba48c:	4631      	mov	r1, r6
   ba48e:	4418      	add	r0, r3
   ba490:	f001 fb42 	bl	bbb18 <strcpy>
	len = newlen;
   ba494:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba496:	2001      	movs	r0, #1
   ba498:	e7ed      	b.n	ba476 <_ZN6String6concatEPKcj+0xa>

000ba49a <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   ba49a:	b513      	push	{r0, r1, r4, lr}
   ba49c:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   ba49e:	4608      	mov	r0, r1
	if (!cstr) return 0;
   ba4a0:	b151      	cbz	r1, ba4b8 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   ba4a2:	9101      	str	r1, [sp, #4]
   ba4a4:	f001 fb5d 	bl	bbb62 <strlen>
   ba4a8:	9901      	ldr	r1, [sp, #4]
   ba4aa:	4602      	mov	r2, r0
   ba4ac:	4620      	mov	r0, r4
}
   ba4ae:	b002      	add	sp, #8
   ba4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   ba4b4:	f7ff bfda 	b.w	ba46c <_ZN6String6concatEPKcj>
}
   ba4b8:	b002      	add	sp, #8
   ba4ba:	bd10      	pop	{r4, pc}

000ba4bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba4bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba4be:	688a      	ldr	r2, [r1, #8]
   ba4c0:	6809      	ldr	r1, [r1, #0]
{
   ba4c2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba4c4:	f7ff ffd2 	bl	ba46c <_ZN6String6concatEPKcj>
   ba4c8:	b910      	cbnz	r0, ba4d0 <_ZplRK15StringSumHelperRK6String+0x14>
   ba4ca:	4620      	mov	r0, r4
   ba4cc:	f7ff ff25 	bl	ba31a <_ZN6String10invalidateEv>
	return a;
}
   ba4d0:	4620      	mov	r0, r4
   ba4d2:	bd10      	pop	{r4, pc}

000ba4d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba4d4:	b513      	push	{r0, r1, r4, lr}
   ba4d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba4d8:	b929      	cbnz	r1, ba4e6 <_ZplRK15StringSumHelperPKc+0x12>
   ba4da:	4620      	mov	r0, r4
   ba4dc:	f7ff ff1d 	bl	ba31a <_ZN6String10invalidateEv>
	return a;
}
   ba4e0:	4620      	mov	r0, r4
   ba4e2:	b002      	add	sp, #8
   ba4e4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba4e6:	4608      	mov	r0, r1
   ba4e8:	9101      	str	r1, [sp, #4]
   ba4ea:	f001 fb3a 	bl	bbb62 <strlen>
   ba4ee:	9901      	ldr	r1, [sp, #4]
   ba4f0:	4602      	mov	r2, r0
   ba4f2:	4620      	mov	r0, r4
   ba4f4:	f7ff ffba 	bl	ba46c <_ZN6String6concatEPKcj>
   ba4f8:	2800      	cmp	r0, #0
   ba4fa:	d0ee      	beq.n	ba4da <_ZplRK15StringSumHelperPKc+0x6>
   ba4fc:	e7f0      	b.n	ba4e0 <_ZplRK15StringSumHelperPKc+0xc>

000ba4fe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   ba4fe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba500:	6882      	ldr	r2, [r0, #8]
   ba502:	b93a      	cbnz	r2, ba514 <_ZNK6String6equalsEPKc+0x16>
   ba504:	b121      	cbz	r1, ba510 <_ZNK6String6equalsEPKc+0x12>
   ba506:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba508:	fab0 f080 	clz	r0, r0
   ba50c:	0940      	lsrs	r0, r0, #5
   ba50e:	e000      	b.n	ba512 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba510:	2001      	movs	r0, #1
}
   ba512:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba514:	6800      	ldr	r0, [r0, #0]
   ba516:	b909      	cbnz	r1, ba51c <_ZNK6String6equalsEPKc+0x1e>
   ba518:	7800      	ldrb	r0, [r0, #0]
   ba51a:	e7f5      	b.n	ba508 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba51c:	f001 faf2 	bl	bbb04 <strcmp>
   ba520:	e7f2      	b.n	ba508 <_ZNK6String6equalsEPKc+0xa>

000ba522 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   ba522:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   ba524:	6883      	ldr	r3, [r0, #8]
   ba526:	688a      	ldr	r2, [r1, #8]
   ba528:	4293      	cmp	r3, r2
   ba52a:	d30b      	bcc.n	ba544 <_ZNK6String8endsWithERKS_+0x22>
   ba52c:	6800      	ldr	r0, [r0, #0]
   ba52e:	b140      	cbz	r0, ba542 <_ZNK6String8endsWithERKS_+0x20>
   ba530:	6809      	ldr	r1, [r1, #0]
   ba532:	b149      	cbz	r1, ba548 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   ba534:	1a9b      	subs	r3, r3, r2
   ba536:	4418      	add	r0, r3
   ba538:	f001 fae4 	bl	bbb04 <strcmp>
   ba53c:	fab0 f080 	clz	r0, r0
   ba540:	0940      	lsrs	r0, r0, #5
}
   ba542:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   ba544:	2000      	movs	r0, #0
   ba546:	e7fc      	b.n	ba542 <_ZNK6String8endsWithERKS_+0x20>
   ba548:	4608      	mov	r0, r1
   ba54a:	e7fa      	b.n	ba542 <_ZNK6String8endsWithERKS_+0x20>

000ba54c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba54e:	429a      	cmp	r2, r3
{
   ba550:	460f      	mov	r7, r1
   ba552:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba554:	490c      	ldr	r1, [pc, #48]	; (ba588 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba556:	bf88      	it	hi
   ba558:	4613      	movhi	r3, r2
{
   ba55a:	4614      	mov	r4, r2
   ba55c:	4606      	mov	r6, r0
	if (left > right) {
   ba55e:	bf84      	itt	hi
   ba560:	462c      	movhi	r4, r5
   ba562:	461d      	movhi	r5, r3
	String out;
   ba564:	f7ff ff1d 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba568:	68bb      	ldr	r3, [r7, #8]
   ba56a:	42a3      	cmp	r3, r4
   ba56c:	d30a      	bcc.n	ba584 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba56e:	6839      	ldr	r1, [r7, #0]
   ba570:	42ab      	cmp	r3, r5
   ba572:	bf94      	ite	ls
   ba574:	ebc4 0203 	rsbls	r2, r4, r3
   ba578:	ebc4 0205 	rsbhi	r2, r4, r5
   ba57c:	4421      	add	r1, r4
   ba57e:	4630      	mov	r0, r6
   ba580:	f7ff fef6 	bl	ba370 <_ZN6String4copyEPKcj>
	return out;
}
   ba584:	4630      	mov	r0, r6
   ba586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba588:	000bcec8 	.word	0x000bcec8

000ba58c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   ba58c:	b40e      	push	{r1, r2, r3}
   ba58e:	b570      	push	{r4, r5, r6, lr}
   ba590:	b087      	sub	sp, #28
   ba592:	ad0b      	add	r5, sp, #44	; 0x2c
   ba594:	4604      	mov	r4, r0
   ba596:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba59a:	9201      	str	r2, [sp, #4]
   ba59c:	462b      	mov	r3, r5
   ba59e:	2105      	movs	r1, #5
   ba5a0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   ba5a2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba5a4:	f7fe fdf8 	bl	b9198 <vsnprintf>
    va_end(marker);

    String result;
   ba5a8:	490b      	ldr	r1, [pc, #44]	; (ba5d8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba5aa:	4606      	mov	r6, r0
    String result;
   ba5ac:	4620      	mov	r0, r4
   ba5ae:	f7ff fef8 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   ba5b2:	4631      	mov	r1, r6
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	f7ff fec7 	bl	ba348 <_ZN6String7reserveEj>
    if (result.buffer) {
   ba5ba:	6820      	ldr	r0, [r4, #0]
   ba5bc:	b130      	cbz	r0, ba5cc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba5be:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   ba5c0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba5c2:	462b      	mov	r3, r5
   ba5c4:	1c71      	adds	r1, r6, #1
   ba5c6:	f7fe fde7 	bl	b9198 <vsnprintf>
        va_end(marker);
        result.len = n;
   ba5ca:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   ba5cc:	4620      	mov	r0, r4
   ba5ce:	b007      	add	sp, #28
   ba5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba5d4:	b003      	add	sp, #12
   ba5d6:	4770      	bx	lr
   ba5d8:	000bcec8 	.word	0x000bcec8

000ba5dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   ba5dc:	b538      	push	{r3, r4, r5, lr}
   ba5de:	460c      	mov	r4, r1
   ba5e0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba5e2:	f7f9 ffef 	bl	b45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   ba5e6:	b154      	cbz	r4, ba5fe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   ba5e8:	8820      	ldrh	r0, [r4, #0]
   ba5ea:	f7fe fda5 	bl	b9138 <malloc>
   ba5ee:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   ba5f0:	b128      	cbz	r0, ba5fe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   ba5f2:	8822      	ldrh	r2, [r4, #0]
   ba5f4:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   ba5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   ba5fa:	f001 ba25 	b.w	bba48 <memcpy>
    }
   ba5fe:	bd38      	pop	{r3, r4, r5, pc}

000ba600 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba600:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   ba602:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   ba606:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   ba608:	f8d1 3006 	ldr.w	r3, [r1, #6]
   ba60c:	f8c0 3006 	str.w	r3, [r0, #6]
   ba610:	894b      	ldrh	r3, [r1, #10]
   ba612:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba614:	460c      	mov	r4, r1
   ba616:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba618:	f7f9 ffd4 	bl	b45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   ba61c:	6823      	ldr	r3, [r4, #0]
   ba61e:	b113      	cbz	r3, ba626 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   ba620:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   ba622:	2300      	movs	r3, #0
   ba624:	6023      	str	r3, [r4, #0]
    }
   ba626:	bd38      	pop	{r3, r4, r5, pc}

000ba628 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   ba628:	b507      	push	{r0, r1, r2, lr}
   ba62a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   ba62c:	2100      	movs	r1, #0
{
   ba62e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   ba630:	9100      	str	r1, [sp, #0]
   ba632:	2001      	movs	r0, #1
   ba634:	218c      	movs	r1, #140	; 0x8c
   ba636:	f7fe fca5 	bl	b8f84 <system_reset>
}
   ba63a:	b003      	add	sp, #12
   ba63c:	f85d fb04 	ldr.w	pc, [sp], #4

000ba640 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   ba640:	4601      	mov	r1, r0
    reset(0, flags);
   ba642:	2000      	movs	r0, #0
   ba644:	f7ff bff0 	b.w	ba628 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000ba648 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   ba648:	2000      	movs	r0, #0
   ba64a:	f7ff bff9 	b.w	ba640 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000ba650 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   ba650:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba652:	4d2b      	ldr	r5, [pc, #172]	; (ba700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   ba654:	7d0b      	ldrb	r3, [r1, #20]
   ba656:	4604      	mov	r4, r0
   ba658:	b08b      	sub	sp, #44	; 0x2c
   ba65a:	4608      	mov	r0, r1
   ba65c:	1daf      	adds	r7, r5, #6
   ba65e:	2b00      	cmp	r3, #0
   ba660:	d036      	beq.n	ba6d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   ba662:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   ba664:	791b      	ldrb	r3, [r3, #4]
   ba666:	2b00      	cmp	r3, #0
   ba668:	d032      	beq.n	ba6d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   ba66a:	4b26      	ldr	r3, [pc, #152]	; (ba704 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   ba66c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   ba66e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   ba670:	a902      	add	r1, sp, #8
   ba672:	3004      	adds	r0, #4
   ba674:	e9cd 2202 	strd	r2, r2, [sp, #8]
   ba678:	f7fe fc7a 	bl	b8f70 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   ba67c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   ba680:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   ba684:	b200      	sxth	r0, r0
   ba686:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   ba68a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   ba68e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   ba690:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   ba692:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   ba694:	4628      	mov	r0, r5
   ba696:	f7ff ffa1 	bl	ba5dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   ba69a:	a802      	add	r0, sp, #8
   ba69c:	f7f9 ff92 	bl	b45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   ba6a0:	2300      	movs	r3, #0
   ba6a2:	6023      	str	r3, [r4, #0]
   ba6a4:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   ba6a6:	71a3      	strb	r3, [r4, #6]
   ba6a8:	8123      	strh	r3, [r4, #8]
   ba6aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba6ae:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   ba6b0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   ba6b4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   ba6b6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   ba6ba:	f8c4 3006 	str.w	r3, [r4, #6]
   ba6be:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   ba6c0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   ba6c2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   ba6c4:	4620      	mov	r0, r4
   ba6c6:	f7ff ff89 	bl	ba5dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   ba6ca:	4620      	mov	r0, r4
   ba6cc:	b00b      	add	sp, #44	; 0x2c
   ba6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   ba6d0:	2600      	movs	r6, #0
   ba6d2:	2320      	movs	r3, #32
   ba6d4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   ba6d8:	4b0b      	ldr	r3, [pc, #44]	; (ba708 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   ba6da:	9300      	str	r3, [sp, #0]
   ba6dc:	aa02      	add	r2, sp, #8
   ba6de:	4633      	mov	r3, r6
   ba6e0:	490a      	ldr	r1, [pc, #40]	; (ba70c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   ba6e2:	2032      	movs	r0, #50	; 0x32
   ba6e4:	f7fe fbc6 	bl	b8e74 <log_message>
            : wakeupSource_(nullptr),
   ba6e8:	4b06      	ldr	r3, [pc, #24]	; (ba704 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   ba6ea:	4805      	ldr	r0, [pc, #20]	; (ba700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   ba6ec:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   ba6ee:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   ba6f2:	a902      	add	r1, sp, #8
   ba6f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   ba6f8:	f7ff ff82 	bl	ba600 <_ZN17SystemSleepResultaSEOS_.isra.0>
   ba6fc:	e7cd      	b.n	ba69a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   ba6fe:	bf00      	nop
   ba700:	2003e68c 	.word	0x2003e68c
   ba704:	ffff0000 	.word	0xffff0000
   ba708:	000bcdf7 	.word	0x000bcdf7
   ba70c:	000bcdf0 	.word	0x000bcdf0

000ba710 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba710:	4b05      	ldr	r3, [pc, #20]	; (ba728 <_GLOBAL__sub_I_System+0x18>)
   ba712:	2202      	movs	r2, #2
   ba714:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   ba716:	4b05      	ldr	r3, [pc, #20]	; (ba72c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba718:	4a05      	ldr	r2, [pc, #20]	; (ba730 <_GLOBAL__sub_I_System+0x20>)
   ba71a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba71c:	2000      	movs	r0, #0
   ba71e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba722:	f7fe bbc9 	b.w	b8eb8 <set_system_mode>
   ba726:	bf00      	nop
   ba728:	2003e698 	.word	0x2003e698
   ba72c:	2003e68c 	.word	0x2003e68c
   ba730:	ffff0000 	.word	0xffff0000

000ba734 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba738:	4a15      	ldr	r2, [pc, #84]	; (ba790 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba73a:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba79c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba73e:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba742:	1980      	adds	r0, r0, r6
   ba744:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba748:	4b12      	ldr	r3, [pc, #72]	; (ba794 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba74a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba74e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba752:	1986      	adds	r6, r0, r6
   ba754:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba758:	42bb      	cmp	r3, r7
   ba75a:	bf08      	it	eq
   ba75c:	42b2      	cmpeq	r2, r6
{
   ba75e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba760:	d013      	beq.n	ba78a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba762:	a903      	add	r1, sp, #12
   ba764:	4668      	mov	r0, sp
   ba766:	e9cd 6700 	strd	r6, r7, [sp]
   ba76a:	f7fe fd4d 	bl	b9208 <localtime_r>
	calendar_time.tm_year += 1900;
   ba76e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba770:	4d09      	ldr	r5, [pc, #36]	; (ba798 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba772:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba776:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba778:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba77a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba77e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba782:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba786:	6823      	ldr	r3, [r4, #0]
   ba788:	602b      	str	r3, [r5, #0]
    }
}
   ba78a:	b00c      	add	sp, #48	; 0x30
   ba78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba790:	2003e6d0 	.word	0x2003e6d0
   ba794:	2003e6c8 	.word	0x2003e6c8
   ba798:	2003e6a4 	.word	0x2003e6a4
   ba79c:	2003e6d8 	.word	0x2003e6d8

000ba7a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   ba7a0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba7a2:	2000      	movs	r0, #0
   ba7a4:	f7fe fc40 	bl	b9028 <spark_sync_time_pending>
   ba7a8:	b128      	cbz	r0, ba7b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba7aa:	f7fe fc15 	bl	b8fd8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba7ae:	f080 0001 	eor.w	r0, r0, #1
   ba7b2:	b2c0      	uxtb	r0, r0
    }
   ba7b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba7b6:	2001      	movs	r0, #1
   ba7b8:	e7fc      	b.n	ba7b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba7bc <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   ba7bc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   ba7be:	f7ff ffb9 	bl	ba734 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   ba7c2:	4b01      	ldr	r3, [pc, #4]	; (ba7c8 <_ZN9TimeClass4hourEx+0xc>)
   ba7c4:	6898      	ldr	r0, [r3, #8]
   ba7c6:	bd08      	pop	{r3, pc}
   ba7c8:	2003e6a4 	.word	0x2003e6a4

000ba7cc <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   ba7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba7ce:	4602      	mov	r2, r0
   ba7d0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ba7d2:	4668      	mov	r0, sp
    struct timeval tv = {
   ba7d4:	2100      	movs	r1, #0
    };
   ba7d6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   ba7da:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ba7de:	f7fe f999 	bl	b8b14 <hal_rtc_set_time>
   ba7e2:	4602      	mov	r2, r0
   ba7e4:	b910      	cbnz	r0, ba7ec <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   ba7e6:	4601      	mov	r1, r0
   ba7e8:	f7fe fba6 	bl	b8f38 <system_notify_time_changed>
    }
}
   ba7ec:	b005      	add	sp, #20
   ba7ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba7f4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ba7f4:	b530      	push	{r4, r5, lr}
   ba7f6:	b093      	sub	sp, #76	; 0x4c
   ba7f8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   ba7fc:	4b19      	ldr	r3, [pc, #100]	; (ba864 <_ZN9TimeClass7timeStrEx+0x70>)
{
   ba7fe:	4604      	mov	r4, r0
    t += time_zone_cache;
   ba800:	e9d3 1000 	ldrd	r1, r0, [r3]
   ba804:	9b01      	ldr	r3, [sp, #4]
   ba806:	1852      	adds	r2, r2, r1
   ba808:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   ba80c:	4816      	ldr	r0, [pc, #88]	; (ba868 <_ZN9TimeClass7timeStrEx+0x74>)
   ba80e:	e9d0 1000 	ldrd	r1, r0, [r0]
   ba812:	1852      	adds	r2, r2, r1
   ba814:	eb43 0300 	adc.w	r3, r3, r0
   ba818:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ba81c:	2224      	movs	r2, #36	; 0x24
   ba81e:	eb0d 0002 	add.w	r0, sp, r2
   ba822:	2100      	movs	r1, #0
   ba824:	f001 f938 	bl	bba98 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ba828:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ba82a:	a909      	add	r1, sp, #36	; 0x24
   ba82c:	4668      	mov	r0, sp
   ba82e:	f7fe fceb 	bl	b9208 <localtime_r>
    char ascstr[26] = {};
   ba832:	2216      	movs	r2, #22
   ba834:	4629      	mov	r1, r5
   ba836:	a803      	add	r0, sp, #12
   ba838:	9502      	str	r5, [sp, #8]
   ba83a:	f001 f92d 	bl	bba98 <memset>
    asctime_r(&calendar_time, ascstr);
   ba83e:	a902      	add	r1, sp, #8
   ba840:	a809      	add	r0, sp, #36	; 0x24
   ba842:	f001 f8b3 	bl	bb9ac <asctime_r>
    int len = strlen(ascstr);
   ba846:	a802      	add	r0, sp, #8
   ba848:	f001 f98b 	bl	bbb62 <strlen>
    ascstr[len-1] = 0; // remove final newline
   ba84c:	ab12      	add	r3, sp, #72	; 0x48
   ba84e:	4418      	add	r0, r3
    return String(ascstr);
   ba850:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ba852:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ba856:	4620      	mov	r0, r4
   ba858:	f7ff fda3 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba85c:	4620      	mov	r0, r4
   ba85e:	b013      	add	sp, #76	; 0x4c
   ba860:	bd30      	pop	{r4, r5, pc}
   ba862:	bf00      	nop
   ba864:	2003e6d0 	.word	0x2003e6d0
   ba868:	2003e6c8 	.word	0x2003e6c8

000ba86c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   ba86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba870:	b0a4      	sub	sp, #144	; 0x90
   ba872:	4607      	mov	r7, r0
   ba874:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba876:	a814      	add	r0, sp, #80	; 0x50
{
   ba878:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba87a:	223f      	movs	r2, #63	; 0x3f
{
   ba87c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba87e:	f001 f978 	bl	bbb72 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   ba882:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   ba884:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   ba886:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   ba88a:	f001 f96a 	bl	bbb62 <strlen>
   ba88e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   ba890:	bb4c      	cbnz	r4, ba8e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   ba892:	4929      	ldr	r1, [pc, #164]	; (ba938 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   ba894:	a803      	add	r0, sp, #12
   ba896:	f001 f93f 	bl	bbb18 <strcpy>
   ba89a:	ac14      	add	r4, sp, #80	; 0x50
{
   ba89c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   ba89e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   ba8a2:	45b1      	cmp	r9, r6
   ba8a4:	d934      	bls.n	ba910 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   ba8a6:	7823      	ldrb	r3, [r4, #0]
   ba8a8:	2b25      	cmp	r3, #37	; 0x25
   ba8aa:	f106 0a01 	add.w	sl, r6, #1
   ba8ae:	d117      	bne.n	ba8e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   ba8b0:	7863      	ldrb	r3, [r4, #1]
   ba8b2:	2b7a      	cmp	r3, #122	; 0x7a
   ba8b4:	d114      	bne.n	ba8e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   ba8b6:	a803      	add	r0, sp, #12
   ba8b8:	f001 f953 	bl	bbb62 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   ba8bc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   ba8be:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   ba8c0:	1830      	adds	r0, r6, r0
   ba8c2:	4418      	add	r0, r3
   ba8c4:	eba9 0206 	sub.w	r2, r9, r6
   ba8c8:	1ca1      	adds	r1, r4, #2
   ba8ca:	f001 f8bd 	bl	bba48 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   ba8ce:	462a      	mov	r2, r5
   ba8d0:	a903      	add	r1, sp, #12
   ba8d2:	4620      	mov	r0, r4
   ba8d4:	f001 f8b8 	bl	bba48 <memcpy>
            len = strlen(format_str);
   ba8d8:	a814      	add	r0, sp, #80	; 0x50
   ba8da:	f001 f942 	bl	bbb62 <strlen>
   ba8de:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   ba8e0:	3401      	adds	r4, #1
   ba8e2:	4656      	mov	r6, sl
   ba8e4:	e7db      	b.n	ba89e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   ba8e6:	233c      	movs	r3, #60	; 0x3c
   ba8e8:	fb94 f2f3 	sdiv	r2, r4, r3
   ba8ec:	2a00      	cmp	r2, #0
   ba8ee:	bfb8      	it	lt
   ba8f0:	4252      	neglt	r2, r2
   ba8f2:	fbb2 f1f3 	udiv	r1, r2, r3
   ba8f6:	fb03 2211 	mls	r2, r3, r1, r2
   ba8fa:	9200      	str	r2, [sp, #0]
   ba8fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   ba900:	4a0e      	ldr	r2, [pc, #56]	; (ba93c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   ba902:	fb94 f3f3 	sdiv	r3, r4, r3
   ba906:	2110      	movs	r1, #16
   ba908:	a803      	add	r0, sp, #12
   ba90a:	f7fe fc3d 	bl	b9188 <snprintf>
   ba90e:	e7c4      	b.n	ba89a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   ba910:	2100      	movs	r1, #0
   ba912:	222e      	movs	r2, #46	; 0x2e
   ba914:	a808      	add	r0, sp, #32
   ba916:	9107      	str	r1, [sp, #28]
   ba918:	f001 f8be 	bl	bba98 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   ba91c:	4643      	mov	r3, r8
   ba91e:	aa14      	add	r2, sp, #80	; 0x50
   ba920:	2132      	movs	r1, #50	; 0x32
   ba922:	a807      	add	r0, sp, #28
   ba924:	f7fe fc68 	bl	b91f8 <strftime>
    return String(buf);
   ba928:	a907      	add	r1, sp, #28
   ba92a:	4638      	mov	r0, r7
   ba92c:	f7ff fd39 	bl	ba3a2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba930:	4638      	mov	r0, r7
   ba932:	b024      	add	sp, #144	; 0x90
   ba934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba938:	000bce1e 	.word	0x000bce1e
   ba93c:	000bce20 	.word	0x000bce20

000ba940 <_ZN9TimeClass6formatExPKc>:
{
   ba940:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba942:	b08d      	sub	sp, #52	; 0x34
   ba944:	e9cd 2300 	strd	r2, r3, [sp]
   ba948:	9d12      	ldr	r5, [sp, #72]	; 0x48
   ba94a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   ba94c:	b915      	cbnz	r5, ba954 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   ba94e:	4b19      	ldr	r3, [pc, #100]	; (ba9b4 <_ZN9TimeClass6formatExPKc+0x74>)
   ba950:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   ba952:	b12d      	cbz	r5, ba960 <_ZN9TimeClass6formatExPKc+0x20>
   ba954:	4b18      	ldr	r3, [pc, #96]	; (ba9b8 <_ZN9TimeClass6formatExPKc+0x78>)
   ba956:	4628      	mov	r0, r5
   ba958:	6819      	ldr	r1, [r3, #0]
   ba95a:	f001 f8d3 	bl	bbb04 <strcmp>
   ba95e:	b938      	cbnz	r0, ba970 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   ba960:	e9dd 2300 	ldrd	r2, r3, [sp]
   ba964:	4620      	mov	r0, r4
   ba966:	f7ff ff45 	bl	ba7f4 <_ZN9TimeClass7timeStrEx>
}
   ba96a:	4620      	mov	r0, r4
   ba96c:	b00d      	add	sp, #52	; 0x34
   ba96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   ba970:	4e12      	ldr	r6, [pc, #72]	; (ba9bc <_ZN9TimeClass6formatExPKc+0x7c>)
   ba972:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   ba974:	4f12      	ldr	r7, [pc, #72]	; (ba9c0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   ba976:	e9d6 3200 	ldrd	r3, r2, [r6]
   ba97a:	185b      	adds	r3, r3, r1
   ba97c:	9901      	ldr	r1, [sp, #4]
   ba97e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   ba982:	e9d7 0100 	ldrd	r0, r1, [r7]
   ba986:	181b      	adds	r3, r3, r0
   ba988:	eb42 0201 	adc.w	r2, r2, r1
   ba98c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   ba990:	2100      	movs	r1, #0
   ba992:	2224      	movs	r2, #36	; 0x24
   ba994:	a803      	add	r0, sp, #12
   ba996:	f001 f87f 	bl	bba98 <memset>
    localtime_r(&t, &calendar_time);
   ba99a:	a903      	add	r1, sp, #12
   ba99c:	4668      	mov	r0, sp
   ba99e:	f7fe fc33 	bl	b9208 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   ba9a2:	6832      	ldr	r2, [r6, #0]
   ba9a4:	683b      	ldr	r3, [r7, #0]
   ba9a6:	a903      	add	r1, sp, #12
   ba9a8:	4413      	add	r3, r2
   ba9aa:	4620      	mov	r0, r4
   ba9ac:	462a      	mov	r2, r5
   ba9ae:	f7ff ff5d 	bl	ba86c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   ba9b2:	e7da      	b.n	ba96a <_ZN9TimeClass6formatExPKc+0x2a>
   ba9b4:	2003e6a0 	.word	0x2003e6a0
   ba9b8:	2003e374 	.word	0x2003e374
   ba9bc:	2003e6d0 	.word	0x2003e6d0
   ba9c0:	2003e6c8 	.word	0x2003e6c8

000ba9c4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   ba9c4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba9c6:	2000      	movs	r0, #0
   ba9c8:	f7fe f88c 	bl	b8ae4 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba9cc:	4604      	mov	r4, r0
   ba9ce:	b9a0      	cbnz	r0, ba9fa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba9d0:	f7fe fa6a 	bl	b8ea8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba9d4:	2801      	cmp	r0, #1
   ba9d6:	d110      	bne.n	ba9fa <_ZN9TimeClass7isValidEv+0x36>
   ba9d8:	4620      	mov	r0, r4
   ba9da:	f7fe faa5 	bl	b8f28 <system_thread_get_state>
   ba9de:	b960      	cbnz	r0, ba9fa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba9e0:	f7ff fede 	bl	ba7a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba9e4:	b910      	cbnz	r0, ba9ec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba9e6:	f7fe fae7 	bl	b8fb8 <spark_process>
        while (_while() && !_condition()) {
   ba9ea:	e7f9      	b.n	ba9e0 <_ZN9TimeClass7isValidEv+0x1c>
   ba9ec:	f7ff fed8 	bl	ba7a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba9f4:	2000      	movs	r0, #0
   ba9f6:	f7fe b875 	b.w	b8ae4 <hal_rtc_time_is_valid>
}
   ba9fa:	4620      	mov	r0, r4
   ba9fc:	bd10      	pop	{r4, pc}

000ba9fe <_ZN9TimeClass3nowEv>:
{
   ba9fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   baa00:	f7ff ffe0 	bl	ba9c4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baa04:	2210      	movs	r2, #16
   baa06:	2100      	movs	r1, #0
   baa08:	4668      	mov	r0, sp
   baa0a:	f001 f845 	bl	bba98 <memset>
    hal_rtc_get_time(&tv, nullptr);
   baa0e:	2100      	movs	r1, #0
   baa10:	4668      	mov	r0, sp
   baa12:	f7fe f877 	bl	b8b04 <hal_rtc_get_time>
}
   baa16:	9800      	ldr	r0, [sp, #0]
   baa18:	b005      	add	sp, #20
   baa1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baa20 <_ZN9TimeClass4hourEv>:
{
   baa20:	b508      	push	{r3, lr}
	return hour(now());
   baa22:	f7ff ffec 	bl	ba9fe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baa26:	17c1      	asrs	r1, r0, #31
   baa28:	f7ff fe84 	bl	ba734 <_ZL22Refresh_UnixTime_Cachex>
}
   baa2c:	4b01      	ldr	r3, [pc, #4]	; (baa34 <_ZN9TimeClass4hourEv+0x14>)
   baa2e:	6898      	ldr	r0, [r3, #8]
   baa30:	bd08      	pop	{r3, pc}
   baa32:	bf00      	nop
   baa34:	2003e6a4 	.word	0x2003e6a4

000baa38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baa38:	4b02      	ldr	r3, [pc, #8]	; (baa44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baa3a:	681a      	ldr	r2, [r3, #0]
   baa3c:	4b02      	ldr	r3, [pc, #8]	; (baa48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baa3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baa40:	4770      	bx	lr
   baa42:	bf00      	nop
   baa44:	2003e374 	.word	0x2003e374
   baa48:	2003e6a0 	.word	0x2003e6a0

000baa4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   baa4c:	4770      	bx	lr

000baa4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baa4e:	7441      	strb	r1, [r0, #17]
}
   baa50:	4770      	bx	lr

000baa52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   baa52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   baa54:	7c00      	ldrb	r0, [r0, #16]
   baa56:	f7fe f9c5 	bl	b8de4 <hal_usart_available_data_for_write>
}
   baa5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baa5e:	bd08      	pop	{r3, pc}

000baa60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   baa60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   baa62:	7c00      	ldrb	r0, [r0, #16]
   baa64:	f7fe f996 	bl	b8d94 <hal_usart_available>
}
   baa68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baa6c:	bd08      	pop	{r3, pc}

000baa6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   baa6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baa70:	7c00      	ldrb	r0, [r0, #16]
   baa72:	f7fe f99f 	bl	b8db4 <hal_usart_peek>
}
   baa76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baa7a:	bd08      	pop	{r3, pc}

000baa7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baa7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baa7e:	7c00      	ldrb	r0, [r0, #16]
   baa80:	f7fe f990 	bl	b8da4 <hal_usart_read>
}
   baa84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baa88:	bd08      	pop	{r3, pc}

000baa8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baa8a:	7c00      	ldrb	r0, [r0, #16]
   baa8c:	f7fe b99a 	b.w	b8dc4 <hal_usart_flush>

000baa90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baa90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baa92:	7c45      	ldrb	r5, [r0, #17]
{
   baa94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baa96:	b12d      	cbz	r5, baaa4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baa98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baa9a:	b003      	add	sp, #12
   baa9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baaa0:	f7fe b970 	b.w	b8d84 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baaa4:	7c00      	ldrb	r0, [r0, #16]
   baaa6:	9101      	str	r1, [sp, #4]
   baaa8:	f7fe f99c 	bl	b8de4 <hal_usart_available_data_for_write>
   baaac:	2800      	cmp	r0, #0
   baaae:	9901      	ldr	r1, [sp, #4]
   baab0:	dcf2      	bgt.n	baa98 <_ZN11USARTSerial5writeEh+0x8>
}
   baab2:	4628      	mov	r0, r5
   baab4:	b003      	add	sp, #12
   baab6:	bd30      	pop	{r4, r5, pc}

000baab8 <_ZN11USARTSerialD0Ev>:
   baab8:	b510      	push	{r4, lr}
   baaba:	2114      	movs	r1, #20
   baabc:	4604      	mov	r4, r0
   baabe:	f7f9 faee 	bl	b409e <_ZdlPvj>
   baac2:	4620      	mov	r0, r4
   baac4:	bd10      	pop	{r4, pc}
	...

000baac8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baac8:	b510      	push	{r4, lr}
   baaca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baace:	4604      	mov	r4, r0
   baad0:	4608      	mov	r0, r1
   baad2:	4611      	mov	r1, r2
   baad4:	2200      	movs	r2, #0
   baad6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baada:	4b04      	ldr	r3, [pc, #16]	; (baaec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baadc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baade:	2301      	movs	r3, #1
  _serial = serial;
   baae0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baae2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baae4:	f7fe f986 	bl	b8df4 <hal_usart_init_ex>
}
   baae8:	4620      	mov	r0, r4
   baaea:	bd10      	pop	{r4, pc}
   baaec:	000bce50 	.word	0x000bce50

000baaf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baaf0:	7441      	strb	r1, [r0, #17]
}
   baaf2:	4770      	bx	lr

000baaf4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baaf4:	4770      	bx	lr

000baaf6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   baaf6:	4770      	bx	lr

000baaf8 <_ZN9USBSerial4readEv>:
{
   baaf8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   baafa:	2100      	movs	r1, #0
   baafc:	7c00      	ldrb	r0, [r0, #16]
   baafe:	f7fe f999 	bl	b8e34 <HAL_USB_USART_Receive_Data>
}
   bab02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab06:	bd08      	pop	{r3, pc}

000bab08 <_ZN9USBSerial4peekEv>:
{
   bab08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bab0a:	2101      	movs	r1, #1
   bab0c:	7c00      	ldrb	r0, [r0, #16]
   bab0e:	f7fe f991 	bl	b8e34 <HAL_USB_USART_Receive_Data>
}
   bab12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab16:	bd08      	pop	{r3, pc}

000bab18 <_ZN9USBSerial17availableForWriteEv>:
{
   bab18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bab1a:	7c00      	ldrb	r0, [r0, #16]
   bab1c:	f7fe f982 	bl	b8e24 <HAL_USB_USART_Available_Data_For_Write>
}
   bab20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab24:	bd08      	pop	{r3, pc}

000bab26 <_ZN9USBSerial9availableEv>:
{
   bab26:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bab28:	7c00      	ldrb	r0, [r0, #16]
   bab2a:	f7fe f973 	bl	b8e14 <HAL_USB_USART_Available_Data>
}
   bab2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab32:	bd08      	pop	{r3, pc}

000bab34 <_ZN9USBSerial5writeEh>:
{
   bab34:	b513      	push	{r0, r1, r4, lr}
   bab36:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bab38:	7c00      	ldrb	r0, [r0, #16]
{
   bab3a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bab3c:	f7fe f972 	bl	b8e24 <HAL_USB_USART_Available_Data_For_Write>
   bab40:	2800      	cmp	r0, #0
   bab42:	9901      	ldr	r1, [sp, #4]
   bab44:	dc01      	bgt.n	bab4a <_ZN9USBSerial5writeEh+0x16>
   bab46:	7c60      	ldrb	r0, [r4, #17]
   bab48:	b120      	cbz	r0, bab54 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bab4a:	7c20      	ldrb	r0, [r4, #16]
   bab4c:	f7fe f97a 	bl	b8e44 <HAL_USB_USART_Send_Data>
   bab50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bab54:	b002      	add	sp, #8
   bab56:	bd10      	pop	{r4, pc}

000bab58 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bab58:	7c00      	ldrb	r0, [r0, #16]
   bab5a:	f7fe b97b 	b.w	b8e54 <HAL_USB_USART_Flush_Data>

000bab5e <_ZN9USBSerialD0Ev>:
   bab5e:	b510      	push	{r4, lr}
   bab60:	2114      	movs	r1, #20
   bab62:	4604      	mov	r4, r0
   bab64:	f7f9 fa9b 	bl	b409e <_ZdlPvj>
   bab68:	4620      	mov	r0, r4
   bab6a:	bd10      	pop	{r4, pc}

000bab6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bab6c:	b510      	push	{r4, lr}
   bab6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bab72:	4604      	mov	r4, r0
   bab74:	4608      	mov	r0, r1
   bab76:	2100      	movs	r1, #0
   bab78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bab7c:	4b04      	ldr	r3, [pc, #16]	; (bab90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bab7e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bab80:	2301      	movs	r3, #1
  _serial = serial;
   bab82:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bab84:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bab86:	4611      	mov	r1, r2
   bab88:	f7fe f93c 	bl	b8e04 <HAL_USB_USART_Init>
}
   bab8c:	4620      	mov	r0, r4
   bab8e:	bd10      	pop	{r4, pc}
   bab90:	000bce80 	.word	0x000bce80

000bab94 <_Z19acquireSerialBufferv>:
{
   bab94:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bab96:	2214      	movs	r2, #20
{
   bab98:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bab9a:	2100      	movs	r1, #0
   bab9c:	f000 ff7c 	bl	bba98 <memset>
}
   baba0:	4620      	mov	r0, r4
   baba2:	bd10      	pop	{r4, pc}

000baba4 <_Z16_fetch_usbserialv>:
{
   baba4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baba6:	4c0f      	ldr	r4, [pc, #60]	; (babe4 <_Z16_fetch_usbserialv+0x40>)
{
   baba8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   babaa:	a803      	add	r0, sp, #12
   babac:	f7ff fff2 	bl	bab94 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   babb0:	7821      	ldrb	r1, [r4, #0]
   babb2:	f3bf 8f5b 	dmb	ish
   babb6:	f011 0101 	ands.w	r1, r1, #1
   babba:	d10f      	bne.n	babdc <_Z16_fetch_usbserialv+0x38>
   babbc:	4620      	mov	r0, r4
   babbe:	9101      	str	r1, [sp, #4]
   babc0:	f7f9 fa6f 	bl	b40a2 <__cxa_guard_acquire>
   babc4:	9901      	ldr	r1, [sp, #4]
   babc6:	b148      	cbz	r0, babdc <_Z16_fetch_usbserialv+0x38>
   babc8:	aa03      	add	r2, sp, #12
   babca:	4807      	ldr	r0, [pc, #28]	; (babe8 <_Z16_fetch_usbserialv+0x44>)
   babcc:	f7ff ffce 	bl	bab6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   babd0:	4620      	mov	r0, r4
   babd2:	f7f9 fa6b 	bl	b40ac <__cxa_guard_release>
   babd6:	4805      	ldr	r0, [pc, #20]	; (babec <_Z16_fetch_usbserialv+0x48>)
   babd8:	f000 ff0e 	bl	bb9f8 <atexit>
	return _usbserial;
}
   babdc:	4802      	ldr	r0, [pc, #8]	; (babe8 <_Z16_fetch_usbserialv+0x44>)
   babde:	b008      	add	sp, #32
   babe0:	bd10      	pop	{r4, pc}
   babe2:	bf00      	nop
   babe4:	2003e6e0 	.word	0x2003e6e0
   babe8:	2003e6e4 	.word	0x2003e6e4
   babec:	000baaf5 	.word	0x000baaf5

000babf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   babf0:	4b01      	ldr	r3, [pc, #4]	; (babf8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   babf2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   babf4:	4770      	bx	lr
   babf6:	bf00      	nop
   babf8:	2003e378 	.word	0x2003e378

000babfc <serialEventRun>:
{
   babfc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   babfe:	4b0b      	ldr	r3, [pc, #44]	; (bac2c <serialEventRun+0x30>)
   bac00:	b143      	cbz	r3, bac14 <serialEventRun+0x18>
   bac02:	f7ff ffcf 	bl	baba4 <_Z16_fetch_usbserialv>
   bac06:	6803      	ldr	r3, [r0, #0]
   bac08:	691b      	ldr	r3, [r3, #16]
   bac0a:	4798      	blx	r3
   bac0c:	2800      	cmp	r0, #0
   bac0e:	dd01      	ble.n	bac14 <serialEventRun+0x18>
        serialEvent();
   bac10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bac14:	4b06      	ldr	r3, [pc, #24]	; (bac30 <serialEventRun+0x34>)
   bac16:	b143      	cbz	r3, bac2a <serialEventRun+0x2e>
   bac18:	f000 f992 	bl	baf40 <_Z22__fetch_global_Serial1v>
   bac1c:	6803      	ldr	r3, [r0, #0]
   bac1e:	691b      	ldr	r3, [r3, #16]
   bac20:	4798      	blx	r3
   bac22:	2800      	cmp	r0, #0
   bac24:	dd01      	ble.n	bac2a <serialEventRun+0x2e>
        serialEvent1();
   bac26:	f3af 8000 	nop.w
}
   bac2a:	bd08      	pop	{r3, pc}
	...

000bac34 <_post_loop>:
{
   bac34:	b508      	push	{r3, lr}
	serialEventRun();
   bac36:	f7ff ffe1 	bl	babfc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bac3a:	f7fd ff4b 	bl	b8ad4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bac3e:	4b01      	ldr	r3, [pc, #4]	; (bac44 <_post_loop+0x10>)
   bac40:	6018      	str	r0, [r3, #0]
}
   bac42:	bd08      	pop	{r3, pc}
   bac44:	2003e70c 	.word	0x2003e70c

000bac48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bac48:	4805      	ldr	r0, [pc, #20]	; (bac60 <_Z33system_initialize_user_backup_ramv+0x18>)
   bac4a:	4a06      	ldr	r2, [pc, #24]	; (bac64 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bac4c:	4906      	ldr	r1, [pc, #24]	; (bac68 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bac4e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bac50:	1a12      	subs	r2, r2, r0
   bac52:	f000 fef9 	bl	bba48 <memcpy>
    __backup_sram_signature = signature;
   bac56:	4b05      	ldr	r3, [pc, #20]	; (bac6c <_Z33system_initialize_user_backup_ramv+0x24>)
   bac58:	4a05      	ldr	r2, [pc, #20]	; (bac70 <_Z33system_initialize_user_backup_ramv+0x28>)
   bac5a:	601a      	str	r2, [r3, #0]
}
   bac5c:	bd08      	pop	{r3, pc}
   bac5e:	bf00      	nop
   bac60:	2003f400 	.word	0x2003f400
   bac64:	2003f404 	.word	0x2003f404
   bac68:	000bd134 	.word	0x000bd134
   bac6c:	2003f400 	.word	0x2003f400
   bac70:	9a271c1e 	.word	0x9a271c1e

000bac74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bac74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bac76:	2300      	movs	r3, #0
   bac78:	9300      	str	r3, [sp, #0]
   bac7a:	461a      	mov	r2, r3
   bac7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bac80:	f7fe f96c 	bl	b8f5c <system_ctrl_set_result>
}
   bac84:	b003      	add	sp, #12
   bac86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bac8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bac8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bac8e:	8843      	ldrh	r3, [r0, #2]
   bac90:	2b0a      	cmp	r3, #10
   bac92:	d008      	beq.n	baca6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bac94:	2b50      	cmp	r3, #80	; 0x50
   bac96:	d10b      	bne.n	bacb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bac98:	4b09      	ldr	r3, [pc, #36]	; (bacc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bac9a:	681b      	ldr	r3, [r3, #0]
   bac9c:	b14b      	cbz	r3, bacb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bac9e:	b003      	add	sp, #12
   baca0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   baca4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   baca6:	f7ff ffe5 	bl	bac74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bacaa:	b003      	add	sp, #12
   bacac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bacb0:	2300      	movs	r3, #0
   bacb2:	9300      	str	r3, [sp, #0]
   bacb4:	461a      	mov	r2, r3
   bacb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bacba:	f7fe f94f 	bl	b8f5c <system_ctrl_set_result>
}
   bacbe:	e7f4      	b.n	bacaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bacc0:	2003e6fc 	.word	0x2003e6fc

000bacc4 <module_user_init_hook>:
{
   bacc4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bacc6:	4812      	ldr	r0, [pc, #72]	; (bad10 <module_user_init_hook+0x4c>)
   bacc8:	2100      	movs	r1, #0
   bacca:	f7fe fa8d 	bl	b91e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bacce:	4b11      	ldr	r3, [pc, #68]	; (bad14 <module_user_init_hook+0x50>)
   bacd0:	681a      	ldr	r2, [r3, #0]
   bacd2:	4b11      	ldr	r3, [pc, #68]	; (bad18 <module_user_init_hook+0x54>)
   bacd4:	429a      	cmp	r2, r3
   bacd6:	4b11      	ldr	r3, [pc, #68]	; (bad1c <module_user_init_hook+0x58>)
   bacd8:	bf0c      	ite	eq
   bacda:	2201      	moveq	r2, #1
   bacdc:	2200      	movne	r2, #0
   bacde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bace0:	d001      	beq.n	bace6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bace2:	f7ff ffb1 	bl	bac48 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bace6:	f7fd fedd 	bl	b8aa4 <HAL_RNG_GetRandomNumber>
   bacea:	4604      	mov	r4, r0
    srand(seed);
   bacec:	f000 fedc 	bl	bbaa8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bacf0:	4b0b      	ldr	r3, [pc, #44]	; (bad20 <module_user_init_hook+0x5c>)
   bacf2:	b113      	cbz	r3, bacfa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bacf4:	4620      	mov	r0, r4
   bacf6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bacfa:	2100      	movs	r1, #0
   bacfc:	4808      	ldr	r0, [pc, #32]	; (bad20 <module_user_init_hook+0x5c>)
   bacfe:	f7fe f9ab 	bl	b9058 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bad02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bad06:	4807      	ldr	r0, [pc, #28]	; (bad24 <module_user_init_hook+0x60>)
   bad08:	2100      	movs	r1, #0
   bad0a:	f7fe b91d 	b.w	b8f48 <system_ctrl_set_app_request_handler>
   bad0e:	bf00      	nop
   bad10:	000babf1 	.word	0x000babf1
   bad14:	2003f400 	.word	0x2003f400
   bad18:	9a271c1e 	.word	0x9a271c1e
   bad1c:	2003e6f8 	.word	0x2003e6f8
   bad20:	00000000 	.word	0x00000000
   bad24:	000bac8d 	.word	0x000bac8d

000bad28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bad28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bad2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bad2c:	d902      	bls.n	bad34 <pinAvailable+0xc>
    return false;
   bad2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bad30:	b002      	add	sp, #8
   bad32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bad34:	f1a0 030b 	sub.w	r3, r0, #11
   bad38:	2b02      	cmp	r3, #2
   bad3a:	d81a      	bhi.n	bad72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bad3c:	4c17      	ldr	r4, [pc, #92]	; (bad9c <pinAvailable+0x74>)
   bad3e:	7821      	ldrb	r1, [r4, #0]
   bad40:	f3bf 8f5b 	dmb	ish
   bad44:	f011 0101 	ands.w	r1, r1, #1
   bad48:	d10b      	bne.n	bad62 <pinAvailable+0x3a>
   bad4a:	4620      	mov	r0, r4
   bad4c:	9101      	str	r1, [sp, #4]
   bad4e:	f7f9 f9a8 	bl	b40a2 <__cxa_guard_acquire>
   bad52:	9901      	ldr	r1, [sp, #4]
   bad54:	b128      	cbz	r0, bad62 <pinAvailable+0x3a>
   bad56:	4812      	ldr	r0, [pc, #72]	; (bada0 <pinAvailable+0x78>)
   bad58:	f7ff face 	bl	ba2f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bad5c:	4620      	mov	r0, r4
   bad5e:	f7f9 f9a5 	bl	b40ac <__cxa_guard_release>
   bad62:	4b0f      	ldr	r3, [pc, #60]	; (bada0 <pinAvailable+0x78>)
   bad64:	7818      	ldrb	r0, [r3, #0]
   bad66:	f7fd ffa5 	bl	b8cb4 <hal_spi_is_enabled>
   bad6a:	2800      	cmp	r0, #0
   bad6c:	d1df      	bne.n	bad2e <pinAvailable+0x6>
  return true; // 'pin' is available
   bad6e:	2001      	movs	r0, #1
   bad70:	e7de      	b.n	bad30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bad72:	2801      	cmp	r0, #1
   bad74:	d809      	bhi.n	bad8a <pinAvailable+0x62>
   bad76:	f000 f87f 	bl	bae78 <_Z19__fetch_global_Wirev>
   bad7a:	2100      	movs	r1, #0
   bad7c:	7c00      	ldrb	r0, [r0, #16]
   bad7e:	f7fd ff51 	bl	b8c24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bad82:	f080 0001 	eor.w	r0, r0, #1
   bad86:	b2c0      	uxtb	r0, r0
   bad88:	e7d2      	b.n	bad30 <pinAvailable+0x8>
   bad8a:	3809      	subs	r0, #9
   bad8c:	2801      	cmp	r0, #1
   bad8e:	d8ee      	bhi.n	bad6e <pinAvailable+0x46>
   bad90:	f000 f8d6 	bl	baf40 <_Z22__fetch_global_Serial1v>
   bad94:	7c00      	ldrb	r0, [r0, #16]
   bad96:	f7fe f81d 	bl	b8dd4 <hal_usart_is_enabled>
   bad9a:	e7f2      	b.n	bad82 <pinAvailable+0x5a>
   bad9c:	2003e700 	.word	0x2003e700
   bada0:	2003e704 	.word	0x2003e704

000bada4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bada4:	2823      	cmp	r0, #35	; 0x23
{
   bada6:	b538      	push	{r3, r4, r5, lr}
   bada8:	4604      	mov	r4, r0
   badaa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   badac:	d80a      	bhi.n	badc4 <pinMode+0x20>
   badae:	29ff      	cmp	r1, #255	; 0xff
   badb0:	d008      	beq.n	badc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   badb2:	f7ff ffb9 	bl	bad28 <pinAvailable>
   badb6:	b128      	cbz	r0, badc4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   badb8:	4629      	mov	r1, r5
   badba:	4620      	mov	r0, r4
}
   badbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   badc0:	f7fd bec0 	b.w	b8b44 <HAL_Pin_Mode>
}
   badc4:	bd38      	pop	{r3, r4, r5, pc}

000badc6 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   badc6:	b510      	push	{r4, lr}
   badc8:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   badca:	f7fd fec3 	bl	b8b54 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   badce:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   badd0:	b2db      	uxtb	r3, r3
   badd2:	2b01      	cmp	r3, #1
   badd4:	d908      	bls.n	bade8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   badd6:	4620      	mov	r0, r4
   badd8:	f7ff ffa6 	bl	bad28 <pinAvailable>
   baddc:	b120      	cbz	r0, bade8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   badde:	4620      	mov	r0, r4
}
   bade0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bade4:	f7fd bebe 	b.w	b8b64 <HAL_GPIO_Read>
}
   bade8:	2000      	movs	r0, #0
   badea:	bd10      	pop	{r4, pc}

000badec <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   badec:	280d      	cmp	r0, #13
{
   badee:	b510      	push	{r4, lr}
   badf0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   badf2:	bf9c      	itt	ls
   badf4:	340e      	addls	r4, #14
   badf6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   badf8:	4620      	mov	r0, r4
   badfa:	f7ff ff95 	bl	bad28 <pinAvailable>
   badfe:	b150      	cbz	r0, bae16 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bae00:	2103      	movs	r1, #3
   bae02:	4620      	mov	r0, r4
   bae04:	f7fd fe96 	bl	b8b34 <HAL_Validate_Pin_Function>
   bae08:	2803      	cmp	r0, #3
   bae0a:	d104      	bne.n	bae16 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bae0c:	4620      	mov	r0, r4
}
   bae0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bae12:	f7fd bebf 	b.w	b8b94 <hal_adc_read>
}
   bae16:	2000      	movs	r0, #0
   bae18:	bd10      	pop	{r4, pc}

000bae1a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bae1a:	4770      	bx	lr

000bae1c <__tcf_1>:
   bae1c:	4770      	bx	lr
	...

000bae20 <_Z17acquireWireBufferv>:
{
   bae20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bae22:	2520      	movs	r5, #32
   bae24:	2314      	movs	r3, #20
{
   bae26:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bae28:	6003      	str	r3, [r0, #0]
   bae2a:	6085      	str	r5, [r0, #8]
   bae2c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bae2e:	4906      	ldr	r1, [pc, #24]	; (bae48 <_Z17acquireWireBufferv+0x28>)
   bae30:	4628      	mov	r0, r5
   bae32:	f000 f8ab 	bl	baf8c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bae36:	4904      	ldr	r1, [pc, #16]	; (bae48 <_Z17acquireWireBufferv+0x28>)
	};
   bae38:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bae3a:	4628      	mov	r0, r5
   bae3c:	f000 f8a6 	bl	baf8c <_ZnajRKSt9nothrow_t>
	};
   bae40:	60e0      	str	r0, [r4, #12]
}
   bae42:	4620      	mov	r0, r4
   bae44:	bd38      	pop	{r3, r4, r5, pc}
   bae46:	bf00      	nop
   bae48:	000bcea8 	.word	0x000bcea8

000bae4c <_Z18acquireWire1Bufferv>:
   bae4c:	b538      	push	{r3, r4, r5, lr}
   bae4e:	2520      	movs	r5, #32
   bae50:	2314      	movs	r3, #20
   bae52:	4604      	mov	r4, r0
   bae54:	6003      	str	r3, [r0, #0]
   bae56:	6085      	str	r5, [r0, #8]
   bae58:	6105      	str	r5, [r0, #16]
   bae5a:	4906      	ldr	r1, [pc, #24]	; (bae74 <_Z18acquireWire1Bufferv+0x28>)
   bae5c:	4628      	mov	r0, r5
   bae5e:	f000 f895 	bl	baf8c <_ZnajRKSt9nothrow_t>
   bae62:	4904      	ldr	r1, [pc, #16]	; (bae74 <_Z18acquireWire1Bufferv+0x28>)
   bae64:	6060      	str	r0, [r4, #4]
   bae66:	4628      	mov	r0, r5
   bae68:	f000 f890 	bl	baf8c <_ZnajRKSt9nothrow_t>
   bae6c:	60e0      	str	r0, [r4, #12]
   bae6e:	4620      	mov	r0, r4
   bae70:	bd38      	pop	{r3, r4, r5, pc}
   bae72:	bf00      	nop
   bae74:	000bcea8 	.word	0x000bcea8

000bae78 <_Z19__fetch_global_Wirev>:
{
   bae78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bae7a:	4d0e      	ldr	r5, [pc, #56]	; (baeb4 <_Z19__fetch_global_Wirev+0x3c>)
   bae7c:	7829      	ldrb	r1, [r5, #0]
   bae7e:	f3bf 8f5b 	dmb	ish
   bae82:	f011 0401 	ands.w	r4, r1, #1
{
   bae86:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bae88:	d111      	bne.n	baeae <_Z19__fetch_global_Wirev+0x36>
   bae8a:	4628      	mov	r0, r5
   bae8c:	f7f9 f909 	bl	b40a2 <__cxa_guard_acquire>
   bae90:	b168      	cbz	r0, baeae <_Z19__fetch_global_Wirev+0x36>
   bae92:	a801      	add	r0, sp, #4
   bae94:	f7ff ffc4 	bl	bae20 <_Z17acquireWireBufferv>
   bae98:	aa01      	add	r2, sp, #4
   bae9a:	4621      	mov	r1, r4
   bae9c:	4806      	ldr	r0, [pc, #24]	; (baeb8 <_Z19__fetch_global_Wirev+0x40>)
   bae9e:	f7fe ff29 	bl	b9cf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   baea2:	4628      	mov	r0, r5
   baea4:	f7f9 f902 	bl	b40ac <__cxa_guard_release>
   baea8:	4804      	ldr	r0, [pc, #16]	; (baebc <_Z19__fetch_global_Wirev+0x44>)
   baeaa:	f000 fda5 	bl	bb9f8 <atexit>
	return wire;
}
   baeae:	4802      	ldr	r0, [pc, #8]	; (baeb8 <_Z19__fetch_global_Wirev+0x40>)
   baeb0:	b007      	add	sp, #28
   baeb2:	bd30      	pop	{r4, r5, pc}
   baeb4:	2003e710 	.word	0x2003e710
   baeb8:	2003e718 	.word	0x2003e718
   baebc:	000bae1b 	.word	0x000bae1b

000baec0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   baec0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   baec2:	4c0e      	ldr	r4, [pc, #56]	; (baefc <_Z20__fetch_global_Wire1v+0x3c>)
   baec4:	7823      	ldrb	r3, [r4, #0]
   baec6:	f3bf 8f5b 	dmb	ish
   baeca:	07db      	lsls	r3, r3, #31
{
   baecc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   baece:	d411      	bmi.n	baef4 <_Z20__fetch_global_Wire1v+0x34>
   baed0:	4620      	mov	r0, r4
   baed2:	f7f9 f8e6 	bl	b40a2 <__cxa_guard_acquire>
   baed6:	b168      	cbz	r0, baef4 <_Z20__fetch_global_Wire1v+0x34>
   baed8:	a801      	add	r0, sp, #4
   baeda:	f7ff ffb7 	bl	bae4c <_Z18acquireWire1Bufferv>
   baede:	aa01      	add	r2, sp, #4
   baee0:	2101      	movs	r1, #1
   baee2:	4807      	ldr	r0, [pc, #28]	; (baf00 <_Z20__fetch_global_Wire1v+0x40>)
   baee4:	f7fe ff06 	bl	b9cf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   baee8:	4620      	mov	r0, r4
   baeea:	f7f9 f8df 	bl	b40ac <__cxa_guard_release>
   baeee:	4805      	ldr	r0, [pc, #20]	; (baf04 <_Z20__fetch_global_Wire1v+0x44>)
   baef0:	f000 fd82 	bl	bb9f8 <atexit>
	return wire;
}
   baef4:	4802      	ldr	r0, [pc, #8]	; (baf00 <_Z20__fetch_global_Wire1v+0x40>)
   baef6:	b006      	add	sp, #24
   baef8:	bd10      	pop	{r4, pc}
   baefa:	bf00      	nop
   baefc:	2003e714 	.word	0x2003e714
   baf00:	2003e72c 	.word	0x2003e72c
   baf04:	000bae1d 	.word	0x000bae1d

000baf08 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf08:	4770      	bx	lr
	...

000baf0c <_Z20acquireSerial1Bufferv>:
{
   baf0c:	b538      	push	{r3, r4, r5, lr}
   baf0e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   baf10:	2514      	movs	r5, #20
   baf12:	462a      	mov	r2, r5
   baf14:	2100      	movs	r1, #0
   baf16:	f000 fdbf 	bl	bba98 <memset>
   baf1a:	8025      	strh	r5, [r4, #0]
   baf1c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf1e:	4907      	ldr	r1, [pc, #28]	; (baf3c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   baf20:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf22:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   baf24:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf26:	f000 f831 	bl	baf8c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf2a:	4904      	ldr	r1, [pc, #16]	; (baf3c <_Z20acquireSerial1Bufferv+0x30>)
    };
   baf2c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf2e:	4628      	mov	r0, r5
   baf30:	f000 f82c 	bl	baf8c <_ZnajRKSt9nothrow_t>
    };
   baf34:	60e0      	str	r0, [r4, #12]
}
   baf36:	4620      	mov	r0, r4
   baf38:	bd38      	pop	{r3, r4, r5, pc}
   baf3a:	bf00      	nop
   baf3c:	000bcea8 	.word	0x000bcea8

000baf40 <_Z22__fetch_global_Serial1v>:
{
   baf40:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf42:	4d0e      	ldr	r5, [pc, #56]	; (baf7c <_Z22__fetch_global_Serial1v+0x3c>)
   baf44:	7829      	ldrb	r1, [r5, #0]
   baf46:	f3bf 8f5b 	dmb	ish
   baf4a:	f011 0401 	ands.w	r4, r1, #1
{
   baf4e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf50:	d111      	bne.n	baf76 <_Z22__fetch_global_Serial1v+0x36>
   baf52:	4628      	mov	r0, r5
   baf54:	f7f9 f8a5 	bl	b40a2 <__cxa_guard_acquire>
   baf58:	b168      	cbz	r0, baf76 <_Z22__fetch_global_Serial1v+0x36>
   baf5a:	a801      	add	r0, sp, #4
   baf5c:	f7ff ffd6 	bl	baf0c <_Z20acquireSerial1Bufferv>
   baf60:	aa01      	add	r2, sp, #4
   baf62:	4621      	mov	r1, r4
   baf64:	4806      	ldr	r0, [pc, #24]	; (baf80 <_Z22__fetch_global_Serial1v+0x40>)
   baf66:	f7ff fdaf 	bl	baac8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   baf6a:	4628      	mov	r0, r5
   baf6c:	f7f9 f89e 	bl	b40ac <__cxa_guard_release>
   baf70:	4804      	ldr	r0, [pc, #16]	; (baf84 <_Z22__fetch_global_Serial1v+0x44>)
   baf72:	f000 fd41 	bl	bb9f8 <atexit>
    return serial1;
}
   baf76:	4802      	ldr	r0, [pc, #8]	; (baf80 <_Z22__fetch_global_Serial1v+0x40>)
   baf78:	b007      	add	sp, #28
   baf7a:	bd30      	pop	{r4, r5, pc}
   baf7c:	2003e740 	.word	0x2003e740
   baf80:	2003e744 	.word	0x2003e744
   baf84:	000baf09 	.word	0x000baf09

000baf88 <_ZnwjRKSt9nothrow_t>:
   baf88:	f7f9 b885 	b.w	b4096 <_Znwj>

000baf8c <_ZnajRKSt9nothrow_t>:
   baf8c:	f7f9 b885 	b.w	b409a <_Znaj>

000baf90 <_ZSt17__throw_bad_allocv>:
   baf90:	b508      	push	{r3, lr}
   baf92:	f7fe f909 	bl	b91a8 <abort>

000baf96 <_ZSt20__throw_length_errorPKc>:
   baf96:	b508      	push	{r3, lr}
   baf98:	f7fe f906 	bl	b91a8 <abort>

000baf9c <_ZSt25__throw_bad_function_callv>:
   baf9c:	b508      	push	{r3, lr}
   baf9e:	f7fe f903 	bl	b91a8 <abort>
	...

000bafa4 <__aeabi_drsub>:
   bafa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bafa8:	e002      	b.n	bafb0 <__adddf3>
   bafaa:	bf00      	nop

000bafac <__aeabi_dsub>:
   bafac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bafb0 <__adddf3>:
   bafb0:	b530      	push	{r4, r5, lr}
   bafb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bafb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bafba:	ea94 0f05 	teq	r4, r5
   bafbe:	bf08      	it	eq
   bafc0:	ea90 0f02 	teqeq	r0, r2
   bafc4:	bf1f      	itttt	ne
   bafc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   bafca:	ea55 0c02 	orrsne.w	ip, r5, r2
   bafce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bafd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bafd6:	f000 80e2 	beq.w	bb19e <__adddf3+0x1ee>
   bafda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bafde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bafe2:	bfb8      	it	lt
   bafe4:	426d      	neglt	r5, r5
   bafe6:	dd0c      	ble.n	bb002 <__adddf3+0x52>
   bafe8:	442c      	add	r4, r5
   bafea:	ea80 0202 	eor.w	r2, r0, r2
   bafee:	ea81 0303 	eor.w	r3, r1, r3
   baff2:	ea82 0000 	eor.w	r0, r2, r0
   baff6:	ea83 0101 	eor.w	r1, r3, r1
   baffa:	ea80 0202 	eor.w	r2, r0, r2
   baffe:	ea81 0303 	eor.w	r3, r1, r3
   bb002:	2d36      	cmp	r5, #54	; 0x36
   bb004:	bf88      	it	hi
   bb006:	bd30      	pophi	{r4, r5, pc}
   bb008:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb00c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb010:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb014:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb018:	d002      	beq.n	bb020 <__adddf3+0x70>
   bb01a:	4240      	negs	r0, r0
   bb01c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb020:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb024:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb028:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb02c:	d002      	beq.n	bb034 <__adddf3+0x84>
   bb02e:	4252      	negs	r2, r2
   bb030:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb034:	ea94 0f05 	teq	r4, r5
   bb038:	f000 80a7 	beq.w	bb18a <__adddf3+0x1da>
   bb03c:	f1a4 0401 	sub.w	r4, r4, #1
   bb040:	f1d5 0e20 	rsbs	lr, r5, #32
   bb044:	db0d      	blt.n	bb062 <__adddf3+0xb2>
   bb046:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb04a:	fa22 f205 	lsr.w	r2, r2, r5
   bb04e:	1880      	adds	r0, r0, r2
   bb050:	f141 0100 	adc.w	r1, r1, #0
   bb054:	fa03 f20e 	lsl.w	r2, r3, lr
   bb058:	1880      	adds	r0, r0, r2
   bb05a:	fa43 f305 	asr.w	r3, r3, r5
   bb05e:	4159      	adcs	r1, r3
   bb060:	e00e      	b.n	bb080 <__adddf3+0xd0>
   bb062:	f1a5 0520 	sub.w	r5, r5, #32
   bb066:	f10e 0e20 	add.w	lr, lr, #32
   bb06a:	2a01      	cmp	r2, #1
   bb06c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb070:	bf28      	it	cs
   bb072:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb076:	fa43 f305 	asr.w	r3, r3, r5
   bb07a:	18c0      	adds	r0, r0, r3
   bb07c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb084:	d507      	bpl.n	bb096 <__adddf3+0xe6>
   bb086:	f04f 0e00 	mov.w	lr, #0
   bb08a:	f1dc 0c00 	rsbs	ip, ip, #0
   bb08e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb092:	eb6e 0101 	sbc.w	r1, lr, r1
   bb096:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb09a:	d31b      	bcc.n	bb0d4 <__adddf3+0x124>
   bb09c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb0a0:	d30c      	bcc.n	bb0bc <__adddf3+0x10c>
   bb0a2:	0849      	lsrs	r1, r1, #1
   bb0a4:	ea5f 0030 	movs.w	r0, r0, rrx
   bb0a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb0ac:	f104 0401 	add.w	r4, r4, #1
   bb0b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb0b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb0b8:	f080 809a 	bcs.w	bb1f0 <__adddf3+0x240>
   bb0bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb0c0:	bf08      	it	eq
   bb0c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb0c6:	f150 0000 	adcs.w	r0, r0, #0
   bb0ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb0ce:	ea41 0105 	orr.w	r1, r1, r5
   bb0d2:	bd30      	pop	{r4, r5, pc}
   bb0d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb0d8:	4140      	adcs	r0, r0
   bb0da:	eb41 0101 	adc.w	r1, r1, r1
   bb0de:	3c01      	subs	r4, #1
   bb0e0:	bf28      	it	cs
   bb0e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb0e6:	d2e9      	bcs.n	bb0bc <__adddf3+0x10c>
   bb0e8:	f091 0f00 	teq	r1, #0
   bb0ec:	bf04      	itt	eq
   bb0ee:	4601      	moveq	r1, r0
   bb0f0:	2000      	moveq	r0, #0
   bb0f2:	fab1 f381 	clz	r3, r1
   bb0f6:	bf08      	it	eq
   bb0f8:	3320      	addeq	r3, #32
   bb0fa:	f1a3 030b 	sub.w	r3, r3, #11
   bb0fe:	f1b3 0220 	subs.w	r2, r3, #32
   bb102:	da0c      	bge.n	bb11e <__adddf3+0x16e>
   bb104:	320c      	adds	r2, #12
   bb106:	dd08      	ble.n	bb11a <__adddf3+0x16a>
   bb108:	f102 0c14 	add.w	ip, r2, #20
   bb10c:	f1c2 020c 	rsb	r2, r2, #12
   bb110:	fa01 f00c 	lsl.w	r0, r1, ip
   bb114:	fa21 f102 	lsr.w	r1, r1, r2
   bb118:	e00c      	b.n	bb134 <__adddf3+0x184>
   bb11a:	f102 0214 	add.w	r2, r2, #20
   bb11e:	bfd8      	it	le
   bb120:	f1c2 0c20 	rsble	ip, r2, #32
   bb124:	fa01 f102 	lsl.w	r1, r1, r2
   bb128:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb12c:	bfdc      	itt	le
   bb12e:	ea41 010c 	orrle.w	r1, r1, ip
   bb132:	4090      	lslle	r0, r2
   bb134:	1ae4      	subs	r4, r4, r3
   bb136:	bfa2      	ittt	ge
   bb138:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb13c:	4329      	orrge	r1, r5
   bb13e:	bd30      	popge	{r4, r5, pc}
   bb140:	ea6f 0404 	mvn.w	r4, r4
   bb144:	3c1f      	subs	r4, #31
   bb146:	da1c      	bge.n	bb182 <__adddf3+0x1d2>
   bb148:	340c      	adds	r4, #12
   bb14a:	dc0e      	bgt.n	bb16a <__adddf3+0x1ba>
   bb14c:	f104 0414 	add.w	r4, r4, #20
   bb150:	f1c4 0220 	rsb	r2, r4, #32
   bb154:	fa20 f004 	lsr.w	r0, r0, r4
   bb158:	fa01 f302 	lsl.w	r3, r1, r2
   bb15c:	ea40 0003 	orr.w	r0, r0, r3
   bb160:	fa21 f304 	lsr.w	r3, r1, r4
   bb164:	ea45 0103 	orr.w	r1, r5, r3
   bb168:	bd30      	pop	{r4, r5, pc}
   bb16a:	f1c4 040c 	rsb	r4, r4, #12
   bb16e:	f1c4 0220 	rsb	r2, r4, #32
   bb172:	fa20 f002 	lsr.w	r0, r0, r2
   bb176:	fa01 f304 	lsl.w	r3, r1, r4
   bb17a:	ea40 0003 	orr.w	r0, r0, r3
   bb17e:	4629      	mov	r1, r5
   bb180:	bd30      	pop	{r4, r5, pc}
   bb182:	fa21 f004 	lsr.w	r0, r1, r4
   bb186:	4629      	mov	r1, r5
   bb188:	bd30      	pop	{r4, r5, pc}
   bb18a:	f094 0f00 	teq	r4, #0
   bb18e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb192:	bf06      	itte	eq
   bb194:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb198:	3401      	addeq	r4, #1
   bb19a:	3d01      	subne	r5, #1
   bb19c:	e74e      	b.n	bb03c <__adddf3+0x8c>
   bb19e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb1a2:	bf18      	it	ne
   bb1a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb1a8:	d029      	beq.n	bb1fe <__adddf3+0x24e>
   bb1aa:	ea94 0f05 	teq	r4, r5
   bb1ae:	bf08      	it	eq
   bb1b0:	ea90 0f02 	teqeq	r0, r2
   bb1b4:	d005      	beq.n	bb1c2 <__adddf3+0x212>
   bb1b6:	ea54 0c00 	orrs.w	ip, r4, r0
   bb1ba:	bf04      	itt	eq
   bb1bc:	4619      	moveq	r1, r3
   bb1be:	4610      	moveq	r0, r2
   bb1c0:	bd30      	pop	{r4, r5, pc}
   bb1c2:	ea91 0f03 	teq	r1, r3
   bb1c6:	bf1e      	ittt	ne
   bb1c8:	2100      	movne	r1, #0
   bb1ca:	2000      	movne	r0, #0
   bb1cc:	bd30      	popne	{r4, r5, pc}
   bb1ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb1d2:	d105      	bne.n	bb1e0 <__adddf3+0x230>
   bb1d4:	0040      	lsls	r0, r0, #1
   bb1d6:	4149      	adcs	r1, r1
   bb1d8:	bf28      	it	cs
   bb1da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb1de:	bd30      	pop	{r4, r5, pc}
   bb1e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb1e4:	bf3c      	itt	cc
   bb1e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb1ea:	bd30      	popcc	{r4, r5, pc}
   bb1ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb1f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb1f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb1f8:	f04f 0000 	mov.w	r0, #0
   bb1fc:	bd30      	pop	{r4, r5, pc}
   bb1fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb202:	bf1a      	itte	ne
   bb204:	4619      	movne	r1, r3
   bb206:	4610      	movne	r0, r2
   bb208:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb20c:	bf1c      	itt	ne
   bb20e:	460b      	movne	r3, r1
   bb210:	4602      	movne	r2, r0
   bb212:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb216:	bf06      	itte	eq
   bb218:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb21c:	ea91 0f03 	teqeq	r1, r3
   bb220:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb224:	bd30      	pop	{r4, r5, pc}
   bb226:	bf00      	nop

000bb228 <__aeabi_ui2d>:
   bb228:	f090 0f00 	teq	r0, #0
   bb22c:	bf04      	itt	eq
   bb22e:	2100      	moveq	r1, #0
   bb230:	4770      	bxeq	lr
   bb232:	b530      	push	{r4, r5, lr}
   bb234:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb238:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb23c:	f04f 0500 	mov.w	r5, #0
   bb240:	f04f 0100 	mov.w	r1, #0
   bb244:	e750      	b.n	bb0e8 <__adddf3+0x138>
   bb246:	bf00      	nop

000bb248 <__aeabi_i2d>:
   bb248:	f090 0f00 	teq	r0, #0
   bb24c:	bf04      	itt	eq
   bb24e:	2100      	moveq	r1, #0
   bb250:	4770      	bxeq	lr
   bb252:	b530      	push	{r4, r5, lr}
   bb254:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb258:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb25c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb260:	bf48      	it	mi
   bb262:	4240      	negmi	r0, r0
   bb264:	f04f 0100 	mov.w	r1, #0
   bb268:	e73e      	b.n	bb0e8 <__adddf3+0x138>
   bb26a:	bf00      	nop

000bb26c <__aeabi_f2d>:
   bb26c:	0042      	lsls	r2, r0, #1
   bb26e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb272:	ea4f 0131 	mov.w	r1, r1, rrx
   bb276:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb27a:	bf1f      	itttt	ne
   bb27c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb280:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb284:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb288:	4770      	bxne	lr
   bb28a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb28e:	bf08      	it	eq
   bb290:	4770      	bxeq	lr
   bb292:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb296:	bf04      	itt	eq
   bb298:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb29c:	4770      	bxeq	lr
   bb29e:	b530      	push	{r4, r5, lr}
   bb2a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb2a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb2a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb2ac:	e71c      	b.n	bb0e8 <__adddf3+0x138>
   bb2ae:	bf00      	nop

000bb2b0 <__aeabi_ul2d>:
   bb2b0:	ea50 0201 	orrs.w	r2, r0, r1
   bb2b4:	bf08      	it	eq
   bb2b6:	4770      	bxeq	lr
   bb2b8:	b530      	push	{r4, r5, lr}
   bb2ba:	f04f 0500 	mov.w	r5, #0
   bb2be:	e00a      	b.n	bb2d6 <__aeabi_l2d+0x16>

000bb2c0 <__aeabi_l2d>:
   bb2c0:	ea50 0201 	orrs.w	r2, r0, r1
   bb2c4:	bf08      	it	eq
   bb2c6:	4770      	bxeq	lr
   bb2c8:	b530      	push	{r4, r5, lr}
   bb2ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb2ce:	d502      	bpl.n	bb2d6 <__aeabi_l2d+0x16>
   bb2d0:	4240      	negs	r0, r0
   bb2d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb2d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb2da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb2de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb2e2:	f43f aed8 	beq.w	bb096 <__adddf3+0xe6>
   bb2e6:	f04f 0203 	mov.w	r2, #3
   bb2ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb2ee:	bf18      	it	ne
   bb2f0:	3203      	addne	r2, #3
   bb2f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb2f6:	bf18      	it	ne
   bb2f8:	3203      	addne	r2, #3
   bb2fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb2fe:	f1c2 0320 	rsb	r3, r2, #32
   bb302:	fa00 fc03 	lsl.w	ip, r0, r3
   bb306:	fa20 f002 	lsr.w	r0, r0, r2
   bb30a:	fa01 fe03 	lsl.w	lr, r1, r3
   bb30e:	ea40 000e 	orr.w	r0, r0, lr
   bb312:	fa21 f102 	lsr.w	r1, r1, r2
   bb316:	4414      	add	r4, r2
   bb318:	e6bd      	b.n	bb096 <__adddf3+0xe6>
   bb31a:	bf00      	nop

000bb31c <__aeabi_dmul>:
   bb31c:	b570      	push	{r4, r5, r6, lr}
   bb31e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb32a:	bf1d      	ittte	ne
   bb32c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb330:	ea94 0f0c 	teqne	r4, ip
   bb334:	ea95 0f0c 	teqne	r5, ip
   bb338:	f000 f8de 	bleq	bb4f8 <__aeabi_dmul+0x1dc>
   bb33c:	442c      	add	r4, r5
   bb33e:	ea81 0603 	eor.w	r6, r1, r3
   bb342:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb346:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb34a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb34e:	bf18      	it	ne
   bb350:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb35c:	d038      	beq.n	bb3d0 <__aeabi_dmul+0xb4>
   bb35e:	fba0 ce02 	umull	ip, lr, r0, r2
   bb362:	f04f 0500 	mov.w	r5, #0
   bb366:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb36a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb36e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb372:	f04f 0600 	mov.w	r6, #0
   bb376:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb37a:	f09c 0f00 	teq	ip, #0
   bb37e:	bf18      	it	ne
   bb380:	f04e 0e01 	orrne.w	lr, lr, #1
   bb384:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb388:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb38c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb390:	d204      	bcs.n	bb39c <__aeabi_dmul+0x80>
   bb392:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb396:	416d      	adcs	r5, r5
   bb398:	eb46 0606 	adc.w	r6, r6, r6
   bb39c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb3a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb3a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb3a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb3ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb3b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb3b4:	bf88      	it	hi
   bb3b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb3ba:	d81e      	bhi.n	bb3fa <__aeabi_dmul+0xde>
   bb3bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb3c0:	bf08      	it	eq
   bb3c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb3c6:	f150 0000 	adcs.w	r0, r0, #0
   bb3ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb3ce:	bd70      	pop	{r4, r5, r6, pc}
   bb3d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb3d4:	ea46 0101 	orr.w	r1, r6, r1
   bb3d8:	ea40 0002 	orr.w	r0, r0, r2
   bb3dc:	ea81 0103 	eor.w	r1, r1, r3
   bb3e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb3e4:	bfc2      	ittt	gt
   bb3e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb3ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb3ee:	bd70      	popgt	{r4, r5, r6, pc}
   bb3f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb3f4:	f04f 0e00 	mov.w	lr, #0
   bb3f8:	3c01      	subs	r4, #1
   bb3fa:	f300 80ab 	bgt.w	bb554 <__aeabi_dmul+0x238>
   bb3fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb402:	bfde      	ittt	le
   bb404:	2000      	movle	r0, #0
   bb406:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb40a:	bd70      	pople	{r4, r5, r6, pc}
   bb40c:	f1c4 0400 	rsb	r4, r4, #0
   bb410:	3c20      	subs	r4, #32
   bb412:	da35      	bge.n	bb480 <__aeabi_dmul+0x164>
   bb414:	340c      	adds	r4, #12
   bb416:	dc1b      	bgt.n	bb450 <__aeabi_dmul+0x134>
   bb418:	f104 0414 	add.w	r4, r4, #20
   bb41c:	f1c4 0520 	rsb	r5, r4, #32
   bb420:	fa00 f305 	lsl.w	r3, r0, r5
   bb424:	fa20 f004 	lsr.w	r0, r0, r4
   bb428:	fa01 f205 	lsl.w	r2, r1, r5
   bb42c:	ea40 0002 	orr.w	r0, r0, r2
   bb430:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb438:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb43c:	fa21 f604 	lsr.w	r6, r1, r4
   bb440:	eb42 0106 	adc.w	r1, r2, r6
   bb444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb448:	bf08      	it	eq
   bb44a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb44e:	bd70      	pop	{r4, r5, r6, pc}
   bb450:	f1c4 040c 	rsb	r4, r4, #12
   bb454:	f1c4 0520 	rsb	r5, r4, #32
   bb458:	fa00 f304 	lsl.w	r3, r0, r4
   bb45c:	fa20 f005 	lsr.w	r0, r0, r5
   bb460:	fa01 f204 	lsl.w	r2, r1, r4
   bb464:	ea40 0002 	orr.w	r0, r0, r2
   bb468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb46c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb470:	f141 0100 	adc.w	r1, r1, #0
   bb474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb478:	bf08      	it	eq
   bb47a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb47e:	bd70      	pop	{r4, r5, r6, pc}
   bb480:	f1c4 0520 	rsb	r5, r4, #32
   bb484:	fa00 f205 	lsl.w	r2, r0, r5
   bb488:	ea4e 0e02 	orr.w	lr, lr, r2
   bb48c:	fa20 f304 	lsr.w	r3, r0, r4
   bb490:	fa01 f205 	lsl.w	r2, r1, r5
   bb494:	ea43 0302 	orr.w	r3, r3, r2
   bb498:	fa21 f004 	lsr.w	r0, r1, r4
   bb49c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb4a0:	fa21 f204 	lsr.w	r2, r1, r4
   bb4a4:	ea20 0002 	bic.w	r0, r0, r2
   bb4a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb4ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb4b0:	bf08      	it	eq
   bb4b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb4b6:	bd70      	pop	{r4, r5, r6, pc}
   bb4b8:	f094 0f00 	teq	r4, #0
   bb4bc:	d10f      	bne.n	bb4de <__aeabi_dmul+0x1c2>
   bb4be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb4c2:	0040      	lsls	r0, r0, #1
   bb4c4:	eb41 0101 	adc.w	r1, r1, r1
   bb4c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb4cc:	bf08      	it	eq
   bb4ce:	3c01      	subeq	r4, #1
   bb4d0:	d0f7      	beq.n	bb4c2 <__aeabi_dmul+0x1a6>
   bb4d2:	ea41 0106 	orr.w	r1, r1, r6
   bb4d6:	f095 0f00 	teq	r5, #0
   bb4da:	bf18      	it	ne
   bb4dc:	4770      	bxne	lr
   bb4de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb4e2:	0052      	lsls	r2, r2, #1
   bb4e4:	eb43 0303 	adc.w	r3, r3, r3
   bb4e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb4ec:	bf08      	it	eq
   bb4ee:	3d01      	subeq	r5, #1
   bb4f0:	d0f7      	beq.n	bb4e2 <__aeabi_dmul+0x1c6>
   bb4f2:	ea43 0306 	orr.w	r3, r3, r6
   bb4f6:	4770      	bx	lr
   bb4f8:	ea94 0f0c 	teq	r4, ip
   bb4fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb500:	bf18      	it	ne
   bb502:	ea95 0f0c 	teqne	r5, ip
   bb506:	d00c      	beq.n	bb522 <__aeabi_dmul+0x206>
   bb508:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb50c:	bf18      	it	ne
   bb50e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb512:	d1d1      	bne.n	bb4b8 <__aeabi_dmul+0x19c>
   bb514:	ea81 0103 	eor.w	r1, r1, r3
   bb518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb51c:	f04f 0000 	mov.w	r0, #0
   bb520:	bd70      	pop	{r4, r5, r6, pc}
   bb522:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb526:	bf06      	itte	eq
   bb528:	4610      	moveq	r0, r2
   bb52a:	4619      	moveq	r1, r3
   bb52c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb530:	d019      	beq.n	bb566 <__aeabi_dmul+0x24a>
   bb532:	ea94 0f0c 	teq	r4, ip
   bb536:	d102      	bne.n	bb53e <__aeabi_dmul+0x222>
   bb538:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb53c:	d113      	bne.n	bb566 <__aeabi_dmul+0x24a>
   bb53e:	ea95 0f0c 	teq	r5, ip
   bb542:	d105      	bne.n	bb550 <__aeabi_dmul+0x234>
   bb544:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb548:	bf1c      	itt	ne
   bb54a:	4610      	movne	r0, r2
   bb54c:	4619      	movne	r1, r3
   bb54e:	d10a      	bne.n	bb566 <__aeabi_dmul+0x24a>
   bb550:	ea81 0103 	eor.w	r1, r1, r3
   bb554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb558:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb55c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb560:	f04f 0000 	mov.w	r0, #0
   bb564:	bd70      	pop	{r4, r5, r6, pc}
   bb566:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb56a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb56e:	bd70      	pop	{r4, r5, r6, pc}

000bb570 <__aeabi_ddiv>:
   bb570:	b570      	push	{r4, r5, r6, lr}
   bb572:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb57a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb57e:	bf1d      	ittte	ne
   bb580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb584:	ea94 0f0c 	teqne	r4, ip
   bb588:	ea95 0f0c 	teqne	r5, ip
   bb58c:	f000 f8a7 	bleq	bb6de <__aeabi_ddiv+0x16e>
   bb590:	eba4 0405 	sub.w	r4, r4, r5
   bb594:	ea81 0e03 	eor.w	lr, r1, r3
   bb598:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb59c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb5a0:	f000 8088 	beq.w	bb6b4 <__aeabi_ddiv+0x144>
   bb5a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb5a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb5ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb5b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb5b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb5b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb5bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb5c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb5c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb5c8:	429d      	cmp	r5, r3
   bb5ca:	bf08      	it	eq
   bb5cc:	4296      	cmpeq	r6, r2
   bb5ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb5d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb5d6:	d202      	bcs.n	bb5de <__aeabi_ddiv+0x6e>
   bb5d8:	085b      	lsrs	r3, r3, #1
   bb5da:	ea4f 0232 	mov.w	r2, r2, rrx
   bb5de:	1ab6      	subs	r6, r6, r2
   bb5e0:	eb65 0503 	sbc.w	r5, r5, r3
   bb5e4:	085b      	lsrs	r3, r3, #1
   bb5e6:	ea4f 0232 	mov.w	r2, r2, rrx
   bb5ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb5ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb5f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb5fa:	bf22      	ittt	cs
   bb5fc:	1ab6      	subcs	r6, r6, r2
   bb5fe:	4675      	movcs	r5, lr
   bb600:	ea40 000c 	orrcs.w	r0, r0, ip
   bb604:	085b      	lsrs	r3, r3, #1
   bb606:	ea4f 0232 	mov.w	r2, r2, rrx
   bb60a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb612:	bf22      	ittt	cs
   bb614:	1ab6      	subcs	r6, r6, r2
   bb616:	4675      	movcs	r5, lr
   bb618:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb61c:	085b      	lsrs	r3, r3, #1
   bb61e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb622:	ebb6 0e02 	subs.w	lr, r6, r2
   bb626:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb62a:	bf22      	ittt	cs
   bb62c:	1ab6      	subcs	r6, r6, r2
   bb62e:	4675      	movcs	r5, lr
   bb630:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb634:	085b      	lsrs	r3, r3, #1
   bb636:	ea4f 0232 	mov.w	r2, r2, rrx
   bb63a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb63e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb642:	bf22      	ittt	cs
   bb644:	1ab6      	subcs	r6, r6, r2
   bb646:	4675      	movcs	r5, lr
   bb648:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb64c:	ea55 0e06 	orrs.w	lr, r5, r6
   bb650:	d018      	beq.n	bb684 <__aeabi_ddiv+0x114>
   bb652:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb656:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb65a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb65e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb662:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb666:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb66a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb66e:	d1c0      	bne.n	bb5f2 <__aeabi_ddiv+0x82>
   bb670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb674:	d10b      	bne.n	bb68e <__aeabi_ddiv+0x11e>
   bb676:	ea41 0100 	orr.w	r1, r1, r0
   bb67a:	f04f 0000 	mov.w	r0, #0
   bb67e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb682:	e7b6      	b.n	bb5f2 <__aeabi_ddiv+0x82>
   bb684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb688:	bf04      	itt	eq
   bb68a:	4301      	orreq	r1, r0
   bb68c:	2000      	moveq	r0, #0
   bb68e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb692:	bf88      	it	hi
   bb694:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb698:	f63f aeaf 	bhi.w	bb3fa <__aeabi_dmul+0xde>
   bb69c:	ebb5 0c03 	subs.w	ip, r5, r3
   bb6a0:	bf04      	itt	eq
   bb6a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb6a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb6aa:	f150 0000 	adcs.w	r0, r0, #0
   bb6ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb6b2:	bd70      	pop	{r4, r5, r6, pc}
   bb6b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb6b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb6bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb6c0:	bfc2      	ittt	gt
   bb6c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb6c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb6ca:	bd70      	popgt	{r4, r5, r6, pc}
   bb6cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb6d0:	f04f 0e00 	mov.w	lr, #0
   bb6d4:	3c01      	subs	r4, #1
   bb6d6:	e690      	b.n	bb3fa <__aeabi_dmul+0xde>
   bb6d8:	ea45 0e06 	orr.w	lr, r5, r6
   bb6dc:	e68d      	b.n	bb3fa <__aeabi_dmul+0xde>
   bb6de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb6e2:	ea94 0f0c 	teq	r4, ip
   bb6e6:	bf08      	it	eq
   bb6e8:	ea95 0f0c 	teqeq	r5, ip
   bb6ec:	f43f af3b 	beq.w	bb566 <__aeabi_dmul+0x24a>
   bb6f0:	ea94 0f0c 	teq	r4, ip
   bb6f4:	d10a      	bne.n	bb70c <__aeabi_ddiv+0x19c>
   bb6f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb6fa:	f47f af34 	bne.w	bb566 <__aeabi_dmul+0x24a>
   bb6fe:	ea95 0f0c 	teq	r5, ip
   bb702:	f47f af25 	bne.w	bb550 <__aeabi_dmul+0x234>
   bb706:	4610      	mov	r0, r2
   bb708:	4619      	mov	r1, r3
   bb70a:	e72c      	b.n	bb566 <__aeabi_dmul+0x24a>
   bb70c:	ea95 0f0c 	teq	r5, ip
   bb710:	d106      	bne.n	bb720 <__aeabi_ddiv+0x1b0>
   bb712:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb716:	f43f aefd 	beq.w	bb514 <__aeabi_dmul+0x1f8>
   bb71a:	4610      	mov	r0, r2
   bb71c:	4619      	mov	r1, r3
   bb71e:	e722      	b.n	bb566 <__aeabi_dmul+0x24a>
   bb720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb724:	bf18      	it	ne
   bb726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb72a:	f47f aec5 	bne.w	bb4b8 <__aeabi_dmul+0x19c>
   bb72e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb732:	f47f af0d 	bne.w	bb550 <__aeabi_dmul+0x234>
   bb736:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb73a:	f47f aeeb 	bne.w	bb514 <__aeabi_dmul+0x1f8>
   bb73e:	e712      	b.n	bb566 <__aeabi_dmul+0x24a>

000bb740 <__gedf2>:
   bb740:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb744:	e006      	b.n	bb754 <__cmpdf2+0x4>
   bb746:	bf00      	nop

000bb748 <__ledf2>:
   bb748:	f04f 0c01 	mov.w	ip, #1
   bb74c:	e002      	b.n	bb754 <__cmpdf2+0x4>
   bb74e:	bf00      	nop

000bb750 <__cmpdf2>:
   bb750:	f04f 0c01 	mov.w	ip, #1
   bb754:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb75c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb764:	bf18      	it	ne
   bb766:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb76a:	d01b      	beq.n	bb7a4 <__cmpdf2+0x54>
   bb76c:	b001      	add	sp, #4
   bb76e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb772:	bf0c      	ite	eq
   bb774:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb778:	ea91 0f03 	teqne	r1, r3
   bb77c:	bf02      	ittt	eq
   bb77e:	ea90 0f02 	teqeq	r0, r2
   bb782:	2000      	moveq	r0, #0
   bb784:	4770      	bxeq	lr
   bb786:	f110 0f00 	cmn.w	r0, #0
   bb78a:	ea91 0f03 	teq	r1, r3
   bb78e:	bf58      	it	pl
   bb790:	4299      	cmppl	r1, r3
   bb792:	bf08      	it	eq
   bb794:	4290      	cmpeq	r0, r2
   bb796:	bf2c      	ite	cs
   bb798:	17d8      	asrcs	r0, r3, #31
   bb79a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb79e:	f040 0001 	orr.w	r0, r0, #1
   bb7a2:	4770      	bx	lr
   bb7a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb7a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb7ac:	d102      	bne.n	bb7b4 <__cmpdf2+0x64>
   bb7ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb7b2:	d107      	bne.n	bb7c4 <__cmpdf2+0x74>
   bb7b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb7b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb7bc:	d1d6      	bne.n	bb76c <__cmpdf2+0x1c>
   bb7be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb7c2:	d0d3      	beq.n	bb76c <__cmpdf2+0x1c>
   bb7c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb7c8:	4770      	bx	lr
   bb7ca:	bf00      	nop

000bb7cc <__aeabi_cdrcmple>:
   bb7cc:	4684      	mov	ip, r0
   bb7ce:	4610      	mov	r0, r2
   bb7d0:	4662      	mov	r2, ip
   bb7d2:	468c      	mov	ip, r1
   bb7d4:	4619      	mov	r1, r3
   bb7d6:	4663      	mov	r3, ip
   bb7d8:	e000      	b.n	bb7dc <__aeabi_cdcmpeq>
   bb7da:	bf00      	nop

000bb7dc <__aeabi_cdcmpeq>:
   bb7dc:	b501      	push	{r0, lr}
   bb7de:	f7ff ffb7 	bl	bb750 <__cmpdf2>
   bb7e2:	2800      	cmp	r0, #0
   bb7e4:	bf48      	it	mi
   bb7e6:	f110 0f00 	cmnmi.w	r0, #0
   bb7ea:	bd01      	pop	{r0, pc}

000bb7ec <__aeabi_dcmpeq>:
   bb7ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb7f0:	f7ff fff4 	bl	bb7dc <__aeabi_cdcmpeq>
   bb7f4:	bf0c      	ite	eq
   bb7f6:	2001      	moveq	r0, #1
   bb7f8:	2000      	movne	r0, #0
   bb7fa:	f85d fb08 	ldr.w	pc, [sp], #8
   bb7fe:	bf00      	nop

000bb800 <__aeabi_dcmplt>:
   bb800:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb804:	f7ff ffea 	bl	bb7dc <__aeabi_cdcmpeq>
   bb808:	bf34      	ite	cc
   bb80a:	2001      	movcc	r0, #1
   bb80c:	2000      	movcs	r0, #0
   bb80e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb812:	bf00      	nop

000bb814 <__aeabi_dcmple>:
   bb814:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb818:	f7ff ffe0 	bl	bb7dc <__aeabi_cdcmpeq>
   bb81c:	bf94      	ite	ls
   bb81e:	2001      	movls	r0, #1
   bb820:	2000      	movhi	r0, #0
   bb822:	f85d fb08 	ldr.w	pc, [sp], #8
   bb826:	bf00      	nop

000bb828 <__aeabi_dcmpge>:
   bb828:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb82c:	f7ff ffce 	bl	bb7cc <__aeabi_cdrcmple>
   bb830:	bf94      	ite	ls
   bb832:	2001      	movls	r0, #1
   bb834:	2000      	movhi	r0, #0
   bb836:	f85d fb08 	ldr.w	pc, [sp], #8
   bb83a:	bf00      	nop

000bb83c <__aeabi_dcmpgt>:
   bb83c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb840:	f7ff ffc4 	bl	bb7cc <__aeabi_cdrcmple>
   bb844:	bf34      	ite	cc
   bb846:	2001      	movcc	r0, #1
   bb848:	2000      	movcs	r0, #0
   bb84a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb84e:	bf00      	nop

000bb850 <__aeabi_dcmpun>:
   bb850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb858:	d102      	bne.n	bb860 <__aeabi_dcmpun+0x10>
   bb85a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb85e:	d10a      	bne.n	bb876 <__aeabi_dcmpun+0x26>
   bb860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb868:	d102      	bne.n	bb870 <__aeabi_dcmpun+0x20>
   bb86a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb86e:	d102      	bne.n	bb876 <__aeabi_dcmpun+0x26>
   bb870:	f04f 0000 	mov.w	r0, #0
   bb874:	4770      	bx	lr
   bb876:	f04f 0001 	mov.w	r0, #1
   bb87a:	4770      	bx	lr

000bb87c <__aeabi_d2iz>:
   bb87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb884:	d215      	bcs.n	bb8b2 <__aeabi_d2iz+0x36>
   bb886:	d511      	bpl.n	bb8ac <__aeabi_d2iz+0x30>
   bb888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb88c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb890:	d912      	bls.n	bb8b8 <__aeabi_d2iz+0x3c>
   bb892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb89a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb89e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb8a2:	fa23 f002 	lsr.w	r0, r3, r2
   bb8a6:	bf18      	it	ne
   bb8a8:	4240      	negne	r0, r0
   bb8aa:	4770      	bx	lr
   bb8ac:	f04f 0000 	mov.w	r0, #0
   bb8b0:	4770      	bx	lr
   bb8b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb8b6:	d105      	bne.n	bb8c4 <__aeabi_d2iz+0x48>
   bb8b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bb8bc:	bf08      	it	eq
   bb8be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bb8c2:	4770      	bx	lr
   bb8c4:	f04f 0000 	mov.w	r0, #0
   bb8c8:	4770      	bx	lr
   bb8ca:	bf00      	nop

000bb8cc <__aeabi_d2uiz>:
   bb8cc:	004a      	lsls	r2, r1, #1
   bb8ce:	d211      	bcs.n	bb8f4 <__aeabi_d2uiz+0x28>
   bb8d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb8d4:	d211      	bcs.n	bb8fa <__aeabi_d2uiz+0x2e>
   bb8d6:	d50d      	bpl.n	bb8f4 <__aeabi_d2uiz+0x28>
   bb8d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb8dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb8e0:	d40e      	bmi.n	bb900 <__aeabi_d2uiz+0x34>
   bb8e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb8e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb8ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb8ee:	fa23 f002 	lsr.w	r0, r3, r2
   bb8f2:	4770      	bx	lr
   bb8f4:	f04f 0000 	mov.w	r0, #0
   bb8f8:	4770      	bx	lr
   bb8fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb8fe:	d102      	bne.n	bb906 <__aeabi_d2uiz+0x3a>
   bb900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb904:	4770      	bx	lr
   bb906:	f04f 0000 	mov.w	r0, #0
   bb90a:	4770      	bx	lr

000bb90c <__aeabi_d2f>:
   bb90c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb914:	bf24      	itt	cs
   bb916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb91a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb91e:	d90d      	bls.n	bb93c <__aeabi_d2f+0x30>
   bb920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb92c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb934:	bf08      	it	eq
   bb936:	f020 0001 	biceq.w	r0, r0, #1
   bb93a:	4770      	bx	lr
   bb93c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb940:	d121      	bne.n	bb986 <__aeabi_d2f+0x7a>
   bb942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb946:	bfbc      	itt	lt
   bb948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb94c:	4770      	bxlt	lr
   bb94e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb956:	f1c2 0218 	rsb	r2, r2, #24
   bb95a:	f1c2 0c20 	rsb	ip, r2, #32
   bb95e:	fa10 f30c 	lsls.w	r3, r0, ip
   bb962:	fa20 f002 	lsr.w	r0, r0, r2
   bb966:	bf18      	it	ne
   bb968:	f040 0001 	orrne.w	r0, r0, #1
   bb96c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb974:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb978:	ea40 000c 	orr.w	r0, r0, ip
   bb97c:	fa23 f302 	lsr.w	r3, r3, r2
   bb980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb984:	e7cc      	b.n	bb920 <__aeabi_d2f+0x14>
   bb986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb98a:	d107      	bne.n	bb99c <__aeabi_d2f+0x90>
   bb98c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb990:	bf1e      	ittt	ne
   bb992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb99a:	4770      	bxne	lr
   bb99c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb9a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb9a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb9a8:	4770      	bx	lr
   bb9aa:	bf00      	nop

000bb9ac <asctime_r>:
   bb9ac:	b510      	push	{r4, lr}
   bb9ae:	460c      	mov	r4, r1
   bb9b0:	6941      	ldr	r1, [r0, #20]
   bb9b2:	6903      	ldr	r3, [r0, #16]
   bb9b4:	6982      	ldr	r2, [r0, #24]
   bb9b6:	b086      	sub	sp, #24
   bb9b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bb9bc:	9104      	str	r1, [sp, #16]
   bb9be:	6801      	ldr	r1, [r0, #0]
   bb9c0:	9103      	str	r1, [sp, #12]
   bb9c2:	6841      	ldr	r1, [r0, #4]
   bb9c4:	9102      	str	r1, [sp, #8]
   bb9c6:	6881      	ldr	r1, [r0, #8]
   bb9c8:	9101      	str	r1, [sp, #4]
   bb9ca:	68c1      	ldr	r1, [r0, #12]
   bb9cc:	9100      	str	r1, [sp, #0]
   bb9ce:	4907      	ldr	r1, [pc, #28]	; (bb9ec <asctime_r+0x40>)
   bb9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb9d4:	440b      	add	r3, r1
   bb9d6:	4906      	ldr	r1, [pc, #24]	; (bb9f0 <asctime_r+0x44>)
   bb9d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb9dc:	440a      	add	r2, r1
   bb9de:	4620      	mov	r0, r4
   bb9e0:	4904      	ldr	r1, [pc, #16]	; (bb9f4 <asctime_r+0x48>)
   bb9e2:	f7fd fbc1 	bl	b9168 <siprintf>
   bb9e6:	4620      	mov	r0, r4
   bb9e8:	b006      	add	sp, #24
   bb9ea:	bd10      	pop	{r4, pc}
   bb9ec:	000bcede 	.word	0x000bcede
   bb9f0:	000bcec9 	.word	0x000bcec9
   bb9f4:	000bcea9 	.word	0x000bcea9

000bb9f8 <atexit>:
   bb9f8:	2300      	movs	r3, #0
   bb9fa:	4601      	mov	r1, r0
   bb9fc:	461a      	mov	r2, r3
   bb9fe:	4618      	mov	r0, r3
   bba00:	f000 b9c2 	b.w	bbd88 <__register_exitproc>

000bba04 <atoi>:
   bba04:	220a      	movs	r2, #10
   bba06:	2100      	movs	r1, #0
   bba08:	f000 b948 	b.w	bbc9c <strtol>

000bba0c <gmtime>:
   bba0c:	b538      	push	{r3, r4, r5, lr}
   bba0e:	4b0b      	ldr	r3, [pc, #44]	; (bba3c <gmtime+0x30>)
   bba10:	681d      	ldr	r5, [r3, #0]
   bba12:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bba14:	4604      	mov	r4, r0
   bba16:	b953      	cbnz	r3, bba2e <gmtime+0x22>
   bba18:	2024      	movs	r0, #36	; 0x24
   bba1a:	f7fd fb8d 	bl	b9138 <malloc>
   bba1e:	4602      	mov	r2, r0
   bba20:	63e8      	str	r0, [r5, #60]	; 0x3c
   bba22:	b920      	cbnz	r0, bba2e <gmtime+0x22>
   bba24:	4b06      	ldr	r3, [pc, #24]	; (bba40 <gmtime+0x34>)
   bba26:	4807      	ldr	r0, [pc, #28]	; (bba44 <gmtime+0x38>)
   bba28:	2139      	movs	r1, #57	; 0x39
   bba2a:	f7fd fbd5 	bl	b91d8 <__assert_func>
   bba2e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bba30:	4620      	mov	r0, r4
   bba32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bba36:	f7fd bbef 	b.w	b9218 <gmtime_r>
   bba3a:	bf00      	nop
   bba3c:	2003e378 	.word	0x2003e378
   bba40:	000bcf02 	.word	0x000bcf02
   bba44:	000bcf19 	.word	0x000bcf19

000bba48 <memcpy>:
   bba48:	440a      	add	r2, r1
   bba4a:	4291      	cmp	r1, r2
   bba4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bba50:	d100      	bne.n	bba54 <memcpy+0xc>
   bba52:	4770      	bx	lr
   bba54:	b510      	push	{r4, lr}
   bba56:	f811 4b01 	ldrb.w	r4, [r1], #1
   bba5a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bba5e:	4291      	cmp	r1, r2
   bba60:	d1f9      	bne.n	bba56 <memcpy+0xe>
   bba62:	bd10      	pop	{r4, pc}

000bba64 <memmove>:
   bba64:	4288      	cmp	r0, r1
   bba66:	b510      	push	{r4, lr}
   bba68:	eb01 0402 	add.w	r4, r1, r2
   bba6c:	d902      	bls.n	bba74 <memmove+0x10>
   bba6e:	4284      	cmp	r4, r0
   bba70:	4623      	mov	r3, r4
   bba72:	d807      	bhi.n	bba84 <memmove+0x20>
   bba74:	1e43      	subs	r3, r0, #1
   bba76:	42a1      	cmp	r1, r4
   bba78:	d008      	beq.n	bba8c <memmove+0x28>
   bba7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bba7e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bba82:	e7f8      	b.n	bba76 <memmove+0x12>
   bba84:	4402      	add	r2, r0
   bba86:	4601      	mov	r1, r0
   bba88:	428a      	cmp	r2, r1
   bba8a:	d100      	bne.n	bba8e <memmove+0x2a>
   bba8c:	bd10      	pop	{r4, pc}
   bba8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bba92:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bba96:	e7f7      	b.n	bba88 <memmove+0x24>

000bba98 <memset>:
   bba98:	4402      	add	r2, r0
   bba9a:	4603      	mov	r3, r0
   bba9c:	4293      	cmp	r3, r2
   bba9e:	d100      	bne.n	bbaa2 <memset+0xa>
   bbaa0:	4770      	bx	lr
   bbaa2:	f803 1b01 	strb.w	r1, [r3], #1
   bbaa6:	e7f9      	b.n	bba9c <memset+0x4>

000bbaa8 <srand>:
   bbaa8:	b538      	push	{r3, r4, r5, lr}
   bbaaa:	4b10      	ldr	r3, [pc, #64]	; (bbaec <srand+0x44>)
   bbaac:	681d      	ldr	r5, [r3, #0]
   bbaae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbab0:	4604      	mov	r4, r0
   bbab2:	b9b3      	cbnz	r3, bbae2 <srand+0x3a>
   bbab4:	2018      	movs	r0, #24
   bbab6:	f7fd fb3f 	bl	b9138 <malloc>
   bbaba:	4602      	mov	r2, r0
   bbabc:	63a8      	str	r0, [r5, #56]	; 0x38
   bbabe:	b920      	cbnz	r0, bbaca <srand+0x22>
   bbac0:	4b0b      	ldr	r3, [pc, #44]	; (bbaf0 <srand+0x48>)
   bbac2:	480c      	ldr	r0, [pc, #48]	; (bbaf4 <srand+0x4c>)
   bbac4:	2142      	movs	r1, #66	; 0x42
   bbac6:	f7fd fb87 	bl	b91d8 <__assert_func>
   bbaca:	490b      	ldr	r1, [pc, #44]	; (bbaf8 <srand+0x50>)
   bbacc:	4b0b      	ldr	r3, [pc, #44]	; (bbafc <srand+0x54>)
   bbace:	e9c0 1300 	strd	r1, r3, [r0]
   bbad2:	4b0b      	ldr	r3, [pc, #44]	; (bbb00 <srand+0x58>)
   bbad4:	6083      	str	r3, [r0, #8]
   bbad6:	230b      	movs	r3, #11
   bbad8:	8183      	strh	r3, [r0, #12]
   bbada:	2100      	movs	r1, #0
   bbadc:	2001      	movs	r0, #1
   bbade:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbae2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbae4:	2200      	movs	r2, #0
   bbae6:	611c      	str	r4, [r3, #16]
   bbae8:	615a      	str	r2, [r3, #20]
   bbaea:	bd38      	pop	{r3, r4, r5, pc}
   bbaec:	2003e378 	.word	0x2003e378
   bbaf0:	000bcf02 	.word	0x000bcf02
   bbaf4:	000bcf72 	.word	0x000bcf72
   bbaf8:	abcd330e 	.word	0xabcd330e
   bbafc:	e66d1234 	.word	0xe66d1234
   bbb00:	0005deec 	.word	0x0005deec

000bbb04 <strcmp>:
   bbb04:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbb08:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbb0c:	2a01      	cmp	r2, #1
   bbb0e:	bf28      	it	cs
   bbb10:	429a      	cmpcs	r2, r3
   bbb12:	d0f7      	beq.n	bbb04 <strcmp>
   bbb14:	1ad0      	subs	r0, r2, r3
   bbb16:	4770      	bx	lr

000bbb18 <strcpy>:
   bbb18:	4603      	mov	r3, r0
   bbb1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb1e:	f803 2b01 	strb.w	r2, [r3], #1
   bbb22:	2a00      	cmp	r2, #0
   bbb24:	d1f9      	bne.n	bbb1a <strcpy+0x2>
   bbb26:	4770      	bx	lr

000bbb28 <strdup>:
   bbb28:	4b02      	ldr	r3, [pc, #8]	; (bbb34 <strdup+0xc>)
   bbb2a:	4601      	mov	r1, r0
   bbb2c:	6818      	ldr	r0, [r3, #0]
   bbb2e:	f000 b803 	b.w	bbb38 <_strdup_r>
   bbb32:	bf00      	nop
   bbb34:	2003e378 	.word	0x2003e378

000bbb38 <_strdup_r>:
   bbb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbb3a:	4604      	mov	r4, r0
   bbb3c:	4608      	mov	r0, r1
   bbb3e:	460d      	mov	r5, r1
   bbb40:	f000 f80f 	bl	bbb62 <strlen>
   bbb44:	1c42      	adds	r2, r0, #1
   bbb46:	4611      	mov	r1, r2
   bbb48:	4620      	mov	r0, r4
   bbb4a:	9201      	str	r2, [sp, #4]
   bbb4c:	f7fd fb34 	bl	b91b8 <_malloc_r>
   bbb50:	4604      	mov	r4, r0
   bbb52:	b118      	cbz	r0, bbb5c <_strdup_r+0x24>
   bbb54:	9a01      	ldr	r2, [sp, #4]
   bbb56:	4629      	mov	r1, r5
   bbb58:	f7ff ff76 	bl	bba48 <memcpy>
   bbb5c:	4620      	mov	r0, r4
   bbb5e:	b003      	add	sp, #12
   bbb60:	bd30      	pop	{r4, r5, pc}

000bbb62 <strlen>:
   bbb62:	4603      	mov	r3, r0
   bbb64:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbb68:	2a00      	cmp	r2, #0
   bbb6a:	d1fb      	bne.n	bbb64 <strlen+0x2>
   bbb6c:	1a18      	subs	r0, r3, r0
   bbb6e:	3801      	subs	r0, #1
   bbb70:	4770      	bx	lr

000bbb72 <strncpy>:
   bbb72:	b510      	push	{r4, lr}
   bbb74:	3901      	subs	r1, #1
   bbb76:	4603      	mov	r3, r0
   bbb78:	b132      	cbz	r2, bbb88 <strncpy+0x16>
   bbb7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbb7e:	f803 4b01 	strb.w	r4, [r3], #1
   bbb82:	3a01      	subs	r2, #1
   bbb84:	2c00      	cmp	r4, #0
   bbb86:	d1f7      	bne.n	bbb78 <strncpy+0x6>
   bbb88:	441a      	add	r2, r3
   bbb8a:	2100      	movs	r1, #0
   bbb8c:	4293      	cmp	r3, r2
   bbb8e:	d100      	bne.n	bbb92 <strncpy+0x20>
   bbb90:	bd10      	pop	{r4, pc}
   bbb92:	f803 1b01 	strb.w	r1, [r3], #1
   bbb96:	e7f9      	b.n	bbb8c <strncpy+0x1a>

000bbb98 <_strtol_l.constprop.0>:
   bbb98:	2b01      	cmp	r3, #1
   bbb9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbb9e:	d001      	beq.n	bbba4 <_strtol_l.constprop.0+0xc>
   bbba0:	2b24      	cmp	r3, #36	; 0x24
   bbba2:	d906      	bls.n	bbbb2 <_strtol_l.constprop.0+0x1a>
   bbba4:	f7fd fb10 	bl	b91c8 <__errno>
   bbba8:	2316      	movs	r3, #22
   bbbaa:	6003      	str	r3, [r0, #0]
   bbbac:	2000      	movs	r0, #0
   bbbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbbb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbc98 <_strtol_l.constprop.0+0x100>
   bbbb6:	460d      	mov	r5, r1
   bbbb8:	462e      	mov	r6, r5
   bbbba:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbbbe:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbbc2:	f017 0708 	ands.w	r7, r7, #8
   bbbc6:	d1f7      	bne.n	bbbb8 <_strtol_l.constprop.0+0x20>
   bbbc8:	2c2d      	cmp	r4, #45	; 0x2d
   bbbca:	d132      	bne.n	bbc32 <_strtol_l.constprop.0+0x9a>
   bbbcc:	782c      	ldrb	r4, [r5, #0]
   bbbce:	2701      	movs	r7, #1
   bbbd0:	1cb5      	adds	r5, r6, #2
   bbbd2:	2b00      	cmp	r3, #0
   bbbd4:	d05b      	beq.n	bbc8e <_strtol_l.constprop.0+0xf6>
   bbbd6:	2b10      	cmp	r3, #16
   bbbd8:	d109      	bne.n	bbbee <_strtol_l.constprop.0+0x56>
   bbbda:	2c30      	cmp	r4, #48	; 0x30
   bbbdc:	d107      	bne.n	bbbee <_strtol_l.constprop.0+0x56>
   bbbde:	782c      	ldrb	r4, [r5, #0]
   bbbe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbbe4:	2c58      	cmp	r4, #88	; 0x58
   bbbe6:	d14d      	bne.n	bbc84 <_strtol_l.constprop.0+0xec>
   bbbe8:	786c      	ldrb	r4, [r5, #1]
   bbbea:	2310      	movs	r3, #16
   bbbec:	3502      	adds	r5, #2
   bbbee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbbf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbbf6:	f04f 0c00 	mov.w	ip, #0
   bbbfa:	fbb8 f9f3 	udiv	r9, r8, r3
   bbbfe:	4666      	mov	r6, ip
   bbc00:	fb03 8a19 	mls	sl, r3, r9, r8
   bbc04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbc08:	f1be 0f09 	cmp.w	lr, #9
   bbc0c:	d816      	bhi.n	bbc3c <_strtol_l.constprop.0+0xa4>
   bbc0e:	4674      	mov	r4, lr
   bbc10:	42a3      	cmp	r3, r4
   bbc12:	dd24      	ble.n	bbc5e <_strtol_l.constprop.0+0xc6>
   bbc14:	f1bc 0f00 	cmp.w	ip, #0
   bbc18:	db1e      	blt.n	bbc58 <_strtol_l.constprop.0+0xc0>
   bbc1a:	45b1      	cmp	r9, r6
   bbc1c:	d31c      	bcc.n	bbc58 <_strtol_l.constprop.0+0xc0>
   bbc1e:	d101      	bne.n	bbc24 <_strtol_l.constprop.0+0x8c>
   bbc20:	45a2      	cmp	sl, r4
   bbc22:	db19      	blt.n	bbc58 <_strtol_l.constprop.0+0xc0>
   bbc24:	fb06 4603 	mla	r6, r6, r3, r4
   bbc28:	f04f 0c01 	mov.w	ip, #1
   bbc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbc30:	e7e8      	b.n	bbc04 <_strtol_l.constprop.0+0x6c>
   bbc32:	2c2b      	cmp	r4, #43	; 0x2b
   bbc34:	bf04      	itt	eq
   bbc36:	782c      	ldrbeq	r4, [r5, #0]
   bbc38:	1cb5      	addeq	r5, r6, #2
   bbc3a:	e7ca      	b.n	bbbd2 <_strtol_l.constprop.0+0x3a>
   bbc3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbc40:	f1be 0f19 	cmp.w	lr, #25
   bbc44:	d801      	bhi.n	bbc4a <_strtol_l.constprop.0+0xb2>
   bbc46:	3c37      	subs	r4, #55	; 0x37
   bbc48:	e7e2      	b.n	bbc10 <_strtol_l.constprop.0+0x78>
   bbc4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbc4e:	f1be 0f19 	cmp.w	lr, #25
   bbc52:	d804      	bhi.n	bbc5e <_strtol_l.constprop.0+0xc6>
   bbc54:	3c57      	subs	r4, #87	; 0x57
   bbc56:	e7db      	b.n	bbc10 <_strtol_l.constprop.0+0x78>
   bbc58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbc5c:	e7e6      	b.n	bbc2c <_strtol_l.constprop.0+0x94>
   bbc5e:	f1bc 0f00 	cmp.w	ip, #0
   bbc62:	da05      	bge.n	bbc70 <_strtol_l.constprop.0+0xd8>
   bbc64:	2322      	movs	r3, #34	; 0x22
   bbc66:	6003      	str	r3, [r0, #0]
   bbc68:	4646      	mov	r6, r8
   bbc6a:	b942      	cbnz	r2, bbc7e <_strtol_l.constprop.0+0xe6>
   bbc6c:	4630      	mov	r0, r6
   bbc6e:	e79e      	b.n	bbbae <_strtol_l.constprop.0+0x16>
   bbc70:	b107      	cbz	r7, bbc74 <_strtol_l.constprop.0+0xdc>
   bbc72:	4276      	negs	r6, r6
   bbc74:	2a00      	cmp	r2, #0
   bbc76:	d0f9      	beq.n	bbc6c <_strtol_l.constprop.0+0xd4>
   bbc78:	f1bc 0f00 	cmp.w	ip, #0
   bbc7c:	d000      	beq.n	bbc80 <_strtol_l.constprop.0+0xe8>
   bbc7e:	1e69      	subs	r1, r5, #1
   bbc80:	6011      	str	r1, [r2, #0]
   bbc82:	e7f3      	b.n	bbc6c <_strtol_l.constprop.0+0xd4>
   bbc84:	2430      	movs	r4, #48	; 0x30
   bbc86:	2b00      	cmp	r3, #0
   bbc88:	d1b1      	bne.n	bbbee <_strtol_l.constprop.0+0x56>
   bbc8a:	2308      	movs	r3, #8
   bbc8c:	e7af      	b.n	bbbee <_strtol_l.constprop.0+0x56>
   bbc8e:	2c30      	cmp	r4, #48	; 0x30
   bbc90:	d0a5      	beq.n	bbbde <_strtol_l.constprop.0+0x46>
   bbc92:	230a      	movs	r3, #10
   bbc94:	e7ab      	b.n	bbbee <_strtol_l.constprop.0+0x56>
   bbc96:	bf00      	nop
   bbc98:	000bcfcc 	.word	0x000bcfcc

000bbc9c <strtol>:
   bbc9c:	4613      	mov	r3, r2
   bbc9e:	460a      	mov	r2, r1
   bbca0:	4601      	mov	r1, r0
   bbca2:	4802      	ldr	r0, [pc, #8]	; (bbcac <strtol+0x10>)
   bbca4:	6800      	ldr	r0, [r0, #0]
   bbca6:	f7ff bf77 	b.w	bbb98 <_strtol_l.constprop.0>
   bbcaa:	bf00      	nop
   bbcac:	2003e378 	.word	0x2003e378

000bbcb0 <close>:
   bbcb0:	4b02      	ldr	r3, [pc, #8]	; (bbcbc <close+0xc>)
   bbcb2:	4601      	mov	r1, r0
   bbcb4:	6818      	ldr	r0, [r3, #0]
   bbcb6:	f000 b8c9 	b.w	bbe4c <_close_r>
   bbcba:	bf00      	nop
   bbcbc:	2003e378 	.word	0x2003e378

000bbcc0 <fstat>:
   bbcc0:	4b02      	ldr	r3, [pc, #8]	; (bbccc <fstat+0xc>)
   bbcc2:	460a      	mov	r2, r1
   bbcc4:	4601      	mov	r1, r0
   bbcc6:	6818      	ldr	r0, [r3, #0]
   bbcc8:	f000 b8d0 	b.w	bbe6c <_fstat_r>
   bbccc:	2003e378 	.word	0x2003e378

000bbcd0 <lseek>:
   bbcd0:	4613      	mov	r3, r2
   bbcd2:	460a      	mov	r2, r1
   bbcd4:	4601      	mov	r1, r0
   bbcd6:	4802      	ldr	r0, [pc, #8]	; (bbce0 <lseek+0x10>)
   bbcd8:	6800      	ldr	r0, [r0, #0]
   bbcda:	f000 b8dd 	b.w	bbe98 <_lseek_r>
   bbcde:	bf00      	nop
   bbce0:	2003e378 	.word	0x2003e378

000bbce4 <open>:
   bbce4:	b40e      	push	{r1, r2, r3}
   bbce6:	b503      	push	{r0, r1, lr}
   bbce8:	ab03      	add	r3, sp, #12
   bbcea:	4601      	mov	r1, r0
   bbcec:	4806      	ldr	r0, [pc, #24]	; (bbd08 <open+0x24>)
   bbcee:	f853 2b04 	ldr.w	r2, [r3], #4
   bbcf2:	9301      	str	r3, [sp, #4]
   bbcf4:	6800      	ldr	r0, [r0, #0]
   bbcf6:	9b04      	ldr	r3, [sp, #16]
   bbcf8:	f000 f8e0 	bl	bbebc <_open_r>
   bbcfc:	b002      	add	sp, #8
   bbcfe:	f85d eb04 	ldr.w	lr, [sp], #4
   bbd02:	b003      	add	sp, #12
   bbd04:	4770      	bx	lr
   bbd06:	bf00      	nop
   bbd08:	2003e378 	.word	0x2003e378

000bbd0c <read>:
   bbd0c:	4613      	mov	r3, r2
   bbd0e:	460a      	mov	r2, r1
   bbd10:	4601      	mov	r1, r0
   bbd12:	4802      	ldr	r0, [pc, #8]	; (bbd1c <read+0x10>)
   bbd14:	6800      	ldr	r0, [r0, #0]
   bbd16:	f000 b8e3 	b.w	bbee0 <_read_r>
   bbd1a:	bf00      	nop
   bbd1c:	2003e378 	.word	0x2003e378

000bbd20 <unlink>:
   bbd20:	4b02      	ldr	r3, [pc, #8]	; (bbd2c <unlink+0xc>)
   bbd22:	4601      	mov	r1, r0
   bbd24:	6818      	ldr	r0, [r3, #0]
   bbd26:	f000 b80d 	b.w	bbd44 <_unlink_r>
   bbd2a:	bf00      	nop
   bbd2c:	2003e378 	.word	0x2003e378

000bbd30 <write>:
   bbd30:	4613      	mov	r3, r2
   bbd32:	460a      	mov	r2, r1
   bbd34:	4601      	mov	r1, r0
   bbd36:	4802      	ldr	r0, [pc, #8]	; (bbd40 <write+0x10>)
   bbd38:	6800      	ldr	r0, [r0, #0]
   bbd3a:	f000 b813 	b.w	bbd64 <_write_r>
   bbd3e:	bf00      	nop
   bbd40:	2003e378 	.word	0x2003e378

000bbd44 <_unlink_r>:
   bbd44:	b538      	push	{r3, r4, r5, lr}
   bbd46:	4d06      	ldr	r5, [pc, #24]	; (bbd60 <_unlink_r+0x1c>)
   bbd48:	2300      	movs	r3, #0
   bbd4a:	4604      	mov	r4, r0
   bbd4c:	4608      	mov	r0, r1
   bbd4e:	602b      	str	r3, [r5, #0]
   bbd50:	f7fc fff8 	bl	b8d44 <_unlink>
   bbd54:	1c43      	adds	r3, r0, #1
   bbd56:	d102      	bne.n	bbd5e <_unlink_r+0x1a>
   bbd58:	682b      	ldr	r3, [r5, #0]
   bbd5a:	b103      	cbz	r3, bbd5e <_unlink_r+0x1a>
   bbd5c:	6023      	str	r3, [r4, #0]
   bbd5e:	bd38      	pop	{r3, r4, r5, pc}
   bbd60:	2003e7ec 	.word	0x2003e7ec

000bbd64 <_write_r>:
   bbd64:	b538      	push	{r3, r4, r5, lr}
   bbd66:	4d07      	ldr	r5, [pc, #28]	; (bbd84 <_write_r+0x20>)
   bbd68:	4604      	mov	r4, r0
   bbd6a:	4608      	mov	r0, r1
   bbd6c:	4611      	mov	r1, r2
   bbd6e:	2200      	movs	r2, #0
   bbd70:	602a      	str	r2, [r5, #0]
   bbd72:	461a      	mov	r2, r3
   bbd74:	f7fc ffae 	bl	b8cd4 <_write>
   bbd78:	1c43      	adds	r3, r0, #1
   bbd7a:	d102      	bne.n	bbd82 <_write_r+0x1e>
   bbd7c:	682b      	ldr	r3, [r5, #0]
   bbd7e:	b103      	cbz	r3, bbd82 <_write_r+0x1e>
   bbd80:	6023      	str	r3, [r4, #0]
   bbd82:	bd38      	pop	{r3, r4, r5, pc}
   bbd84:	2003e7ec 	.word	0x2003e7ec

000bbd88 <__register_exitproc>:
   bbd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbd8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbe48 <__register_exitproc+0xc0>
   bbd90:	4606      	mov	r6, r0
   bbd92:	f8d8 0000 	ldr.w	r0, [r8]
   bbd96:	461f      	mov	r7, r3
   bbd98:	460d      	mov	r5, r1
   bbd9a:	4691      	mov	r9, r2
   bbd9c:	f000 f878 	bl	bbe90 <__retarget_lock_acquire_recursive>
   bbda0:	4b25      	ldr	r3, [pc, #148]	; (bbe38 <__register_exitproc+0xb0>)
   bbda2:	681c      	ldr	r4, [r3, #0]
   bbda4:	b934      	cbnz	r4, bbdb4 <__register_exitproc+0x2c>
   bbda6:	4c25      	ldr	r4, [pc, #148]	; (bbe3c <__register_exitproc+0xb4>)
   bbda8:	601c      	str	r4, [r3, #0]
   bbdaa:	4b25      	ldr	r3, [pc, #148]	; (bbe40 <__register_exitproc+0xb8>)
   bbdac:	b113      	cbz	r3, bbdb4 <__register_exitproc+0x2c>
   bbdae:	681b      	ldr	r3, [r3, #0]
   bbdb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbdb4:	6863      	ldr	r3, [r4, #4]
   bbdb6:	2b1f      	cmp	r3, #31
   bbdb8:	dd07      	ble.n	bbdca <__register_exitproc+0x42>
   bbdba:	f8d8 0000 	ldr.w	r0, [r8]
   bbdbe:	f000 f869 	bl	bbe94 <__retarget_lock_release_recursive>
   bbdc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbdca:	b34e      	cbz	r6, bbe20 <__register_exitproc+0x98>
   bbdcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbdd0:	b988      	cbnz	r0, bbdf6 <__register_exitproc+0x6e>
   bbdd2:	4b1c      	ldr	r3, [pc, #112]	; (bbe44 <__register_exitproc+0xbc>)
   bbdd4:	b923      	cbnz	r3, bbde0 <__register_exitproc+0x58>
   bbdd6:	f8d8 0000 	ldr.w	r0, [r8]
   bbdda:	f000 f85a 	bl	bbe92 <__retarget_lock_release>
   bbdde:	e7f0      	b.n	bbdc2 <__register_exitproc+0x3a>
   bbde0:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbde4:	f7fd f9a8 	bl	b9138 <malloc>
   bbde8:	2800      	cmp	r0, #0
   bbdea:	d0f4      	beq.n	bbdd6 <__register_exitproc+0x4e>
   bbdec:	2300      	movs	r3, #0
   bbdee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbdf2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbdf6:	6863      	ldr	r3, [r4, #4]
   bbdf8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbdfc:	2201      	movs	r2, #1
   bbdfe:	409a      	lsls	r2, r3
   bbe00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbe04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbe08:	4313      	orrs	r3, r2
   bbe0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbe0e:	2e02      	cmp	r6, #2
   bbe10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbe14:	bf02      	ittt	eq
   bbe16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbe1a:	4313      	orreq	r3, r2
   bbe1c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbe20:	6863      	ldr	r3, [r4, #4]
   bbe22:	f8d8 0000 	ldr.w	r0, [r8]
   bbe26:	1c5a      	adds	r2, r3, #1
   bbe28:	3302      	adds	r3, #2
   bbe2a:	6062      	str	r2, [r4, #4]
   bbe2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbe30:	f000 f830 	bl	bbe94 <__retarget_lock_release_recursive>
   bbe34:	2000      	movs	r0, #0
   bbe36:	e7c6      	b.n	bbdc6 <__register_exitproc+0x3e>
   bbe38:	2003e7e4 	.word	0x2003e7e4
   bbe3c:	2003e758 	.word	0x2003e758
   bbe40:	00000000 	.word	0x00000000
   bbe44:	000b9139 	.word	0x000b9139
   bbe48:	2003e3dc 	.word	0x2003e3dc

000bbe4c <_close_r>:
   bbe4c:	b538      	push	{r3, r4, r5, lr}
   bbe4e:	4d06      	ldr	r5, [pc, #24]	; (bbe68 <_close_r+0x1c>)
   bbe50:	2300      	movs	r3, #0
   bbe52:	4604      	mov	r4, r0
   bbe54:	4608      	mov	r0, r1
   bbe56:	602b      	str	r3, [r5, #0]
   bbe58:	f7fc ff4c 	bl	b8cf4 <_close>
   bbe5c:	1c43      	adds	r3, r0, #1
   bbe5e:	d102      	bne.n	bbe66 <_close_r+0x1a>
   bbe60:	682b      	ldr	r3, [r5, #0]
   bbe62:	b103      	cbz	r3, bbe66 <_close_r+0x1a>
   bbe64:	6023      	str	r3, [r4, #0]
   bbe66:	bd38      	pop	{r3, r4, r5, pc}
   bbe68:	2003e7ec 	.word	0x2003e7ec

000bbe6c <_fstat_r>:
   bbe6c:	b538      	push	{r3, r4, r5, lr}
   bbe6e:	4d07      	ldr	r5, [pc, #28]	; (bbe8c <_fstat_r+0x20>)
   bbe70:	2300      	movs	r3, #0
   bbe72:	4604      	mov	r4, r0
   bbe74:	4608      	mov	r0, r1
   bbe76:	4611      	mov	r1, r2
   bbe78:	602b      	str	r3, [r5, #0]
   bbe7a:	f7fc ff43 	bl	b8d04 <_fstat>
   bbe7e:	1c43      	adds	r3, r0, #1
   bbe80:	d102      	bne.n	bbe88 <_fstat_r+0x1c>
   bbe82:	682b      	ldr	r3, [r5, #0]
   bbe84:	b103      	cbz	r3, bbe88 <_fstat_r+0x1c>
   bbe86:	6023      	str	r3, [r4, #0]
   bbe88:	bd38      	pop	{r3, r4, r5, pc}
   bbe8a:	bf00      	nop
   bbe8c:	2003e7ec 	.word	0x2003e7ec

000bbe90 <__retarget_lock_acquire_recursive>:
   bbe90:	4770      	bx	lr

000bbe92 <__retarget_lock_release>:
   bbe92:	4770      	bx	lr

000bbe94 <__retarget_lock_release_recursive>:
   bbe94:	4770      	bx	lr
	...

000bbe98 <_lseek_r>:
   bbe98:	b538      	push	{r3, r4, r5, lr}
   bbe9a:	4d07      	ldr	r5, [pc, #28]	; (bbeb8 <_lseek_r+0x20>)
   bbe9c:	4604      	mov	r4, r0
   bbe9e:	4608      	mov	r0, r1
   bbea0:	4611      	mov	r1, r2
   bbea2:	2200      	movs	r2, #0
   bbea4:	602a      	str	r2, [r5, #0]
   bbea6:	461a      	mov	r2, r3
   bbea8:	f7fc ff34 	bl	b8d14 <_lseek>
   bbeac:	1c43      	adds	r3, r0, #1
   bbeae:	d102      	bne.n	bbeb6 <_lseek_r+0x1e>
   bbeb0:	682b      	ldr	r3, [r5, #0]
   bbeb2:	b103      	cbz	r3, bbeb6 <_lseek_r+0x1e>
   bbeb4:	6023      	str	r3, [r4, #0]
   bbeb6:	bd38      	pop	{r3, r4, r5, pc}
   bbeb8:	2003e7ec 	.word	0x2003e7ec

000bbebc <_open_r>:
   bbebc:	b538      	push	{r3, r4, r5, lr}
   bbebe:	4d07      	ldr	r5, [pc, #28]	; (bbedc <_open_r+0x20>)
   bbec0:	4604      	mov	r4, r0
   bbec2:	4608      	mov	r0, r1
   bbec4:	4611      	mov	r1, r2
   bbec6:	2200      	movs	r2, #0
   bbec8:	602a      	str	r2, [r5, #0]
   bbeca:	461a      	mov	r2, r3
   bbecc:	f7fc fefa 	bl	b8cc4 <_open>
   bbed0:	1c43      	adds	r3, r0, #1
   bbed2:	d102      	bne.n	bbeda <_open_r+0x1e>
   bbed4:	682b      	ldr	r3, [r5, #0]
   bbed6:	b103      	cbz	r3, bbeda <_open_r+0x1e>
   bbed8:	6023      	str	r3, [r4, #0]
   bbeda:	bd38      	pop	{r3, r4, r5, pc}
   bbedc:	2003e7ec 	.word	0x2003e7ec

000bbee0 <_read_r>:
   bbee0:	b538      	push	{r3, r4, r5, lr}
   bbee2:	4d07      	ldr	r5, [pc, #28]	; (bbf00 <_read_r+0x20>)
   bbee4:	4604      	mov	r4, r0
   bbee6:	4608      	mov	r0, r1
   bbee8:	4611      	mov	r1, r2
   bbeea:	2200      	movs	r2, #0
   bbeec:	602a      	str	r2, [r5, #0]
   bbeee:	461a      	mov	r2, r3
   bbef0:	f7fc fef8 	bl	b8ce4 <_read>
   bbef4:	1c43      	adds	r3, r0, #1
   bbef6:	d102      	bne.n	bbefe <_read_r+0x1e>
   bbef8:	682b      	ldr	r3, [r5, #0]
   bbefa:	b103      	cbz	r3, bbefe <_read_r+0x1e>
   bbefc:	6023      	str	r3, [r4, #0]
   bbefe:	bd38      	pop	{r3, r4, r5, pc}
   bbf00:	2003e7ec 	.word	0x2003e7ec

000bbf04 <dynalib_user>:
   bbf04:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bbf14:	00000000 6e6b6e55 006e776f 20746f4e     ....Unknown.Not 
   bbf24:	72616843 676e6967 61684300 64656772     Charging.Charged
   bbf34:	73694400 72616863 676e6967 75614600     .Discharging.Fau
   bbf44:	4400746c 6e6f6369 7463656e 4e006465     lt.Diconnected.N
   bbf54:	00656e6f 69466957 4d534700 544d5500     one.WiFi.GSM.UMT
   bbf64:	44430053 4c00414d 49004554 38454545     S.CDMA.LTE.IEEE8
   bbf74:	35313230 544c0034 41435f45 314d5f54     02154.LTE_CAT_M1
   bbf84:	45544c00 5441435f 31424e5f 322e3100     .LTE_CAT_NB1.1.2
   bbf94:	73410031 74726573 466e6f69 756c6961     1.AssertionFailu
   bbfa4:	2a206572 69705f70 203c206e 20323328     re *p_pin < (32 
   bbfb4:	3631202b 227b0029 72656c61 3a227374     + 16).{"alerts":
   bbfc4:	222c6925 656d6974 6d617473 253a2270     %i,"timestamp":%
   bbfd4:	3030756c 007d2030 64696255 5f73746f     lu000 }.Ubidots_
   bbfe4:	72656c41 6f485f74 4b006b6f 20706565     Alert_Hook.Keep 
   bbff4:	76696c41 65732065 6f742074 20692520     Alive set to %i 
   bc004:	00636573 7065654b 696c4120 53006576     sec.Keep Alive.S
   bc014:	56207465 6f627265 4d206573 0065646f     et Verbose Mode.
   bc024:	6c430030 65726165 65562064 736f6272     0.Cleared Verbos
   bc034:	6f4d2065 2a006564 74655300 206f7420     e Mode.*.Set to 
   bc044:	20647233 74726150 69532079 6553006d     3rd Party Sim.Se
   bc054:	6f742074 72615020 6c636974 69532065     t to Particle Si
   bc064:	227b006d 706d6574 74617265 22657275     m.{"temperature"
   bc074:	2e34253a 202c6631 75682220 6964696d     :%4.1f,  "humidi
   bc084:	3a227974 312e3425 20202c66 696f5322     ty":%4.1f,  "Soi
   bc094:	696f6d6c 72757473 253a2265 20202c69     lmoisture":%i,  
   bc0a4:	696f5322 696f6d6c 72757473 3a223265     "Soilmoisture2":
   bc0b4:	202c6925 756c2220 253a2278 66312e34     %i,  "lux":%4.1f
   bc0c4:	2220202c 74696877 253a2265 66312e34     ,  "white":%4.1f
   bc0d4:	2220202c 22736c61 2e34253a 222c6631     ,  "als":%4.1f,"
   bc0e4:	74746162 22797265 7d69253a 766e6500     battery":%i}.env
   bc0f4:	6e6f7269 746e656d 682d6c61 006b6f6f     ironmental-hook.
   bc104:	6d6f7246 20732520 25206f74 74530073     From %s to %s.St
   bc114:	20657461 6e617254 69746973 25006e6f     ate Transition.%
   bc124:	3a532073 302e3225 2c252566 253a5120     s S:%2.0f%%, Q:%
   bc134:	66302e32 00202525 65737341 6f697472     2.0f%% .Assertio
   bc144:	6961466e 6572756c 63727320 20262620     nFailure src && 
   bc154:	2d637273 6c61633e 6361626c 6f4e006b     src->callback.No
   bc164:	74614420 65520061 6e6f7073 52206573      Data.Response R
   bc174:	69656365 00646576 6e6b6e55 206e776f     eceived.Unknown 
   bc184:	70736572 65736e6f 63657220 65697665     response recevie
   bc194:	69252064 69625500 73746f64 6f6f4820     d %i.Ubidots Hoo
   bc1a4:	6553006b 6f4c2074 6f502077 20726577     k.Set Low Power 
   bc1b4:	65646f4d 656c4300 64657261 776f4c20     Mode.Cleared Low
   bc1c4:	776f5020 4d207265 0065646f 312e3425      Power Mode.%4.1
   bc1d4:	00432a66 312e3425 00252566 2078754c     f*C.%4.1f%%.Lux 
   bc1e4:	3425203a 0066312e 74696857 203a2065     : %4.1f.White : 
   bc1f4:	312e3425 4c410066 203a2053 312e3425     %4.1f.ALS : %4.1
   bc204:	69250066 6f4c0020 6e696461 79532067     f.%i .Loading Sy
   bc214:	6d657473 66654420 746c7561 6f4c0073     stem Defaults.Lo
   bc224:	6e696461 79732067 6d657473 66656420     ading system def
   bc234:	746c7561 6f430073 63656e6e 20646574     aults.Connected 
   bc244:	25206e69 65732069 43007363 64756f6c     in %i secs.Cloud
   bc254:	6e6f6320 7463656e 206e6f69 63637573      connection succ
   bc264:	66737365 43006c75 756c6c65 0072616c     essful.Cellular.
   bc274:	6e6e6f43 65746365 6f742064 6c656320     Connected to cel
   bc284:	616c756c 75622072 6f6e2074 61502074     lular but not Pa
   bc294:	63697472 4600656c 656c6961 6f742064     rticle.Failed to
   bc2a4:	6e6f6320 7463656e 6f682f00 722d6b6f      connect./hook-r
   bc2b4:	6f707365 2f65736e 69766e65 6d6e6f72     esponse/environm
   bc2c4:	61746e65 6f682d6c 002f6b6f 656c6552     ental-hook/.Rele
   bc2d4:	00657361 706d6574 74617265 00657275     ase.temperature.
   bc2e4:	696d7568 79746964 78754c00 69685700     humidity.Lux.Whi
   bc2f4:	52006574 41207761 4200534c 65747461     te.Raw ALS.Batte
   bc304:	42007972 65747461 6f437972 7865746e     ry.BatteryContex
   bc314:	654b0074 41207065 6576696c 63655320     t.Keep Alive Sec
   bc324:	776f6c00 65776f50 646f4d72 69530065     .lowPowerMode.Si
   bc334:	6c616e67 73655200 6f437465 00746e75     gnal.ResetCount.
   bc344:	74746142 56797265 61746c6f 41006567     BatteryVoltage.A
   bc354:	7472656c 654d0073 72757361 6f4e2d65     lerts.Measure-No
   bc364:	65560077 736f6272 6f4d2d65 53006564     w.Verbose-Mode.S
   bc374:	4c207465 5020776f 7265776f 72724500     et Low Power.Err
   bc384:	2d20726f 54485320 49203133 6974696e     or - SHT31 Initi
   bc394:	7a696c61 6f697461 7245006e 20726f72     alization.Error 
   bc3a4:	4556202d 49204c4d 6974696e 7a696c61     - VEML Initializ
   bc3b4:	6f697461 7254006e 46006575 65736c61     ation.True.False
   bc3c4:	61745300 70757472 746f4e00 6e6f6320     .Startup.Not con
   bc3d4:	7463656e 20676e69 6f6c202d 61622077     necting - low ba
   bc3e4:	72657474 6f6d2079 53006564 69666675     ttery mode.Suffi
   bc3f4:	6e656963 61622074 72657474 6f702079     cient battery po
   bc404:	20726577 6e6e6f63 69746365 4e00676e     wer connecting.N
   bc414:	6320746f 656e6e6f 6e697463 202d2067     ot connecting - 
   bc424:	2530353c 68632025 65677261 66202d20     <50%% charge - f
   bc434:	2072756f 72756f68 68637320 6c756465     our hour schedul
   bc444:	6f4e0065 6f632074 63656e6e 676e6974     e.Not connecting
   bc454:	35202d20 35362d30 63202525 67726168      - 50-65%% charg
   bc464:	202d2065 206f7774 72756f68 68637320     e - two hour sch
   bc474:	6c756465 614e0065 6e697070 6f662067     edule.Napping fo
   bc484:	69252072 63657320 73646e6f 696f4700     r %i seconds.Goi
   bc494:	7420676e 6c73206f 20706565 20726f66     ng to sleep for 
   bc4a4:	73206925 6e6f6365 43007364 656e6e6f     %i seconds.Conne
   bc4b4:	6e697463 74732067 20657461 20747562     cting state but 
   bc4c4:	65726c61 20796461 6e6e6f63 65746365     already connecte
   bc4d4:	6c630064 2064756f 6e6e6f63 69746365     d.cloud connecti
   bc4e4:	75206e6f 6375736e 73736563 006c7566     on unsuccessful.
   bc4f4:	65736552 6e697474 65642067 65636976     Resetting device
   bc504:	74697720 6c612068 20747265 65646f63      with alert code
   bc514:	00692520 4f525245 54535f52 00455441      %i.ERROR_STATE.
   bc524:	74206e49 66206568 776d7269 20657261     In the firmware 
   bc534:	61647075 73206574 65746174 72696600     update state.fir
   bc544:	7261776d 70752065 65746164 6d6f6320     mware update com
   bc554:	74656c70 66006465 776d7269 20657261     pleted.firmware 
   bc564:	61647075 74206574 64656d69 74756f20     update timed out
   bc574:	00000000                                ....

000bc578 <_ZTV5Timer>:
	...
   bc580:	000b44e9 000b453d 000b40d9              .D..=E...@..

000bc58c <_ZTV8MB85RC64>:
	...
   bc594:	000b415d 000b4171 000b6481 000b6517     ]A..qA...d...e..
   bc5a4:	000b6599 000bbf18 000bbf53 000bbf58     .e......S...X...
   bc5b4:	000bbf5d 000bbf61 000bbf66 000bbf6b     ]...a...f...k...
   bc5c4:	000bbf6f 000bbf7a 000bbf85 000bbf18     o...z...........
   bc5d4:	000bbf20 000bbf24 000bbf2d 000bbf35      ...$...-...5...
   bc5e4:	000bbf41 000bbf47 72617453 20707574     A...G...Startup 
   bc5f4:	63637553 66737365 00006c75 00000000     Successful......
	...

000bc62c <_ZL17FRAMversionNumber>:
   bc62c:	00000005 74697277 74614465 61662061     ....writeData fa
   bc63c:	64656c69 72756420 20676e69 73617265     iled during eras
   bc64c:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000bc65c <_ZTV6MB85RC>:
	...
   bc664:	000b63d1 000b63d3 000b6481 000b6517     .c...c...d...e..
   bc674:	000b6599 2e707061 00637472 2e707061     .e..app.rtc.app.
   bc684:	71627570 63614200 6f72676b 50646e75     pubq.BackgroundP
   bc694:	696c6275 4b526873 00000000              ublishRK....

000bc6a0 <_ZTV19BackgroundPublishRK>:
	...
   bc6a8:	000b6925 000b6941 656c6966 3d6d754e     %i..Ai..fileNum=
   bc6b8:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   bc6c8:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   bc6d8:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   bc6e8:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   bc6f8:	7572726f 64657470 65766520 6e20746e     orrupted event n
   bc708:	20656d61 6420726f 00617461 64616572     ame or data.read
   bc718:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   bc728:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   bc738:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   bc748:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   bc758:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   bc768:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   bc778:	6c696620 6d754e65 0064253d 63736964      fileNum=%d.disc
   bc788:	65647261 76652064 20746e65 72006425     arded event %d.r
   bc798:	74657365 20726f20 63736964 656e6e6f     eset or disconne
   bc7a8:	65207463 746e6576 6173202c 66206576     ct event, save f
   bc7b8:	73656c69 206f7420 75657571 61720065     iles to queue.ra
   bc7c8:	6964006d 72616373 676e6964 726f6320     m.discarding cor
   bc7d8:	74707572 66206465 20656c69 70006425     rupted file %d.p
   bc7e8:	696c6275 6e696873 73252067 65766520     ublishing %s eve
   bc7f8:	253d746e 61642073 253d6174 59530073     nt=%s data=%s.SY
   bc808:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   bc818:	2944454c 20736920 75716572 64657269     LED) is required
   bc828:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   bc838:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   bc848:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   bc858:	61657263 73206574 3a3a6474 75716564     create std::dequ
   bc868:	616c2065 72656772 61687420 616d206e     e larger than ma
   bc878:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   bc888:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   bc898:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   bc8a8:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   bc8b8:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   bc8c8:	63637573 20737365 72006425 766f6d65     success %d.remov
   bc8d8:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bc8e8:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   bc8f8:	676e6974 206f7420 656c6966 66612073     ting to files af
   bc908:	20726574 6c627570 20687369 6c696166     ter publish fail
   bc918:	00657275                                ure.

000bc91c <_ZTV17PublishQueuePosix>:
	...
   bc924:	000b74e9 000b77a5 000b77c9 64383025     .t...w...w..%08d
   bc934:	6d657200 6465766f 00732520 65207325     .removed %s.%s e
   bc944:	74736978 6e612073 73692064 64206120     xists and is a d
   bc954:	63657269 79726f74 6c696600 6e692065     irectory.file in
   bc964:	65687420 79617720 6564202c 6974656c      the way, deleti
   bc974:	2520676e 74730073 66207461 64656c69     ng %s.stat filed
   bc984:	72726520 253d6f6e 72630064 65746165      errno=%d.create
   bc994:	69642064 73252072 646b6d00 66207269     d dir %s.mkdir f
   bc9a4:	656c6961 72652064 3d6f6e72 75006425     ailed errno=%d.u
   bc9b4:	6e6f636e 75676966 20646572 50726964     nconfigured dirP
   bc9c4:	00687461 6e616373 676e696e 20732520     ath.scanning %s 
   bc9d4:	68746977 74617020 6e726574 00732520     with pattern %s.
   bc9e4:	69646461 7420676e 7571206f 20657565     adding to queue 
   bc9f4:	25206425 65670073 6c694674 6f724665     %d %s.getFileFro
   bca04:	6575516d 72206575 72757465 2064656e     mQueue returned 
   bca14:	61006425 732e7070 69667165 0000656c     %d.app.seqfile..

000bca24 <_ZTV14SequentialFile>:
	...
   bca2c:	000b7b31 000b7b5d 000b77dd 6c696166     1{..]{...w..fail
   bca3c:	74206465 6572206f 72206461 64416765     ed to read regAd
   bca4c:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   bca5c:	69616600 2064656c 72206f74 20646165     .failed to read 
   bca6c:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   bca7c:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   bca8c:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   bca9c:	74636574 66006465 656c6961 6f742064     tected.failed to
   bcaac:	69727720 72206574 64416765 253d7264      write regAddr=%
   bcabc:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   bcacc:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   bcadc:	7261656c 62206465 75736552 253d746c     leared bResult=%
   bcaec:	61770064 64686374 7320676f 66207465     d.watchdog set f
   bcafc:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   bcb0c:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   bcb1c:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   bcb2c:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   bcb3c:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   bcb4c:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   bcb5c:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   bcb6c:	7325203d 69616600 6572756c 206e6920     = %s.failure in 
   bcb7c:	43746573 746e756f 6e776f64 656d6954     setCountdownTime
   bcb8c:	64252072 69616600 6572756c 206e6920     r %d.failure in 
   bcb9c:	70656564 65776f50 776f4472 6425206e     deepPowerDown %d
   bcbac:	47455200 454c535f 435f5045 3d4c5254     .REG_SLEEP_CTRL=
   bcbbc:	32257830 69640078 74276e64 776f7020     0x%2x.didn't pow
   bcbcc:	64207265 006e776f 64343025 3230252d     er down.%04d-%02
   bcbdc:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   bcbec:	3230253a 65670064 63745274 6d547341     :%02d.getRtcAsTm
   bcbfc:	00732520 52746573 73416374 25206d54      %s.setRtcAsTm %
   bcc0c:	61660073 72756c69 6e692065 74657320     s.failure in set
   bcc1c:	46637452 546d6f72 6425206d 74657300     RtcFromTm %d.set
   bcc2c:	43545220 6f726620 6c63206d 2064756f      RTC from cloud 
   bcc3c:	73007325 73207465 65747379 6c63206d     %s.set system cl
   bcc4c:	206b636f 6d6f7266 43545220 00732520     ock from RTC %s.
   bcc5c:	6c696166 74206465 6564206f 74636574     failed to detect
   bcc6c:	31424120 00353038 2e707061 38316261      AB1805.app.ab18
   bcc7c:	00003530                                05..

000bcc80 <_ZTV6AB1805>:
	...
   bcc88:	000b7e89 000b7e8b 000b84a5 000b852b     .~...~......+...

000bcc98 <_ZTVN5spark13CellularClassE>:
	...
   bcca0:	000b92e3 000b92d9 000b92cf 000b9291     ................
   bccb0:	000b4551 000b92c3 000b9f85 000b9f8d     QE..............
   bccc0:	000b92b7 000b92af 000b92a5 000b929b     ................
   bccd0:	000b9fbd                                ....

000bccd4 <_ZTV14CellularSignal>:
	...
   bccdc:	000b9371 000b93d5 000b9373 000b93e5     q.......s.......
   bccec:	000b9419 000b9445 000b9479 000b9399     ....E...y.......
   bccfc:	000b9377 000b9393 fffffffc 00000000     w...............
   bcd0c:	000b93cd                                ....

000bcd10 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcd18:	000b94bd 000b94c3 000b9501 000b94d1     ................
   bcd28:	000b94bf                                ....

000bcd2c <_ZTVN5spark13EthernetClassE>:
	...
   bcd34:	000b9b03 000b9af9 000b9aef 000b9ae5     ................
   bcd44:	000b9ad9 000b9acd 000b9f85 000b9f8d     ................
   bcd54:	000b9ac1 000b9ab9 000b9aaf 000b9aa5     ................
   bcd64:	000b9fbd                                ....

000bcd68 <_ZTV7TwoWire>:
	...
   bcd70:	000b9c9d 000b9ce7 000b9cbf 000b9c9f     ................
   bcd80:	000b9cc7 000b9ccf 000b9cd7 000b9cdf     ................

000bcd90 <_ZTV9IPAddress>:
	...
   bcd98:	000b9e55 000b9e45 000b9e47 00707061     U...E...G...app.

000bcda8 <_ZTVN5spark12NetworkClassE>:
	...
   bcdb0:	000b9f45 000b9f4f 000b9f59 000b9f63     E...O...Y...c...
   bcdc0:	000b9f6d 000b9f79 000b9f85 000b9f8d     m...y...........
   bcdd0:	000b9f95 000b9fa1 000b9fa9 000b9fb3     ................
   bcde0:	000b9fbd 006e616e 00666e69 0066766f     ....nan.inf.ovf.
   bcdf0:	69726977 5300676e 65747379 6c73206d     wiring.System sl
   bce00:	20706565 666e6f63 72756769 6f697461     eep configuratio
   bce10:	7369206e 766e6920 64696c61 005a002e     n is invalid..Z.
   bce20:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
   bce30:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
   bce40:	69746373 0000656d                       sctime..

000bce48 <_ZTV11USARTSerial>:
	...
   bce50:	000baa4d 000baab9 000baa91 000ba0a9     M...............
   bce60:	000baa61 000baa7d 000baa6f 000baa8b     a...}...o.......
   bce70:	000baa4f 000baa53                       O...S...

000bce78 <_ZTV9USBSerial>:
	...
   bce80:	000baaf7 000bab5f 000bab35 000ba0a9     ...._...5.......
   bce90:	000bab27 000baaf9 000bab09 000bab59     '...........Y...
   bcea0:	000bab19 000baaf1                       ........

000bcea8 <_ZSt7nothrow>:
   bcea8:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bceb8:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bcec9 <day_name.1>:
   bcec9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bced9:	61536972                                 riSat

000bcede <mon_name.0>:
   bcede:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bceee:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bcefe:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bcf0e:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bcf1e:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bcf2e:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bcf3e:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bcf4e:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bcf5e:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bcf6e:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bcf7e:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bcf8e:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bcf9e:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bcfae:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bcfbe:	696c6474 61722f62 632e646e               tdlib/rand.c.

000bcfcb <_ctype_>:
   bcfcb:	20202000 20202020 28282020 20282828     .         ((((( 
   bcfdb:	20202020 20202020 20202020 20202020                     
   bcfeb:	10108820 10101010 10101010 10101010      ...............
   bcffb:	04040410 04040404 10040404 10101010     ................
   bd00b:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bd01b:	01010101 01010101 01010101 10101010     ................
   bd02b:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bd03b:	02020202 02020202 02020202 10101010     ................
   bd04b:	00000020 00000000 00000000 00000000      ...............
	...

000bd0cc <link_const_variable_data_end>:
   bd0cc:	000b5671 	.word	0x000b5671
   bd0d0:	000b6649 	.word	0x000b6649
   bd0d4:	000b6689 	.word	0x000b6689
   bd0d8:	000b7795 	.word	0x000b7795
   bd0dc:	000b7e79 	.word	0x000b7e79
   bd0e0:	000b8945 	.word	0x000b8945
   bd0e4:	000b9281 	.word	0x000b9281
   bd0e8:	000b9341 	.word	0x000b9341
   bd0ec:	000b9b0d 	.word	0x000b9b0d
   bd0f0:	000b9f35 	.word	0x000b9f35
   bd0f4:	000ba095 	.word	0x000ba095
   bd0f8:	000ba2ed 	.word	0x000ba2ed
   bd0fc:	000ba711 	.word	0x000ba711
   bd100:	000baa39 	.word	0x000baa39

000bd104 <link_constructors_end>:
	...
