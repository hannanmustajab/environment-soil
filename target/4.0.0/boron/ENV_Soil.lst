
/Users/abdulhannanmustajab/Desktop/IoT/GLE_Chili_Dryer/Env-soil/ENV_Soil/target/4.0.0/boron/ENV_Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006180  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba1a0  000ba1a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000804  2003f400  000ba1c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000140  2003e324  000ba9c8  0001e324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000038c  2003e468  2003e468  0002e468  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bab08  000bab08  0002ab08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bab30  000bab30  0002ab30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016d01e  00000000  00000000  0002ab34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019460  00000000  00000000  00197b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00043641  00000000  00000000  001b0fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003520  00000000  00000000  001f45f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bcb0  00000000  00000000  001f7b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042302  00000000  00000000  002037c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00054666  00000000  00000000  00245ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f9c8  00000000  00000000  0029a12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000096fc  00000000  00000000  003d9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 f98d 	bl	b9350 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 f9af 	bl	b93a0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e324 	.word	0x2003e324
   b404c:	000ba9c8 	.word	0x000ba9c8
   b4050:	2003e464 	.word	0x2003e464
   b4054:	2003e468 	.word	0x2003e468
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fbdb 	bl	b881c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba168 	.word	0x000ba168
   b4080:	000ba194 	.word	0x000ba194

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bfb0 	b.w	b4fe8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fdef 	bl	b4c6c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bb7b 	b.w	b878c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b921 	b.w	b72dc <malloc>

000b409a <_Znaj>:
   b409a:	f003 b91f 	b.w	b72dc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b925 	b.w	b72ec <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 ffbc 	bl	b7028 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6d49 	.word	0x000b6d49
   b40b8:	000b9698 	.word	0x000b9698

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z11watchdogISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003e630 	.word	0x2003e630

000b40d8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b40d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40da:	6803      	ldr	r3, [r0, #0]
   b40dc:	2b2f      	cmp	r3, #47	; 0x2f
{
   b40de:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40e0:	d904      	bls.n	b40ec <nrf_gpio_pin_port_decode+0x14>
   b40e2:	4a07      	ldr	r2, [pc, #28]	; (b4100 <nrf_gpio_pin_port_decode+0x28>)
   b40e4:	4907      	ldr	r1, [pc, #28]	; (b4104 <nrf_gpio_pin_port_decode+0x2c>)
   b40e6:	200a      	movs	r0, #10
   b40e8:	f002 ff9e 	bl	b7028 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b40ec:	6823      	ldr	r3, [r4, #0]
   b40ee:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40f0:	bf83      	ittte	hi
   b40f2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b40f6:	4804      	ldrhi	r0, [pc, #16]	; (b4108 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40f8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b40fa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b40fe:	bd10      	pop	{r4, pc}
   b4100:	000b6d49 	.word	0x000b6d49
   b4104:	000b96ed 	.word	0x000b96ed
   b4108:	50000300 	.word	0x50000300

000b410c <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   b410c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b410e:	4904      	ldr	r1, [pc, #16]	; (b4120 <_Z10measureNow6String+0x14>)
   b4110:	f003 fffd 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b4114:	b118      	cbz	r0, b411e <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   b4116:	4b03      	ldr	r3, [pc, #12]	; (b4124 <_Z10measureNow6String+0x18>)
   b4118:	2203      	movs	r2, #3
   b411a:	701a      	strb	r2, [r3, #0]
    return 1;
   b411c:	2001      	movs	r0, #1
  }
  else return 0;
}
   b411e:	bd08      	pop	{r3, pc}
   b4120:	000b96eb 	.word	0x000b96eb
   b4124:	2003e5b8 	.word	0x2003e5b8

000b4128 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4128:	b510      	push	{r4, lr}
   b412a:	4b03      	ldr	r3, [pc, #12]	; (b4138 <_ZN8MB85RC64D1Ev+0x10>)
   b412c:	6003      	str	r3, [r0, #0]
   b412e:	4604      	mov	r4, r0
   b4130:	f001 fc4a 	bl	b59c8 <_ZN6MB85RCD1Ev>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}
   b4138:	000b9aac 	.word	0x000b9aac

000b413c <_ZN8MB85RC64D0Ev>:
   b413c:	b510      	push	{r4, lr}
   b413e:	4604      	mov	r4, r0
   b4140:	f7ff fff2 	bl	b4128 <_ZN8MB85RC64D1Ev>
   b4144:	4620      	mov	r0, r4
   b4146:	2110      	movs	r1, #16
   b4148:	f7ff ffa9 	bl	b409e <_ZdlPvj>
   b414c:	4620      	mov	r0, r4
   b414e:	bd10      	pop	{r4, pc}

000b4150 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   b4150:	b510      	push	{r4, lr}
   b4152:	4b03      	ldr	r3, [pc, #12]	; (b4160 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   b4154:	6003      	str	r3, [r0, #0]
   b4156:	4604      	mov	r4, r0
   b4158:	f002 fb38 	bl	b67cc <_ZN25PublishQueueAsyncRetainedD1Ev>
   b415c:	4620      	mov	r0, r4
   b415e:	bd10      	pop	{r4, pc}
   b4160:	000b9a84 	.word	0x000b9a84

000b4164 <_ZN17PublishQueueAsyncD0Ev>:
   b4164:	b510      	push	{r4, lr}
   b4166:	4604      	mov	r4, r0
   b4168:	f7ff fff2 	bl	b4150 <_ZN17PublishQueueAsyncD1Ev>
   b416c:	4620      	mov	r0, r4
   b416e:	2138      	movs	r1, #56	; 0x38
   b4170:	f7ff ff95 	bl	b409e <_ZdlPvj>
   b4174:	4620      	mov	r0, r4
   b4176:	bd10      	pop	{r4, pc}

000b4178 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4178:	6943      	ldr	r3, [r0, #20]
   b417a:	b113      	cbz	r3, b4182 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b417c:	6983      	ldr	r3, [r0, #24]
   b417e:	300c      	adds	r0, #12
   b4180:	4718      	bx	r3
            callback();
        }
    }
   b4182:	4770      	bx	lr

000b4184 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4184:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4186:	2100      	movs	r1, #0
   b4188:	4604      	mov	r4, r0
   b418a:	4608      	mov	r0, r1
   b418c:	f002 fd6c 	bl	b6c68 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4190:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4192:	4620      	mov	r0, r4
   b4194:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4196:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4198:	f002 fd7e 	bl	b6c98 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b419c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419e:	b10c      	cbz	r4, b41a4 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41a0:	2301      	movs	r3, #1
   b41a2:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a4:	2100      	movs	r1, #0
   b41a6:	2001      	movs	r0, #1
   b41a8:	f002 fd5e 	bl	b6c68 <os_thread_scheduling>
            }
        }
        if (t) {
   b41ac:	b12c      	cbz	r4, b41ba <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41ae:	6823      	ldr	r3, [r4, #0]
   b41b0:	4620      	mov	r0, r4
   b41b2:	689b      	ldr	r3, [r3, #8]
   b41b4:	4798      	blx	r3
            t->running = false;
   b41b6:	2300      	movs	r3, #0
   b41b8:	7123      	strb	r3, [r4, #4]
        }
    }
   b41ba:	b002      	add	sp, #8
   b41bc:	bd10      	pop	{r4, pc}

000b41be <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41be:	2a01      	cmp	r2, #1
   b41c0:	d102      	bne.n	b41c8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41c2:	6001      	str	r1, [r0, #0]
      }
   b41c4:	2000      	movs	r0, #0
   b41c6:	4770      	bx	lr
	  switch (__op)
   b41c8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41ca:	bf04      	itt	eq
   b41cc:	680b      	ldreq	r3, [r1, #0]
   b41ce:	6003      	streq	r3, [r0, #0]
	      break;
   b41d0:	e7f8      	b.n	b41c4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41d2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41d2:	6803      	ldr	r3, [r0, #0]
   b41d4:	4718      	bx	r3

000b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b41d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b41d8:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b41da:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b41de:	f88d 3000 	strb.w	r3, [sp]
   b41e2:	f88d 5004 	strb.w	r5, [sp, #4]
   b41e6:	68e4      	ldr	r4, [r4, #12]
   b41e8:	233c      	movs	r3, #60	; 0x3c
   b41ea:	47a0      	blx	r4
	}
   b41ec:	b003      	add	sp, #12
   b41ee:	bd30      	pop	{r4, r5, pc}

000b41f0 <_Z12setKeepAlive6String>:
  else return 0;
}


int setKeepAlive(String command)
{
   b41f0:	b510      	push	{r4, lr}
   b41f2:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b41f4:	6800      	ldr	r0, [r0, #0]
   b41f6:	220a      	movs	r2, #10
   b41f8:	a903      	add	r1, sp, #12
   b41fa:	f005 f9d3 	bl	b95a4 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b41fe:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b4202:	d81a      	bhi.n	b423a <_Z12setKeepAlive6String+0x4a>
  sysStatus.keepAlive = tempTime;
   b4204:	4c0e      	ldr	r4, [pc, #56]	; (b4240 <_Z12setKeepAlive6String+0x50>)
   b4206:	6060      	str	r0, [r4, #4]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4208:	f002 ffb8 	bl	b717c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b420c:	b180      	cbz	r0, b4230 <_Z12setKeepAlive6String+0x40>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b420e:	6863      	ldr	r3, [r4, #4]
   b4210:	4a0c      	ldr	r2, [pc, #48]	; (b4244 <_Z12setKeepAlive6String+0x54>)
   b4212:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4216:	a804      	add	r0, sp, #16
   b4218:	f003 f880 	bl	b731c <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b421c:	2300      	movs	r3, #0
    publishQueue.publish("Keep Alive",data, PRIVATE);
   b421e:	f88d 3000 	strb.w	r3, [sp]
   b4222:	4b09      	ldr	r3, [pc, #36]	; (b4248 <_Z12setKeepAlive6String+0x58>)
   b4224:	4909      	ldr	r1, [pc, #36]	; (b424c <_Z12setKeepAlive6String+0x5c>)
   b4226:	781b      	ldrb	r3, [r3, #0]
   b4228:	4809      	ldr	r0, [pc, #36]	; (b4250 <_Z12setKeepAlive6String+0x60>)
   b422a:	aa04      	add	r2, sp, #16
   b422c:	f7ff ffd3 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  }
  systemStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b4230:	4b08      	ldr	r3, [pc, #32]	; (b4254 <_Z12setKeepAlive6String+0x64>)
   b4232:	2001      	movs	r0, #1
   b4234:	7018      	strb	r0, [r3, #0]
  return 1;
}
   b4236:	b044      	add	sp, #272	; 0x110
   b4238:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b423a:	2000      	movs	r0, #0
   b423c:	e7fb      	b.n	b4236 <_Z12setKeepAlive6String+0x46>
   b423e:	bf00      	nop
   b4240:	2003e5c4 	.word	0x2003e5c4
   b4244:	000b9711 	.word	0x000b9711
   b4248:	2003e48d 	.word	0x2003e48d
   b424c:	000b972a 	.word	0x000b972a
   b4250:	2003e520 	.word	0x2003e520
   b4254:	2003e5e0 	.word	0x2003e5e0

000b4258 <_Z14setVerboseMode6String>:
{
   b4258:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b425a:	4916      	ldr	r1, [pc, #88]	; (b42b4 <_Z14setVerboseMode6String+0x5c>)
   b425c:	4605      	mov	r5, r0
   b425e:	f003 ff56 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4262:	4604      	mov	r4, r0
   b4264:	b188      	cbz	r0, b428a <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   b4266:	4b14      	ldr	r3, [pc, #80]	; (b42b8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4268:	4814      	ldr	r0, [pc, #80]	; (b42bc <_Z14setVerboseMode6String+0x64>)
   b426a:	4a15      	ldr	r2, [pc, #84]	; (b42c0 <_Z14setVerboseMode6String+0x68>)
   b426c:	4915      	ldr	r1, [pc, #84]	; (b42c4 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   b426e:	2401      	movs	r4, #1
   b4270:	725c      	strb	r4, [r3, #9]
   b4272:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4274:	f88d 3000 	strb.w	r3, [sp]
   b4278:	4b13      	ldr	r3, [pc, #76]	; (b42c8 <_Z14setVerboseMode6String+0x70>)
   b427a:	781b      	ldrb	r3, [r3, #0]
   b427c:	f7ff ffab 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b4280:	4b12      	ldr	r3, [pc, #72]	; (b42cc <_Z14setVerboseMode6String+0x74>)
    return 1;
   b4282:	4620      	mov	r0, r4
    systemStatusWriteNeeded = true;
   b4284:	701c      	strb	r4, [r3, #0]
}
   b4286:	b003      	add	sp, #12
   b4288:	bd30      	pop	{r4, r5, pc}
   b428a:	4911      	ldr	r1, [pc, #68]	; (b42d0 <_Z14setVerboseMode6String+0x78>)
   b428c:	4628      	mov	r0, r5
   b428e:	f003 ff3e 	bl	b810e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4292:	2800      	cmp	r0, #0
   b4294:	d0f7      	beq.n	b4286 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   b4296:	4b08      	ldr	r3, [pc, #32]	; (b42b8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4298:	4808      	ldr	r0, [pc, #32]	; (b42bc <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = false;
   b429a:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b429c:	4b0a      	ldr	r3, [pc, #40]	; (b42c8 <_Z14setVerboseMode6String+0x70>)
   b429e:	f88d 4000 	strb.w	r4, [sp]
   b42a2:	781b      	ldrb	r3, [r3, #0]
   b42a4:	4a0b      	ldr	r2, [pc, #44]	; (b42d4 <_Z14setVerboseMode6String+0x7c>)
   b42a6:	4907      	ldr	r1, [pc, #28]	; (b42c4 <_Z14setVerboseMode6String+0x6c>)
   b42a8:	f7ff ff95 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b42ac:	4b07      	ldr	r3, [pc, #28]	; (b42cc <_Z14setVerboseMode6String+0x74>)
   b42ae:	2001      	movs	r0, #1
   b42b0:	7018      	strb	r0, [r3, #0]
    return 1;
   b42b2:	e7e8      	b.n	b4286 <_Z14setVerboseMode6String+0x2e>
   b42b4:	000b96eb 	.word	0x000b96eb
   b42b8:	2003e5c4 	.word	0x2003e5c4
   b42bc:	2003e520 	.word	0x2003e520
   b42c0:	000b9735 	.word	0x000b9735
   b42c4:	000b9758 	.word	0x000b9758
   b42c8:	2003e48d 	.word	0x2003e48d
   b42cc:	2003e5e0 	.word	0x2003e5e0
   b42d0:	000b9746 	.word	0x000b9746
   b42d4:	000b9748 	.word	0x000b9748

000b42d8 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b42d8:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   b42da:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b42dc:	b092      	sub	sp, #72	; 0x48
   b42de:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   b42e0:	b97b      	cbnz	r3, b4302 <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   b42e2:	4919      	ldr	r1, [pc, #100]	; (b4348 <_Z14UbidotsHandlerPKcS0_+0x70>)
   b42e4:	a802      	add	r0, sp, #8
   b42e6:	f005 f89b 	bl	b9420 <strcpy>
   b42ea:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   b42ec:	f88d 3000 	strb.w	r3, [sp]
   b42f0:	4b16      	ldr	r3, [pc, #88]	; (b434c <_Z14UbidotsHandlerPKcS0_+0x74>)
   b42f2:	4917      	ldr	r1, [pc, #92]	; (b4350 <_Z14UbidotsHandlerPKcS0_+0x78>)
   b42f4:	781b      	ldrb	r3, [r3, #0]
   b42f6:	4817      	ldr	r0, [pc, #92]	; (b4354 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b42f8:	aa02      	add	r2, sp, #8
   b42fa:	f7ff ff6c 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b42fe:	b012      	add	sp, #72	; 0x48
   b4300:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4302:	4608      	mov	r0, r1
   b4304:	f005 f802 	bl	b930c <atoi>
   b4308:	28c8      	cmp	r0, #200	; 0xc8
   b430a:	d10e      	bne.n	b432a <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   b430c:	4912      	ldr	r1, [pc, #72]	; (b4358 <_Z14UbidotsHandlerPKcS0_+0x80>)
   b430e:	a802      	add	r0, sp, #8
   b4310:	f005 f886 	bl	b9420 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   b4314:	f004 f913 	bl	b853e <_ZN9TimeClass3nowEv>
   b4318:	4b10      	ldr	r3, [pc, #64]	; (b435c <_Z14UbidotsHandlerPKcS0_+0x84>)
   b431a:	6198      	str	r0, [r3, #24]
    systemStatusWriteNeeded = true;
   b431c:	4b10      	ldr	r3, [pc, #64]	; (b4360 <_Z14UbidotsHandlerPKcS0_+0x88>)
   b431e:	2201      	movs	r2, #1
   b4320:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   b4322:	4b10      	ldr	r3, [pc, #64]	; (b4364 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   b4324:	2200      	movs	r2, #0
   b4326:	701a      	strb	r2, [r3, #0]
   b4328:	e7df      	b.n	b42ea <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b432a:	4620      	mov	r0, r4
   b432c:	f004 ffee 	bl	b930c <atoi>
   b4330:	28c9      	cmp	r0, #201	; 0xc9
   b4332:	d0eb      	beq.n	b430c <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   b4334:	4620      	mov	r0, r4
   b4336:	f004 ffe9 	bl	b930c <atoi>
   b433a:	4a0b      	ldr	r2, [pc, #44]	; (b4368 <_Z14UbidotsHandlerPKcS0_+0x90>)
   b433c:	4603      	mov	r3, r0
   b433e:	2140      	movs	r1, #64	; 0x40
   b4340:	a802      	add	r0, sp, #8
   b4342:	f002 ffeb 	bl	b731c <snprintf>
   b4346:	e7d0      	b.n	b42ea <_Z14UbidotsHandlerPKcS0_+0x12>
   b4348:	000b975d 	.word	0x000b975d
   b434c:	2003e48d 	.word	0x2003e48d
   b4350:	000b9794 	.word	0x000b9794
   b4354:	2003e520 	.word	0x2003e520
   b4358:	000b9765 	.word	0x000b9765
   b435c:	2003e5c4 	.word	0x2003e5c4
   b4360:	2003e5e0 	.word	0x2003e5e0
   b4364:	2003e4c8 	.word	0x2003e4c8
   b4368:	000b9777 	.word	0x000b9777

000b436c <_Z16keepAliveMessagev>:

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

void keepAliveMessage() {
   b436c:	b507      	push	{r0, r1, r2, lr}
   b436e:	4b08      	ldr	r3, [pc, #32]	; (b4390 <_Z16keepAliveMessagev+0x24>)
		return publishCommon(eventName, "", 60, flags1, flags2);
   b4370:	4908      	ldr	r1, [pc, #32]	; (b4394 <_Z16keepAliveMessagev+0x28>)
   b4372:	781a      	ldrb	r2, [r3, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   b4374:	4b08      	ldr	r3, [pc, #32]	; (b4398 <_Z16keepAliveMessagev+0x2c>)
   b4376:	4809      	ldr	r0, [pc, #36]	; (b439c <_Z16keepAliveMessagev+0x30>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	f88d 3000 	strb.w	r3, [sp]
   b437e:	f88d 2004 	strb.w	r2, [sp, #4]
   b4382:	233c      	movs	r3, #60	; 0x3c
   b4384:	4a06      	ldr	r2, [pc, #24]	; (b43a0 <_Z16keepAliveMessagev+0x34>)
   b4386:	f002 fa73 	bl	b6870 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>
  publishQueue.publish("*", PRIVATE,NO_ACK);
}
   b438a:	b003      	add	sp, #12
   b438c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4390:	2003e48c 	.word	0x2003e48c
   b4394:	000b97a1 	.word	0x000b97a1
   b4398:	2003e48d 	.word	0x2003e48d
   b439c:	2003e520 	.word	0x2003e520
   b43a0:	000b9f64 	.word	0x000b9f64

000b43a4 <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b43a4:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b43a6:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b43a8:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b43aa:	b130      	cbz	r0, b43ba <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b43ac:	2100      	movs	r1, #0
   b43ae:	e9cd 2100 	strd	r2, r1, [sp]
   b43b2:	460a      	mov	r2, r1
   b43b4:	2103      	movs	r1, #3
   b43b6:	f002 fc77 	bl	b6ca8 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b43ba:	b003      	add	sp, #12
   b43bc:	f85d fb04 	ldr.w	pc, [sp], #4

000b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b43c0:	2300      	movs	r3, #0
   b43c2:	2204      	movs	r2, #4
   b43c4:	f002 beba 	b.w	b713c <spark_variable>

000b43c8 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   b43c8:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   b43ca:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   b43cc:	4605      	mov	r5, r0
   b43ce:	460e      	mov	r6, r1
        if (valid_) {
   b43d0:	b1cb      	cbz	r3, b4406 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43d2:	6803      	ldr	r3, [r0, #0]
   b43d4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b43d6:	b123      	cbz	r3, b43e2 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x1a>
            if (start->type == type) {
   b43d8:	889a      	ldrh	r2, [r3, #4]
   b43da:	2a04      	cmp	r2, #4
   b43dc:	d016      	beq.n	b440c <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x44>
            start = start->next;
   b43de:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b43e0:	e7f9      	b.n	b43d6 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43e2:	490b      	ldr	r1, [pc, #44]	; (b4410 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x48>)
   b43e4:	2010      	movs	r0, #16
   b43e6:	f004 fb3f 	bl	b8a68 <_ZnwjRKSt9nothrow_t>
   b43ea:	4604      	mov	r4, r0
   b43ec:	b160      	cbz	r0, b4408 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x40>
   b43ee:	2210      	movs	r2, #16
   b43f0:	2100      	movs	r1, #0
   b43f2:	f004 ffd5 	bl	b93a0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b43f6:	4b07      	ldr	r3, [pc, #28]	; (b4414 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x4c>)
   b43f8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b43fa:	2304      	movs	r3, #4
   b43fc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b43fe:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4400:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   b4402:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   b4406:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   b4408:	7528      	strb	r0, [r5, #20]
                return *this;
   b440a:	e7fc      	b.n	b4406 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b440c:	60de      	str	r6, [r3, #12]
                return *this;
   b440e:	e7fa      	b.n	b4406 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3e>
   b4410:	000b9f44 	.word	0x000b9f44
   b4414:	00030010 	.word	0x00030010

000b4418 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4418:	b510      	push	{r4, lr}
      if (_M_manager)
   b441a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b441c:	4604      	mov	r4, r0
      if (_M_manager)
   b441e:	b113      	cbz	r3, b4426 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4420:	2203      	movs	r2, #3
   b4422:	4601      	mov	r1, r0
   b4424:	4798      	blx	r3
    }
   b4426:	4620      	mov	r0, r4
   b4428:	bd10      	pop	{r4, pc}
	...

000b442c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b442c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b442e:	4b13      	ldr	r3, [pc, #76]	; (b447c <_ZN5TimerD1Ev+0x50>)
   b4430:	6003      	str	r3, [r0, #0]
   b4432:	4604      	mov	r4, r0
        if (handle) {
   b4434:	6880      	ldr	r0, [r0, #8]
   b4436:	b1c8      	cbz	r0, b446c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4438:	2500      	movs	r5, #0
   b443a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b443e:	e9cd 3500 	strd	r3, r5, [sp]
   b4442:	2102      	movs	r1, #2
   b4444:	462b      	mov	r3, r5
   b4446:	462a      	mov	r2, r5
   b4448:	f002 fc2e 	bl	b6ca8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b444c:	68a0      	ldr	r0, [r4, #8]
   b444e:	4629      	mov	r1, r5
   b4450:	f002 fc5a 	bl	b6d08 <os_timer_set_id>
            while (running) {
   b4454:	7923      	ldrb	r3, [r4, #4]
   b4456:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b445a:	b113      	cbz	r3, b4462 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b445c:	f002 fbfc 	bl	b6c58 <os_thread_yield>
            while (running) {
   b4460:	e7f8      	b.n	b4454 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4462:	68a0      	ldr	r0, [r4, #8]
   b4464:	4629      	mov	r1, r5
   b4466:	f002 fc0f 	bl	b6c88 <os_timer_destroy>
            handle = nullptr;
   b446a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b446c:	f104 000c 	add.w	r0, r4, #12
   b4470:	f7ff ffd2 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
    }
   b4474:	4620      	mov	r0, r4
   b4476:	b003      	add	sp, #12
   b4478:	bd30      	pop	{r4, r5, pc}
   b447a:	bf00      	nop
   b447c:	000b9a70 	.word	0x000b9a70

000b4480 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4480:	b510      	push	{r4, lr}
   b4482:	4604      	mov	r4, r0
    }
   b4484:	f7ff ffd2 	bl	b442c <_ZN5TimerD1Ev>
   b4488:	4620      	mov	r0, r4
   b448a:	211c      	movs	r1, #28
   b448c:	f7ff fe07 	bl	b409e <_ZdlPvj>
   b4490:	4620      	mov	r0, r4
   b4492:	bd10      	pop	{r4, pc}

000b4494 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b4496:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4498:	4605      	mov	r5, r0
   b449a:	460f      	mov	r7, r1
   b449c:	4616      	mov	r6, r2
        if (valid_) {
   b449e:	b18b      	cbz	r3, b44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44a0:	6803      	ldr	r3, [r0, #0]
   b44a2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b44a4:	b183      	cbz	r3, b44c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b44a6:	889a      	ldrh	r2, [r3, #4]
   b44a8:	2a01      	cmp	r2, #1
   b44aa:	d006      	beq.n	b44ba <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b44ac:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44ae:	e7f9      	b.n	b44a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b44b0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b44b2:	b14b      	cbz	r3, b44c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b44b4:	889a      	ldrh	r2, [r3, #4]
   b44b6:	2a01      	cmp	r2, #1
   b44b8:	d1fa      	bne.n	b44b0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b44ba:	b12b      	cbz	r3, b44c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b44bc:	899a      	ldrh	r2, [r3, #12]
   b44be:	42ba      	cmp	r2, r7
   b44c0:	d1f6      	bne.n	b44b0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b44c2:	739e      	strb	r6, [r3, #14]
    }
   b44c4:	4628      	mov	r0, r5
   b44c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b44c8:	490a      	ldr	r1, [pc, #40]	; (b44f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b44ca:	2010      	movs	r0, #16
   b44cc:	f004 facc 	bl	b8a68 <_ZnwjRKSt9nothrow_t>
   b44d0:	4604      	mov	r4, r0
   b44d2:	b168      	cbz	r0, b44f0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b44d4:	2210      	movs	r2, #16
   b44d6:	2100      	movs	r1, #0
   b44d8:	f004 ff62 	bl	b93a0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b44dc:	4b06      	ldr	r3, [pc, #24]	; (b44f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b44de:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b44e0:	2301      	movs	r3, #1
   b44e2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b44e4:	692b      	ldr	r3, [r5, #16]
   b44e6:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b44e8:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b44ea:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b44ec:	612c      	str	r4, [r5, #16]
   b44ee:	e7e9      	b.n	b44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b44f0:	7528      	strb	r0, [r5, #20]
                return *this;
   b44f2:	e7e7      	b.n	b44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b44f4:	000b9f44 	.word	0x000b9f44
   b44f8:	00030010 	.word	0x00030010

000b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b44fc:	b510      	push	{r4, lr}
   b44fe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4500:	6800      	ldr	r0, [r0, #0]
   b4502:	b118      	cbz	r0, b450c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b4504:	f002 fef2 	bl	b72ec <free>
            wakeupSource_ = nullptr;
   b4508:	2300      	movs	r3, #0
   b450a:	6023      	str	r3, [r4, #0]
        }
    }
   b450c:	bd10      	pop	{r4, pc}

000b450e <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   b450e:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b4510:	2301      	movs	r3, #1
   b4512:	2208      	movs	r2, #8
   b4514:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b4518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b451c:	2300      	movs	r3, #0
   b451e:	4341      	muls	r1, r0
   b4520:	466a      	mov	r2, sp
   b4522:	4618      	mov	r0, r3
   b4524:	f002 fe62 	bl	b71ec <spark_set_connection_property>
    }
   b4528:	b003      	add	sp, #12
   b452a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4530 <_Z16setThirdPartySim6String>:
{
   b4530:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4532:	491c      	ldr	r1, [pc, #112]	; (b45a4 <_Z16setThirdPartySim6String+0x74>)
   b4534:	4605      	mov	r5, r0
   b4536:	f003 fdea 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b453a:	4604      	mov	r4, r0
   b453c:	b300      	cbz	r0, b4580 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   b453e:	4c1a      	ldr	r4, [pc, #104]	; (b45a8 <_Z16setThirdPartySim6String+0x78>)
   b4540:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4542:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   b4544:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4546:	f7ff ffe2 	bl	b450e <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b454a:	6863      	ldr	r3, [r4, #4]
   b454c:	4817      	ldr	r0, [pc, #92]	; (b45ac <_Z16setThirdPartySim6String+0x7c>)
   b454e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4552:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4556:	4359      	muls	r1, r3
   b4558:	f7ff ff24 	bl	b43a4 <_ZN5Timer12changePeriodEjj.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b455c:	f002 fe0e 	bl	b717c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b4560:	b148      	cbz	r0, b4576 <_Z16setThirdPartySim6String+0x46>
        val_(0) {
   b4562:	2300      	movs	r3, #0
   b4564:	f88d 3000 	strb.w	r3, [sp]
   b4568:	4b11      	ldr	r3, [pc, #68]	; (b45b0 <_Z16setThirdPartySim6String+0x80>)
   b456a:	4a12      	ldr	r2, [pc, #72]	; (b45b4 <_Z16setThirdPartySim6String+0x84>)
   b456c:	781b      	ldrb	r3, [r3, #0]
   b456e:	4912      	ldr	r1, [pc, #72]	; (b45b8 <_Z16setThirdPartySim6String+0x88>)
   b4570:	4812      	ldr	r0, [pc, #72]	; (b45bc <_Z16setThirdPartySim6String+0x8c>)
   b4572:	f7ff fe30 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b4576:	4b12      	ldr	r3, [pc, #72]	; (b45c0 <_Z16setThirdPartySim6String+0x90>)
   b4578:	2001      	movs	r0, #1
   b457a:	7018      	strb	r0, [r3, #0]
}
   b457c:	b003      	add	sp, #12
   b457e:	bd30      	pop	{r4, r5, pc}
   b4580:	4910      	ldr	r1, [pc, #64]	; (b45c4 <_Z16setThirdPartySim6String+0x94>)
   b4582:	4628      	mov	r0, r5
   b4584:	f003 fdc3 	bl	b810e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4588:	2800      	cmp	r0, #0
   b458a:	d0f7      	beq.n	b457c <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   b458c:	4b06      	ldr	r3, [pc, #24]	; (b45a8 <_Z16setThirdPartySim6String+0x78>)
   b458e:	705c      	strb	r4, [r3, #1]
   b4590:	f002 fdf4 	bl	b717c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   b4594:	2800      	cmp	r0, #0
   b4596:	d0ee      	beq.n	b4576 <_Z16setThirdPartySim6String+0x46>
   b4598:	4b05      	ldr	r3, [pc, #20]	; (b45b0 <_Z16setThirdPartySim6String+0x80>)
   b459a:	f88d 4000 	strb.w	r4, [sp]
   b459e:	781b      	ldrb	r3, [r3, #0]
   b45a0:	4a09      	ldr	r2, [pc, #36]	; (b45c8 <_Z16setThirdPartySim6String+0x98>)
   b45a2:	e7e4      	b.n	b456e <_Z16setThirdPartySim6String+0x3e>
   b45a4:	000b96eb 	.word	0x000b96eb
   b45a8:	2003e5c4 	.word	0x2003e5c4
   b45ac:	2003e4ec 	.word	0x2003e4ec
   b45b0:	2003e48d 	.word	0x2003e48d
   b45b4:	000b97a3 	.word	0x000b97a3
   b45b8:	000b9758 	.word	0x000b9758
   b45bc:	2003e520 	.word	0x2003e520
   b45c0:	2003e5e0 	.word	0x2003e5e0
   b45c4:	000b9746 	.word	0x000b9746
   b45c8:	000b97b8 	.word	0x000b97b8

000b45cc <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif // HAL_PLATFORM_NRF52840

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   b45cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b45ce:	4d32      	ldr	r5, [pc, #200]	; (b4698 <digitalWriteFast+0xcc>)
   b45d0:	4c32      	ldr	r4, [pc, #200]	; (b469c <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b45d2:	782b      	ldrb	r3, [r5, #0]
   b45d4:	f3bf 8f5b 	dmb	ish
   b45d8:	0106      	lsls	r6, r0, #4
    if (value)
   b45da:	b371      	cbz	r1, b463a <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b45dc:	07d8      	lsls	r0, r3, #31
   b45de:	d409      	bmi.n	b45f4 <digitalWriteFast+0x28>
   b45e0:	4628      	mov	r0, r5
   b45e2:	f7ff fd6b 	bl	b40bc <__cxa_guard_acquire>
   b45e6:	b128      	cbz	r0, b45f4 <digitalWriteFast+0x28>
   b45e8:	f002 fbde 	bl	b6da8 <HAL_Pin_Map>
   b45ec:	6020      	str	r0, [r4, #0]
   b45ee:	4628      	mov	r0, r5
   b45f0:	f7ff fd69 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b45f4:	6823      	ldr	r3, [r4, #0]
   b45f6:	5d9b      	ldrb	r3, [r3, r6]
   b45f8:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b45fa:	782b      	ldrb	r3, [r5, #0]
   b45fc:	f3bf 8f5b 	dmb	ish
   b4600:	07d9      	lsls	r1, r3, #31
   b4602:	d409      	bmi.n	b4618 <digitalWriteFast+0x4c>
   b4604:	4824      	ldr	r0, [pc, #144]	; (b4698 <digitalWriteFast+0xcc>)
   b4606:	f7ff fd59 	bl	b40bc <__cxa_guard_acquire>
   b460a:	b128      	cbz	r0, b4618 <digitalWriteFast+0x4c>
   b460c:	f002 fbcc 	bl	b6da8 <HAL_Pin_Map>
   b4610:	6020      	str	r0, [r4, #0]
   b4612:	4821      	ldr	r0, [pc, #132]	; (b4698 <digitalWriteFast+0xcc>)
   b4614:	f7ff fd57 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4618:	6820      	ldr	r0, [r4, #0]
   b461a:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b461c:	a801      	add	r0, sp, #4
   b461e:	7873      	ldrb	r3, [r6, #1]
   b4620:	f003 031f 	and.w	r3, r3, #31
   b4624:	433b      	orrs	r3, r7
   b4626:	9301      	str	r3, [sp, #4]
   b4628:	f7ff fd56 	bl	b40d8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b462c:	9a01      	ldr	r2, [sp, #4]
   b462e:	2301      	movs	r3, #1
   b4630:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4632:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   b4636:	b003      	add	sp, #12
   b4638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b463a:	07da      	lsls	r2, r3, #31
   b463c:	d409      	bmi.n	b4652 <digitalWriteFast+0x86>
   b463e:	4628      	mov	r0, r5
   b4640:	f7ff fd3c 	bl	b40bc <__cxa_guard_acquire>
   b4644:	b128      	cbz	r0, b4652 <digitalWriteFast+0x86>
   b4646:	f002 fbaf 	bl	b6da8 <HAL_Pin_Map>
   b464a:	6020      	str	r0, [r4, #0]
   b464c:	4628      	mov	r0, r5
   b464e:	f7ff fd3a 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4652:	6823      	ldr	r3, [r4, #0]
   b4654:	5d9b      	ldrb	r3, [r3, r6]
   b4656:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4658:	782b      	ldrb	r3, [r5, #0]
   b465a:	f3bf 8f5b 	dmb	ish
   b465e:	07db      	lsls	r3, r3, #31
   b4660:	d409      	bmi.n	b4676 <digitalWriteFast+0xaa>
   b4662:	480d      	ldr	r0, [pc, #52]	; (b4698 <digitalWriteFast+0xcc>)
   b4664:	f7ff fd2a 	bl	b40bc <__cxa_guard_acquire>
   b4668:	b128      	cbz	r0, b4676 <digitalWriteFast+0xaa>
   b466a:	f002 fb9d 	bl	b6da8 <HAL_Pin_Map>
   b466e:	6020      	str	r0, [r4, #0]
   b4670:	4809      	ldr	r0, [pc, #36]	; (b4698 <digitalWriteFast+0xcc>)
   b4672:	f7ff fd28 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4676:	6820      	ldr	r0, [r4, #0]
   b4678:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b467a:	a801      	add	r0, sp, #4
   b467c:	7873      	ldrb	r3, [r6, #1]
   b467e:	f003 031f 	and.w	r3, r3, #31
   b4682:	433b      	orrs	r3, r7
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	f7ff fd27 	bl	b40d8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b468a:	9a01      	ldr	r2, [sp, #4]
   b468c:	2301      	movs	r3, #1
   b468e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b4690:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   b4694:	e7cf      	b.n	b4636 <digitalWriteFast+0x6a>
   b4696:	bf00      	nop
   b4698:	2003e468 	.word	0x2003e468
   b469c:	2003e46c 	.word	0x2003e46c

000b46a0 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   b46a0:	b507      	push	{r0, r1, r2, lr}
   b46a2:	f002 fd6b 	bl	b717c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   b46a6:	b148      	cbz	r0, b46bc <_Z18loadSystemDefaultsv+0x1c>
   b46a8:	2300      	movs	r3, #0
   b46aa:	f88d 3000 	strb.w	r3, [sp]
   b46ae:	4b0b      	ldr	r3, [pc, #44]	; (b46dc <_Z18loadSystemDefaultsv+0x3c>)
   b46b0:	4a0b      	ldr	r2, [pc, #44]	; (b46e0 <_Z18loadSystemDefaultsv+0x40>)
   b46b2:	781b      	ldrb	r3, [r3, #0]
   b46b4:	490b      	ldr	r1, [pc, #44]	; (b46e4 <_Z18loadSystemDefaultsv+0x44>)
   b46b6:	480c      	ldr	r0, [pc, #48]	; (b46e8 <_Z18loadSystemDefaultsv+0x48>)
   b46b8:	f7ff fd8d 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatus.keepAlive = 120;
   b46bc:	4a0b      	ldr	r2, [pc, #44]	; (b46ec <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b46be:	480c      	ldr	r0, [pc, #48]	; (b46f0 <_Z18loadSystemDefaultsv+0x50>)
   b46c0:	2378      	movs	r3, #120	; 0x78
   b46c2:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   b46c4:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   b46c6:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   b46c8:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   b46ca:	7293      	strb	r3, [r2, #10]
   b46cc:	231c      	movs	r3, #28
  sysStatus.structuresVersion = 1;
   b46ce:	8011      	strh	r1, [r2, #0]
}
   b46d0:	b003      	add	sp, #12
   b46d2:	f85d eb04 	ldr.w	lr, [sp], #4
   b46d6:	f001 ba32 	b.w	b5b3e <_ZN6MB85RC9writeDataEjPKhj>
   b46da:	bf00      	nop
   b46dc:	2003e48d 	.word	0x2003e48d
   b46e0:	000b97cc 	.word	0x000b97cc
   b46e4:	000b9758 	.word	0x000b9758
   b46e8:	2003e520 	.word	0x2003e520
   b46ec:	2003e5c4 	.word	0x2003e5c4
   b46f0:	2003e4cc 	.word	0x2003e4cc

000b46f4 <_Z17checkSystemValuesv>:
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   b46f4:	4b08      	ldr	r3, [pc, #32]	; (b4718 <_Z17checkSystemValuesv+0x24>)
   b46f6:	685a      	ldr	r2, [r3, #4]
   b46f8:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
   b46fc:	bf84      	itt	hi
   b46fe:	f44f 7216 	movhi.w	r2, #600	; 0x258
   b4702:	605a      	strhi	r2, [r3, #4]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b4704:	695a      	ldr	r2, [r3, #20]
   b4706:	2aff      	cmp	r2, #255	; 0xff
   b4708:	bf84      	itt	hi
   b470a:	2200      	movhi	r2, #0
   b470c:	615a      	strhi	r2, [r3, #20]
  systemStatusWriteNeeded = true;
   b470e:	4b03      	ldr	r3, [pc, #12]	; (b471c <_Z17checkSystemValuesv+0x28>)
   b4710:	2201      	movs	r2, #1
   b4712:	701a      	strb	r2, [r3, #0]
}
   b4714:	4770      	bx	lr
   b4716:	bf00      	nop
   b4718:	2003e5c4 	.word	0x2003e5c4
   b471c:	2003e5e0 	.word	0x2003e5e0

000b4720 <_Z11petWatchdogv>:
{
   b4720:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   b4722:	2101      	movs	r1, #1
   b4724:	2005      	movs	r0, #5
   b4726:	f7ff ff51 	bl	b45cc <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   b472a:	2100      	movs	r1, #0
   b472c:	2005      	movs	r0, #5
   b472e:	f7ff ff4d 	bl	b45cc <digitalWriteFast>
  watchdogFlag = false;
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <_Z11petWatchdogv+0x1c>)
   b4734:	2200      	movs	r2, #0
   b4736:	701a      	strb	r2, [r3, #0]
}
   b4738:	bd08      	pop	{r3, pc}
   b473a:	bf00      	nop
   b473c:	2003e630 	.word	0x2003e630

000b4740 <_Z9sendEventv>:
{
   b4740:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b4742:	4c1d      	ldr	r4, [pc, #116]	; (b47b8 <_Z9sendEventv+0x78>)
{
   b4744:	b0ce      	sub	sp, #312	; 0x138
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b4746:	6a23      	ldr	r3, [r4, #32]
   b4748:	69e0      	ldr	r0, [r4, #28]
   b474a:	930c      	str	r3, [sp, #48]	; 0x30
   b474c:	f004 faf8 	bl	b8d40 <__aeabi_f2d>
   b4750:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4754:	69a0      	ldr	r0, [r4, #24]
   b4756:	f004 faf3 	bl	b8d40 <__aeabi_f2d>
   b475a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b475e:	6960      	ldr	r0, [r4, #20]
   b4760:	f004 faee 	bl	b8d40 <__aeabi_f2d>
   b4764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4766:	9305      	str	r3, [sp, #20]
   b4768:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b476c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b476e:	6920      	ldr	r0, [r4, #16]
   b4770:	9304      	str	r3, [sp, #16]
   b4772:	f004 fae5 	bl	b8d40 <__aeabi_f2d>
   b4776:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b477a:	68e0      	ldr	r0, [r4, #12]
   b477c:	f004 fae0 	bl	b8d40 <__aeabi_f2d>
   b4780:	4a0e      	ldr	r2, [pc, #56]	; (b47bc <_Z9sendEventv+0x7c>)
   b4782:	e9cd 0100 	strd	r0, r1, [sp]
   b4786:	f44f 7180 	mov.w	r1, #256	; 0x100
   b478a:	a80e      	add	r0, sp, #56	; 0x38
   b478c:	f002 fdc6 	bl	b731c <snprintf>
  publishQueue.publish("environmental-hook", data, PRIVATE);
   b4790:	2300      	movs	r3, #0
   b4792:	f88d 3000 	strb.w	r3, [sp]
   b4796:	4b0a      	ldr	r3, [pc, #40]	; (b47c0 <_Z9sendEventv+0x80>)
   b4798:	490a      	ldr	r1, [pc, #40]	; (b47c4 <_Z9sendEventv+0x84>)
   b479a:	781b      	ldrb	r3, [r3, #0]
   b479c:	480a      	ldr	r0, [pc, #40]	; (b47c8 <_Z9sendEventv+0x88>)
   b479e:	aa0e      	add	r2, sp, #56	; 0x38
   b47a0:	f7ff fd19 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b47a4:	4b09      	ldr	r3, [pc, #36]	; (b47cc <_Z9sendEventv+0x8c>)
   b47a6:	2201      	movs	r2, #1
   b47a8:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b47aa:	f002 fad5 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   b47ae:	4b08      	ldr	r3, [pc, #32]	; (b47d0 <_Z9sendEventv+0x90>)
   b47b0:	6018      	str	r0, [r3, #0]
}
   b47b2:	b04e      	add	sp, #312	; 0x138
   b47b4:	bd10      	pop	{r4, pc}
   b47b6:	bf00      	nop
   b47b8:	2003e57c 	.word	0x2003e57c
   b47bc:	000b97e4 	.word	0x000b97e4
   b47c0:	2003e48d 	.word	0x2003e48d
   b47c4:	000b986f 	.word	0x000b986f
   b47c8:	2003e520 	.word	0x2003e520
   b47cc:	2003e4c8 	.word	0x2003e4c8
   b47d0:	2003e634 	.word	0x2003e634

000b47d4 <_Z22publishStateTransitionv>:
{
   b47d4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47d6:	4d11      	ldr	r5, [pc, #68]	; (b481c <_Z22publishStateTransitionv+0x48>)
   b47d8:	4c11      	ldr	r4, [pc, #68]	; (b4820 <_Z22publishStateTransitionv+0x4c>)
   b47da:	4912      	ldr	r1, [pc, #72]	; (b4824 <_Z22publishStateTransitionv+0x50>)
   b47dc:	782a      	ldrb	r2, [r5, #0]
   b47de:	7820      	ldrb	r0, [r4, #0]
{
   b47e0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47e2:	231a      	movs	r3, #26
   b47e4:	fb03 1202 	mla	r2, r3, r2, r1
   b47e8:	9200      	str	r2, [sp, #0]
   b47ea:	fb03 1300 	mla	r3, r3, r0, r1
   b47ee:	4a0e      	ldr	r2, [pc, #56]	; (b4828 <_Z22publishStateTransitionv+0x54>)
   b47f0:	2128      	movs	r1, #40	; 0x28
   b47f2:	a802      	add	r0, sp, #8
   b47f4:	f002 fd92 	bl	b731c <snprintf>
  oldState = state;
   b47f8:	782b      	ldrb	r3, [r5, #0]
   b47fa:	7023      	strb	r3, [r4, #0]
   b47fc:	f002 fcbe 	bl	b717c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   b4800:	b148      	cbz	r0, b4816 <_Z22publishStateTransitionv+0x42>
   b4802:	2300      	movs	r3, #0
   b4804:	f88d 3000 	strb.w	r3, [sp]
   b4808:	4b08      	ldr	r3, [pc, #32]	; (b482c <_Z22publishStateTransitionv+0x58>)
   b480a:	4909      	ldr	r1, [pc, #36]	; (b4830 <_Z22publishStateTransitionv+0x5c>)
   b480c:	781b      	ldrb	r3, [r3, #0]
   b480e:	4809      	ldr	r0, [pc, #36]	; (b4834 <_Z22publishStateTransitionv+0x60>)
   b4810:	aa02      	add	r2, sp, #8
   b4812:	f7ff fce0 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b4816:	b00d      	add	sp, #52	; 0x34
   b4818:	bd30      	pop	{r4, r5, pc}
   b481a:	bf00      	nop
   b481c:	2003e5b8 	.word	0x2003e5b8
   b4820:	2003e51e 	.word	0x2003e51e
   b4824:	2003e328 	.word	0x2003e328
   b4828:	000b9882 	.word	0x000b9882
   b482c:	2003e48d 	.word	0x2003e48d
   b4830:	000b9890 	.word	0x000b9890
   b4834:	2003e520 	.word	0x2003e520

000b4838 <_Z17connectToParticlev>:
/*

*/


bool connectToParticle() {
   b4838:	b570      	push	{r4, r5, r6, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b483a:	481b      	ldr	r0, [pc, #108]	; (b48a8 <_Z17connectToParticlev+0x70>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b483c:	4e1b      	ldr	r6, [pc, #108]	; (b48ac <_Z17connectToParticlev+0x74>)
   b483e:	6840      	ldr	r0, [r0, #4]
   b4840:	2300      	movs	r3, #0
   b4842:	461a      	mov	r2, r3
   b4844:	4619      	mov	r1, r3
   b4846:	f002 fd09 	bl	b725c <network_on>
        spark_cloud_flag_connect();
   b484a:	f002 fc8f 	bl	b716c <spark_cloud_flag_connect>
   b484e:	f44f 7596 	mov.w	r5, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4852:	2000      	movs	r0, #0
   b4854:	f002 fa90 	bl	b6d78 <hal_timer_millis>
   b4858:	4604      	mov	r4, r0
   b485a:	2000      	movs	r0, #0
   b485c:	f002 fa8c 	bl	b6d78 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4860:	1b00      	subs	r0, r0, r4
   b4862:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4866:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b486a:	f171 0300 	sbcs.w	r3, r1, #0
   b486e:	d205      	bcs.n	b487c <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4870:	f002 fc84 	bl	b717c <spark_cloud_flag_connected>
   b4874:	b910      	cbnz	r0, b487c <_Z17connectToParticlev+0x44>
            spark_process();
   b4876:	f002 fc71 	bl	b715c <spark_process>
        while (_while() && !_condition()) {
   b487a:	e7ee      	b.n	b485a <_Z17connectToParticlev+0x22>
   b487c:	f002 fc7e 	bl	b717c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   b4880:	b940      	cbnz	r0, b4894 <_Z17connectToParticlev+0x5c>
		return HAL_Timer_Get_Milli_Seconds();
   b4882:	f002 fa69 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4886:	6030      	str	r0, [r6, #0]
    		spark_process();
   b4888:	f002 fc68 	bl	b715c <spark_process>
    Particle.process();                                           // Keeps the device responsive as it is not traversing the main loop
    petWatchdog();                                                // Pet the watchdog as we are out of the main loop for a long time.
   b488c:	f7ff ff48 	bl	b4720 <_Z11petWatchdogv>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   b4890:	3d01      	subs	r5, #1
   b4892:	d1de      	bne.n	b4852 <_Z17connectToParticlev+0x1a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4894:	f002 fc72 	bl	b717c <spark_cloud_flag_connected>
  }
  if (Particle.connected()) {
   b4898:	b120      	cbz	r0, b48a4 <_Z17connectToParticlev+0x6c>
    sysStatus.connectedStatus = true;
   b489a:	4a05      	ldr	r2, [pc, #20]	; (b48b0 <_Z17connectToParticlev+0x78>)
   b489c:	2301      	movs	r3, #1
   b489e:	7213      	strb	r3, [r2, #8]
    systemStatusWriteNeeded = true;
   b48a0:	4a04      	ldr	r2, [pc, #16]	; (b48b4 <_Z17connectToParticlev+0x7c>)
   b48a2:	7013      	strb	r3, [r2, #0]
    return 1;                                                     // Were able to connect successfully
  }
  else {
    return 0;                                                     // Failed to connect
  }
}
   b48a4:	bd70      	pop	{r4, r5, r6, pc}
   b48a6:	bf00      	nop
   b48a8:	2003e654 	.word	0x2003e654
   b48ac:	2003e72c 	.word	0x2003e72c
   b48b0:	2003e5c4 	.word	0x2003e5c4
   b48b4:	2003e5e0 	.word	0x2003e5e0

000b48b8 <_Z15setLowPowerMode6String>:
{
   b48b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b48ba:	4927      	ldr	r1, [pc, #156]	; (b4958 <_Z15setLowPowerMode6String+0xa0>)
   b48bc:	4604      	mov	r4, r0
   b48be:	f003 fc26 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b48c2:	b340      	cbz	r0, b4916 <_Z15setLowPowerMode6String+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b48c4:	4924      	ldr	r1, [pc, #144]	; (b4958 <_Z15setLowPowerMode6String+0xa0>)
   b48c6:	4620      	mov	r0, r4
   b48c8:	f003 fc21 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   b48cc:	bb58      	cbnz	r0, b4926 <_Z15setLowPowerMode6String+0x6e>
   b48ce:	4923      	ldr	r1, [pc, #140]	; (b495c <_Z15setLowPowerMode6String+0xa4>)
   b48d0:	4620      	mov	r0, r4
   b48d2:	f003 fc1c 	bl	b810e <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   b48d6:	2800      	cmp	r0, #0
   b48d8:	d03a      	beq.n	b4950 <_Z15setLowPowerMode6String+0x98>
   b48da:	f002 fc4f 	bl	b717c <spark_cloud_flag_connected>
   b48de:	4c20      	ldr	r4, [pc, #128]	; (b4960 <_Z15setLowPowerMode6String+0xa8>)
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   b48e0:	b918      	cbnz	r0, b48ea <_Z15setLowPowerMode6String+0x32>
      connectToParticle();
   b48e2:	f7ff ffa9 	bl	b4838 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   b48e6:	2301      	movs	r3, #1
   b48e8:	7223      	strb	r3, [r4, #8]
   b48ea:	2500      	movs	r5, #0
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
   b48ec:	4b1d      	ldr	r3, [pc, #116]	; (b4964 <_Z15setLowPowerMode6String+0xac>)
   b48ee:	f88d 5000 	strb.w	r5, [sp]
   b48f2:	781b      	ldrb	r3, [r3, #0]
   b48f4:	4a1c      	ldr	r2, [pc, #112]	; (b4968 <_Z15setLowPowerMode6String+0xb0>)
   b48f6:	491d      	ldr	r1, [pc, #116]	; (b496c <_Z15setLowPowerMode6String+0xb4>)
   b48f8:	481d      	ldr	r0, [pc, #116]	; (b4970 <_Z15setLowPowerMode6String+0xb8>)
   b48fa:	f7ff fc6c 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    delay(1000);                                                      // Need to make sure the message gets out.
   b48fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4902:	f002 fd67 	bl	b73d4 <delay>
    strncpy(lowPowerModeStr,"False", sizeof(lowPowerModeStr));                                  // Use capitalization so we know that we set this.
   b4906:	4a1b      	ldr	r2, [pc, #108]	; (b4974 <_Z15setLowPowerMode6String+0xbc>)
   b4908:	4b1b      	ldr	r3, [pc, #108]	; (b4978 <_Z15setLowPowerMode6String+0xc0>)
   b490a:	6811      	ldr	r1, [r2, #0]
   b490c:	8892      	ldrh	r2, [r2, #4]
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   b490e:	72e5      	strb	r5, [r4, #11]
    strncpy(lowPowerModeStr,"False", sizeof(lowPowerModeStr));                                  // Use capitalization so we know that we set this.
   b4910:	6019      	str	r1, [r3, #0]
   b4912:	809a      	strh	r2, [r3, #4]
   b4914:	e01c      	b.n	b4950 <_Z15setLowPowerMode6String+0x98>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4916:	4911      	ldr	r1, [pc, #68]	; (b495c <_Z15setLowPowerMode6String+0xa4>)
   b4918:	4620      	mov	r0, r4
   b491a:	f003 fbf8 	bl	b810e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b491e:	2800      	cmp	r0, #0
   b4920:	d1d0      	bne.n	b48c4 <_Z15setLowPowerMode6String+0xc>
}
   b4922:	b003      	add	sp, #12
   b4924:	bd30      	pop	{r4, r5, pc}
   b4926:	f002 fc29 	bl	b717c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b492a:	b148      	cbz	r0, b4940 <_Z15setLowPowerMode6String+0x88>
   b492c:	2300      	movs	r3, #0
      publishQueue.publish("Mode","Low Power Mode", PRIVATE);
   b492e:	f88d 3000 	strb.w	r3, [sp]
   b4932:	4b0c      	ldr	r3, [pc, #48]	; (b4964 <_Z15setLowPowerMode6String+0xac>)
   b4934:	4a11      	ldr	r2, [pc, #68]	; (b497c <_Z15setLowPowerMode6String+0xc4>)
   b4936:	781b      	ldrb	r3, [r3, #0]
   b4938:	490c      	ldr	r1, [pc, #48]	; (b496c <_Z15setLowPowerMode6String+0xb4>)
   b493a:	480d      	ldr	r0, [pc, #52]	; (b4970 <_Z15setLowPowerMode6String+0xb8>)
   b493c:	f7ff fc4b 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatus.lowPowerMode = true;
   b4940:	4b07      	ldr	r3, [pc, #28]	; (b4960 <_Z15setLowPowerMode6String+0xa8>)
    strncpy(lowPowerModeStr,"True", sizeof(lowPowerModeStr));
   b4942:	490f      	ldr	r1, [pc, #60]	; (b4980 <_Z15setLowPowerMode6String+0xc8>)
   b4944:	480c      	ldr	r0, [pc, #48]	; (b4978 <_Z15setLowPowerMode6String+0xc0>)
    sysStatus.lowPowerMode = true;
   b4946:	2201      	movs	r2, #1
   b4948:	72da      	strb	r2, [r3, #11]
    strncpy(lowPowerModeStr,"True", sizeof(lowPowerModeStr));
   b494a:	2206      	movs	r2, #6
   b494c:	f004 fd95 	bl	b947a <strncpy>
  systemStatusWriteNeeded = true;
   b4950:	4b0c      	ldr	r3, [pc, #48]	; (b4984 <_Z15setLowPowerMode6String+0xcc>)
   b4952:	2001      	movs	r0, #1
   b4954:	7018      	strb	r0, [r3, #0]
  return 1;
   b4956:	e7e4      	b.n	b4922 <_Z15setLowPowerMode6String+0x6a>
   b4958:	000b96eb 	.word	0x000b96eb
   b495c:	000b9746 	.word	0x000b9746
   b4960:	2003e5c4 	.word	0x2003e5c4
   b4964:	2003e48d 	.word	0x2003e48d
   b4968:	000b98b5 	.word	0x000b98b5
   b496c:	000b9758 	.word	0x000b9758
   b4970:	2003e520 	.word	0x2003e520
   b4974:	000b98c7 	.word	0x000b98c7
   b4978:	2003e508 	.word	0x2003e508
   b497c:	000b98a1 	.word	0x000b98a1
   b4980:	000b98b0 	.word	0x000b98b0
   b4984:	2003e5e0 	.word	0x2003e5e0

000b4988 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   b4988:	b508      	push	{r3, lr}
   b498a:	f002 fbf7 	bl	b717c <spark_cloud_flag_connected>
  return !Particle.connected();
   b498e:	f080 0001 	eor.w	r0, r0, #1
}
   b4992:	b2c0      	uxtb	r0, r0
   b4994:	bd08      	pop	{r3, pc}
	...

000b4998 <_Z22disconnectFromParticlev>:
{
   b4998:	b530      	push	{r4, r5, lr}
   b499a:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b499c:	2400      	movs	r4, #0
  Particle.disconnect();
   b499e:	a801      	add	r0, sp, #4
   b49a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b49a4:	f8ad 400c 	strh.w	r4, [sp, #12]
   b49a8:	f002 fe1a 	bl	b75e0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b49ac:	4620      	mov	r0, r4
   b49ae:	f002 f9e3 	bl	b6d78 <hal_timer_millis>
        while (_while() && !_condition()) {
   b49b2:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b49b6:	4604      	mov	r4, r0
   b49b8:	2000      	movs	r0, #0
   b49ba:	f002 f9dd 	bl	b6d78 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b49be:	1b00      	subs	r0, r0, r4
   b49c0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b49c4:	42a8      	cmp	r0, r5
   b49c6:	f171 0300 	sbcs.w	r3, r1, #0
   b49ca:	d205      	bcs.n	b49d8 <_Z22disconnectFromParticlev+0x40>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   b49cc:	f7ff ffdc 	bl	b4988 <_Z12notConnectedv>
   b49d0:	b910      	cbnz	r0, b49d8 <_Z22disconnectFromParticlev+0x40>
            spark_process();
   b49d2:	f002 fbc3 	bl	b715c <spark_process>
        while (_while() && !_condition()) {
   b49d6:	e7ef      	b.n	b49b8 <_Z22disconnectFromParticlev+0x20>
   b49d8:	f7ff ffd6 	bl	b4988 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b49dc:	4809      	ldr	r0, [pc, #36]	; (b4a04 <_Z22disconnectFromParticlev+0x6c>)
   b49de:	2300      	movs	r3, #0
   b49e0:	4619      	mov	r1, r3
   b49e2:	461a      	mov	r2, r3
   b49e4:	6840      	ldr	r0, [r0, #4]
   b49e6:	f002 fc41 	bl	b726c <network_off>
  sysStatus.connectedStatus = false;
   b49ea:	4b07      	ldr	r3, [pc, #28]	; (b4a08 <_Z22disconnectFromParticlev+0x70>)
   b49ec:	2200      	movs	r2, #0
   b49ee:	721a      	strb	r2, [r3, #8]
  systemStatusWriteNeeded = true;
   b49f0:	4b06      	ldr	r3, [pc, #24]	; (b4a0c <_Z22disconnectFromParticlev+0x74>)
   b49f2:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   b49f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   b49f8:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   b49fa:	f002 fceb 	bl	b73d4 <delay>
}
   b49fe:	4620      	mov	r0, r4
   b4a00:	b005      	add	sp, #20
   b4a02:	bd30      	pop	{r4, r5, pc}
   b4a04:	2003e654 	.word	0x2003e654
   b4a08:	2003e5c4 	.word	0x2003e5c4
   b4a0c:	2003e5e0 	.word	0x2003e5e0

000b4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b4a10:	b530      	push	{r4, r5, lr}
   b4a12:	b085      	sub	sp, #20
   b4a14:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b4a16:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b4a18:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b4a1a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b4a1c:	f002 fb1c 	bl	b7058 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b4a20:	b990      	cbnz	r0, b4a48 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b4a22:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b4a24:	b10c      	cbz	r4, b4a2a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b4a26:	6923      	ldr	r3, [r4, #16]
   b4a28:	b923      	cbnz	r3, b4a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b4a2a:	4a08      	ldr	r2, [pc, #32]	; (b4a4c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b4a2c:	4908      	ldr	r1, [pc, #32]	; (b4a50 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b4a2e:	200a      	movs	r0, #10
   b4a30:	f002 fafa 	bl	b7028 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4a34:	230c      	movs	r3, #12
   b4a36:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b4a3a:	2304      	movs	r3, #4
   b4a3c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b4a3e:	aa01      	add	r2, sp, #4
   b4a40:	6923      	ldr	r3, [r4, #16]
   b4a42:	2101      	movs	r1, #1
   b4a44:	4620      	mov	r0, r4
   b4a46:	4798      	blx	r3
}
   b4a48:	b005      	add	sp, #20
   b4a4a:	bd30      	pop	{r4, r5, pc}
   b4a4c:	000b6d49 	.word	0x000b6d49
   b4a50:	000b98cd 	.word	0x000b98cd

000b4a54 <_Z17getBatteryContextv>:
void getBatteryContext() {
   b4a54:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a56:	4d0e      	ldr	r5, [pc, #56]	; (b4a90 <_Z17getBatteryContextv+0x3c>)
   b4a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   b4a5a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a5c:	ac01      	add	r4, sp, #4
   b4a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b4a68:	4669      	mov	r1, sp
   b4a6a:	2007      	movs	r0, #7
   b4a6c:	f7ff ffd0 	bl	b4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b4a70:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   b4a72:	bfa8      	it	ge
   b4a74:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b4a76:	4a07      	ldr	r2, [pc, #28]	; (b4a94 <_Z17getBatteryContextv+0x40>)
   b4a78:	ab08      	add	r3, sp, #32
   b4a7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b4a7e:	2110      	movs	r1, #16
   b4a80:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b4a84:	4804      	ldr	r0, [pc, #16]	; (b4a98 <_Z17getBatteryContextv+0x44>)
}
   b4a86:	b009      	add	sp, #36	; 0x24
   b4a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b4a8c:	f002 bc46 	b.w	b731c <snprintf>
   b4a90:	000b9ac0 	.word	0x000b9ac0
   b4a94:	000b9b94 	.word	0x000b9b94
   b4a98:	2003e48e 	.word	0x2003e48e

000b4a9c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b4a9c:	b570      	push	{r4, r5, r6, lr}
  sensor_data.validData = false;
   b4a9e:	4c61      	ldr	r4, [pc, #388]	; (b4c24 <_Z16takeMeasurementsv+0x188>)
  if (sht31.readTemperature()){
   b4aa0:	4861      	ldr	r0, [pc, #388]	; (b4c28 <_Z16takeMeasurementsv+0x18c>)
bool takeMeasurements() {
   b4aa2:	b086      	sub	sp, #24
  sensor_data.validData = false;
   b4aa4:	2500      	movs	r5, #0
   b4aa6:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   b4aa8:	f002 f8b2 	bl	b6c10 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4aac:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ab4:	f000 80aa 	beq.w	b4c0c <_Z16takeMeasurementsv+0x170>
    sensor_data.temperatureInC = sht31.readTemperature();
   b4ab8:	485b      	ldr	r0, [pc, #364]	; (b4c28 <_Z16takeMeasurementsv+0x18c>)
   b4aba:	f002 f8a9 	bl	b6c10 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4abe:	ee10 0a10 	vmov	r0, s0
   b4ac2:	ed84 0a03 	vstr	s0, [r4, #12]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   b4ac6:	f004 f93b 	bl	b8d40 <__aeabi_f2d>
   b4aca:	4a58      	ldr	r2, [pc, #352]	; (b4c2c <_Z16takeMeasurementsv+0x190>)
   b4acc:	e9cd 0100 	strd	r0, r1, [sp]
   b4ad0:	2110      	movs	r1, #16
   b4ad2:	4857      	ldr	r0, [pc, #348]	; (b4c30 <_Z16takeMeasurementsv+0x194>)
   b4ad4:	f002 fc22 	bl	b731c <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   b4ad8:	4853      	ldr	r0, [pc, #332]	; (b4c28 <_Z16takeMeasurementsv+0x18c>)
   b4ada:	f002 f8a7 	bl	b6c2c <_ZN14Adafruit_SHT3112readHumidityEv>
   b4ade:	ee10 0a10 	vmov	r0, s0
   b4ae2:	ed84 0a04 	vstr	s0, [r4, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   b4ae6:	f004 f92b 	bl	b8d40 <__aeabi_f2d>
   b4aea:	4a52      	ldr	r2, [pc, #328]	; (b4c34 <_Z16takeMeasurementsv+0x198>)
   b4aec:	e9cd 0100 	strd	r0, r1, [sp]
   b4af0:	2110      	movs	r1, #16
   b4af2:	4851      	ldr	r0, [pc, #324]	; (b4c38 <_Z16takeMeasurementsv+0x19c>)
   b4af4:	f002 fc12 	bl	b731c <snprintf>
    sensor_data.lux = veml.readLux();
   b4af8:	4850      	ldr	r0, [pc, #320]	; (b4c3c <_Z16takeMeasurementsv+0x1a0>)
   b4afa:	f000 fe39 	bl	b5770 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   b4afe:	484f      	ldr	r0, [pc, #316]	; (b4c3c <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.lux = veml.readLux();
   b4b00:	ed84 0a05 	vstr	s0, [r4, #20]
    sensor_data.white = veml.readWhite();
   b4b04:	f000 fe54 	bl	b57b0 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   b4b08:	484c      	ldr	r0, [pc, #304]	; (b4c3c <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.white = veml.readWhite();
   b4b0a:	ed84 0a06 	vstr	s0, [r4, #24]
    sensor_data.raw_als = veml.readALS();
   b4b0e:	f000 fdd0 	bl	b56b2 <_ZN17Adafruit_VEML77007readALSEv>
   b4b12:	ee07 0a90 	vmov	s15, r0
   b4b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4b1a:	2664      	movs	r6, #100	; 0x64
   b4b1c:	2013      	movs	r0, #19
    sensor_data.raw_als = veml.readALS();
   b4b1e:	edc4 7a07 	vstr	s15, [r4, #28]
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4b22:	f003 ff0f 	bl	b8944 <analogRead>
   b4b26:	462b      	mov	r3, r5
   b4b28:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4b2c:	4629      	mov	r1, r5
   b4b2e:	9600      	str	r6, [sp, #0]
   b4b30:	f002 fc44 	bl	b73bc <_Z3mapiiiii>
   b4b34:	62a0      	str	r0, [r4, #40]	; 0x28
    sensor_data.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4b36:	2012      	movs	r0, #18
   b4b38:	f003 ff04 	bl	b8944 <analogRead>
   b4b3c:	462b      	mov	r3, r5
   b4b3e:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4b42:	4629      	mov	r1, r5
   b4b44:	9600      	str	r6, [sp, #0]
   b4b46:	f002 fc39 	bl	b73bc <_Z3mapiiiii>
   b4b4a:	62e0      	str	r0, [r4, #44]	; 0x2c
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   b4b4c:	6960      	ldr	r0, [r4, #20]
   b4b4e:	f004 f8f7 	bl	b8d40 <__aeabi_f2d>
   b4b52:	4a3b      	ldr	r2, [pc, #236]	; (b4c40 <_Z16takeMeasurementsv+0x1a4>)
   b4b54:	e9cd 0100 	strd	r0, r1, [sp]
   b4b58:	2110      	movs	r1, #16
   b4b5a:	483a      	ldr	r0, [pc, #232]	; (b4c44 <_Z16takeMeasurementsv+0x1a8>)
   b4b5c:	f002 fbde 	bl	b731c <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   b4b60:	69a0      	ldr	r0, [r4, #24]
   b4b62:	f004 f8ed 	bl	b8d40 <__aeabi_f2d>
   b4b66:	4a38      	ldr	r2, [pc, #224]	; (b4c48 <_Z16takeMeasurementsv+0x1ac>)
   b4b68:	e9cd 0100 	strd	r0, r1, [sp]
   b4b6c:	2110      	movs	r1, #16
   b4b6e:	4837      	ldr	r0, [pc, #220]	; (b4c4c <_Z16takeMeasurementsv+0x1b0>)
   b4b70:	f002 fbd4 	bl	b731c <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   b4b74:	69e0      	ldr	r0, [r4, #28]
   b4b76:	f004 f8e3 	bl	b8d40 <__aeabi_f2d>
   b4b7a:	4a35      	ldr	r2, [pc, #212]	; (b4c50 <_Z16takeMeasurementsv+0x1b4>)
   b4b7c:	e9cd 0100 	strd	r0, r1, [sp]
   b4b80:	2110      	movs	r1, #16
   b4b82:	4834      	ldr	r0, [pc, #208]	; (b4c54 <_Z16takeMeasurementsv+0x1b8>)
   b4b84:	f002 fbca 	bl	b731c <snprintf>
   b4b88:	a902      	add	r1, sp, #8
   b4b8a:	2003      	movs	r0, #3
   b4b8c:	f7ff ff40 	bl	b4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4b90:	2800      	cmp	r0, #0
   b4b92:	d13e      	bne.n	b4c12 <_Z16takeMeasurementsv+0x176>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4b94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4b98:	ee07 3a90 	vmov	s15, r3
   b4b9c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i %", sensor_data.stateOfCharge);
   b4ba4:	2110      	movs	r1, #16
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4ba6:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %", sensor_data.stateOfCharge);
   b4baa:	4a2b      	ldr	r2, [pc, #172]	; (b4c58 <_Z16takeMeasurementsv+0x1bc>)
   b4bac:	482b      	ldr	r0, [pc, #172]	; (b4c5c <_Z16takeMeasurementsv+0x1c0>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4bae:	edc4 7a08 	vstr	s15, [r4, #32]
    snprintf(batteryString, sizeof(batteryString), "%i %", sensor_data.stateOfCharge);
   b4bb2:	f002 fbb3 	bl	b731c <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   b4bb6:	f7ff ff4d 	bl	b4a54 <_Z17getBatteryContextv>
   b4bba:	a902      	add	r1, sp, #8
   b4bbc:	2003      	movs	r0, #3
   b4bbe:	f7ff ff27 	bl	b4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   b4bc2:	bb48      	cbnz	r0, b4c18 <_Z16takeMeasurementsv+0x17c>
   b4bc4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4bc8:	ee07 3a90 	vmov	s15, r3
   b4bcc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b4bd4:	4a22      	ldr	r2, [pc, #136]	; (b4c60 <_Z16takeMeasurementsv+0x1c4>)
   b4bd6:	ee17 3a90 	vmov	r3, s15
    if (sysStatus.stateOfCharge < 30) {
   b4bda:	2b1d      	cmp	r3, #29
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4bdc:	edc2 7a03 	vstr	s15, [r2, #12]
    if (sysStatus.stateOfCharge < 30) {
   b4be0:	dc1d      	bgt.n	b4c1e <_Z16takeMeasurementsv+0x182>
      sysStatus.lowBatteryMode = true;
   b4be2:	2301      	movs	r3, #1
   b4be4:	7293      	strb	r3, [r2, #10]
      if (!sysStatus.lowPowerMode) setLowPowerMode("1");                 // Should be there already but just in case...
   b4be6:	7ad3      	ldrb	r3, [r2, #11]
   b4be8:	b94b      	cbnz	r3, b4bfe <_Z16takeMeasurementsv+0x162>
   b4bea:	491e      	ldr	r1, [pc, #120]	; (b4c64 <_Z16takeMeasurementsv+0x1c8>)
   b4bec:	a802      	add	r0, sp, #8
   b4bee:	f003 fa34 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
   b4bf2:	a802      	add	r0, sp, #8
   b4bf4:	f7ff fe60 	bl	b48b8 <_Z15setLowPowerMode6String>
   b4bf8:	a802      	add	r0, sp, #8
   b4bfa:	f003 f9e3 	bl	b7fc4 <_ZN6StringD1Ev>
    sensor_data.validData = true;
   b4bfe:	2501      	movs	r5, #1
   b4c00:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   b4c02:	f003 fc9c 	bl	b853e <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;  
   b4c06:	4b18      	ldr	r3, [pc, #96]	; (b4c68 <_Z16takeMeasurementsv+0x1cc>)
    sensor_data.timeStamp = Time.now();
   b4c08:	6060      	str	r0, [r4, #4]
    sensorDataWriteNeeded = true;  
   b4c0a:	701d      	strb	r5, [r3, #0]
    }else return 0;
   b4c0c:	4628      	mov	r0, r5
  }                                                                       // Take measurement from all the sensors
   b4c0e:	b006      	add	sp, #24
   b4c10:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   b4c12:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4c16:	e7c3      	b.n	b4ba0 <_Z16takeMeasurementsv+0x104>
   b4c18:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4c1c:	e7d8      	b.n	b4bd0 <_Z16takeMeasurementsv+0x134>
    else sysStatus.lowBatteryMode = false;                              // We have sufficient to continue operations
   b4c1e:	2300      	movs	r3, #0
   b4c20:	7293      	strb	r3, [r2, #10]
   b4c22:	e7ec      	b.n	b4bfe <_Z16takeMeasurementsv+0x162>
   b4c24:	2003e57c 	.word	0x2003e57c
   b4c28:	2003e5ac 	.word	0x2003e5ac
   b4c2c:	000b98f3 	.word	0x000b98f3
   b4c30:	2003e5e1 	.word	0x2003e5e1
   b4c34:	000b98fb 	.word	0x000b98fb
   b4c38:	2003e4dc 	.word	0x2003e4dc
   b4c3c:	2003e5f4 	.word	0x2003e5f4
   b4c40:	000b9903 	.word	0x000b9903
   b4c44:	2003e50e 	.word	0x2003e50e
   b4c48:	000b990f 	.word	0x000b990f
   b4c4c:	2003e638 	.word	0x2003e638
   b4c50:	000b991d 	.word	0x000b991d
   b4c54:	2003e470 	.word	0x2003e470
   b4c58:	000b9929 	.word	0x000b9929
   b4c5c:	2003e49e 	.word	0x2003e49e
   b4c60:	2003e5c4 	.word	0x2003e5c4
   b4c64:	000b96eb 	.word	0x000b96eb
   b4c68:	2003e578 	.word	0x2003e578

000b4c6c <loop>:
{
   b4c6c:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   b4c6e:	4c78      	ldr	r4, [pc, #480]	; (b4e50 <loop+0x1e4>)
   b4c70:	7823      	ldrb	r3, [r4, #0]
   b4c72:	3b01      	subs	r3, #1
{
   b4c74:	b08a      	sub	sp, #40	; 0x28
   b4c76:	2b06      	cmp	r3, #6
   b4c78:	d849      	bhi.n	b4d0e <loop+0xa2>
   b4c7a:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4c7e:	00c1      	.short	0x00c1
   b4c80:	00290007 	.word	0x00290007
   b4c84:	008f006a 	.word	0x008f006a
   b4c88:	015f0115 	.word	0x015f0115
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4c8c:	4d71      	ldr	r5, [pc, #452]	; (b4e54 <loop+0x1e8>)
   b4c8e:	7a6b      	ldrb	r3, [r5, #9]
   b4c90:	b12b      	cbz	r3, b4c9e <loop+0x32>
   b4c92:	4b71      	ldr	r3, [pc, #452]	; (b4e58 <loop+0x1ec>)
   b4c94:	781b      	ldrb	r3, [r3, #0]
   b4c96:	2b02      	cmp	r3, #2
   b4c98:	d001      	beq.n	b4c9e <loop+0x32>
   b4c9a:	f7ff fd9b 	bl	b47d4 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE; 
   b4c9e:	7aeb      	ldrb	r3, [r5, #11]
   b4ca0:	b153      	cbz	r3, b4cb8 <loop+0x4c>
   b4ca2:	f002 f859 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
   b4ca6:	4b6d      	ldr	r3, [pc, #436]	; (b4e5c <loop+0x1f0>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	1ac0      	subs	r0, r0, r3
   b4cac:	4b6c      	ldr	r3, [pc, #432]	; (b4e60 <loop+0x1f4>)
   b4cae:	681b      	ldr	r3, [r3, #0]
   b4cb0:	4298      	cmp	r0, r3
   b4cb2:	bf84      	itt	hi
   b4cb4:	2306      	movhi	r3, #6
   b4cb6:	7023      	strbhi	r3, [r4, #0]
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;  
   b4cb8:	f003 fc41 	bl	b853e <_ZN9TimeClass3nowEv>
   b4cbc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b4cc0:	fb90 f2f3 	sdiv	r2, r0, r3
   b4cc4:	fb02 0013 	mls	r0, r2, r3, r0
   b4cc8:	bb08      	cbnz	r0, b4d0e <loop+0xa2>
   b4cca:	2303      	movs	r3, #3
      state = RESP_WAIT_STATE;                                                                        // Wait for Response
   b4ccc:	7023      	strb	r3, [r4, #0]
   b4cce:	e01e      	b.n	b4d0e <loop+0xa2>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4cd0:	4e60      	ldr	r6, [pc, #384]	; (b4e54 <loop+0x1e8>)
   b4cd2:	7a73      	ldrb	r3, [r6, #9]
   b4cd4:	b12b      	cbz	r3, b4ce2 <loop+0x76>
   b4cd6:	4b60      	ldr	r3, [pc, #384]	; (b4e58 <loop+0x1ec>)
   b4cd8:	781b      	ldrb	r3, [r3, #0]
   b4cda:	2b03      	cmp	r3, #3
   b4cdc:	d001      	beq.n	b4ce2 <loop+0x76>
   b4cde:	f7ff fd79 	bl	b47d4 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   b4ce2:	f7ff fedb 	bl	b4a9c <_Z16takeMeasurementsv>
   b4ce6:	4605      	mov	r5, r0
   b4ce8:	2800      	cmp	r0, #0
   b4cea:	d130      	bne.n	b4d4e <loop+0xe2>
      state = ERROR_STATE;
   b4cec:	2301      	movs	r3, #1
   b4cee:	7023      	strb	r3, [r4, #0]
   b4cf0:	f002 f832 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4cf4:	4b5b      	ldr	r3, [pc, #364]	; (b4e64 <loop+0x1f8>)
   b4cf6:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode) {
   b4cf8:	7a73      	ldrb	r3, [r6, #9]
   b4cfa:	b143      	cbz	r3, b4d0e <loop+0xa2>
        publishQueue.publish("State","Error taking Measurements",PRIVATE);
   b4cfc:	4b5a      	ldr	r3, [pc, #360]	; (b4e68 <loop+0x1fc>)
   b4cfe:	f88d 5000 	strb.w	r5, [sp]
   b4d02:	781b      	ldrb	r3, [r3, #0]
   b4d04:	4a59      	ldr	r2, [pc, #356]	; (b4e6c <loop+0x200>)
   b4d06:	495a      	ldr	r1, [pc, #360]	; (b4e70 <loop+0x204>)
   b4d08:	485a      	ldr	r0, [pc, #360]	; (b4e74 <loop+0x208>)
   b4d0a:	f7ff fa64 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  rtc.loop();                                                                               // keeps the clock up to date
   b4d0e:	485a      	ldr	r0, [pc, #360]	; (b4e78 <loop+0x20c>)
   b4d10:	f001 fb18 	bl	b6344 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   b4d14:	4b59      	ldr	r3, [pc, #356]	; (b4e7c <loop+0x210>)
   b4d16:	781b      	ldrb	r3, [r3, #0]
   b4d18:	b10b      	cbz	r3, b4d1e <loop+0xb2>
   b4d1a:	f7ff fd01 	bl	b4720 <_Z11petWatchdogv>
  if (systemStatusWriteNeeded) {
   b4d1e:	4c58      	ldr	r4, [pc, #352]	; (b4e80 <loop+0x214>)
   b4d20:	7823      	ldrb	r3, [r4, #0]
   b4d22:	b13b      	cbz	r3, b4d34 <loop+0xc8>
   b4d24:	231c      	movs	r3, #28
   b4d26:	4a4b      	ldr	r2, [pc, #300]	; (b4e54 <loop+0x1e8>)
   b4d28:	4856      	ldr	r0, [pc, #344]	; (b4e84 <loop+0x218>)
   b4d2a:	2101      	movs	r1, #1
   b4d2c:	f000 ff07 	bl	b5b3e <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   b4d30:	2300      	movs	r3, #0
   b4d32:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   b4d34:	4c54      	ldr	r4, [pc, #336]	; (b4e88 <loop+0x21c>)
   b4d36:	7823      	ldrb	r3, [r4, #0]
   b4d38:	b13b      	cbz	r3, b4d4a <loop+0xde>
   b4d3a:	2330      	movs	r3, #48	; 0x30
   b4d3c:	4a53      	ldr	r2, [pc, #332]	; (b4e8c <loop+0x220>)
   b4d3e:	4851      	ldr	r0, [pc, #324]	; (b4e84 <loop+0x218>)
   b4d40:	21a0      	movs	r1, #160	; 0xa0
   b4d42:	f000 fefc 	bl	b5b3e <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b4d46:	2300      	movs	r3, #0
   b4d48:	7023      	strb	r3, [r4, #0]
}
   b4d4a:	b00a      	add	sp, #40	; 0x28
   b4d4c:	bd70      	pop	{r4, r5, r6, pc}
    else state = REPORTING_STATE;
   b4d4e:	2304      	movs	r3, #4
   b4d50:	e7bc      	b.n	b4ccc <loop+0x60>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   b4d52:	4d40      	ldr	r5, [pc, #256]	; (b4e54 <loop+0x1e8>)
   b4d54:	7a6b      	ldrb	r3, [r5, #9]
   b4d56:	b12b      	cbz	r3, b4d64 <loop+0xf8>
   b4d58:	4b3f      	ldr	r3, [pc, #252]	; (b4e58 <loop+0x1ec>)
   b4d5a:	781b      	ldrb	r3, [r3, #0]
   b4d5c:	2b04      	cmp	r3, #4
   b4d5e:	d001      	beq.n	b4d64 <loop+0xf8>
   b4d60:	f7ff fd38 	bl	b47d4 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                                              // Only attempt to connect if not already New process to get connected
   b4d64:	7a2b      	ldrb	r3, [r5, #8]
   b4d66:	b90b      	cbnz	r3, b4d6c <loop+0x100>
   b4d68:	f7ff fd66 	bl	b4838 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d6c:	f002 fa06 	bl	b717c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b4d70:	b168      	cbz	r0, b4d8e <loop+0x122>
      if (Time.hour() == 12) Particle.syncTime();                                                     // Set the clock each day at noon
   b4d72:	f003 fbf5 	bl	b8560 <_ZN9TimeClass4hourEv>
   b4d76:	280c      	cmp	r0, #12
   b4d78:	d105      	bne.n	b4d86 <loop+0x11a>
   b4d7a:	f002 f9ff 	bl	b717c <spark_cloud_flag_connected>
        if (!connected()) {
   b4d7e:	b110      	cbz	r0, b4d86 <loop+0x11a>
        return spark_sync_time(NULL);
   b4d80:	2000      	movs	r0, #0
   b4d82:	f002 fa1b 	bl	b71bc <spark_sync_time>
      sendEvent();                                                                                    // Send data to Ubidots
   b4d86:	f7ff fcdb 	bl	b4740 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                                        // Wait for Response
   b4d8a:	2305      	movs	r3, #5
   b4d8c:	e79e      	b.n	b4ccc <loop+0x60>
      state = ERROR_STATE;
   b4d8e:	2301      	movs	r3, #1
   b4d90:	7023      	strb	r3, [r4, #0]
   b4d92:	f001 ffe1 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4d96:	4b33      	ldr	r3, [pc, #204]	; (b4e64 <loop+0x1f8>)
     stayAwakeTimeStamp = millis();
   b4d98:	6018      	str	r0, [r3, #0]
   b4d9a:	e7b8      	b.n	b4d0e <loop+0xa2>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4d9c:	4b2d      	ldr	r3, [pc, #180]	; (b4e54 <loop+0x1e8>)
   b4d9e:	7a5b      	ldrb	r3, [r3, #9]
   b4da0:	b12b      	cbz	r3, b4dae <loop+0x142>
   b4da2:	4b2d      	ldr	r3, [pc, #180]	; (b4e58 <loop+0x1ec>)
   b4da4:	781b      	ldrb	r3, [r3, #0]
   b4da6:	2b05      	cmp	r3, #5
   b4da8:	d001      	beq.n	b4dae <loop+0x142>
   b4daa:	f7ff fd13 	bl	b47d4 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   b4dae:	4b38      	ldr	r3, [pc, #224]	; (b4e90 <loop+0x224>)
   b4db0:	781b      	ldrb	r3, [r3, #0]
   b4db2:	b943      	cbnz	r3, b4dc6 <loop+0x15a>
     state = IDLE_STATE;
   b4db4:	2302      	movs	r3, #2
   b4db6:	7023      	strb	r3, [r4, #0]
     stayAwake = stayAwakeLong;
   b4db8:	4b29      	ldr	r3, [pc, #164]	; (b4e60 <loop+0x1f4>)
   b4dba:	4a36      	ldr	r2, [pc, #216]	; (b4e94 <loop+0x228>)
   b4dbc:	601a      	str	r2, [r3, #0]
   b4dbe:	f001 ffcb 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
     stayAwakeTimeStamp = millis();
   b4dc2:	4b26      	ldr	r3, [pc, #152]	; (b4e5c <loop+0x1f0>)
   b4dc4:	e7e8      	b.n	b4d98 <loop+0x12c>
   b4dc6:	f001 ffc7 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   b4dca:	4b33      	ldr	r3, [pc, #204]	; (b4e98 <loop+0x22c>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	1ac0      	subs	r0, r0, r3
   b4dd0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   b4dd4:	4298      	cmp	r0, r3
   b4dd6:	d99a      	bls.n	b4d0e <loop+0xa2>
   b4dd8:	f001 ffbe 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4ddc:	4d21      	ldr	r5, [pc, #132]	; (b4e64 <loop+0x1f8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b4dde:	4a2f      	ldr	r2, [pc, #188]	; (b4e9c <loop+0x230>)
      resetTimeStamp = millis();
   b4de0:	6028      	str	r0, [r5, #0]
   b4de2:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b4de4:	f88d 3000 	strb.w	r3, [sp]
   b4de8:	4b1f      	ldr	r3, [pc, #124]	; (b4e68 <loop+0x1fc>)
   b4dea:	492d      	ldr	r1, [pc, #180]	; (b4ea0 <loop+0x234>)
   b4dec:	781b      	ldrb	r3, [r3, #0]
   b4dee:	4821      	ldr	r0, [pc, #132]	; (b4e74 <loop+0x208>)
   b4df0:	f7ff f9f1 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      state = ERROR_STATE;                                            // Response timed out
   b4df4:	2301      	movs	r3, #1
   b4df6:	7023      	strb	r3, [r4, #0]
   b4df8:	f001 ffae 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4dfc:	6028      	str	r0, [r5, #0]
   b4dfe:	e786      	b.n	b4d0e <loop+0xa2>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4e00:	4b14      	ldr	r3, [pc, #80]	; (b4e54 <loop+0x1e8>)
   b4e02:	7a5b      	ldrb	r3, [r3, #9]
   b4e04:	b12b      	cbz	r3, b4e12 <loop+0x1a6>
   b4e06:	4b14      	ldr	r3, [pc, #80]	; (b4e58 <loop+0x1ec>)
   b4e08:	781b      	ldrb	r3, [r3, #0]
   b4e0a:	2b01      	cmp	r3, #1
   b4e0c:	d001      	beq.n	b4e12 <loop+0x1a6>
   b4e0e:	f7ff fce1 	bl	b47d4 <_Z22publishStateTransitionv>
   b4e12:	f001 ffa1 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   b4e16:	4b13      	ldr	r3, [pc, #76]	; (b4e64 <loop+0x1f8>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b4e1e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b4e22:	4283      	cmp	r3, r0
   b4e24:	f4bf af73 	bcs.w	b4d0e <loop+0xa2>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e28:	f002 f9a8 	bl	b717c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   b4e2c:	b148      	cbz	r0, b4e42 <loop+0x1d6>
   b4e2e:	2300      	movs	r3, #0
   b4e30:	f88d 3000 	strb.w	r3, [sp]
   b4e34:	4b0c      	ldr	r3, [pc, #48]	; (b4e68 <loop+0x1fc>)
   b4e36:	4a1b      	ldr	r2, [pc, #108]	; (b4ea4 <loop+0x238>)
   b4e38:	781b      	ldrb	r3, [r3, #0]
   b4e3a:	490d      	ldr	r1, [pc, #52]	; (b4e70 <loop+0x204>)
   b4e3c:	480d      	ldr	r0, [pc, #52]	; (b4e74 <loop+0x208>)
   b4e3e:	f7ff f9ca 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      delay(2000);
   b4e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e46:	f002 fac5 	bl	b73d4 <delay>
      System.reset();
   b4e4a:	f003 f9a8 	bl	b819e <_ZN11SystemClass5resetEv>
   b4e4e:	e75e      	b.n	b4d0e <loop+0xa2>
   b4e50:	2003e5b8 	.word	0x2003e5b8
   b4e54:	2003e5c4 	.word	0x2003e5c4
   b4e58:	2003e51e 	.word	0x2003e51e
   b4e5c:	2003e5c0 	.word	0x2003e5c0
   b4e60:	2003e5bc 	.word	0x2003e5bc
   b4e64:	2003e558 	.word	0x2003e558
   b4e68:	2003e48d 	.word	0x2003e48d
   b4e6c:	000b992e 	.word	0x000b992e
   b4e70:	000b9948 	.word	0x000b9948
   b4e74:	2003e520 	.word	0x2003e520
   b4e78:	2003e55c 	.word	0x2003e55c
   b4e7c:	2003e630 	.word	0x2003e630
   b4e80:	2003e5e0 	.word	0x2003e5e0
   b4e84:	2003e4cc 	.word	0x2003e4cc
   b4e88:	2003e578 	.word	0x2003e578
   b4e8c:	2003e57c 	.word	0x2003e57c
   b4e90:	2003e4c8 	.word	0x2003e4c8
   b4e94:	00015f90 	.word	0x00015f90
   b4e98:	2003e634 	.word	0x2003e634
   b4e9c:	000b9f64 	.word	0x000b9f64
   b4ea0:	000b994e 	.word	0x000b994e
   b4ea4:	000b9967 	.word	0x000b9967
      if (sysStatus.verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
   b4ea8:	4d4a      	ldr	r5, [pc, #296]	; (b4fd4 <loop+0x368>)
   b4eaa:	7a6b      	ldrb	r3, [r5, #9]
   b4eac:	b12b      	cbz	r3, b4eba <loop+0x24e>
   b4eae:	4b4a      	ldr	r3, [pc, #296]	; (b4fd8 <loop+0x36c>)
   b4eb0:	781b      	ldrb	r3, [r3, #0]
   b4eb2:	2b06      	cmp	r3, #6
   b4eb4:	d001      	beq.n	b4eba <loop+0x24e>
   b4eb6:	f7ff fc8d 	bl	b47d4 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   b4eba:	7a2b      	ldrb	r3, [r5, #8]
   b4ebc:	b10b      	cbz	r3, b4ec2 <loop+0x256>
   b4ebe:	f7ff fd6b 	bl	b4998 <_Z22disconnectFromParticlev>
      stayAwake = 1000;                                                 // Once we come into this function, we nee  d to reset stayAwake as it changes at the top of the hour
   b4ec2:	4b46      	ldr	r3, [pc, #280]	; (b4fdc <loop+0x370>)
   b4ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ec8:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b4eca:	f003 fb38 	bl	b853e <_ZN9TimeClass3nowEv>
   b4ece:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
   b4ed2:	fb90 f3f5 	sdiv	r3, r0, r5
   b4ed6:	fb03 0015 	mls	r0, r3, r5, r0
        if (valid_) {
   b4eda:	4b41      	ldr	r3, [pc, #260]	; (b4fe0 <loop+0x374>)
   b4edc:	1a2d      	subs	r5, r5, r0
   b4ede:	7d1a      	ldrb	r2, [r3, #20]
   b4ee0:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   b4ee4:	bfa8      	it	ge
   b4ee6:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
   b4eea:	b10a      	cbz	r2, b4ef0 <loop+0x284>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4eec:	2202      	movs	r2, #2
   b4eee:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   b4ef0:	2200      	movs	r2, #0
   b4ef2:	2104      	movs	r1, #4
   b4ef4:	483a      	ldr	r0, [pc, #232]	; (b4fe0 <loop+0x374>)
   b4ef6:	f7ff facd 	bl	b4494 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds*1000);
   b4efa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4efe:	4369      	muls	r1, r5
   b4f00:	f7ff fa62 	bl	b43c8 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
      SystemSleepResult result = System.sleep(config);
   b4f04:	4936      	ldr	r1, [pc, #216]	; (b4fe0 <loop+0x374>)
   b4f06:	a803      	add	r0, sp, #12
   b4f08:	f003 f94c 	bl	b81a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4f0c:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b4f0e:	b17b      	cbz	r3, b4f30 <loop+0x2c4>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4f10:	889a      	ldrh	r2, [r3, #4]
   b4f12:	2a01      	cmp	r2, #1
   b4f14:	d10c      	bne.n	b4f30 <loop+0x2c4>
      if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   b4f16:	899b      	ldrh	r3, [r3, #12]
   b4f18:	2b04      	cmp	r3, #4
   b4f1a:	d109      	bne.n	b4f30 <loop+0x2c4>
        setLowPowerMode("0");
   b4f1c:	4931      	ldr	r1, [pc, #196]	; (b4fe4 <loop+0x378>)
   b4f1e:	a806      	add	r0, sp, #24
   b4f20:	f003 f89b 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
   b4f24:	a806      	add	r0, sp, #24
   b4f26:	f7ff fcc7 	bl	b48b8 <_Z15setLowPowerMode6String>
   b4f2a:	a806      	add	r0, sp, #24
   b4f2c:	f003 f84a 	bl	b7fc4 <_ZN6StringD1Ev>
      state = MEASURING_STATE;
   b4f30:	2303      	movs	r3, #3
        freeWakeupSourceMemory();
   b4f32:	a803      	add	r0, sp, #12
      state = IDLE_STATE;                                               //  Head back to the idle state to see what to do next
   b4f34:	7023      	strb	r3, [r4, #0]
   b4f36:	f7ff fae1 	bl	b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
    } break;
   b4f3a:	e6e8      	b.n	b4d0e <loop+0xa2>
      if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4f3c:	4d25      	ldr	r5, [pc, #148]	; (b4fd4 <loop+0x368>)
   b4f3e:	7a6b      	ldrb	r3, [r5, #9]
   b4f40:	b12b      	cbz	r3, b4f4e <loop+0x2e2>
   b4f42:	4b25      	ldr	r3, [pc, #148]	; (b4fd8 <loop+0x36c>)
   b4f44:	781b      	ldrb	r3, [r3, #0]
   b4f46:	2b07      	cmp	r3, #7
   b4f48:	d001      	beq.n	b4f4e <loop+0x2e2>
   b4f4a:	f7ff fc43 	bl	b47d4 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   b4f4e:	7a2b      	ldrb	r3, [r5, #8]
   b4f50:	b10b      	cbz	r3, b4f56 <loop+0x2ea>
   b4f52:	f7ff fd21 	bl	b4998 <_Z22disconnectFromParticlev>
      petWatchdog();
   b4f56:	f7ff fbe3 	bl	b4720 <_Z11petWatchdogv>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b4f5a:	f003 faf0 	bl	b853e <_ZN9TimeClass3nowEv>
   b4f5e:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
   b4f62:	fb90 f3f5 	sdiv	r3, r0, r5
   b4f66:	fb03 0015 	mls	r0, r3, r5, r0
        if (valid_) {
   b4f6a:	4b1d      	ldr	r3, [pc, #116]	; (b4fe0 <loop+0x374>)
   b4f6c:	1a2d      	subs	r5, r5, r0
   b4f6e:	7d1a      	ldrb	r2, [r3, #20]
   b4f70:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   b4f74:	bfa8      	it	ge
   b4f76:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
   b4f7a:	b10a      	cbz	r2, b4f80 <loop+0x314>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4f7c:	2202      	movs	r2, #2
   b4f7e:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)
   b4f80:	2200      	movs	r2, #0
   b4f82:	2104      	movs	r1, #4
   b4f84:	4816      	ldr	r0, [pc, #88]	; (b4fe0 <loop+0x374>)
   b4f86:	f7ff fa85 	bl	b4494 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        .duration(wakeInSeconds*1000);
   b4f8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4f8e:	4369      	muls	r1, r5
   b4f90:	f7ff fa1a 	bl	b43c8 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
        System.sleep(config);
   b4f94:	4912      	ldr	r1, [pc, #72]	; (b4fe0 <loop+0x374>)
   b4f96:	a806      	add	r0, sp, #24
   b4f98:	f003 f904 	bl	b81a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   b4f9c:	a806      	add	r0, sp, #24
   b4f9e:	f7ff faad 	bl	b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   b4fa2:	490f      	ldr	r1, [pc, #60]	; (b4fe0 <loop+0x374>)
   b4fa4:	a803      	add	r0, sp, #12
   b4fa6:	f003 f8fd 	bl	b81a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4faa:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b4fac:	b17b      	cbz	r3, b4fce <loop+0x362>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4fae:	889a      	ldrh	r2, [r3, #4]
   b4fb0:	2a01      	cmp	r2, #1
   b4fb2:	d10c      	bne.n	b4fce <loop+0x362>
      if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   b4fb4:	899b      	ldrh	r3, [r3, #12]
   b4fb6:	2b04      	cmp	r3, #4
   b4fb8:	d109      	bne.n	b4fce <loop+0x362>
        setLowPowerMode("0");
   b4fba:	490a      	ldr	r1, [pc, #40]	; (b4fe4 <loop+0x378>)
   b4fbc:	a806      	add	r0, sp, #24
   b4fbe:	f003 f84c 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
   b4fc2:	a806      	add	r0, sp, #24
   b4fc4:	f7ff fc78 	bl	b48b8 <_Z15setLowPowerMode6String>
   b4fc8:	a806      	add	r0, sp, #24
   b4fca:	f002 fffb 	bl	b7fc4 <_ZN6StringD1Ev>
      state = IDLE_STATE;                                               //  Head back to the idle state to see what to do next
   b4fce:	2302      	movs	r3, #2
   b4fd0:	e7af      	b.n	b4f32 <loop+0x2c6>
   b4fd2:	bf00      	nop
   b4fd4:	2003e5c4 	.word	0x2003e5c4
   b4fd8:	2003e51e 	.word	0x2003e51e
   b4fdc:	2003e5bc 	.word	0x2003e5bc
   b4fe0:	2003e4b0 	.word	0x2003e4b0
   b4fe4:	000b9746 	.word	0x000b9746

000b4fe8 <setup>:
{
   b4fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b4fea:	2100      	movs	r1, #0
{
   b4fec:	b09b      	sub	sp, #108	; 0x6c
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b4fee:	2008      	movs	r0, #8
   b4ff0:	f003 fc84 	bl	b88fc <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b4ff4:	2101      	movs	r1, #1
   b4ff6:	2005      	movs	r0, #5
   b4ff8:	f003 fc80 	bl	b88fc <pinMode>
  pinMode(userSwitch,INPUT);                                                                // Momentary contact button on board for direct user input
   b4ffc:	2100      	movs	r1, #0
   b4ffe:	2004      	movs	r0, #4
   b5000:	f003 fc7c 	bl	b88fc <pinMode>
  pinMode(soilPin, INPUT);    
   b5004:	2100      	movs	r1, #0
   b5006:	2013      	movs	r0, #19
   b5008:	f003 fc78 	bl	b88fc <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   b500c:	f7ff fb88 	bl	b4720 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   b5010:	2300      	movs	r3, #0
   b5012:	9300      	str	r3, [sp, #0]
   b5014:	2201      	movs	r2, #1
   b5016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b501a:	4999      	ldr	r1, [pc, #612]	; (b5280 <setup+0x298>)
   b501c:	2008      	movs	r0, #8
   b501e:	f002 fe1b 	bl	b7c58 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5022:	4b98      	ldr	r3, [pc, #608]	; (b5284 <setup+0x29c>)
   b5024:	aa0a      	add	r2, sp, #40	; 0x28
   b5026:	f103 0510 	add.w	r5, r3, #16
   b502a:	4616      	mov	r6, r2
   b502c:	6818      	ldr	r0, [r3, #0]
   b502e:	6859      	ldr	r1, [r3, #4]
   b5030:	4614      	mov	r4, r2
   b5032:	c403      	stmia	r4!, {r0, r1}
   b5034:	3308      	adds	r3, #8
   b5036:	42ab      	cmp	r3, r5
   b5038:	4622      	mov	r2, r4
   b503a:	d1f7      	bne.n	b502c <setup+0x44>
   b503c:	8819      	ldrh	r1, [r3, #0]
   b503e:	789b      	ldrb	r3, [r3, #2]
   b5040:	70a3      	strb	r3, [r4, #2]
   b5042:	222d      	movs	r2, #45	; 0x2d
   b5044:	8021      	strh	r1, [r4, #0]
  state = IDLE_STATE;
   b5046:	4d90      	ldr	r5, [pc, #576]	; (b5288 <setup+0x2a0>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5048:	2100      	movs	r1, #0
   b504a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   b504e:	f004 f9a7 	bl	b93a0 <memset>
  state = IDLE_STATE;
   b5052:	2702      	movs	r7, #2
        return spark_deviceID();
   b5054:	a802      	add	r0, sp, #8
   b5056:	702f      	strb	r7, [r5, #0]
   b5058:	f002 f898 	bl	b718c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b505c:	a902      	add	r1, sp, #8
   b505e:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5060:	2400      	movs	r4, #0
   b5062:	f003 f81d 	bl	b80a0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/environmental-hook/", UbidotsHandler, MY_DEVICES);
   b5066:	4989      	ldr	r1, [pc, #548]	; (b528c <setup+0x2a4>)
   b5068:	a806      	add	r0, sp, #24
   b506a:	f003 f83b 	bl	b80e4 <_ZplRK15StringSumHelperPKc>
   b506e:	e9cd 4400 	strd	r4, r4, [sp]
   b5072:	4622      	mov	r2, r4
   b5074:	4986      	ldr	r1, [pc, #536]	; (b5290 <setup+0x2a8>)
   b5076:	6800      	ldr	r0, [r0, #0]
   b5078:	4623      	mov	r3, r4
   b507a:	f002 f897 	bl	b71ac <spark_subscribe>
class StringSumHelper : public String
   b507e:	a806      	add	r0, sp, #24
   b5080:	f002 ffa0 	bl	b7fc4 <_ZN6StringD1Ev>
   b5084:	a802      	add	r0, sp, #8
   b5086:	f002 ff9d 	bl	b7fc4 <_ZN6StringD1Ev>
        return _variable(name, std::forward<ArgsT>(args)...);
   b508a:	4b82      	ldr	r3, [pc, #520]	; (b5294 <setup+0x2ac>)
   b508c:	4882      	ldr	r0, [pc, #520]	; (b5298 <setup+0x2b0>)
   b508e:	6819      	ldr	r1, [r3, #0]
   b5090:	f7ff f996 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5094:	4981      	ldr	r1, [pc, #516]	; (b529c <setup+0x2b4>)
   b5096:	4882      	ldr	r0, [pc, #520]	; (b52a0 <setup+0x2b8>)
   b5098:	f7ff f992 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b509c:	4981      	ldr	r1, [pc, #516]	; (b52a4 <setup+0x2bc>)
   b509e:	4882      	ldr	r0, [pc, #520]	; (b52a8 <setup+0x2c0>)
   b50a0:	f7ff f98e 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b50a4:	4981      	ldr	r1, [pc, #516]	; (b52ac <setup+0x2c4>)
   b50a6:	4882      	ldr	r0, [pc, #520]	; (b52b0 <setup+0x2c8>)
   b50a8:	f7ff f98a 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b50ac:	4981      	ldr	r1, [pc, #516]	; (b52b4 <setup+0x2cc>)
   b50ae:	4882      	ldr	r0, [pc, #520]	; (b52b8 <setup+0x2d0>)
   b50b0:	f7ff f986 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b50b4:	4981      	ldr	r1, [pc, #516]	; (b52bc <setup+0x2d4>)
   b50b6:	4882      	ldr	r0, [pc, #520]	; (b52c0 <setup+0x2d8>)
   b50b8:	f7ff f982 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b50bc:	4981      	ldr	r1, [pc, #516]	; (b52c4 <setup+0x2dc>)
   b50be:	4882      	ldr	r0, [pc, #520]	; (b52c8 <setup+0x2e0>)
   b50c0:	f7ff f97e 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b50c4:	4981      	ldr	r1, [pc, #516]	; (b52cc <setup+0x2e4>)
   b50c6:	4882      	ldr	r0, [pc, #520]	; (b52d0 <setup+0x2e8>)
   b50c8:	f7ff f97a 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b50cc:	4981      	ldr	r1, [pc, #516]	; (b52d4 <setup+0x2ec>)
   b50ce:	4882      	ldr	r0, [pc, #520]	; (b52d8 <setup+0x2f0>)
   b50d0:	4623      	mov	r3, r4
   b50d2:	463a      	mov	r2, r7
   b50d4:	f002 f832 	bl	b713c <spark_variable>
   b50d8:	4623      	mov	r3, r4
   b50da:	2201      	movs	r2, #1
   b50dc:	497f      	ldr	r1, [pc, #508]	; (b52dc <setup+0x2f4>)
   b50de:	4880      	ldr	r0, [pc, #512]	; (b52e0 <setup+0x2f8>)
   b50e0:	f002 f82c 	bl	b713c <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b50e4:	497f      	ldr	r1, [pc, #508]	; (b52e4 <setup+0x2fc>)
   b50e6:	4880      	ldr	r0, [pc, #512]	; (b52e8 <setup+0x300>)
   b50e8:	f7ff f96a 	bl	b43c0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b50ec:	4a7f      	ldr	r2, [pc, #508]	; (b52ec <setup+0x304>)
   b50ee:	4980      	ldr	r1, [pc, #512]	; (b52f0 <setup+0x308>)
   b50f0:	4880      	ldr	r0, [pc, #512]	; (b52f4 <setup+0x30c>)
   b50f2:	f002 fa64 	bl	b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b50f6:	4a80      	ldr	r2, [pc, #512]	; (b52f8 <setup+0x310>)
   b50f8:	4980      	ldr	r1, [pc, #512]	; (b52fc <setup+0x314>)
   b50fa:	487e      	ldr	r0, [pc, #504]	; (b52f4 <setup+0x30c>)
   b50fc:	f002 fa5f 	bl	b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5100:	4a7f      	ldr	r2, [pc, #508]	; (b5300 <setup+0x318>)
   b5102:	4980      	ldr	r1, [pc, #512]	; (b5304 <setup+0x31c>)
   b5104:	487b      	ldr	r0, [pc, #492]	; (b52f4 <setup+0x30c>)
   b5106:	f002 fa5a 	bl	b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b510a:	4a75      	ldr	r2, [pc, #468]	; (b52e0 <setup+0x2f8>)
   b510c:	497e      	ldr	r1, [pc, #504]	; (b5308 <setup+0x320>)
   b510e:	4879      	ldr	r0, [pc, #484]	; (b52f4 <setup+0x30c>)
   b5110:	f002 fa55 	bl	b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5114:	4a7d      	ldr	r2, [pc, #500]	; (b530c <setup+0x324>)
   b5116:	497e      	ldr	r1, [pc, #504]	; (b5310 <setup+0x328>)
   b5118:	4876      	ldr	r0, [pc, #472]	; (b52f4 <setup+0x30c>)
   b511a:	f002 fa50 	bl	b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                                            // Start the real time clock
   b511e:	487d      	ldr	r0, [pc, #500]	; (b5314 <setup+0x32c>)
   b5120:	f001 f808 	bl	b6134 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                                       // Ensures alarm is still not set from last cycle
   b5124:	4621      	mov	r1, r4
   b5126:	487b      	ldr	r0, [pc, #492]	; (b5314 <setup+0x32c>)
   b5128:	f001 f943 	bl	b63b2 <_ZN8MCP7941010clearAlarmEi>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   b512c:	487a      	ldr	r0, [pc, #488]	; (b5318 <setup+0x330>)
   b512e:	2144      	movs	r1, #68	; 0x44
   b5130:	f001 fcd9 	bl	b6ae6 <_ZN14Adafruit_SHT315beginEh>
   b5134:	b948      	cbnz	r0, b514a <setup+0x162>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b5136:	4979      	ldr	r1, [pc, #484]	; (b531c <setup+0x334>)
   b5138:	4630      	mov	r0, r6
   b513a:	f004 f971 	bl	b9420 <strcpy>
    state = ERROR_STATE;
   b513e:	2301      	movs	r3, #1
   b5140:	702b      	strb	r3, [r5, #0]
   b5142:	f001 fe09 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5146:	4b76      	ldr	r3, [pc, #472]	; (b5320 <setup+0x338>)
   b5148:	6018      	str	r0, [r3, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   b514a:	f003 fc29 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b514e:	4601      	mov	r1, r0
   b5150:	4874      	ldr	r0, [pc, #464]	; (b5324 <setup+0x33c>)
   b5152:	f000 fb50 	bl	b57f6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b5156:	b960      	cbnz	r0, b5172 <setup+0x18a>
   b5158:	f001 fdfe 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b515c:	4c70      	ldr	r4, [pc, #448]	; (b5320 <setup+0x338>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b515e:	4972      	ldr	r1, [pc, #456]	; (b5328 <setup+0x340>)
    resetTimeStamp = millis();
   b5160:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b5162:	4630      	mov	r0, r6
   b5164:	f004 f95c 	bl	b9420 <strcpy>
    state = ERROR_STATE;
   b5168:	2301      	movs	r3, #1
   b516a:	702b      	strb	r3, [r5, #0]
   b516c:	f001 fdf4 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5170:	6020      	str	r0, [r4, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   b5172:	486c      	ldr	r0, [pc, #432]	; (b5324 <setup+0x33c>)
   b5174:	2100      	movs	r1, #0
   b5176:	f000 fab6 	bl	b56e6 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   b517a:	486a      	ldr	r0, [pc, #424]	; (b5324 <setup+0x33c>)
   b517c:	210c      	movs	r1, #12
   b517e:	f000 faa9 	bl	b56d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.interruptEnable(true);
   b5182:	2101      	movs	r1, #1
   b5184:	4867      	ldr	r0, [pc, #412]	; (b5324 <setup+0x33c>)
   b5186:	f000 fa9f 	bl	b56c8 <_ZN17Adafruit_VEML770015interruptEnableEb>
  fram.begin();                                                                             // Initialize the FRAM module
   b518a:	4868      	ldr	r0, [pc, #416]	; (b532c <setup+0x344>)
   b518c:	f000 fc4a 	bl	b5a24 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5190:	2301      	movs	r3, #1
   b5192:	4866      	ldr	r0, [pc, #408]	; (b532c <setup+0x344>)
   b5194:	aa02      	add	r2, sp, #8
   b5196:	2100      	movs	r1, #0
   b5198:	f000 fc86 	bl	b5aa8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   b519c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b51a0:	2b05      	cmp	r3, #5
   b51a2:	d02b      	beq.n	b51fc <setup+0x214>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   b51a4:	4861      	ldr	r0, [pc, #388]	; (b532c <setup+0x344>)
   b51a6:	f000 fc47 	bl	b5a38 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b51aa:	4a61      	ldr	r2, [pc, #388]	; (b5330 <setup+0x348>)
   b51ac:	485f      	ldr	r0, [pc, #380]	; (b532c <setup+0x344>)
   b51ae:	2304      	movs	r3, #4
   b51b0:	2100      	movs	r1, #0
   b51b2:	f000 fcc4 	bl	b5b3e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b51b6:	2301      	movs	r3, #1
   b51b8:	485c      	ldr	r0, [pc, #368]	; (b532c <setup+0x344>)
   b51ba:	aa02      	add	r2, sp, #8
   b51bc:	2100      	movs	r1, #0
   b51be:	f000 fc73 	bl	b5aa8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   b51c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b51c6:	2b05      	cmp	r3, #5
   b51c8:	d015      	beq.n	b51f6 <setup+0x20e>
   b51ca:	2301      	movs	r3, #1
   b51cc:	702b      	strb	r3, [r5, #0]
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b51ce:	4c59      	ldr	r4, [pc, #356]	; (b5334 <setup+0x34c>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b51d0:	f7ff fa90 	bl	b46f4 <_Z17checkSystemValuesv>
  connectToParticle();
   b51d4:	f7ff fb30 	bl	b4838 <_Z17connectToParticlev>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b51d8:	7ae3      	ldrb	r3, [r4, #11]
   b51da:	b1b3      	cbz	r3, b520a <setup+0x222>
   b51dc:	4956      	ldr	r1, [pc, #344]	; (b5338 <setup+0x350>)
   b51de:	4841      	ldr	r0, [pc, #260]	; (b52e4 <setup+0x2fc>)
   b51e0:	2206      	movs	r2, #6
   b51e2:	f004 f94a 	bl	b947a <strncpy>
  if (sysStatus.thirdPartySim) {
   b51e6:	7863      	ldrb	r3, [r4, #1]
   b51e8:	b323      	cbz	r3, b5234 <setup+0x24c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51ea:	f001 ffc7 	bl	b717c <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b51ee:	b998      	cbnz	r0, b5218 <setup+0x230>
            spark_process();
   b51f0:	f001 ffb4 	bl	b715c <spark_process>
        while (_while() && !_condition()) {
   b51f4:	e7f9      	b.n	b51ea <setup+0x202>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   b51f6:	f7ff fa53 	bl	b46a0 <_Z18loadSystemDefaultsv>
   b51fa:	e7e8      	b.n	b51ce <setup+0x1e6>
   b51fc:	4a4d      	ldr	r2, [pc, #308]	; (b5334 <setup+0x34c>)
   b51fe:	484b      	ldr	r0, [pc, #300]	; (b532c <setup+0x344>)
   b5200:	231c      	movs	r3, #28
   b5202:	2101      	movs	r1, #1
   b5204:	f000 fc50 	bl	b5aa8 <_ZN6MB85RC8readDataEjPhj>
        return t;
   b5208:	e7e1      	b.n	b51ce <setup+0x1e6>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b520a:	4a4c      	ldr	r2, [pc, #304]	; (b533c <setup+0x354>)
   b520c:	4b35      	ldr	r3, [pc, #212]	; (b52e4 <setup+0x2fc>)
   b520e:	6811      	ldr	r1, [r2, #0]
   b5210:	8892      	ldrh	r2, [r2, #4]
   b5212:	6019      	str	r1, [r3, #0]
   b5214:	809a      	strh	r2, [r3, #4]
   b5216:	e7e6      	b.n	b51e6 <setup+0x1fe>
   b5218:	f001 ffb0 	bl	b717c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                    // Set the keep alive value
   b521c:	6860      	ldr	r0, [r4, #4]
   b521e:	f7ff f976 	bl	b450e <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b5222:	6863      	ldr	r3, [r4, #4]
   b5224:	4846      	ldr	r0, [pc, #280]	; (b5340 <setup+0x358>)
   b5226:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b522a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b522e:	4359      	muls	r1, r3
   b5230:	f7ff f8b8 	bl	b43a4 <_ZN5Timer12changePeriodEjj.isra.0>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                                       // Make sure the device wakes up and connects
   b5234:	2004      	movs	r0, #4
   b5236:	f003 fb72 	bl	b891e <digitalRead>
   b523a:	b908      	cbnz	r0, b5240 <setup+0x258>
   b523c:	f7ff fa30 	bl	b46a0 <_Z18loadSystemDefaultsv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b5240:	f7ff fc2c 	bl	b4a9c <_Z16takeMeasurementsv>
  if (sysStatus.lowBatteryMode) setLowPowerMode("1");                                       // If battery is low we need to go to low power state
   b5244:	7aa3      	ldrb	r3, [r4, #10]
   b5246:	b14b      	cbz	r3, b525c <setup+0x274>
   b5248:	493e      	ldr	r1, [pc, #248]	; (b5344 <setup+0x35c>)
   b524a:	a806      	add	r0, sp, #24
   b524c:	f002 ff05 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
   b5250:	a806      	add	r0, sp, #24
   b5252:	f7ff fb31 	bl	b48b8 <_Z15setLowPowerMode6String>
   b5256:	a806      	add	r0, sp, #24
   b5258:	f002 feb4 	bl	b7fc4 <_ZN6StringD1Ev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b525c:	7a63      	ldrb	r3, [r4, #9]
   b525e:	b14b      	cbz	r3, b5274 <setup+0x28c>
   b5260:	2300      	movs	r3, #0
   b5262:	f88d 3000 	strb.w	r3, [sp]
   b5266:	4b38      	ldr	r3, [pc, #224]	; (b5348 <setup+0x360>)
   b5268:	4938      	ldr	r1, [pc, #224]	; (b534c <setup+0x364>)
   b526a:	781b      	ldrb	r3, [r3, #0]
   b526c:	4838      	ldr	r0, [pc, #224]	; (b5350 <setup+0x368>)
   b526e:	4632      	mov	r2, r6
   b5270:	f7fe ffb1 	bl	b41d6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   b5274:	782b      	ldrb	r3, [r5, #0]
   b5276:	b90b      	cbnz	r3, b527c <setup+0x294>
   b5278:	2302      	movs	r3, #2
   b527a:	702b      	strb	r3, [r5, #0]
}
   b527c:	b01b      	add	sp, #108	; 0x6c
   b527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5280:	000b40cd 	.word	0x000b40cd
   b5284:	000b9adc 	.word	0x000b9adc
   b5288:	2003e5b8 	.word	0x2003e5b8
   b528c:	000b997b 	.word	0x000b997b
   b5290:	000b42d9 	.word	0x000b42d9
   b5294:	2003e324 	.word	0x2003e324
   b5298:	000b999e 	.word	0x000b999e
   b529c:	2003e5e1 	.word	0x2003e5e1
   b52a0:	000b99a6 	.word	0x000b99a6
   b52a4:	2003e4dc 	.word	0x2003e4dc
   b52a8:	000b99b2 	.word	0x000b99b2
   b52ac:	2003e50e 	.word	0x2003e50e
   b52b0:	000b99bb 	.word	0x000b99bb
   b52b4:	2003e638 	.word	0x2003e638
   b52b8:	000b99bf 	.word	0x000b99bf
   b52bc:	2003e470 	.word	0x2003e470
   b52c0:	000b99c5 	.word	0x000b99c5
   b52c4:	2003e49e 	.word	0x2003e49e
   b52c8:	000b99cd 	.word	0x000b99cd
   b52cc:	2003e48e 	.word	0x2003e48e
   b52d0:	000b99d5 	.word	0x000b99d5
   b52d4:	2003e5c8 	.word	0x2003e5c8
   b52d8:	000b99e4 	.word	0x000b99e4
   b52dc:	2003e5c5 	.word	0x2003e5c5
   b52e0:	000b97aa 	.word	0x000b97aa
   b52e4:	2003e508 	.word	0x2003e508
   b52e8:	000b99f3 	.word	0x000b99f3
   b52ec:	000b9a00 	.word	0x000b9a00
   b52f0:	000b410d 	.word	0x000b410d
   b52f4:	000b7593 	.word	0x000b7593
   b52f8:	000b9a0c 	.word	0x000b9a0c
   b52fc:	000b4259 	.word	0x000b4259
   b5300:	000b972a 	.word	0x000b972a
   b5304:	000b41f1 	.word	0x000b41f1
   b5308:	000b4531 	.word	0x000b4531
   b530c:	000b9a19 	.word	0x000b9a19
   b5310:	000b48b9 	.word	0x000b48b9
   b5314:	2003e55c 	.word	0x2003e55c
   b5318:	2003e5ac 	.word	0x2003e5ac
   b531c:	000b9a27 	.word	0x000b9a27
   b5320:	2003e558 	.word	0x2003e558
   b5324:	2003e5f4 	.word	0x2003e5f4
   b5328:	000b9a44 	.word	0x000b9a44
   b532c:	2003e4cc 	.word	0x2003e4cc
   b5330:	000b9b1c 	.word	0x000b9b1c
   b5334:	2003e5c4 	.word	0x2003e5c4
   b5338:	000b98b0 	.word	0x000b98b0
   b533c:	000b98c7 	.word	0x000b98c7
   b5340:	2003e4ec 	.word	0x2003e4ec
   b5344:	000b96eb 	.word	0x000b96eb
   b5348:	2003e48d 	.word	0x2003e48d
   b534c:	000b9a60 	.word	0x000b9a60
   b5350:	2003e520 	.word	0x2003e520

000b5354 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   b5354:	4b36      	ldr	r3, [pc, #216]	; (b5430 <_GLOBAL__sub_I_sysStatus+0xdc>)
    SleepResult() {}
   b5356:	4a37      	ldr	r2, [pc, #220]	; (b5434 <_GLOBAL__sub_I_sysStatus+0xe0>)
}
   b5358:	b570      	push	{r4, r5, r6, lr}
   b535a:	2501      	movs	r5, #1
   b535c:	701d      	strb	r5, [r3, #0]
   b535e:	4b36      	ldr	r3, [pc, #216]	; (b5438 <_GLOBAL__sub_I_sysStatus+0xe4>)
   b5360:	2002      	movs	r0, #2
   b5362:	7018      	strb	r0, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5364:	4b35      	ldr	r3, [pc, #212]	; (b543c <_GLOBAL__sub_I_sysStatus+0xe8>)
   b5366:	2400      	movs	r4, #0
   b5368:	b088      	sub	sp, #32
   b536a:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b536e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b5370:	f001 fe84 	bl	b707c <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b5374:	4621      	mov	r1, r4
   b5376:	4628      	mov	r0, r5
   b5378:	f001 fe90 	bl	b709c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b537c:	4629      	mov	r1, r5
   b537e:	2004      	movs	r0, #4
   b5380:	f001 fcca 	bl	b6d18 <HAL_Feature_Set>
        : config_(config) {
   b5384:	4b2e      	ldr	r3, [pc, #184]	; (b5440 <_GLOBAL__sub_I_sysStatus+0xec>)
Adafruit_VEML7700 veml;
   b5386:	482f      	ldr	r0, [pc, #188]	; (b5444 <_GLOBAL__sub_I_sysStatus+0xf0>)
              valid_(true) {
   b5388:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b538a:	1d1a      	adds	r2, r3, #4
   b538c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b538e:	4a2e      	ldr	r2, [pc, #184]	; (b5448 <_GLOBAL__sub_I_sysStatus+0xf4>)
   b5390:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5392:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5396:	751d      	strb	r5, [r3, #20]
   b5398:	f000 f98a 	bl	b56b0 <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b539c:	482b      	ldr	r0, [pc, #172]	; (b544c <_GLOBAL__sub_I_sysStatus+0xf8>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b539e:	4d2c      	ldr	r5, [pc, #176]	; (b5450 <_GLOBAL__sub_I_sysStatus+0xfc>)
   b53a0:	f001 fb7c 	bl	b6a9c <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b53a4:	f003 fafc 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b53a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b53ac:	4601      	mov	r1, r0
   b53ae:	4623      	mov	r3, r4
   b53b0:	4628      	mov	r0, r5
   b53b2:	f000 fb2d 	bl	b5a10 <_ZN6MB85RCC1ER7TwoWireji>
   b53b6:	4b27      	ldr	r3, [pc, #156]	; (b5454 <_GLOBAL__sub_I_sysStatus+0x100>)
   b53b8:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   b53ba:	f003 faf1 	bl	b89a0 <_Z19__fetch_global_Wirev>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   b53be:	4d26      	ldr	r5, [pc, #152]	; (b5458 <_GLOBAL__sub_I_sysStatus+0x104>)
   b53c0:	4601      	mov	r1, r0
   b53c2:	4826      	ldr	r0, [pc, #152]	; (b545c <_GLOBAL__sub_I_sysStatus+0x108>)
   b53c4:	f000 fd9e 	bl	b5f04 <_ZN8MCP79410C1ER7TwoWire>
   b53c8:	4925      	ldr	r1, [pc, #148]	; (b5460 <_GLOBAL__sub_I_sysStatus+0x10c>)
   b53ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b53ce:	4628      	mov	r0, r5
   b53d0:	f001 fb24 	bl	b6a1c <_ZN25PublishQueueAsyncRetainedC1EPht>
   b53d4:	4b23      	ldr	r3, [pc, #140]	; (b5464 <_GLOBAL__sub_I_sysStatus+0x110>)
   b53d6:	602b      	str	r3, [r5, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b53d8:	4b23      	ldr	r3, [pc, #140]	; (b5468 <_GLOBAL__sub_I_sysStatus+0x114>)
   b53da:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53dc:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b53de:	4b23      	ldr	r3, [pc, #140]	; (b546c <_GLOBAL__sub_I_sysStatus+0x118>)
   b53e0:	4a23      	ldr	r2, [pc, #140]	; (b5470 <_GLOBAL__sub_I_sysStatus+0x11c>)
   b53e2:	601a      	str	r2, [r3, #0]
   b53e4:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b53e8:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53ec:	ae02      	add	r6, sp, #8
   b53ee:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b53f2:	e892 0003 	ldmia.w	r2, {r0, r1}
   b53f6:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b53fa:	e896 0003 	ldmia.w	r6, {r0, r1}
   b53fe:	e882 0003 	stmia.w	r2, {r0, r1}
   b5402:	4a1c      	ldr	r2, [pc, #112]	; (b5474 <_GLOBAL__sub_I_sysStatus+0x120>)
   b5404:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5406:	699a      	ldr	r2, [r3, #24]
   b5408:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b540a:	4a1b      	ldr	r2, [pc, #108]	; (b5478 <_GLOBAL__sub_I_sysStatus+0x124>)
   b540c:	619a      	str	r2, [r3, #24]
   b540e:	711c      	strb	r4, [r3, #4]
   b5410:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5412:	4a1a      	ldr	r2, [pc, #104]	; (b547c <_GLOBAL__sub_I_sysStatus+0x128>)
      __a = _GLIBCXX_MOVE(__b);
   b5414:	9406      	str	r4, [sp, #24]
   b5416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b541a:	f103 0008 	add.w	r0, r3, #8
   b541e:	e9cd 4400 	strd	r4, r4, [sp]
   b5422:	f001 fc29 	bl	b6c78 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5426:	4628      	mov	r0, r5
   b5428:	f7fe fff6 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
}
   b542c:	b008      	add	sp, #32
   b542e:	bd70      	pop	{r4, r5, r6, pc}
   b5430:	2003e48d 	.word	0x2003e48d
   b5434:	ffff0000 	.word	0xffff0000
   b5438:	2003e48c 	.word	0x2003e48c
   b543c:	2003e480 	.word	0x2003e480
   b5440:	2003e4b0 	.word	0x2003e4b0
   b5444:	2003e5f4 	.word	0x2003e5f4
   b5448:	00030010 	.word	0x00030010
   b544c:	2003e5ac 	.word	0x2003e5ac
   b5450:	2003e4cc 	.word	0x2003e4cc
   b5454:	000b9aac 	.word	0x000b9aac
   b5458:	2003e520 	.word	0x2003e520
   b545c:	2003e55c 	.word	0x2003e55c
   b5460:	2003f400 	.word	0x2003f400
   b5464:	000b9a84 	.word	0x000b9a84
   b5468:	000b436d 	.word	0x000b436d
   b546c:	2003e4ec 	.word	0x2003e4ec
   b5470:	000b9a70 	.word	0x000b9a70
   b5474:	000b41bf 	.word	0x000b41bf
   b5478:	000b41d3 	.word	0x000b41d3
   b547c:	000b4185 	.word	0x000b4185

000b5480 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b5480:	6042      	str	r2, [r0, #4]
  _begun = false;
   b5482:	2200      	movs	r2, #0
  _addr = addr;
   b5484:	7001      	strb	r1, [r0, #0]
  _begun = false;
   b5486:	7202      	strb	r2, [r0, #8]
}
   b5488:	4770      	bx	lr

000b548a <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   b548a:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b548c:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b548e:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b5490:	b153      	cbz	r3, b54a8 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b5492:	7821      	ldrb	r1, [r4, #0]
   b5494:	6860      	ldr	r0, [r4, #4]
   b5496:	f002 fbbd 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   b549a:	6860      	ldr	r0, [r4, #4]
   b549c:	f002 fbc5 	bl	b7c2a <_ZN7TwoWire15endTransmissionEv>
   b54a0:	fab0 f080 	clz	r0, r0
   b54a4:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b54a6:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b54a8:	f000 f803 	bl	b54b2 <_ZN18Adafruit_I2CDevice5beginEv>
   b54ac:	2800      	cmp	r0, #0
   b54ae:	d1f0      	bne.n	b5492 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b54b0:	e7f9      	b.n	b54a6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b54b2 <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   b54b2:	b510      	push	{r4, lr}
   b54b4:	4604      	mov	r4, r0
  _wire->begin();
   b54b6:	6840      	ldr	r0, [r0, #4]
   b54b8:	f002 fb7a 	bl	b7bb0 <_ZN7TwoWire5beginEv>
  _begun = true;
   b54bc:	2301      	movs	r3, #1
   b54be:	7223      	strb	r3, [r4, #8]
  return detected();
   b54c0:	4620      	mov	r0, r4
}
   b54c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   b54c6:	f7ff bfe0 	b.w	b548a <_ZN18Adafruit_I2CDevice8detectedEv>

000b54ca <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b54ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b54ce:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b54d2:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   b54d4:	1993      	adds	r3, r2, r6
   b54d6:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b54d8:	4604      	mov	r4, r0
   b54da:	4688      	mov	r8, r1
   b54dc:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   b54de:	d902      	bls.n	b54e6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b54e0:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   b54e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b54e6:	7801      	ldrb	r1, [r0, #0]
   b54e8:	6840      	ldr	r0, [r0, #4]
   b54ea:	f002 fb93 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b54ee:	b97e      	cbnz	r6, b5510 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   b54f0:	6860      	ldr	r0, [r4, #4]
   b54f2:	6803      	ldr	r3, [r0, #0]
   b54f4:	462a      	mov	r2, r5
   b54f6:	68db      	ldr	r3, [r3, #12]
   b54f8:	4641      	mov	r1, r8
   b54fa:	4798      	blx	r3
   b54fc:	4285      	cmp	r5, r0
   b54fe:	d1ef      	bne.n	b54e0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   b5500:	6860      	ldr	r0, [r4, #4]
   b5502:	4639      	mov	r1, r7
   b5504:	f002 fb8d 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
   b5508:	fab0 f080 	clz	r0, r0
   b550c:	0940      	lsrs	r0, r0, #5
   b550e:	e7e8      	b.n	b54e2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5510:	f1b9 0f00 	cmp.w	r9, #0
   b5514:	d0ec      	beq.n	b54f0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b5516:	6860      	ldr	r0, [r4, #4]
   b5518:	6803      	ldr	r3, [r0, #0]
   b551a:	4632      	mov	r2, r6
   b551c:	68db      	ldr	r3, [r3, #12]
   b551e:	4649      	mov	r1, r9
   b5520:	4798      	blx	r3
   b5522:	4286      	cmp	r6, r0
   b5524:	d1dc      	bne.n	b54e0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   b5526:	e7e3      	b.n	b54f0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000b5528 <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   b5528:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b552a:	b570      	push	{r4, r5, r6, lr}
   b552c:	4606      	mov	r6, r0
   b552e:	460c      	mov	r4, r1
   b5530:	4615      	mov	r5, r2
  if (len > 32) {
   b5532:	d80f      	bhi.n	b5554 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   b5534:	7801      	ldrb	r1, [r0, #0]
   b5536:	6840      	ldr	r0, [r0, #4]
   b5538:	f002 fb57 	bl	b7bea <_ZN7TwoWire11requestFromEhjh>
   b553c:	42a8      	cmp	r0, r5
   b553e:	d109      	bne.n	b5554 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   b5540:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   b5542:	42a5      	cmp	r5, r4
   b5544:	d008      	beq.n	b5558 <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   b5546:	6870      	ldr	r0, [r6, #4]
   b5548:	6803      	ldr	r3, [r0, #0]
   b554a:	695b      	ldr	r3, [r3, #20]
   b554c:	4798      	blx	r3
   b554e:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   b5552:	e7f6      	b.n	b5542 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   b5554:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5556:	bd70      	pop	{r4, r5, r6, pc}
   b5558:	2001      	movs	r0, #1
   b555a:	e7fc      	b.n	b5556 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000b555c <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b555c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b555e:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   b5560:	2300      	movs	r3, #0
   b5562:	e9cd 3300 	strd	r3, r3, [sp]
   b5566:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b556a:	9e06      	ldr	r6, [sp, #24]
   b556c:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   b556e:	f7ff ffac 	bl	b54ca <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   b5572:	b140      	cbz	r0, b5586 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   b5574:	2301      	movs	r3, #1
   b5576:	4632      	mov	r2, r6
   b5578:	4629      	mov	r1, r5
   b557a:	4620      	mov	r0, r4
}
   b557c:	b002      	add	sp, #8
   b557e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b5582:	f7ff bfd1 	b.w	b5528 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5586:	b002      	add	sp, #8
   b5588:	bd70      	pop	{r4, r5, r6, pc}

000b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   b558a:	b510      	push	{r4, lr}
  _device = device;
   b558c:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   b558e:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   b5590:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   b5594:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   b5598:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   b559a:	7202      	strb	r2, [r0, #8]
  _width = width;
   b559c:	7183      	strb	r3, [r0, #6]
}
   b559e:	bd10      	pop	{r4, pc}

000b55a0 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   b55a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   b55a2:	8883      	ldrh	r3, [r0, #4]
   b55a4:	f88d 300c 	strb.w	r3, [sp, #12]
   b55a8:	0a1b      	lsrs	r3, r3, #8
   b55aa:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   b55ae:	79c3      	ldrb	r3, [r0, #7]
   b55b0:	9301      	str	r3, [sp, #4]
   b55b2:	ab03      	add	r3, sp, #12
   b55b4:	9300      	str	r3, [sp, #0]
   b55b6:	6800      	ldr	r0, [r0, #0]
   b55b8:	2301      	movs	r3, #1
   b55ba:	f7ff ff86 	bl	b54ca <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   b55be:	b005      	add	sp, #20
   b55c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b55c4 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   b55c4:	b4f0      	push	{r4, r5, r6, r7}
   b55c6:	460c      	mov	r4, r1
  if (numbytes == 0) {
   b55c8:	b902      	cbnz	r2, b55cc <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   b55ca:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   b55cc:	2a04      	cmp	r2, #4
   b55ce:	d813      	bhi.n	b55f8 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   b55d0:	f100 0509 	add.w	r5, r0, #9
   b55d4:	1883      	adds	r3, r0, r2
   b55d6:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   b55d8:	4283      	cmp	r3, r0
   b55da:	d009      	beq.n	b55f0 <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   b55dc:	7a07      	ldrb	r7, [r0, #8]
      _buffer[i] = value & 0xFF;
   b55de:	b2e6      	uxtb	r6, r4
    if (_bitorder == LSBFIRST) {
   b55e0:	b927      	cbnz	r7, b55ec <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   b55e2:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   b55e4:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   b55e6:	3501      	adds	r5, #1
   b55e8:	3b01      	subs	r3, #1
   b55ea:	e7f5      	b.n	b55d8 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   b55ec:	721e      	strb	r6, [r3, #8]
   b55ee:	e7f9      	b.n	b55e4 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   b55f0:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b55f2:	4618      	mov	r0, r3
   b55f4:	f7ff bfd4 	b.w	b55a0 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   b55f8:	2000      	movs	r0, #0
   b55fa:	bcf0      	pop	{r4, r5, r6, r7}
   b55fc:	4770      	bx	lr

000b55fe <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b55fe:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   b5600:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b5602:	460b      	mov	r3, r1
  _buffer[0] = _address;
   b5604:	8881      	ldrh	r1, [r0, #4]
   b5606:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   b560a:	2100      	movs	r1, #0
   b560c:	e9cd 2100 	strd	r2, r1, [sp]
   b5610:	2201      	movs	r2, #1
   b5612:	4621      	mov	r1, r4
   b5614:	6800      	ldr	r0, [r0, #0]
   b5616:	f7ff ffa1 	bl	b555c <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   b561a:	b002      	add	sp, #8
   b561c:	bd10      	pop	{r4, pc}

000b561e <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   b561e:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   b5620:	f100 0509 	add.w	r5, r0, #9
   b5624:	7982      	ldrb	r2, [r0, #6]
   b5626:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   b5628:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   b562a:	f7ff ffe8 	bl	b55fe <_ZN20Adafruit_I2CRegister4readEPhh>
   b562e:	b178      	cbz	r0, b5650 <_ZN20Adafruit_I2CRegister4readEv+0x32>
   b5630:	79a2      	ldrb	r2, [r4, #6]
   b5632:	4629      	mov	r1, r5
   b5634:	4422      	add	r2, r4
  uint32_t value = 0;
   b5636:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   b5638:	42a2      	cmp	r2, r4
   b563a:	d00b      	beq.n	b5654 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   b563c:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   b563e:	7a20      	ldrb	r0, [r4, #8]
   b5640:	b920      	cbnz	r0, b564c <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   b5642:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   b5644:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   b5646:	3a01      	subs	r2, #1
   b5648:	3101      	adds	r1, #1
   b564a:	e7f5      	b.n	b5638 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   b564c:	7808      	ldrb	r0, [r1, #0]
   b564e:	e7f9      	b.n	b5644 <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   b5650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5654:	bd38      	pop	{r3, r4, r5, pc}

000b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   b5656:	b510      	push	{r4, lr}
  _register = reg;
   b5658:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b565a:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b565c:	7143      	strb	r3, [r0, #5]
}
   b565e:	bd10      	pop	{r4, pc}

000b5660 <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   b5660:	b510      	push	{r4, lr}
   b5662:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b5664:	6800      	ldr	r0, [r0, #0]
   b5666:	f7ff ffda 	bl	b561e <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   b566a:	7923      	ldrb	r3, [r4, #4]
   b566c:	1c5a      	adds	r2, r3, #1
   b566e:	2301      	movs	r3, #1
   b5670:	4093      	lsls	r3, r2
  val >>= _shift;
   b5672:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   b5674:	3b01      	subs	r3, #1
  val >>= _shift;
   b5676:	40d0      	lsrs	r0, r2
}
   b5678:	4018      	ands	r0, r3
   b567a:	bd10      	pop	{r4, pc}

000b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b567c:	b570      	push	{r4, r5, r6, lr}
   b567e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b5680:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b5682:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b5684:	f7ff ffcb 	bl	b561e <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   b5688:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b568a:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits+1)) - 1;
   b568c:	3301      	adds	r3, #1
   b568e:	2201      	movs	r2, #1
   b5690:	409a      	lsls	r2, r3
   b5692:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b5694:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;      // remove the current data at that spot
   b5698:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b569c:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   b569e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b56a0:	fa03 f101 	lsl.w	r1, r3, r1
  _register->write(val, _register->width());
   b56a4:	4329      	orrs	r1, r5
   b56a6:	7982      	ldrb	r2, [r0, #6]
   b56a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   b56ac:	f7ff bf8a 	b.w	b55c4 <_ZN20Adafruit_I2CRegister5writeEmh>

000b56b0 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   b56b0:	4770      	bx	lr

000b56b2 <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   b56b2:	b508      	push	{r3, lr}
  return ALS_Data->read();
   b56b4:	6840      	ldr	r0, [r0, #4]
   b56b6:	f7ff ffb2 	bl	b561e <_ZN20Adafruit_I2CRegister4readEv>
}
   b56ba:	b280      	uxth	r0, r0
   b56bc:	bd08      	pop	{r3, pc}

000b56be <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   b56be:	69c0      	ldr	r0, [r0, #28]
   b56c0:	f081 0101 	eor.w	r1, r1, #1
   b56c4:	f7ff bfda 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b56c8 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   b56c8:	6a00      	ldr	r0, [r0, #32]
   b56ca:	f7ff bfd7 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b56ce <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   b56ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b56d0:	f7ff bfd4 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b56d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   b56d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b56d6:	f7ff bfd1 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b56da <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   b56da:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   b56dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b56de:	f7ff ffbf 	bl	b5660 <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b56e2:	b2c0      	uxtb	r0, r0
   b56e4:	bd08      	pop	{r3, pc}

000b56e6 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   b56e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56e8:	f7ff bfc8 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b56ec <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   b56ec:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   b56ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56f0:	f7ff ffb6 	bl	b5660 <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b56f4:	b2c0      	uxtb	r0, r0
   b56f6:	bd08      	pop	{r3, pc}

000b56f8 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   b56f8:	b510      	push	{r4, lr}
   b56fa:	ed2d 8b02 	vpush	{d8}
   b56fe:	4604      	mov	r4, r0
   b5700:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   b5704:	f7ff fff2 	bl	b56ec <_ZN17Adafruit_VEML77007getGainEv>
   b5708:	2802      	cmp	r0, #2
   b570a:	d018      	beq.n	b573e <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   b570c:	2803      	cmp	r0, #3
   b570e:	d013      	beq.n	b5738 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   b5710:	2801      	cmp	r0, #1
   b5712:	d103      	bne.n	b571c <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   b5714:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   b5718:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   b571c:	4620      	mov	r0, r4
   b571e:	f7ff ffdc 	bl	b56da <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   b5722:	3801      	subs	r0, #1
   b5724:	280b      	cmp	r0, #11
   b5726:	d814      	bhi.n	b5752 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   b5728:	e8df f000 	tbb	[pc, r0]
   b572c:	131e1b18 	.word	0x131e1b18
   b5730:	11131313 	.word	0x11131313
   b5734:	0c131313 	.word	0x0c131313
    value *= 4;
   b5738:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   b573c:	e7ec      	b.n	b5718 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   b573e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b5742:	e7e9      	b.n	b5718 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   b5744:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   b5748:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   b574c:	e001      	b.n	b5752 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   b574e:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   b5752:	eeb0 0a48 	vmov.f32	s0, s16
   b5756:	ecbd 8b02 	vpop	{d8}
   b575a:	bd10      	pop	{r4, pc}
    value /= 2.0;
   b575c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b5760:	e7f2      	b.n	b5748 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   b5762:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   b5766:	e7ef      	b.n	b5748 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   b5768:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   b576c:	e7ec      	b.n	b5748 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
	...

000b5770 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   b5770:	b510      	push	{r4, lr}
   b5772:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   b5774:	6840      	ldr	r0, [r0, #4]
   b5776:	f7ff ff52 	bl	b561e <_ZN20Adafruit_I2CRegister4readEv>
   b577a:	ee07 0a90 	vmov	s15, r0
   b577e:	4620      	mov	r0, r4
   b5780:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b5784:	f7ff ffb8 	bl	b56f8 <_ZN17Adafruit_VEML77009normalizeEf>
   b5788:	ee10 0a10 	vmov	r0, s0
   b578c:	f003 fad8 	bl	b8d40 <__aeabi_f2d>
   b5790:	a305      	add	r3, pc, #20	; (adr r3, b57a8 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   b5792:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5796:	f003 fb2b 	bl	b8df0 <__aeabi_dmul>
   b579a:	f003 fd3b 	bl	b9214 <__aeabi_d2f>
}
   b579e:	ee00 0a10 	vmov	s0, r0
   b57a2:	bd10      	pop	{r4, pc}
   b57a4:	f3af 8000 	nop.w
   b57a8:	487fcb92 	.word	0x487fcb92
   b57ac:	3fad7dbf 	.word	0x3fad7dbf

000b57b0 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   b57b0:	b510      	push	{r4, lr}
   b57b2:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   b57b4:	6880      	ldr	r0, [r0, #8]
   b57b6:	f7ff ff32 	bl	b561e <_ZN20Adafruit_I2CRegister4readEv>
   b57ba:	ee07 0a90 	vmov	s15, r0
   b57be:	4620      	mov	r0, r4
   b57c0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b57c4:	f7ff ff98 	bl	b56f8 <_ZN17Adafruit_VEML77009normalizeEf>
   b57c8:	ee10 0a10 	vmov	r0, s0
   b57cc:	f003 fab8 	bl	b8d40 <__aeabi_f2d>
   b57d0:	a305      	add	r3, pc, #20	; (adr r3, b57e8 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   b57d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57d6:	f003 fb0b 	bl	b8df0 <__aeabi_dmul>
   b57da:	f003 fd1b 	bl	b9214 <__aeabi_d2f>
}
   b57de:	ee00 0a10 	vmov	s0, r0
   b57e2:	bd10      	pop	{r4, pc}
   b57e4:	f3af 8000 	nop.w
   b57e8:	487fcb92 	.word	0x487fcb92
   b57ec:	3fad7dbf 	.word	0x3fad7dbf

000b57f0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   b57f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b57f2:	f7ff bf43 	b.w	b567c <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b57f6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   b57f6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b57f8:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b57fa:	200c      	movs	r0, #12
{
   b57fc:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b57fe:	f7fe fc4a 	bl	b4096 <_Znwj>
   b5802:	4605      	mov	r5, r0
   b5804:	b118      	cbz	r0, b580e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   b5806:	9a03      	ldr	r2, [sp, #12]
   b5808:	2110      	movs	r1, #16
   b580a:	f7ff fe39 	bl	b5480 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b580e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   b5810:	4628      	mov	r0, r5
   b5812:	f7ff fe4e 	bl	b54b2 <_ZN18Adafruit_I2CDevice5beginEv>
   b5816:	4605      	mov	r5, r0
   b5818:	2800      	cmp	r0, #0
   b581a:	f000 80d2 	beq.w	b59c2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   b581e:	2010      	movs	r0, #16
   b5820:	f7fe fc39 	bl	b4096 <_Znwj>
   b5824:	4606      	mov	r6, r0
   b5826:	b138      	cbz	r0, b5838 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   b5828:	2301      	movs	r3, #1
   b582a:	2200      	movs	r2, #0
   b582c:	e9cd 2300 	strd	r2, r3, [sp]
   b5830:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5832:	2302      	movs	r3, #2
   b5834:	f7ff fea9 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b5838:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   b583a:	2010      	movs	r0, #16
   b583c:	f7fe fc2b 	bl	b4096 <_Znwj>
   b5840:	4606      	mov	r6, r0
   b5842:	b138      	cbz	r0, b5854 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   b5844:	2300      	movs	r3, #0
   b5846:	2201      	movs	r2, #1
   b5848:	e9cd 3200 	strd	r3, r2, [sp]
   b584c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b584e:	2302      	movs	r3, #2
   b5850:	f7ff fe9b 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b5854:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   b5856:	2010      	movs	r0, #16
   b5858:	f7fe fc1d 	bl	b4096 <_Znwj>
   b585c:	4606      	mov	r6, r0
   b585e:	b140      	cbz	r0, b5872 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   b5860:	2300      	movs	r3, #0
   b5862:	2201      	movs	r2, #1
   b5864:	e9cd 3200 	strd	r3, r2, [sp]
   b5868:	2302      	movs	r3, #2
   b586a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b586c:	461a      	mov	r2, r3
   b586e:	f7ff fe8c 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b5872:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   b5874:	2010      	movs	r0, #16
   b5876:	f7fe fc0e 	bl	b4096 <_Znwj>
   b587a:	4606      	mov	r6, r0
   b587c:	b148      	cbz	r0, b5892 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   b587e:	2300      	movs	r3, #0
   b5880:	f04f 0e01 	mov.w	lr, #1
   b5884:	e9cd 3e00 	strd	r3, lr, [sp]
   b5888:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b588a:	2302      	movs	r3, #2
   b588c:	2203      	movs	r2, #3
   b588e:	f7ff fe7c 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b5892:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   b5894:	2010      	movs	r0, #16
   b5896:	f7fe fbfe 	bl	b4096 <_Znwj>
   b589a:	4606      	mov	r6, r0
   b589c:	b148      	cbz	r0, b58b2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   b589e:	2300      	movs	r3, #0
   b58a0:	f04f 0c01 	mov.w	ip, #1
   b58a4:	e9cd 3c00 	strd	r3, ip, [sp]
   b58a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b58aa:	2302      	movs	r3, #2
   b58ac:	2204      	movs	r2, #4
   b58ae:	f7ff fe6c 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b58b2:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   b58b4:	2010      	movs	r0, #16
   b58b6:	f7fe fbee 	bl	b4096 <_Znwj>
   b58ba:	4606      	mov	r6, r0
   b58bc:	b140      	cbz	r0, b58d0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   b58be:	2300      	movs	r3, #0
   b58c0:	2101      	movs	r1, #1
   b58c2:	e9cd 3100 	strd	r3, r1, [sp]
   b58c6:	2205      	movs	r2, #5
   b58c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b58ca:	2302      	movs	r3, #2
   b58cc:	f7ff fe5d 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b58d0:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   b58d2:	2010      	movs	r0, #16
   b58d4:	f7fe fbdf 	bl	b4096 <_Znwj>
   b58d8:	4606      	mov	r6, r0
   b58da:	b140      	cbz	r0, b58ee <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   b58dc:	2300      	movs	r3, #0
   b58de:	2201      	movs	r2, #1
   b58e0:	e9cd 3200 	strd	r3, r2, [sp]
   b58e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b58e6:	2302      	movs	r3, #2
   b58e8:	2206      	movs	r2, #6
   b58ea:	f7ff fe4e 	bl	b558a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b58ee:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   b58f0:	2008      	movs	r0, #8
   b58f2:	f7fe fbd0 	bl	b4096 <_Znwj>
   b58f6:	4606      	mov	r6, r0
   b58f8:	b120      	cbz	r0, b5904 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   b58fa:	6821      	ldr	r1, [r4, #0]
   b58fc:	2300      	movs	r3, #0
   b58fe:	2201      	movs	r2, #1
   b5900:	f7ff fea9 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5904:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   b5906:	2008      	movs	r0, #8
   b5908:	f7fe fbc5 	bl	b4096 <_Znwj>
   b590c:	4606      	mov	r6, r0
   b590e:	b120      	cbz	r0, b591a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   b5910:	2301      	movs	r3, #1
   b5912:	6821      	ldr	r1, [r4, #0]
   b5914:	461a      	mov	r2, r3
   b5916:	f7ff fe9e 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b591a:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   b591c:	2008      	movs	r0, #8
   b591e:	f7fe fbba 	bl	b4096 <_Znwj>
   b5922:	4606      	mov	r6, r0
   b5924:	b120      	cbz	r0, b5930 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   b5926:	6821      	ldr	r1, [r4, #0]
   b5928:	2304      	movs	r3, #4
   b592a:	2202      	movs	r2, #2
   b592c:	f7ff fe93 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5930:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   b5932:	2008      	movs	r0, #8
   b5934:	f7fe fbaf 	bl	b4096 <_Znwj>
   b5938:	4606      	mov	r6, r0
   b593a:	b120      	cbz	r0, b5946 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   b593c:	6821      	ldr	r1, [r4, #0]
   b593e:	2306      	movs	r3, #6
   b5940:	2204      	movs	r2, #4
   b5942:	f7ff fe88 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5946:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   b5948:	2008      	movs	r0, #8
   b594a:	f7fe fba4 	bl	b4096 <_Znwj>
   b594e:	4606      	mov	r6, r0
   b5950:	b120      	cbz	r0, b595c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   b5952:	6821      	ldr	r1, [r4, #0]
   b5954:	230b      	movs	r3, #11
   b5956:	2202      	movs	r2, #2
   b5958:	f7ff fe7d 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b595c:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   b595e:	2008      	movs	r0, #8
   b5960:	f7fe fb99 	bl	b4096 <_Znwj>
   b5964:	4606      	mov	r6, r0
   b5966:	b120      	cbz	r0, b5972 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   b5968:	6961      	ldr	r1, [r4, #20]
   b596a:	2300      	movs	r3, #0
   b596c:	2201      	movs	r2, #1
   b596e:	f7ff fe72 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5972:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b5974:	2008      	movs	r0, #8
   b5976:	f7fe fb8e 	bl	b4096 <_Znwj>
   b597a:	4606      	mov	r6, r0
   b597c:	b120      	cbz	r0, b5988 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   b597e:	6961      	ldr	r1, [r4, #20]
   b5980:	2301      	movs	r3, #1
   b5982:	2202      	movs	r2, #2
   b5984:	f7ff fe67 	bl	b5656 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   b5988:	2100      	movs	r1, #0
   b598a:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b598c:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   b598e:	f7ff fe96 	bl	b56be <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   b5992:	2100      	movs	r1, #0
   b5994:	4620      	mov	r0, r4
   b5996:	f7ff fe97 	bl	b56c8 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   b599a:	2100      	movs	r1, #0
   b599c:	4620      	mov	r0, r4
   b599e:	f7ff fe96 	bl	b56ce <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   b59a2:	2100      	movs	r1, #0
   b59a4:	4620      	mov	r0, r4
   b59a6:	f7ff fe9e 	bl	b56e6 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   b59aa:	2100      	movs	r1, #0
   b59ac:	4620      	mov	r0, r4
   b59ae:	f7ff fe91 	bl	b56d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   b59b2:	2100      	movs	r1, #0
   b59b4:	4620      	mov	r0, r4
   b59b6:	f7ff ff1b 	bl	b57f0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   b59ba:	2101      	movs	r1, #1
   b59bc:	4620      	mov	r0, r4
   b59be:	f7ff fe7e 	bl	b56be <_ZN17Adafruit_VEML77006enableEb>
}
   b59c2:	4628      	mov	r0, r5
   b59c4:	b004      	add	sp, #16
   b59c6:	bd70      	pop	{r4, r5, r6, pc}

000b59c8 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b59c8:	4770      	bx	lr

000b59ca <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b59ca:	b510      	push	{r4, lr}
}
   b59cc:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b59ce:	4604      	mov	r4, r0
}
   b59d0:	f7fe fb65 	bl	b409e <_ZdlPvj>
   b59d4:	4620      	mov	r0, r4
   b59d6:	bd10      	pop	{r4, pc}

000b59d8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b59d8:	6803      	ldr	r3, [r0, #0]
   b59da:	b2c9      	uxtb	r1, r1
   b59dc:	689b      	ldr	r3, [r3, #8]
   b59de:	4718      	bx	r3

000b59e0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b59e0:	b40e      	push	{r1, r2, r3}
   b59e2:	b500      	push	{lr}
   b59e4:	b08c      	sub	sp, #48	; 0x30
   b59e6:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b59e8:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b59ec:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b59f0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b59f2:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b59f6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b59f8:	6801      	ldr	r1, [r0, #0]
   b59fa:	aa04      	add	r2, sp, #16
   b59fc:	201e      	movs	r0, #30
    attr.flags = 0;
   b59fe:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5a02:	f001 fb21 	bl	b7048 <log_message_v>
}
   b5a06:	b00c      	add	sp, #48	; 0x30
   b5a08:	f85d eb04 	ldr.w	lr, [sp], #4
   b5a0c:	b003      	add	sp, #12
   b5a0e:	4770      	bx	lr

000b5a10 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5a10:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5a12:	4d03      	ldr	r5, [pc, #12]	; (b5a20 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5a14:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b5a18:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5a1c:	bd30      	pop	{r4, r5, pc}
   b5a1e:	bf00      	nop
   b5a20:	000b9b54 	.word	0x000b9b54

000b5a24 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5a24:	6840      	ldr	r0, [r0, #4]
   b5a26:	f002 b8c3 	b.w	b7bb0 <_ZN7TwoWire5beginEv>

000b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5a2a:	b510      	push	{r4, lr}
   b5a2c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b5a2e:	6800      	ldr	r0, [r0, #0]
   b5a30:	f002 f907 	bl	b7c42 <_ZN7TwoWire6unlockEv>
   b5a34:	4620      	mov	r0, r4
   b5a36:	bd10      	pop	{r4, pc}

000b5a38 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b5a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a3c:	b08a      	sub	sp, #40	; 0x28
   b5a3e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b5a40:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5a44:	f002 f8f4 	bl	b7c30 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b5a48:	221e      	movs	r2, #30
   b5a4a:	2100      	movs	r1, #0
   b5a4c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b5a4e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b5a50:	f003 fca6 	bl	b93a0 <memset>
		size_t framAddr = 0;
   b5a54:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b5a56:	b1ef      	cbz	r7, b5a94 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b5a58:	6823      	ldr	r3, [r4, #0]
   b5a5a:	2f1e      	cmp	r7, #30
   b5a5c:	46b8      	mov	r8, r7
   b5a5e:	bf28      	it	cs
   b5a60:	f04f 081e 	movcs.w	r8, #30
   b5a64:	68dd      	ldr	r5, [r3, #12]
   b5a66:	aa02      	add	r2, sp, #8
   b5a68:	4643      	mov	r3, r8
   b5a6a:	4631      	mov	r1, r6
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	47a8      	blx	r5
			if (!result) {
   b5a70:	4605      	mov	r5, r0
   b5a72:	b958      	cbnz	r0, b5a8c <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b5a74:	480a      	ldr	r0, [pc, #40]	; (b5aa0 <_ZN6MB85RC5eraseEv+0x68>)
   b5a76:	490b      	ldr	r1, [pc, #44]	; (b5aa4 <_ZN6MB85RC5eraseEv+0x6c>)
   b5a78:	4632      	mov	r2, r6
   b5a7a:	f7ff ffb1 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b5a7e:	a801      	add	r0, sp, #4
   b5a80:	f7ff ffd3 	bl	b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b5a84:	4628      	mov	r0, r5
   b5a86:	b00a      	add	sp, #40	; 0x28
   b5a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b5a8c:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b5a90:	4446      	add	r6, r8
		while(totalLen > 0) {
   b5a92:	e7e0      	b.n	b5a56 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b5a94:	a801      	add	r0, sp, #4
   b5a96:	f7ff ffc8 	bl	b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b5a9a:	2501      	movs	r5, #1
   b5a9c:	e7f2      	b.n	b5a84 <_ZN6MB85RC5eraseEv+0x4c>
   b5a9e:	bf00      	nop
   b5aa0:	2003e68c 	.word	0x2003e68c
   b5aa4:	000b9b20 	.word	0x000b9b20

000b5aa8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5aac:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5aae:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ab0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5ab2:	460d      	mov	r5, r1
   b5ab4:	4616      	mov	r6, r2
   b5ab6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b5ab8:	f002 f8ba 	bl	b7c30 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5abc:	b1a7      	cbz	r7, b5ae8 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5abe:	68e1      	ldr	r1, [r4, #12]
   b5ac0:	6860      	ldr	r0, [r4, #4]
   b5ac2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5ac6:	f002 f8a9 	bl	b7c1c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5aca:	0a29      	lsrs	r1, r5, #8
   b5acc:	6860      	ldr	r0, [r4, #4]
   b5ace:	f7ff ff83 	bl	b59d8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5ad2:	4629      	mov	r1, r5
   b5ad4:	6860      	ldr	r0, [r4, #4]
   b5ad6:	f7ff ff7f 	bl	b59d8 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b5ada:	6860      	ldr	r0, [r4, #4]
   b5adc:	2100      	movs	r1, #0
   b5ade:	f002 f8a0 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5ae2:	b148      	cbz	r0, b5af8 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b5ae4:	2400      	movs	r4, #0
   b5ae6:	e000      	b.n	b5aea <_ZN6MB85RC8readDataEjPhj+0x42>
   b5ae8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5aea:	a801      	add	r0, sp, #4
   b5aec:	f7ff ff9d 	bl	b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b5af0:	4620      	mov	r0, r4
   b5af2:	b003      	add	sp, #12
   b5af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b5af8:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b5afa:	7b21      	ldrb	r1, [r4, #12]
   b5afc:	6860      	ldr	r0, [r4, #4]
   b5afe:	46b8      	mov	r8, r7
   b5b00:	bf28      	it	cs
   b5b02:	f04f 0820 	movcs.w	r8, #32
   b5b06:	2301      	movs	r3, #1
   b5b08:	4642      	mov	r2, r8
   b5b0a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5b0e:	f002 f86c 	bl	b7bea <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b5b12:	f002 ff45 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b5b16:	6803      	ldr	r3, [r0, #0]
   b5b18:	691b      	ldr	r3, [r3, #16]
   b5b1a:	4798      	blx	r3
   b5b1c:	4540      	cmp	r0, r8
   b5b1e:	dbe1      	blt.n	b5ae4 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b5b20:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b5b24:	f002 ff3c 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b5b28:	6803      	ldr	r3, [r0, #0]
   b5b2a:	695b      	ldr	r3, [r3, #20]
   b5b2c:	4798      	blx	r3
   b5b2e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b5b32:	454e      	cmp	r6, r9
   b5b34:	d1f6      	bne.n	b5b24 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b5b36:	4445      	add	r5, r8
				dataLen--;
   b5b38:	eba7 0708 	sub.w	r7, r7, r8
   b5b3c:	e7be      	b.n	b5abc <_ZN6MB85RC8readDataEjPhj+0x14>

000b5b3e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b42:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5b44:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5b46:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5b48:	460e      	mov	r6, r1
   b5b4a:	4690      	mov	r8, r2
   b5b4c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b5b4e:	f002 f86f 	bl	b7c30 <_ZN7TwoWire4lockEv>
   b5b52:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b5b56:	f1b9 0f00 	cmp.w	r9, #0
   b5b5a:	d02a      	beq.n	b5bb2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b5b5c:	b34d      	cbz	r5, b5bb2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5b5e:	68e1      	ldr	r1, [r4, #12]
   b5b60:	6860      	ldr	r0, [r4, #4]
   b5b62:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5b66:	f002 f859 	bl	b7c1c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5b6a:	0a31      	lsrs	r1, r6, #8
   b5b6c:	6860      	ldr	r0, [r4, #4]
   b5b6e:	f7ff ff33 	bl	b59d8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5b72:	6860      	ldr	r0, [r4, #4]
   b5b74:	4631      	mov	r1, r6
   b5b76:	f7ff ff2f 	bl	b59d8 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5b7a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b5b7e:	4647      	mov	r7, r8
   b5b80:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b5b84:	6860      	ldr	r0, [r4, #4]
   b5b86:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5b8a:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b5b8c:	3d01      	subs	r5, #1
				wire.write(*data);
   b5b8e:	689b      	ldr	r3, [r3, #8]
   b5b90:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5b92:	4555      	cmp	r5, sl
   b5b94:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b5b98:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5b9a:	d001      	beq.n	b5ba0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b5b9c:	2d00      	cmp	r5, #0
   b5b9e:	d1f1      	bne.n	b5b84 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b5ba0:	6860      	ldr	r0, [r4, #4]
   b5ba2:	2101      	movs	r1, #1
   b5ba4:	f002 f83d 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5ba8:	2800      	cmp	r0, #0
   b5baa:	d0d7      	beq.n	b5b5c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b5bac:	f04f 0900 	mov.w	r9, #0
   b5bb0:	e7d1      	b.n	b5b56 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b5bb2:	a801      	add	r0, sp, #4
   b5bb4:	f7ff ff39 	bl	b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b5bb8:	4648      	mov	r0, r9
   b5bba:	b003      	add	sp, #12
   b5bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5bc0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5bc4:	b08b      	sub	sp, #44	; 0x2c
   b5bc6:	460e      	mov	r6, r1
   b5bc8:	4615      	mov	r5, r2
   b5bca:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b5bcc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5bce:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5bd0:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b5bd2:	f002 f82d 	bl	b7c30 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b5bd6:	42ae      	cmp	r6, r5
   b5bd8:	d229      	bcs.n	b5c2e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b5bda:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b5bdc:	4425      	add	r5, r4
			while(numBytes > 0) {
   b5bde:	b18c      	cbz	r4, b5c04 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b5be0:	2c1e      	cmp	r4, #30
   b5be2:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b5be4:	f8d8 3000 	ldr.w	r3, [r8]
   b5be8:	bf28      	it	cs
   b5bea:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b5bec:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b5bee:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5bf2:	aa02      	add	r2, sp, #8
   b5bf4:	463b      	mov	r3, r7
   b5bf6:	4631      	mov	r1, r6
   b5bf8:	4640      	mov	r0, r8
				framAddrTo -= count;
   b5bfa:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b5bfc:	47c8      	blx	r9
				if (!result) {
   b5bfe:	b948      	cbnz	r0, b5c14 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5c00:	2400      	movs	r4, #0
   b5c02:	e000      	b.n	b5c06 <_ZN6MB85RC8moveDataEjjj+0x46>
   b5c04:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5c06:	a801      	add	r0, sp, #4
   b5c08:	f7ff ff0f 	bl	b5a2a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	b00b      	add	sp, #44	; 0x2c
   b5c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b5c14:	f8d8 3000 	ldr.w	r3, [r8]
   b5c18:	aa02      	add	r2, sp, #8
   b5c1a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5c1e:	4629      	mov	r1, r5
   b5c20:	463b      	mov	r3, r7
   b5c22:	4640      	mov	r0, r8
   b5c24:	47c8      	blx	r9
				if (!result) {
   b5c26:	2800      	cmp	r0, #0
   b5c28:	d0ea      	beq.n	b5c00 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b5c2a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5c2c:	e7d7      	b.n	b5bde <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b5c2e:	d9e9      	bls.n	b5c04 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b5c30:	2c00      	cmp	r4, #0
   b5c32:	d0e7      	beq.n	b5c04 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b5c34:	f8d8 3000 	ldr.w	r3, [r8]
   b5c38:	2c1e      	cmp	r4, #30
   b5c3a:	4627      	mov	r7, r4
   b5c3c:	bf28      	it	cs
   b5c3e:	271e      	movcs	r7, #30
   b5c40:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5c44:	aa02      	add	r2, sp, #8
   b5c46:	463b      	mov	r3, r7
   b5c48:	4631      	mov	r1, r6
   b5c4a:	4640      	mov	r0, r8
   b5c4c:	47c8      	blx	r9
				if (!result) {
   b5c4e:	2800      	cmp	r0, #0
   b5c50:	d0d6      	beq.n	b5c00 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b5c52:	f8d8 3000 	ldr.w	r3, [r8]
   b5c56:	aa02      	add	r2, sp, #8
   b5c58:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5c5c:	4629      	mov	r1, r5
   b5c5e:	463b      	mov	r3, r7
   b5c60:	4640      	mov	r0, r8
   b5c62:	47c8      	blx	r9
				if (!result) {
   b5c64:	2800      	cmp	r0, #0
   b5c66:	d0cb      	beq.n	b5c00 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b5c68:	443e      	add	r6, r7
				framAddrTo += count;
   b5c6a:	443d      	add	r5, r7
				numBytes -= count;
   b5c6c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5c6e:	e7df      	b.n	b5c30 <_ZN6MB85RC8moveDataEjjj+0x70>

000b5c70 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   b5c70:	2040      	movs	r0, #64	; 0x40
   b5c72:	4770      	bx	lr

000b5c74 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   b5c74:	2000      	movs	r0, #0
   b5c76:	4770      	bx	lr

000b5c78 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   b5c78:	2080      	movs	r0, #128	; 0x80
   b5c7a:	4770      	bx	lr

000b5c7c <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   b5c7c:	20ff      	movs	r0, #255	; 0xff
   b5c7e:	4770      	bx	lr

000b5c80 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   b5c80:	4770      	bx	lr

000b5c82 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   b5c82:	4770      	bx	lr

000b5c84 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   b5c84:	4770      	bx	lr

000b5c86 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   b5c86:	4770      	bx	lr

000b5c88 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   b5c88:	b510      	push	{r4, lr}
}
   b5c8a:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   b5c8c:	4604      	mov	r4, r0
}
   b5c8e:	f7fe fa06 	bl	b409e <_ZdlPvj>
   b5c92:	4620      	mov	r0, r4
   b5c94:	bd10      	pop	{r4, pc}

000b5c96 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   b5c96:	b510      	push	{r4, lr}
}
   b5c98:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   b5c9a:	4604      	mov	r4, r0
}
   b5c9c:	f7fe f9ff 	bl	b409e <_ZdlPvj>
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	bd10      	pop	{r4, pc}

000b5ca4 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   b5ca4:	b510      	push	{r4, lr}
}
   b5ca6:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   b5ca8:	4604      	mov	r4, r0
}
   b5caa:	f7fe f9f8 	bl	b409e <_ZdlPvj>
   b5cae:	4620      	mov	r0, r4
   b5cb0:	bd10      	pop	{r4, pc}

000b5cb2 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   b5cb2:	b510      	push	{r4, lr}
}
   b5cb4:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   b5cb6:	4604      	mov	r4, r0
}
   b5cb8:	f7fe f9f1 	bl	b409e <_ZdlPvj>
   b5cbc:	4620      	mov	r0, r4
   b5cbe:	bd10      	pop	{r4, pc}

000b5cc0 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   b5cc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   b5cc4:	6803      	ldr	r3, [r0, #0]
   b5cc6:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   b5cc8:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   b5cca:	4798      	blx	r3
   b5ccc:	2210      	movs	r2, #16
   b5cce:	4601      	mov	r1, r0
   b5cd0:	4668      	mov	r0, sp
   b5cd2:	f003 fb65 	bl	b93a0 <memset>
	size_t len = length();
   b5cd6:	6823      	ldr	r3, [r4, #0]
   b5cd8:	4620      	mov	r0, r4
   b5cda:	689b      	ldr	r3, [r3, #8]
   b5cdc:	4798      	blx	r3
	size_t offset = 0;
   b5cde:	2500      	movs	r5, #0
	size_t len = length();
   b5ce0:	4607      	mov	r7, r0
	bool bResult = false;
   b5ce2:	4628      	mov	r0, r5
	while(offset < len) {
   b5ce4:	42bd      	cmp	r5, r7
   b5ce6:	d20e      	bcs.n	b5d06 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   b5ce8:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   b5cea:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   b5cec:	2e10      	cmp	r6, #16
   b5cee:	bf28      	it	cs
   b5cf0:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   b5cf2:	f8d3 8018 	ldr.w	r8, [r3, #24]
   b5cf6:	466a      	mov	r2, sp
   b5cf8:	4633      	mov	r3, r6
   b5cfa:	4629      	mov	r1, r5
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	47c0      	blx	r8
		if (!bResult) {
   b5d00:	b108      	cbz	r0, b5d06 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   b5d02:	4435      	add	r5, r6
	while(offset < len) {
   b5d04:	e7ee      	b.n	b5ce4 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   b5d06:	b004      	add	sp, #16
   b5d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5d0c <_ZN7TwoWire5writeEj.isra.0>:
   b5d0c:	6803      	ldr	r3, [r0, #0]
   b5d0e:	b2c9      	uxtb	r1, r1
   b5d10:	689b      	ldr	r3, [r3, #8]
   b5d12:	4718      	bx	r3

000b5d14 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   b5d14:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5d18:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   b5d1a:	f240 1301 	movw	r3, #257	; 0x101
   b5d1e:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   b5d20:	2300      	movs	r3, #0
   b5d22:	8203      	strh	r3, [r0, #16]
}
   b5d24:	4770      	bx	lr
	...

000b5d28 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   b5d28:	4a06      	ldr	r2, [pc, #24]	; (b5d44 <_ZN12MCP79410TimeC1Ev+0x1c>)
   b5d2a:	6002      	str	r2, [r0, #0]
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4a06      	ldr	r2, [pc, #24]	; (b5d48 <_ZN12MCP79410TimeC1Ev+0x20>)
   b5d30:	6042      	str	r2, [r0, #4]
   b5d32:	f240 7204 	movw	r2, #1796	; 0x704
   b5d36:	8102      	strh	r2, [r0, #8]
   b5d38:	2200      	movs	r2, #0
   b5d3a:	7442      	strb	r2, [r0, #17]
	clear();
   b5d3c:	f7ff ffea 	bl	b5d14 <_ZN12MCP79410Time5clearEv>
}
   b5d40:	bd08      	pop	{r3, pc}
   b5d42:	bf00      	nop
   b5d44:	000b9c34 	.word	0x000b9c34
   b5d48:	03020100 	.word	0x03020100

000b5d4c <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b5d4c:	0903      	lsrs	r3, r0, #4
}
   b5d4e:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b5d50:	f000 000f 	and.w	r0, r0, #15
}
   b5d54:	fb02 0003 	mla	r0, r2, r3, r0
   b5d58:	4770      	bx	lr

000b5d5a <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   b5d5a:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   b5d5c:	7a80      	ldrb	r0, [r0, #10]
   b5d5e:	f7ff fff5 	bl	b5d4c <_ZN12MCP79410Time8bcdToIntEh>
}
   b5d62:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   b5d66:	bd08      	pop	{r3, pc}

000b5d68 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   b5d68:	7ac0      	ldrb	r0, [r0, #11]
   b5d6a:	f000 001f 	and.w	r0, r0, #31
   b5d6e:	f7ff bfed 	b.w	b5d4c <_ZN12MCP79410Time8bcdToIntEh>

000b5d72 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   b5d72:	7b00      	ldrb	r0, [r0, #12]
   b5d74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   b5d78:	f7ff bfe8 	b.w	b5d4c <_ZN12MCP79410Time8bcdToIntEh>

000b5d7c <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   b5d7c:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   b5d7e:	7b81      	ldrb	r1, [r0, #14]
   b5d80:	064a      	lsls	r2, r1, #25
   b5d82:	d50d      	bpl.n	b5da0 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   b5d84:	f001 001f 	and.w	r0, r1, #31
   b5d88:	f7ff ffe0 	bl	b5d4c <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   b5d8c:	068b      	lsls	r3, r1, #26
   b5d8e:	d503      	bpl.n	b5d98 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   b5d90:	280c      	cmp	r0, #12
   b5d92:	d000      	beq.n	b5d96 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   b5d94:	300c      	adds	r0, #12
}
   b5d96:	bd08      	pop	{r3, pc}
				return 0;
   b5d98:	280c      	cmp	r0, #12
   b5d9a:	bf08      	it	eq
   b5d9c:	2000      	moveq	r0, #0
   b5d9e:	e7fa      	b.n	b5d96 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   b5da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   b5da4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   b5da8:	f7ff bfd0 	b.w	b5d4c <_ZN12MCP79410Time8bcdToIntEh>

000b5dac <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   b5dac:	7bc0      	ldrb	r0, [r0, #15]
   b5dae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5db2:	f7ff bfcb 	b.w	b5d4c <_ZN12MCP79410Time8bcdToIntEh>

000b5db6 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   b5db6:	7c00      	ldrb	r0, [r0, #16]
   b5db8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5dbc:	f7ff bfc6 	b.w	b5d4c <_ZN12MCP79410Time8bcdToIntEh>

000b5dc0 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   b5dc0:	b510      	push	{r4, lr}
   b5dc2:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   b5dc4:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   b5dc6:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   b5dc8:	2100      	movs	r1, #0
   b5dca:	a801      	add	r0, sp, #4
   b5dcc:	f003 fae8 	bl	b93a0 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	f7ff ffc2 	bl	b5d5a <_ZNK12MCP79410Time7getYearEv>
   b5dd6:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   b5dda:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   b5ddc:	4620      	mov	r0, r4
   b5dde:	f7ff ffc3 	bl	b5d68 <_ZNK12MCP79410Time8getMonthEv>
   b5de2:	3801      	subs	r0, #1
   b5de4:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   b5de6:	4620      	mov	r0, r4
   b5de8:	f7ff ffc3 	bl	b5d72 <_ZNK12MCP79410Time13getDayOfMonthEv>
   b5dec:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   b5dee:	4620      	mov	r0, r4
   b5df0:	f7ff ffc4 	bl	b5d7c <_ZNK12MCP79410Time7getHourEv>
   b5df4:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   b5df6:	4620      	mov	r0, r4
   b5df8:	f7ff ffd8 	bl	b5dac <_ZNK12MCP79410Time9getMinuteEv>
   b5dfc:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   b5dfe:	4620      	mov	r0, r4
   b5e00:	f7ff ffd9 	bl	b5db6 <_ZNK12MCP79410Time9getSecondEv>
   b5e04:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   b5e06:	a801      	add	r0, sp, #4
   b5e08:	f001 fad0 	bl	b73ac <mktime>
}
   b5e0c:	b00a      	add	sp, #40	; 0x28
   b5e0e:	bd10      	pop	{r4, pc}

000b5e10 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   b5e10:	220a      	movs	r2, #10
   b5e12:	fb90 f1f2 	sdiv	r1, r0, r2
   b5e16:	fb91 f3f2 	sdiv	r3, r1, r2
   b5e1a:	fb02 1313 	mls	r3, r2, r3, r1
   b5e1e:	011b      	lsls	r3, r3, #4
   b5e20:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   b5e22:	fb02 0011 	mls	r0, r2, r1, r0
   b5e26:	4318      	orrs	r0, r3
}
   b5e28:	b2c0      	uxtb	r0, r0
   b5e2a:	4770      	bx	lr

000b5e2c <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   b5e2c:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   b5e2e:	b510      	push	{r4, lr}
   b5e30:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   b5e32:	fb91 f0f3 	sdiv	r0, r1, r3
   b5e36:	fb00 1013 	mls	r0, r0, r3, r1
   b5e3a:	f7ff ffe9 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
   b5e3e:	72a0      	strb	r0, [r4, #10]
}
   b5e40:	bd10      	pop	{r4, pc}

000b5e42 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   b5e42:	b510      	push	{r4, lr}
   b5e44:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   b5e46:	4608      	mov	r0, r1
   b5e48:	f7ff ffe2 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
   b5e4c:	72e0      	strb	r0, [r4, #11]
}
   b5e4e:	bd10      	pop	{r4, pc}

000b5e50 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   b5e50:	b510      	push	{r4, lr}
   b5e52:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   b5e54:	4608      	mov	r0, r1
   b5e56:	f7ff ffdb 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   b5e5a:	7b23      	ldrb	r3, [r4, #12]
   b5e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   b5e60:	4318      	orrs	r0, r3
   b5e62:	7320      	strb	r0, [r4, #12]
}
   b5e64:	bd10      	pop	{r4, pc}

000b5e66 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   b5e66:	b510      	push	{r4, lr}
   b5e68:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   b5e6a:	1c48      	adds	r0, r1, #1
   b5e6c:	f7ff ffd0 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   b5e70:	7b63      	ldrb	r3, [r4, #13]
   b5e72:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   b5e76:	4318      	orrs	r0, r3
   b5e78:	7360      	strb	r0, [r4, #13]
}
   b5e7a:	bd10      	pop	{r4, pc}

000b5e7c <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   b5e7c:	b510      	push	{r4, lr}
   b5e7e:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   b5e80:	4608      	mov	r0, r1
   b5e82:	f7ff ffc5 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
   b5e86:	73a0      	strb	r0, [r4, #14]
}
   b5e88:	bd10      	pop	{r4, pc}

000b5e8a <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   b5e8a:	b510      	push	{r4, lr}
   b5e8c:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   b5e8e:	4608      	mov	r0, r1
   b5e90:	f7ff ffbe 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
   b5e94:	73e0      	strb	r0, [r4, #15]
}
   b5e96:	bd10      	pop	{r4, pc}

000b5e98 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   b5e98:	b510      	push	{r4, lr}
   b5e9a:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   b5e9c:	4608      	mov	r0, r1
   b5e9e:	f7ff ffb7 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   b5ea2:	7c23      	ldrb	r3, [r4, #16]
   b5ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   b5ea8:	4318      	orrs	r0, r3
   b5eaa:	7420      	strb	r0, [r4, #16]
}
   b5eac:	bd10      	pop	{r4, pc}

000b5eae <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   b5eae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5eb0:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   b5eb2:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   b5eb4:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   b5eb8:	f003 fa2c 	bl	b9314 <gmtime>
   b5ebc:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   b5ebe:	6941      	ldr	r1, [r0, #20]
   b5ec0:	4620      	mov	r0, r4
   b5ec2:	f7ff ffb3 	bl	b5e2c <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   b5ec6:	6929      	ldr	r1, [r5, #16]
   b5ec8:	4620      	mov	r0, r4
   b5eca:	3101      	adds	r1, #1
   b5ecc:	f7ff ffb9 	bl	b5e42 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   b5ed0:	68e9      	ldr	r1, [r5, #12]
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	f7ff ffbc 	bl	b5e50 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   b5ed8:	69a9      	ldr	r1, [r5, #24]
   b5eda:	4620      	mov	r0, r4
   b5edc:	f7ff ffc3 	bl	b5e66 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   b5ee0:	68a9      	ldr	r1, [r5, #8]
   b5ee2:	4620      	mov	r0, r4
   b5ee4:	f7ff ffca 	bl	b5e7c <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   b5ee8:	6869      	ldr	r1, [r5, #4]
   b5eea:	4620      	mov	r0, r4
   b5eec:	f7ff ffcd 	bl	b5e8a <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   b5ef0:	6829      	ldr	r1, [r5, #0]
   b5ef2:	293b      	cmp	r1, #59	; 0x3b
   b5ef4:	bfa8      	it	ge
   b5ef6:	213b      	movge	r1, #59	; 0x3b
   b5ef8:	4620      	mov	r0, r4
   b5efa:	f7ff ffcd 	bl	b5e98 <_ZN12MCP79410Time9setSecondEi>
}
   b5efe:	b003      	add	sp, #12
   b5f00:	bd30      	pop	{r4, r5, pc}
	...

000b5f04 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b5f04:	4a05      	ldr	r2, [pc, #20]	; (b5f1c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b5f06:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b5f08:	e9c0 2100 	strd	r2, r1, [r0]
   b5f0c:	4a04      	ldr	r2, [pc, #16]	; (b5f20 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   b5f0e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b5f10:	4a04      	ldr	r2, [pc, #16]	; (b5f24 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   b5f12:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b5f14:	4a04      	ldr	r2, [pc, #16]	; (b5f28 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b5f16:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b5f18:	6142      	str	r2, [r0, #20]
}
   b5f1a:	4770      	bx	lr
   b5f1c:	000b9c68 	.word	0x000b9c68
   b5f20:	03010000 	.word	0x03010000
   b5f24:	000b9c10 	.word	0x000b9c10
   b5f28:	000b9c44 	.word	0x000b9c44

000b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   b5f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f30:	4604      	mov	r4, r0
   b5f32:	460f      	mov	r7, r1
   b5f34:	4690      	mov	r8, r2
   b5f36:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b5f38:	2600      	movs	r6, #0

	while(offset < bufLen) {
   b5f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5f3c:	429e      	cmp	r6, r3
   b5f3e:	d231      	bcs.n	b5fa4 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   b5f40:	6860      	ldr	r0, [r4, #4]
   b5f42:	4639      	mov	r1, r7
   b5f44:	f001 fe66 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b5f48:	6860      	ldr	r0, [r4, #4]
   b5f4a:	eb08 0106 	add.w	r1, r8, r6
   b5f4e:	f7ff fedd 	bl	b5d0c <_ZN7TwoWire5writeEj.isra.0>
		stat = wire.endTransmission(false);
   b5f52:	6860      	ldr	r0, [r4, #4]
   b5f54:	2100      	movs	r1, #0
   b5f56:	f001 fe64 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b5f5a:	4605      	mov	r5, r0
   b5f5c:	b9d0      	cbnz	r0, b5f94 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   b5f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b5f60:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   b5f62:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b5f64:	2a20      	cmp	r2, #32
   b5f66:	f04f 0301 	mov.w	r3, #1
   b5f6a:	bf28      	it	cs
   b5f6c:	2220      	movcs	r2, #32
   b5f6e:	4639      	mov	r1, r7
   b5f70:	f001 fe3b 	bl	b7bea <_ZN7TwoWire11requestFromEhjh>
   b5f74:	eb09 0b06 	add.w	fp, r9, r6
   b5f78:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   b5f7a:	eb0b 0a00 	add.w	sl, fp, r0
   b5f7e:	45da      	cmp	sl, fp
   b5f80:	d006      	beq.n	b5f90 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   b5f82:	6860      	ldr	r0, [r4, #4]
   b5f84:	6803      	ldr	r3, [r0, #0]
   b5f86:	695b      	ldr	r3, [r3, #20]
   b5f88:	4798      	blx	r3
   b5f8a:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   b5f8e:	e7f6      	b.n	b5f7e <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   b5f90:	442e      	add	r6, r5
	while(offset < bufLen) {
   b5f92:	e7d2      	b.n	b5f3a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   b5f94:	4602      	mov	r2, r0
   b5f96:	4904      	ldr	r1, [pc, #16]	; (b5fa8 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   b5f98:	4804      	ldr	r0, [pc, #16]	; (b5fac <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   b5f9a:	f7ff fd21 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   b5f9e:	4628      	mov	r0, r5
   b5fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5fa4:	2500      	movs	r5, #0
	return stat;
   b5fa6:	e7fa      	b.n	b5f9e <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   b5fa8:	000b9b68 	.word	0x000b9b68
   b5fac:	2003e648 	.word	0x2003e648

000b5fb0 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5fb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b5fb4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5fb8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b5fba:	6803      	ldr	r3, [r0, #0]
   b5fbc:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5fbe:	4605      	mov	r5, r0
   b5fc0:	460c      	mov	r4, r1
   b5fc2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b5fc4:	4798      	blx	r3
   b5fc6:	4580      	cmp	r8, r0
   b5fc8:	d80d      	bhi.n	b5fe6 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b5fca:	3420      	adds	r4, #32
   b5fcc:	6868      	ldr	r0, [r5, #4]
   b5fce:	9600      	str	r6, [sp, #0]
   b5fd0:	463b      	mov	r3, r7
   b5fd2:	b2e2      	uxtb	r2, r4
   b5fd4:	216f      	movs	r1, #111	; 0x6f
   b5fd6:	f7ff ffa9 	bl	b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b5fda:	fab0 f080 	clz	r0, r0
   b5fde:	0940      	lsrs	r0, r0, #5
}
   b5fe0:	b002      	add	sp, #8
   b5fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b5fe6:	2000      	movs	r0, #0
   b5fe8:	e7fa      	b.n	b5fe0 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000b5fea <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5fea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b5fee:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5ff2:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b5ff4:	6803      	ldr	r3, [r0, #0]
   b5ff6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5ff8:	4604      	mov	r4, r0
   b5ffa:	460d      	mov	r5, r1
   b5ffc:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b5ffe:	4798      	blx	r3
   b6000:	4580      	cmp	r8, r0
   b6002:	d80c      	bhi.n	b601e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   b6004:	6860      	ldr	r0, [r4, #4]
   b6006:	9600      	str	r6, [sp, #0]
   b6008:	463b      	mov	r3, r7
   b600a:	b2ea      	uxtb	r2, r5
   b600c:	2157      	movs	r1, #87	; 0x57
   b600e:	f7ff ff8d 	bl	b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b6012:	fab0 f080 	clz	r0, r0
   b6016:	0940      	lsrs	r0, r0, #5
}
   b6018:	b002      	add	sp, #8
   b601a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b601e:	2000      	movs	r0, #0
   b6020:	e7fa      	b.n	b6018 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000b6022 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>:
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b6022:	2b01      	cmp	r3, #1
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   b6024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6026:	4614      	mov	r4, r2
   b6028:	461e      	mov	r6, r3
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b602a:	d824      	bhi.n	b6076 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x54>
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   b602c:	2b00      	cmp	r3, #0
   b602e:	bf0c      	ite	eq
   b6030:	2307      	moveq	r3, #7
   b6032:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   b6034:	9300      	str	r3, [sp, #0]
   b6036:	460a      	mov	r2, r1
   b6038:	ab02      	add	r3, sp, #8
   b603a:	216f      	movs	r1, #111	; 0x6f
   b603c:	f7ff ff76 	bl	b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6040:	4605      	mov	r5, r0
   b6042:	b9a8      	cbnz	r0, b6070 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawSecond = buf[0];
   b6044:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6048:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   b604a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b604e:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   b6050:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b6054:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   b6056:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b605a:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   b605c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b6060:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   b6062:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6066:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   b6068:	b9f6      	cbnz	r6, b60a8 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x86>
				time.rawYear = buf[6];
   b606a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b606e:	72a3      	strb	r3, [r4, #10]
}
   b6070:	4628      	mov	r0, r5
   b6072:	b004      	add	sp, #16
   b6074:	bd70      	pop	{r4, r5, r6, pc}
	if (timeMode == TIME_MODE_POWER) {
   b6076:	2b02      	cmp	r3, #2
   b6078:	d11c      	bne.n	b60b4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x92>
		stat = deviceRead(REG_I2C_ADDR, addr, buf, 4);
   b607a:	2304      	movs	r3, #4
   b607c:	9300      	str	r3, [sp, #0]
   b607e:	460a      	mov	r2, r1
   b6080:	ab02      	add	r3, sp, #8
   b6082:	216f      	movs	r1, #111	; 0x6f
   b6084:	f7ff ff52 	bl	b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6088:	4605      	mov	r5, r0
   b608a:	2800      	cmp	r0, #0
   b608c:	d1f0      	bne.n	b6070 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawMinute = buf[0];
   b608e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6092:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[1];
   b6094:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b6098:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfMonth = buf[2];
   b609a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b609e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[3];
   b60a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
			time.rawSecond = 0;
   b60a4:	7420      	strb	r0, [r4, #16]
			time.rawMonth = buf[3];
   b60a6:	72e3      	strb	r3, [r4, #11]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
   b60a8:	f002 fa66 	bl	b8578 <_ZN9TimeClass4yearEv>
   b60ac:	f7ff feb0 	bl	b5e10 <_ZN12MCP79410Time8intToBcdEi>
   b60b0:	72a0      	strb	r0, [r4, #10]
   b60b2:	e7dd      	b.n	b6070 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
	int stat = -1;
   b60b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return stat;
   b60b8:	e7da      	b.n	b6070 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>

000b60ba <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b60ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b60bc:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b60be:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b60c0:	9300      	str	r3, [sp, #0]
   b60c2:	216f      	movs	r1, #111	; 0x6f
   b60c4:	ab03      	add	r3, sp, #12
   b60c6:	f7ff ff31 	bl	b5f2c <_ZNK8MCP7941010deviceReadEhhPhj>
   b60ca:	b920      	cbnz	r0, b60d6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   b60cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b60d0:	b005      	add	sp, #20
   b60d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   b60d6:	2000      	movs	r0, #0
   b60d8:	e7fa      	b.n	b60d0 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000b60da <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   b60da:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   b60dc:	2103      	movs	r1, #3
   b60de:	f7ff ffec 	bl	b60ba <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   b60e2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b60e6:	bd08      	pop	{r3, pc}

000b60e8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b60e8:	b538      	push	{r3, r4, r5, lr}
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b60ea:	2300      	movs	r3, #0
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b60ec:	460c      	mov	r4, r1
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b60ee:	460a      	mov	r2, r1
   b60f0:	4619      	mov	r1, r3
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b60f2:	4605      	mov	r5, r0
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b60f4:	f7ff ff95 	bl	b6022 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>
	if (stat == 0) {
   b60f8:	b930      	cbnz	r0, b6108 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b60fa:	7aa3      	ldrb	r3, [r4, #10]
   b60fc:	b123      	cbz	r3, b6108 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   b60fe:	4628      	mov	r0, r5
}
   b6100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b6104:	f7ff bfe9 	b.w	b60da <_ZNK8MCP7941020getOscillatorRunningEv>
}
   b6108:	2000      	movs	r0, #0
   b610a:	bd38      	pop	{r3, r4, r5, pc}

000b610c <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   b610c:	b510      	push	{r4, lr}
   b610e:	b086      	sub	sp, #24
   b6110:	4604      	mov	r4, r0
	MCP79410Time time;
   b6112:	a801      	add	r0, sp, #4
   b6114:	f7ff fe08 	bl	b5d28 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   b6118:	a901      	add	r1, sp, #4
   b611a:	4620      	mov	r0, r4
   b611c:	f7ff ffe4 	bl	b60e8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   b6120:	b120      	cbz	r0, b612c <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   b6122:	a801      	add	r0, sp, #4
   b6124:	f7ff fe4c 	bl	b5dc0 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   b6128:	b006      	add	sp, #24
   b612a:	bd10      	pop	{r4, pc}
		return 0;
   b612c:	2000      	movs	r0, #0
   b612e:	4601      	mov	r1, r0
   b6130:	e7fa      	b.n	b6128 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
	...

000b6134 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   b6134:	b570      	push	{r4, r5, r6, lr}
   b6136:	4604      	mov	r4, r0
   b6138:	b086      	sub	sp, #24
	wire.begin();
   b613a:	6840      	ldr	r0, [r0, #4]
   b613c:	f001 fd38 	bl	b7bb0 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   b6140:	f002 f9e0 	bl	b8504 <_ZN9TimeClass7isValidEv>
   b6144:	b9e8      	cbnz	r0, b6182 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   b6146:	7ae3      	ldrb	r3, [r4, #11]
   b6148:	079b      	lsls	r3, r3, #30
   b614a:	d51a      	bpl.n	b6182 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   b614c:	4620      	mov	r0, r4
   b614e:	f7ff ffdd 	bl	b610c <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   b6152:	ea50 0301 	orrs.w	r3, r0, r1
			time_t rtcTime = getRTCTime();
   b6156:	4606      	mov	r6, r0
   b6158:	460d      	mov	r5, r1
			if (rtcTime != 0) {
   b615a:	d012      	beq.n	b6182 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   b615c:	f002 f8d7 	bl	b830e <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   b6160:	4b0a      	ldr	r3, [pc, #40]	; (b618c <_ZN8MCP794105setupEv+0x58>)
   b6162:	490b      	ldr	r1, [pc, #44]	; (b6190 <_ZN8MCP794105setupEv+0x5c>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	9300      	str	r3, [sp, #0]
   b6168:	4632      	mov	r2, r6
   b616a:	462b      	mov	r3, r5
   b616c:	a802      	add	r0, sp, #8
   b616e:	f002 f987 	bl	b8480 <_ZN9TimeClass6formatExPKc>
   b6172:	4808      	ldr	r0, [pc, #32]	; (b6194 <_ZN8MCP794105setupEv+0x60>)
   b6174:	9a02      	ldr	r2, [sp, #8]
   b6176:	4908      	ldr	r1, [pc, #32]	; (b6198 <_ZN8MCP794105setupEv+0x64>)
   b6178:	f7ff fc32 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
   b617c:	a802      	add	r0, sp, #8
   b617e:	f001 ff21 	bl	b7fc4 <_ZN6StringD1Ev>
	setupDone = true;
   b6182:	2301      	movs	r3, #1
   b6184:	7223      	strb	r3, [r4, #8]
}
   b6186:	b006      	add	sp, #24
   b6188:	bd70      	pop	{r4, r5, r6, pc}
   b618a:	bf00      	nop
   b618c:	2003e3f8 	.word	0x2003e3f8
   b6190:	2003e6b8 	.word	0x2003e6b8
   b6194:	2003e648 	.word	0x2003e648
   b6198:	000b9b82 	.word	0x000b9b82

000b619c <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b619c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61a0:	4606      	mov	r6, r0
   b61a2:	4688      	mov	r8, r1
   b61a4:	4691      	mov	r9, r2
   b61a6:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b61a8:	2500      	movs	r5, #0

	while(offset < bufLen) {
   b61aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b61ac:	429d      	cmp	r5, r3
   b61ae:	d229      	bcs.n	b6204 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   b61b0:	6870      	ldr	r0, [r6, #4]
   b61b2:	4641      	mov	r1, r8
   b61b4:	f001 fd2e 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b61b8:	6870      	ldr	r0, [r6, #4]
   b61ba:	eb09 0105 	add.w	r1, r9, r5
   b61be:	f7ff fda5 	bl	b5d0c <_ZN7TwoWire5writeEj.isra.0>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   b61c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b61c4:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   b61c6:	2f1f      	cmp	r7, #31
   b61c8:	bf28      	it	cs
   b61ca:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   b61cc:	eb0a 0405 	add.w	r4, sl, r5
   b61d0:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   b61d4:	6870      	ldr	r0, [r6, #4]
   b61d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b61da:	6802      	ldr	r2, [r0, #0]
   b61dc:	6892      	ldr	r2, [r2, #8]
   b61de:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   b61e0:	45a3      	cmp	fp, r4
   b61e2:	d1f7      	bne.n	b61d4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   b61e4:	6870      	ldr	r0, [r6, #4]
   b61e6:	2101      	movs	r1, #1
   b61e8:	f001 fd1b 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b61ec:	4604      	mov	r4, r0
   b61ee:	b138      	cbz	r0, b6200 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   b61f0:	4602      	mov	r2, r0
   b61f2:	4905      	ldr	r1, [pc, #20]	; (b6208 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   b61f4:	4805      	ldr	r0, [pc, #20]	; (b620c <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   b61f6:	f7ff fbf3 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   b61fa:	4620      	mov	r0, r4
   b61fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   b6200:	443d      	add	r5, r7
	while(offset < bufLen) {
   b6202:	e7d2      	b.n	b61aa <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   b6204:	2400      	movs	r4, #0
	return stat;
   b6206:	e7f8      	b.n	b61fa <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   b6208:	000b9b97 	.word	0x000b9b97
   b620c:	2003e648 	.word	0x2003e648

000b6210 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b6214:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6218:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b621a:	6803      	ldr	r3, [r0, #0]
   b621c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b621e:	4605      	mov	r5, r0
   b6220:	460c      	mov	r4, r1
   b6222:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b6224:	4798      	blx	r3
   b6226:	4580      	cmp	r8, r0
   b6228:	d80d      	bhi.n	b6246 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b622a:	3420      	adds	r4, #32
   b622c:	6868      	ldr	r0, [r5, #4]
   b622e:	9600      	str	r6, [sp, #0]
   b6230:	463b      	mov	r3, r7
   b6232:	b2e2      	uxtb	r2, r4
   b6234:	216f      	movs	r1, #111	; 0x6f
   b6236:	f7ff ffb1 	bl	b619c <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   b623a:	fab0 f080 	clz	r0, r0
   b623e:	0940      	lsrs	r0, r0, #5
}
   b6240:	b002      	add	sp, #8
   b6242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b6246:	2000      	movs	r0, #0
   b6248:	e7fa      	b.n	b6240 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000b624a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   b624a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   b624c:	7c13      	ldrb	r3, [r2, #16]
   b624e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   b6252:	7bd3      	ldrb	r3, [r2, #15]
   b6254:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   b6258:	7b93      	ldrb	r3, [r2, #14]
   b625a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   b625e:	7b53      	ldrb	r3, [r2, #13]
   b6260:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   b6264:	7b13      	ldrb	r3, [r2, #12]
   b6266:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   b626a:	7ad3      	ldrb	r3, [r2, #11]
   b626c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   b6270:	7a93      	ldrb	r3, [r2, #10]
   b6272:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   b6276:	2307      	movs	r3, #7
   b6278:	9300      	str	r3, [sp, #0]
   b627a:	460a      	mov	r2, r1
   b627c:	ab02      	add	r3, sp, #8
   b627e:	216f      	movs	r1, #111	; 0x6f
   b6280:	f7ff ff8c 	bl	b619c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6284:	b005      	add	sp, #20
   b6286:	f85d fb04 	ldr.w	pc, [sp], #4

000b628a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   b628a:	b510      	push	{r4, lr}
   b628c:	b088      	sub	sp, #32
   b628e:	4604      	mov	r4, r0
	MCP79410Time time;
   b6290:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   b6292:	e9cd 3200 	strd	r3, r2, [sp]
	MCP79410Time time;
   b6296:	f7ff fd47 	bl	b5d28 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   b629a:	e9dd 3200 	ldrd	r3, r2, [sp]
   b629e:	a803      	add	r0, sp, #12
   b62a0:	f7ff fe05 	bl	b5eae <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b62a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   b62a8:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b62aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b62ae:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   b62b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   b62b6:	b16a      	cbz	r2, b62d4 <_ZN8MCP7941010setRTCTimeEx+0x4a>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   b62b8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   b62bc:	aa03      	add	r2, sp, #12
   b62be:	2100      	movs	r1, #0
   b62c0:	4620      	mov	r0, r4
   b62c2:	f88d 3019 	strb.w	r3, [sp, #25]
   b62c6:	f7ff ffc0 	bl	b624a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   b62ca:	fab0 f080 	clz	r0, r0
   b62ce:	0940      	lsrs	r0, r0, #5
   b62d0:	b008      	add	sp, #32
   b62d2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   b62d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   b62d8:	e7f0      	b.n	b62bc <_ZN8MCP7941010setRTCTimeEx+0x32>
	...

000b62dc <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   b62dc:	b530      	push	{r4, r5, lr}
   b62de:	b089      	sub	sp, #36	; 0x24
   b62e0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   b62e2:	f002 f90f 	bl	b8504 <_ZN9TimeClass7isValidEv>
   b62e6:	4604      	mov	r4, r0
   b62e8:	b1e8      	cbz	r0, b6326 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   b62ea:	f002 f928 	bl	b853e <_ZN9TimeClass3nowEv>
   b62ee:	17c3      	asrs	r3, r0, #31
		bResult = setRTCTime(now);
   b62f0:	e9cd 3002 	strd	r3, r0, [sp, #8]
		time_t now = Time.now();
   b62f4:	4602      	mov	r2, r0
		bResult = setRTCTime(now);
   b62f6:	4628      	mov	r0, r5
   b62f8:	f7ff ffc7 	bl	b628a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b62fc:	490c      	ldr	r1, [pc, #48]	; (b6330 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   b62fe:	6809      	ldr	r1, [r1, #0]
   b6300:	9100      	str	r1, [sp, #0]
   b6302:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b6306:	490b      	ldr	r1, [pc, #44]	; (b6334 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
		bResult = setRTCTime(now);
   b6308:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b630a:	a804      	add	r0, sp, #16
   b630c:	f002 f8b8 	bl	b8480 <_ZN9TimeClass6formatExPKc>
   b6310:	4809      	ldr	r0, [pc, #36]	; (b6338 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b6312:	9a04      	ldr	r2, [sp, #16]
   b6314:	4909      	ldr	r1, [pc, #36]	; (b633c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   b6316:	f7ff fb63 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
   b631a:	a804      	add	r0, sp, #16
   b631c:	f001 fe52 	bl	b7fc4 <_ZN6StringD1Ev>
}
   b6320:	4620      	mov	r0, r4
   b6322:	b009      	add	sp, #36	; 0x24
   b6324:	bd30      	pop	{r4, r5, pc}
		log.info("cloud time not valid");
   b6326:	4906      	ldr	r1, [pc, #24]	; (b6340 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   b6328:	4803      	ldr	r0, [pc, #12]	; (b6338 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b632a:	f7ff fb59 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
   b632e:	e7f7      	b.n	b6320 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   b6330:	2003e3f8 	.word	0x2003e3f8
   b6334:	2003e6b8 	.word	0x2003e6b8
   b6338:	2003e648 	.word	0x2003e648
   b633c:	000b9bb2 	.word	0x000b9bb2
   b6340:	000b9bc8 	.word	0x000b9bc8

000b6344 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   b6344:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   b6346:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   b6348:	4604      	mov	r4, r0
	if (!timeSet) {
   b634a:	b99d      	cbnz	r5, b6374 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   b634c:	f002 f8da 	bl	b8504 <_ZN9TimeClass7isValidEv>
   b6350:	b180      	cbz	r0, b6374 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   b6352:	2200      	movs	r2, #0
   b6354:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b6356:	4669      	mov	r1, sp
   b6358:	4628      	mov	r0, r5
        tm = 0;
   b635a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b635e:	f000 ff3d 	bl	b71dc <spark_sync_time_last>
			if (lastSync != 0) {
   b6362:	b138      	cbz	r0, b6374 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   b6364:	7ae3      	ldrb	r3, [r4, #11]
   b6366:	07db      	lsls	r3, r3, #31
   b6368:	d502      	bpl.n	b6370 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   b636a:	4620      	mov	r0, r4
   b636c:	f7ff ffb6 	bl	b62dc <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   b6370:	2301      	movs	r3, #1
   b6372:	7263      	strb	r3, [r4, #9]
}
   b6374:	b003      	add	sp, #12
   b6376:	bd30      	pop	{r4, r5, pc}

000b6378 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   b6378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b637a:	2301      	movs	r3, #1
	buf[0] = value;
   b637c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b6380:	9300      	str	r3, [sp, #0]
   b6382:	460a      	mov	r2, r1
   b6384:	ab03      	add	r3, sp, #12
   b6386:	216f      	movs	r1, #111	; 0x6f
   b6388:	f7ff ff08 	bl	b619c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b638c:	b005      	add	sp, #20
   b638e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6392 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   b6392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6394:	4617      	mov	r7, r2
   b6396:	4604      	mov	r4, r0
   b6398:	460d      	mov	r5, r1
   b639a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   b639c:	f7ff fe8d 	bl	b60ba <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   b63a0:	4038      	ands	r0, r7
	return deviceWriteRegisterByte(addr, value);
   b63a2:	ea40 0206 	orr.w	r2, r0, r6
   b63a6:	4629      	mov	r1, r5
   b63a8:	4620      	mov	r0, r4
}
   b63aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   b63ae:	f7ff bfe3 	b.w	b6378 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000b63b2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   b63b2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   b63b4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   b63b6:	d80d      	bhi.n	b63d4 <_ZN8MCP7941010clearAlarmEi+0x22>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   b63b8:	2900      	cmp	r1, #0
   b63ba:	bf0c      	ite	eq
   b63bc:	2210      	moveq	r2, #16
   b63be:	2220      	movne	r2, #32
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   b63c0:	2300      	movs	r3, #0
   b63c2:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   b63c6:	2107      	movs	r1, #7
   b63c8:	f7ff ffe3 	bl	b6392 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   b63cc:	fab0 f080 	clz	r0, r0
   b63d0:	0940      	lsrs	r0, r0, #5
}
   b63d2:	bd08      	pop	{r3, pc}
		return false;
   b63d4:	2000      	movs	r0, #0
   b63d6:	e7fc      	b.n	b63d2 <_ZN8MCP7941010clearAlarmEi+0x20>

000b63d8 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   b63d8:	b538      	push	{r3, r4, r5, lr}
   b63da:	4604      	mov	r4, r0
   b63dc:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b63de:	6860      	ldr	r0, [r4, #4]
   b63e0:	2157      	movs	r1, #87	; 0x57
   b63e2:	f001 fc17 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   b63e6:	6860      	ldr	r0, [r4, #4]
   b63e8:	2101      	movs	r1, #1
   b63ea:	f001 fc1a 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b63ee:	b108      	cbz	r0, b63f4 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   b63f0:	3d01      	subs	r5, #1
   b63f2:	d1f4      	bne.n	b63de <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b63f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b63f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63fc:	4604      	mov	r4, r0
   b63fe:	460f      	mov	r7, r1
   b6400:	4616      	mov	r6, r2
   b6402:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   b6406:	45b0      	cmp	r8, r6
   b6408:	d020      	beq.n	b644c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b640a:	6860      	ldr	r0, [r4, #4]
   b640c:	2157      	movs	r1, #87	; 0x57
   b640e:	f001 fc01 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6412:	4639      	mov	r1, r7
   b6414:	6860      	ldr	r0, [r4, #4]
   b6416:	f7ff fc79 	bl	b5d0c <_ZN7TwoWire5writeEj.isra.0>
			wire.write(buf[ii + offset]);
   b641a:	6860      	ldr	r0, [r4, #4]
   b641c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b6420:	6803      	ldr	r3, [r0, #0]
   b6422:	689b      	ldr	r3, [r3, #8]
   b6424:	4798      	blx	r3
		stat = wire.endTransmission(true);
   b6426:	6860      	ldr	r0, [r4, #4]
   b6428:	2101      	movs	r1, #1
   b642a:	f001 fbfa 	bl	b7c22 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b642e:	3701      	adds	r7, #1
   b6430:	4605      	mov	r5, r0
   b6432:	b138      	cbz	r0, b6444 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   b6434:	4602      	mov	r2, r0
   b6436:	4906      	ldr	r1, [pc, #24]	; (b6450 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   b6438:	4806      	ldr	r0, [pc, #24]	; (b6454 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   b643a:	f7ff fad1 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
}
   b643e:	4628      	mov	r0, r5
   b6440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   b6444:	4620      	mov	r0, r4
   b6446:	f7ff ffc7 	bl	b63d8 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   b644a:	e7dc      	b.n	b6406 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   b644c:	2500      	movs	r5, #0
	return stat;
   b644e:	e7f6      	b.n	b643e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   b6450:	000b9bdd 	.word	0x000b9bdd
   b6454:	2003e648 	.word	0x2003e648

000b6458 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   b645a:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b645c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b645e:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6460:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   b6462:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6464:	4604      	mov	r4, r0
   b6466:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   b6468:	4798      	blx	r3
   b646a:	4287      	cmp	r7, r0
   b646c:	d80a      	bhi.n	b6484 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   b646e:	9a01      	ldr	r2, [sp, #4]
   b6470:	6860      	ldr	r0, [r4, #4]
   b6472:	4633      	mov	r3, r6
   b6474:	b2e9      	uxtb	r1, r5
   b6476:	f7ff ffbf 	bl	b63f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   b647a:	fab0 f080 	clz	r0, r0
   b647e:	0940      	lsrs	r0, r0, #5
}
   b6480:	b003      	add	sp, #12
   b6482:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   b6484:	2000      	movs	r0, #0
   b6486:	e7fb      	b.n	b6480 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000b6488 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b6488:	4b01      	ldr	r3, [pc, #4]	; (b6490 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b648a:	4a02      	ldr	r2, [pc, #8]	; (b6494 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b648c:	601a      	str	r2, [r3, #0]
}
   b648e:	4770      	bx	lr
   b6490:	2003e648 	.word	0x2003e648
   b6494:	000b9bfe 	.word	0x000b9bfe

000b6498 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6498:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b649a:	2301      	movs	r3, #1
   b649c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b649e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b64a0:	4604      	mov	r4, r0
        if (th->func) {
   b64a2:	b143      	cbz	r3, b64b6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b64a4:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64a6:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b64a8:	2301      	movs	r3, #1
   b64aa:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b64ac:	2000      	movs	r0, #0
    }
   b64ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b64b2:	f000 bc21 	b.w	b6cf8 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b64b6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b64b8:	2800      	cmp	r0, #0
   b64ba:	d0f5      	beq.n	b64a8 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b64bc:	6883      	ldr	r3, [r0, #8]
   b64be:	b90b      	cbnz	r3, b64c4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b64c0:	f002 fad6 	bl	b8a70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64c4:	68c3      	ldr	r3, [r0, #12]
   b64c6:	e7ee      	b.n	b64a6 <_ZN6Thread3runEPv+0xe>

000b64c8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b64c8:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b64ca:	6842      	ldr	r2, [r0, #4]
   b64cc:	4603      	mov	r3, r0
   b64ce:	1054      	asrs	r4, r2, #1
   b64d0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b64d4:	07d2      	lsls	r2, r2, #31
   b64d6:	bf48      	it	mi
   b64d8:	590a      	ldrmi	r2, [r1, r4]
   b64da:	681b      	ldr	r3, [r3, #0]
      }
   b64dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b64e0:	bf48      	it	mi
   b64e2:	58d3      	ldrmi	r3, [r2, r3]
   b64e4:	4718      	bx	r3

000b64e6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b64e6:	2a01      	cmp	r2, #1
   b64e8:	d102      	bne.n	b64f0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64ea:	6001      	str	r1, [r0, #0]
      }
   b64ec:	2000      	movs	r0, #0
   b64ee:	4770      	bx	lr
	  switch (__op)
   b64f0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b64f2:	bf04      	itt	eq
   b64f4:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b64f8:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b64fc:	e7f6      	b.n	b64ec <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	...

000b6500 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b6500:	b510      	push	{r4, lr}
   b6502:	4603      	mov	r3, r0
   b6504:	e9d1 0200 	ldrd	r0, r2, [r1]
   b6508:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b650a:	2100      	movs	r1, #0
   b650c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   b650e:	b908      	cbnz	r0, b6514 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
   b6510:	07d1      	lsls	r1, r2, #31
   b6512:	d505      	bpl.n	b6520 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6514:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b6518:	4a0f      	ldr	r2, [pc, #60]	; (b6558 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
   b651a:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b651c:	4a0f      	ldr	r2, [pc, #60]	; (b655c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
   b651e:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6520:	aa02      	add	r2, sp, #8
   b6522:	e892 0003 	ldmia.w	r2, {r0, r1}
   b6526:	466c      	mov	r4, sp
   b6528:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b652c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6530:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6534:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6538:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b653c:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b653e:	6898      	ldr	r0, [r3, #8]
   b6540:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6542:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6544:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6546:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b6548:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b654a:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b654c:	4610      	mov	r0, r2
   b654e:	f7fd ff63 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
	}
   b6552:	b006      	add	sp, #24
   b6554:	bd10      	pop	{r4, pc}
   b6556:	bf00      	nop
   b6558:	000b64c9 	.word	0x000b64c9
   b655c:	000b64e7 	.word	0x000b64e7

000b6560 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   b6560:	b513      	push	{r0, r1, r4, lr}
   b6562:	4604      	mov	r4, r0
   b6564:	f000 fbf8 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   b6568:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b656a:	1ac0      	subs	r0, r0, r3
   b656c:	68e3      	ldr	r3, [r4, #12]
   b656e:	4298      	cmp	r0, r3
   b6570:	d308      	bcc.n	b6584 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b6572:	4b05      	ldr	r3, [pc, #20]	; (b6588 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   b6574:	9300      	str	r3, [sp, #0]
   b6576:	4669      	mov	r1, sp
   b6578:	2300      	movs	r3, #0
   b657a:	f104 0010 	add.w	r0, r4, #16
   b657e:	9301      	str	r3, [sp, #4]
   b6580:	f7ff ffbe 	bl	b6500 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
	}
}
   b6584:	b002      	add	sp, #8
   b6586:	bd10      	pop	{r4, pc}
   b6588:	000b6669 	.word	0x000b6669

000b658c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   b658c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b658e:	4b05      	ldr	r3, [pc, #20]	; (b65a4 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   b6590:	9300      	str	r3, [sp, #0]
   b6592:	4669      	mov	r1, sp
   b6594:	2300      	movs	r3, #0
   b6596:	3010      	adds	r0, #16
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	f7ff ffb1 	bl	b6500 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b659e:	b003      	add	sp, #12
   b65a0:	f85d fb04 	ldr.w	pc, [sp], #4
   b65a4:	000b6669 	.word	0x000b6669

000b65a8 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b65a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b65ac:	4604      	mov	r4, r0
   b65ae:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b65b0:	2014      	movs	r0, #20
   b65b2:	491c      	ldr	r1, [pc, #112]	; (b6624 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x7c>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b65b4:	4690      	mov	r8, r2
   b65b6:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b65b8:	f002 fa56 	bl	b8a68 <_ZnwjRKSt9nothrow_t>
   b65bc:	b130      	cbz	r0, b65cc <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b65be:	2500      	movs	r5, #0
            exited(false) {
   b65c0:	e9c0 5500 	strd	r5, r5, [r0]
   b65c4:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b65c8:	7405      	strb	r5, [r0, #16]
   b65ca:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b65cc:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b65ce:	b198      	cbz	r0, b65f8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b65d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b65d2:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b65d6:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b65da:	4631      	mov	r1, r6
   b65dc:	e9cd 0300 	strd	r0, r3, [sp]
   b65e0:	4b11      	ldr	r3, [pc, #68]	; (b6628 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
   b65e2:	3004      	adds	r0, #4
   b65e4:	f000 fb30 	bl	b6c48 <os_thread_create>
   b65e8:	b930      	cbnz	r0, b65f8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b65ea:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b65ec:	7c1b      	ldrb	r3, [r3, #16]
   b65ee:	b9a3      	cbnz	r3, b661a <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
            HAL_Delay_Milliseconds(1);
   b65f0:	2001      	movs	r0, #1
   b65f2:	f000 fba1 	bl	b6d38 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b65f6:	e7f8      	b.n	b65ea <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b65f8:	6825      	ldr	r5, [r4, #0]
	_M_ptr() = __p;
   b65fa:	2300      	movs	r3, #0
   b65fc:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b65fe:	b165      	cbz	r5, b661a <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6600:	682e      	ldr	r6, [r5, #0]
   b6602:	b136      	cbz	r6, b6612 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x6a>
    class function<_Res(_ArgTypes...)>
   b6604:	4630      	mov	r0, r6
   b6606:	f7fd ff07 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b660a:	2110      	movs	r1, #16
   b660c:	4630      	mov	r0, r6
   b660e:	f7fd fd46 	bl	b409e <_ZdlPvj>
   b6612:	2114      	movs	r1, #20
   b6614:	4628      	mov	r0, r5
   b6616:	f7fd fd42 	bl	b409e <_ZdlPvj>
    }
   b661a:	4620      	mov	r0, r4
   b661c:	b002      	add	sp, #8
   b661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6622:	bf00      	nop
   b6624:	000b9f44 	.word	0x000b9f44
   b6628:	000b6499 	.word	0x000b6499

000b662c <_ZN21PublishQueueAsyncBase5setupEv>:
	haveSetup = true;
   b662c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   b662e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	haveSetup = true;
   b6630:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   b6634:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6636:	3008      	adds	r0, #8
   b6638:	f000 fb3e 	bl	b6cb8 <os_mutex_create>
	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   b663c:	2004      	movs	r0, #4
   b663e:	f7fd fd2a 	bl	b4096 <_Znwj>
   b6642:	4605      	mov	r5, r0
   b6644:	b148      	cbz	r0, b665a <_ZN21PublishQueueAsyncBase5setupEv+0x2e>
   b6646:	2302      	movs	r3, #2
   b6648:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b664c:	e9cd 3200 	strd	r3, r2, [sp]
   b6650:	4903      	ldr	r1, [pc, #12]	; (b6660 <_ZN21PublishQueueAsyncBase5setupEv+0x34>)
   b6652:	4a04      	ldr	r2, [pc, #16]	; (b6664 <_ZN21PublishQueueAsyncBase5setupEv+0x38>)
   b6654:	4623      	mov	r3, r4
   b6656:	f7ff ffa7 	bl	b65a8 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b665a:	6065      	str	r5, [r4, #4]
}
   b665c:	b003      	add	sp, #12
   b665e:	bd30      	pop	{r4, r5, pc}
   b6660:	000b9c70 	.word	0x000b9c70
   b6664:	000b6983 	.word	0x000b6983

000b6668 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   b6668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b666c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   b6670:	b086      	sub	sp, #24
   b6672:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b6674:	2b00      	cmp	r3, #0
   b6676:	d164      	bne.n	b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6678:	f000 fd80 	bl	b717c <spark_cloud_flag_connected>
   b667c:	2800      	cmp	r0, #0
   b667e:	d060      	beq.n	b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   b6680:	f000 fb6a 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
   b6684:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6686:	1ac0      	subs	r0, r0, r3
   b6688:	f240 33f1 	movw	r3, #1009	; 0x3f1
   b668c:	4298      	cmp	r0, r3
   b668e:	d958      	bls.n	b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   b6690:	6823      	ldr	r3, [r4, #0]
   b6692:	4620      	mov	r0, r4
   b6694:	695b      	ldr	r3, [r3, #20]
   b6696:	4798      	blx	r3
		if (data) {
   b6698:	4605      	mov	r5, r0
   b669a:	2800      	cmp	r0, #0
   b669c:	d051      	beq.n	b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   b669e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   b66a2:	2301      	movs	r3, #1
   b66a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   b66a8:	4638      	mov	r0, r7
   b66aa:	f002 fede 	bl	b946a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   b66ae:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b66b2:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   b66b6:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b66b8:	682b      	ldr	r3, [r5, #0]
   b66ba:	492b      	ldr	r1, [pc, #172]	; (b6768 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   b66bc:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   b66be:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b66c0:	4633      	mov	r3, r6
   b66c2:	482a      	ldr	r0, [pc, #168]	; (b676c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b66c4:	463a      	mov	r2, r7
   b66c6:	f7ff f98b 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   b66ca:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b66cc:	f88d 8000 	strb.w	r8, [sp]
   b66d0:	4632      	mov	r2, r6
   b66d2:	4639      	mov	r1, r7
   b66d4:	a802      	add	r0, sp, #8
   b66d6:	f001 f883 	bl	b77e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b66da:	9d02      	ldr	r5, [sp, #8]
   b66dc:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   b66de:	b91b      	cbnz	r3, b66e8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   b66e0:	2001      	movs	r0, #1
   b66e2:	f000 fe77 	bl	b73d4 <delay>
			while(!request.isDone()) {
   b66e6:	e7f8      	b.n	b66da <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b66e8:	2000      	movs	r0, #0
   b66ea:	f000 fcdf 	bl	b70ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b66ee:	b120      	cbz	r0, b66fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   b66f0:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b66f2:	b913      	cbnz	r3, b66fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   b66f4:	f000 fd32 	bl	b715c <spark_process>
    }
   b66f8:	e7fa      	b.n	b66f0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b66fa:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   b66fc:	2b01      	cmp	r3, #1
   b66fe:	d123      	bne.n	b6748 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   b6700:	491b      	ldr	r1, [pc, #108]	; (b6770 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   b6702:	481a      	ldr	r0, [pc, #104]	; (b676c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6704:	f7ff f96c 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   b6708:	6823      	ldr	r3, [r4, #0]
   b670a:	2100      	movs	r1, #0
   b670c:	699b      	ldr	r3, [r3, #24]
   b670e:	4620      	mov	r0, r4
   b6710:	4798      	blx	r3
			isSending = false;
   b6712:	2300      	movs	r3, #0
   b6714:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   b6718:	f000 fb1e 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   b671c:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b671e:	9c03      	ldr	r4, [sp, #12]
   b6720:	b17c      	cbz	r4, b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   b6722:	6863      	ldr	r3, [r4, #4]
   b6724:	3b01      	subs	r3, #1
   b6726:	6063      	str	r3, [r4, #4]
   b6728:	b95b      	cbnz	r3, b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   b672a:	6823      	ldr	r3, [r4, #0]
   b672c:	4620      	mov	r0, r4
   b672e:	689b      	ldr	r3, [r3, #8]
   b6730:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6732:	68a3      	ldr	r3, [r4, #8]
   b6734:	3b01      	subs	r3, #1
   b6736:	60a3      	str	r3, [r4, #8]
   b6738:	b91b      	cbnz	r3, b6742 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   b673a:	6823      	ldr	r3, [r4, #0]
   b673c:	4620      	mov	r0, r4
   b673e:	68db      	ldr	r3, [r3, #12]
   b6740:	4798      	blx	r3
}
   b6742:	b006      	add	sp, #24
   b6744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   b6748:	68e2      	ldr	r2, [r4, #12]
   b674a:	490a      	ldr	r1, [pc, #40]	; (b6774 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   b674c:	4807      	ldr	r0, [pc, #28]	; (b676c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b674e:	f7ff f947 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   b6752:	4b09      	ldr	r3, [pc, #36]	; (b6778 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   b6754:	9304      	str	r3, [sp, #16]
   b6756:	a904      	add	r1, sp, #16
   b6758:	2300      	movs	r3, #0
   b675a:	f104 0010 	add.w	r0, r4, #16
   b675e:	9305      	str	r3, [sp, #20]
   b6760:	f7ff fece 	bl	b6500 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b6764:	e7d5      	b.n	b6712 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   b6766:	bf00      	nop
   b6768:	000b9c82 	.word	0x000b9c82
   b676c:	2003e64c 	.word	0x2003e64c
   b6770:	000b9ca3 	.word	0x000b9ca3
   b6774:	000b9cba 	.word	0x000b9cba
   b6778:	000b6561 	.word	0x000b6561

000b677c <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   b677c:	f247 5130 	movw	r1, #30000	; 0x7530
   b6780:	4a08      	ldr	r2, [pc, #32]	; (b67a4 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   b6782:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6784:	4908      	ldr	r1, [pc, #32]	; (b67a8 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   b6786:	6002      	str	r2, [r0, #0]
   b6788:	2200      	movs	r2, #0
   b678a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b678e:	4907      	ldr	r1, [pc, #28]	; (b67ac <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   b6790:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6792:	4907      	ldr	r1, [pc, #28]	; (b67b0 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   b6794:	6042      	str	r2, [r0, #4]
   b6796:	e9c0 2208 	strd	r2, r2, [r0, #32]
   b679a:	6181      	str	r1, [r0, #24]
   b679c:	8502      	strh	r2, [r0, #40]	; 0x28
   b679e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   b67a2:	4770      	bx	lr
   b67a4:	000b9d34 	.word	0x000b9d34
   b67a8:	000b658d 	.word	0x000b658d
   b67ac:	000b64c9 	.word	0x000b64c9
   b67b0:	000b64e7 	.word	0x000b64e7

000b67b4 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   b67b4:	b510      	push	{r4, lr}
   b67b6:	4b04      	ldr	r3, [pc, #16]	; (b67c8 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   b67b8:	4604      	mov	r4, r0
   b67ba:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   b67be:	f7fd fe2b 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
}
   b67c2:	4620      	mov	r0, r4
   b67c4:	bd10      	pop	{r4, pc}
   b67c6:	bf00      	nop
   b67c8:	000b9d34 	.word	0x000b9d34

000b67cc <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b67cc:	b510      	push	{r4, lr}
   b67ce:	4b03      	ldr	r3, [pc, #12]	; (b67dc <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   b67d0:	6003      	str	r3, [r0, #0]
   b67d2:	4604      	mov	r4, r0
   b67d4:	f7ff ffee 	bl	b67b4 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   b67d8:	4620      	mov	r0, r4
   b67da:	bd10      	pop	{r4, pc}
   b67dc:	000b9d5c 	.word	0x000b9d5c

000b67e0 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b67e0:	b510      	push	{r4, lr}
   b67e2:	4604      	mov	r4, r0
}
   b67e4:	f7ff fff2 	bl	b67cc <_ZN25PublishQueueAsyncRetainedD1Ev>
   b67e8:	4620      	mov	r0, r4
   b67ea:	2138      	movs	r1, #56	; 0x38
   b67ec:	f7fd fc57 	bl	b409e <_ZdlPvj>
   b67f0:	4620      	mov	r0, r4
   b67f2:	bd10      	pop	{r4, pc}

000b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   b67f4:	6880      	ldr	r0, [r0, #8]
   b67f6:	f000 ba67 	b.w	b6cc8 <os_mutex_lock>

000b67fa <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   b67fa:	6880      	ldr	r0, [r0, #8]
   b67fc:	f000 ba6c 	b.w	b6cd8 <os_mutex_unlock>

000b6800 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   b6800:	b510      	push	{r4, lr}
   b6802:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   b6804:	6800      	ldr	r0, [r0, #0]
   b6806:	f7ff fff8 	bl	b67fa <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   b680a:	4620      	mov	r0, r4
   b680c:	bd10      	pop	{r4, pc}

000b680e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   b680e:	b513      	push	{r0, r1, r4, lr}
   b6810:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6812:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6814:	f7ff ffee 	bl	b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   b681a:	88dc      	ldrh	r4, [r3, #6]
   b681c:	b2a4      	uxth	r4, r4
   b681e:	b10c      	cbz	r4, b6824 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   b6820:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   b6824:	a801      	add	r0, sp, #4
   b6826:	f7ff ffeb 	bl	b6800 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   b682a:	4620      	mov	r0, r4
   b682c:	b002      	add	sp, #8
   b682e:	bd10      	pop	{r4, pc}

000b6830 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   b6830:	b513      	push	{r0, r1, r4, lr}
   b6832:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6834:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6836:	f7ff ffdd 	bl	b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   b683a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b683e:	b943      	cbnz	r3, b6852 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6840:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   b6842:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   b6844:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   b6846:	a801      	add	r0, sp, #4
   b6848:	f7ff ffda 	bl	b6800 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   b684c:	4620      	mov	r0, r4
   b684e:	b002      	add	sp, #8
   b6850:	bd10      	pop	{r4, pc}
	bool result = false;
   b6852:	2400      	movs	r4, #0
   b6854:	e7f7      	b.n	b6846 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000b6856 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   b6856:	b513      	push	{r0, r1, r4, lr}
   b6858:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b685a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b685c:	f7ff ffca 	bl	b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   b6860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   b6862:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   b6864:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   b6866:	f7ff ffcb 	bl	b6800 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   b686a:	4620      	mov	r0, r4
   b686c:	b002      	add	sp, #8
   b686e:	bd10      	pop	{r4, pc}

000b6870 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6874:	4699      	mov	r9, r3
   b6876:	b086      	sub	sp, #24
	if (!haveSetup) {
   b6878:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b687c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   b6880:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6884:	4604      	mov	r4, r0
   b6886:	460f      	mov	r7, r1
   b6888:	4616      	mov	r6, r2
	if (!haveSetup) {
   b688a:	b913      	cbnz	r3, b6892 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   b688c:	6803      	ldr	r3, [r0, #0]
   b688e:	689b      	ldr	r3, [r3, #8]
   b6890:	4798      	blx	r3
		data = "";
   b6892:	4b31      	ldr	r3, [pc, #196]	; (b6958 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6894:	4638      	mov	r0, r7
		data = "";
   b6896:	2e00      	cmp	r6, #0
   b6898:	bf08      	it	eq
   b689a:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b689c:	f002 fde5 	bl	b946a <strlen>
   b68a0:	4605      	mov	r5, r0
   b68a2:	4630      	mov	r0, r6
   b68a4:	f002 fde1 	bl	b946a <strlen>
   b68a8:	4428      	add	r0, r5
   b68aa:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   b68ae:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   b68b0:	bf1c      	itt	ne
   b68b2:	f025 0503 	bicne.w	r5, r5, #3
   b68b6:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   b68b8:	4633      	mov	r3, r6
   b68ba:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b68be:	e9cd 9a00 	strd	r9, sl, [sp]
   b68c2:	4926      	ldr	r1, [pc, #152]	; (b695c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   b68c4:	4826      	ldr	r0, [pc, #152]	; (b6960 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   b68c6:	463a      	mov	r2, r7
   b68c8:	f7ff f88a 	bl	b59e0 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   b68cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b68ce:	3b08      	subs	r3, #8
   b68d0:	42ab      	cmp	r3, r5
   b68d2:	d212      	bcs.n	b68fa <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   b68d4:	2400      	movs	r4, #0
}
   b68d6:	4620      	mov	r0, r4
   b68d8:	b006      	add	sp, #24
   b68da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   b68de:	88cb      	ldrh	r3, [r1, #6]
   b68e0:	2b01      	cmp	r3, #1
   b68e2:	d036      	beq.n	b6952 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   b68e4:	a805      	add	r0, sp, #20
   b68e6:	f7ff ff8b 	bl	b6800 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   b68ea:	6823      	ldr	r3, [r4, #0]
   b68ec:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   b68f0:	699b      	ldr	r3, [r3, #24]
   b68f2:	4620      	mov	r0, r4
   b68f4:	4798      	blx	r3
   b68f6:	2800      	cmp	r0, #0
   b68f8:	d0ec      	beq.n	b68d4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   b68fa:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b68fc:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   b68fe:	f7ff ff79 	bl	b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6902:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6904:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   b6906:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6908:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   b690a:	1ad2      	subs	r2, r2, r3
   b690c:	42aa      	cmp	r2, r5
   b690e:	d3e6      	bcc.n	b68de <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   b6910:	ea48 080a 	orr.w	r8, r8, sl
   b6914:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   b6918:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   b691c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   b691e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   b6922:	4639      	mov	r1, r7
   b6924:	4640      	mov	r0, r8
   b6926:	f002 fd7b 	bl	b9420 <strcpy>
				cp += strlen(cp) + 1;
   b692a:	4640      	mov	r0, r8
   b692c:	f002 fd9d 	bl	b946a <strlen>
   b6930:	3001      	adds	r0, #1
				strcpy(cp, data);
   b6932:	4631      	mov	r1, r6
   b6934:	4440      	add	r0, r8
   b6936:	f002 fd73 	bl	b9420 <strcpy>
				nextFree += size;
   b693a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b693c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   b693e:	442b      	add	r3, r5
   b6940:	6363      	str	r3, [r4, #52]	; 0x34
				hdr->numEvents++;
   b6942:	88d3      	ldrh	r3, [r2, #6]
   b6944:	3301      	adds	r3, #1
   b6946:	80d3      	strh	r3, [r2, #6]
				return true;
   b6948:	2401      	movs	r4, #1
   b694a:	a805      	add	r0, sp, #20
   b694c:	f7ff ff58 	bl	b6800 <_ZN11StMutexLockD1Ev>
   b6950:	e7c1      	b.n	b68d6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   b6952:	2400      	movs	r4, #0
   b6954:	e7f9      	b.n	b694a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   b6956:	bf00      	nop
   b6958:	000b9f64 	.word	0x000b9f64
   b695c:	000b9ce1 	.word	0x000b9ce1
   b6960:	2003e64c 	.word	0x2003e64c

000b6964 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   b6964:	b508      	push	{r3, lr}
   b6966:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6968:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   b696c:	69a3      	ldr	r3, [r4, #24]
   b696e:	b90b      	cbnz	r3, b6974 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   b6970:	f002 f87e 	bl	b8a70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6974:	69e3      	ldr	r3, [r4, #28]
   b6976:	4621      	mov	r1, r4
   b6978:	4628      	mov	r0, r5
   b697a:	4798      	blx	r3
		os_thread_yield();
   b697c:	f000 f96c 	bl	b6c58 <os_thread_yield>
	while(true) {
   b6980:	e7f4      	b.n	b696c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000b6982 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   b6982:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   b6984:	f7ff ffee 	bl	b6964 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000b6988 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6988:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   b698a:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b698e:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6990:	4628      	mov	r0, r5
   b6992:	f002 fd6a 	bl	b946a <strlen>
   b6996:	3001      	adds	r0, #1
   b6998:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b699a:	4628      	mov	r0, r5
   b699c:	f002 fd65 	bl	b946a <strlen>
	size_t offset = start - retainedBuffer;
   b69a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b69a2:	3001      	adds	r0, #1
   b69a4:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   b69a6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   b69a8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   b69ac:	bf1c      	itt	ne
   b69ae:	f1c3 0304 	rsbne	r3, r3, #4
   b69b2:	18c0      	addne	r0, r0, r3
}
   b69b4:	bd68      	pop	{r3, r5, r6, pc}

000b69b6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   b69b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b69b8:	4604      	mov	r4, r0
   b69ba:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b69bc:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b69be:	f7ff ff19 	bl	b67f4 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b69c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   b69c4:	88fb      	ldrh	r3, [r7, #6]
   b69c6:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   b69ca:	b1e6      	cbz	r6, b6a06 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   b69cc:	2b01      	cmp	r3, #1
   b69ce:	d922      	bls.n	b6a16 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   b69d0:	4629      	mov	r1, r5
   b69d2:	4620      	mov	r0, r4
   b69d4:	f7ff ffd8 	bl	b6988 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   b69d8:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   b69da:	4629      	mov	r1, r5
   b69dc:	4620      	mov	r0, r4
   b69de:	f7ff ffd3 	bl	b6988 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   b69e2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   b69e4:	443a      	add	r2, r7
	if (after > 0) {
   b69e6:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   b69e8:	4601      	mov	r1, r0
	size_t len = next - start;
   b69ea:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   b69ee:	d002      	beq.n	b69f6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   b69f0:	4628      	mov	r0, r5
   b69f2:	f002 fcbb 	bl	b936c <memmove>
	nextFree -= len;
   b69f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b69f8:	1b9b      	subs	r3, r3, r6
   b69fa:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   b69fc:	88fb      	ldrh	r3, [r7, #6]
   b69fe:	3b01      	subs	r3, #1
   b6a00:	80fb      	strh	r3, [r7, #6]
	return true;
   b6a02:	2601      	movs	r6, #1
   b6a04:	e001      	b.n	b6a0a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   b6a06:	2b00      	cmp	r3, #0
   b6a08:	d1e7      	bne.n	b69da <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   b6a0a:	a801      	add	r0, sp, #4
   b6a0c:	f7ff fef8 	bl	b6800 <_ZN11StMutexLockD1Ev>
}
   b6a10:	4630      	mov	r0, r6
   b6a12:	b003      	add	sp, #12
   b6a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   b6a16:	2600      	movs	r6, #0
   b6a18:	e7f7      	b.n	b6a0a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000b6a1c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a20:	460d      	mov	r5, r1
   b6a22:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6a24:	462f      	mov	r7, r5
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6a26:	4b17      	ldr	r3, [pc, #92]	; (b6a84 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6a28:	f8df 905c 	ldr.w	r9, [pc, #92]	; b6a88 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6a2c:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6a2e:	f7ff fea5 	bl	b677c <_ZN21PublishQueueAsyncBaseC1Ev>
   b6a32:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6a34:	f857 3b08 	ldr.w	r3, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6a38:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6a3a:	454b      	cmp	r3, r9
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6a3c:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6a3e:	d117      	bne.n	b6a70 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   b6a40:	88ab      	ldrh	r3, [r5, #4]
   b6a42:	b29b      	uxth	r3, r3
   b6a44:	42b3      	cmp	r3, r6
   b6a46:	d113      	bne.n	b6a70 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6a48:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6a4c:	6367      	str	r7, [r4, #52]	; 0x34
   b6a4e:	f04f 0800 	mov.w	r8, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   b6a52:	88eb      	ldrh	r3, [r5, #6]
   b6a54:	fa1f f288 	uxth.w	r2, r8
   b6a58:	b29b      	uxth	r3, r3
   b6a5a:	429a      	cmp	r2, r3
   b6a5c:	d20e      	bcs.n	b6a7c <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   b6a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b6a60:	4620      	mov	r0, r4
   b6a62:	f7ff ff91 	bl	b6988 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   b6a66:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   b6a68:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   b6a6a:	f108 0801 	add.w	r8, r8, #1
   b6a6e:	d9f0      	bls.n	b6a52 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   b6a70:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   b6a72:	f8c5 9000 	str.w	r9, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6a76:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   b6a78:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   b6a7a:	80eb      	strh	r3, [r5, #6]
}
   b6a7c:	4620      	mov	r0, r4
   b6a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6a82:	bf00      	nop
   b6a84:	000b9d5c 	.word	0x000b9d5c
   b6a88:	d19cab61 	.word	0xd19cab61

000b6a8c <_GLOBAL__sub_I_pubqLogger>:
   b6a8c:	4b01      	ldr	r3, [pc, #4]	; (b6a94 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b6a8e:	4a02      	ldr	r2, [pc, #8]	; (b6a98 <_GLOBAL__sub_I_pubqLogger+0xc>)
   b6a90:	601a      	str	r2, [r3, #0]
}
   b6a92:	4770      	bx	lr
   b6a94:	2003e64c 	.word	0x2003e64c
   b6a98:	000b9d22 	.word	0x000b9d22

000b6a9c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6a9c:	4770      	bx	lr

000b6a9e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b6a9e:	b538      	push	{r3, r4, r5, lr}
   b6aa0:	4605      	mov	r5, r0
   b6aa2:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b6aa4:	f001 ff7c 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6aa8:	7829      	ldrb	r1, [r5, #0]
   b6aaa:	f001 f8b3 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b6aae:	f001 ff77 	bl	b89a0 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b6ab2:	6803      	ldr	r3, [r0, #0]
   b6ab4:	0a21      	lsrs	r1, r4, #8
   b6ab6:	689b      	ldr	r3, [r3, #8]
   b6ab8:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b6aba:	f001 ff71 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6abe:	6803      	ldr	r3, [r0, #0]
   b6ac0:	b2e1      	uxtb	r1, r4
   b6ac2:	689b      	ldr	r3, [r3, #8]
   b6ac4:	4798      	blx	r3
  Wire.endTransmission();  
   b6ac6:	f001 ff6b 	bl	b89a0 <_Z19__fetch_global_Wirev>
}
   b6aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b6ace:	f001 b8ac 	b.w	b7c2a <_ZN7TwoWire15endTransmissionEv>

000b6ad2 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b6ad2:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b6ad4:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b6ad8:	f7ff ffe1 	bl	b6a9e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b6adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b6ae0:	200a      	movs	r0, #10
   b6ae2:	f000 bc77 	b.w	b73d4 <delay>

000b6ae6 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b6ae6:	b538      	push	{r3, r4, r5, lr}
   b6ae8:	4604      	mov	r4, r0
   b6aea:	460d      	mov	r5, r1
  Wire.begin();
   b6aec:	f001 ff58 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6af0:	f001 f85e 	bl	b7bb0 <_ZN7TwoWire5beginEv>
  reset();
   b6af4:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b6af6:	7025      	strb	r5, [r4, #0]
  reset();
   b6af8:	f7ff ffeb 	bl	b6ad2 <_ZN14Adafruit_SHT315resetEv>
}
   b6afc:	2001      	movs	r0, #1
   b6afe:	bd38      	pop	{r3, r4, r5, pc}

000b6b00 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b6b00:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b6b02:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6b04:	4291      	cmp	r1, r2
   b6b06:	d00e      	beq.n	b6b26 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b6b08:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6b0c:	4058      	eors	r0, r3
   b6b0e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b6b10:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6b14:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b6b18:	bf18      	it	ne
   b6b1a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b6b1e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b6b20:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b6b22:	d1f5      	bne.n	b6b10 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6b24:	e7ee      	b.n	b6b04 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b6b26:	4770      	bx	lr

000b6b28 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b6b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b6b2a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b6b2e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b6b30:	f7ff ffb5 	bl	b6a9e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b6b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6b38:	f000 fc4c 	bl	b73d4 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b6b3c:	f001 ff30 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6b40:	7829      	ldrb	r1, [r5, #0]
   b6b42:	2206      	movs	r2, #6
   b6b44:	f001 f863 	bl	b7c0e <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b6b48:	f001 ff2a 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6b4c:	6803      	ldr	r3, [r0, #0]
   b6b4e:	691b      	ldr	r3, [r3, #16]
   b6b50:	4798      	blx	r3
   b6b52:	2806      	cmp	r0, #6
   b6b54:	4604      	mov	r4, r0
   b6b56:	d002      	beq.n	b6b5e <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b6b58:	2000      	movs	r0, #0
}
   b6b5a:	b002      	add	sp, #8
   b6b5c:	bd70      	pop	{r4, r5, r6, pc}
   b6b5e:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b6b60:	f001 ff1e 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b6b64:	6803      	ldr	r3, [r0, #0]
   b6b66:	695b      	ldr	r3, [r3, #20]
   b6b68:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b6b6a:	3c01      	subs	r4, #1
   b6b6c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b6b70:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b6b74:	4669      	mov	r1, sp
   b6b76:	d1f3      	bne.n	b6b60 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b6b78:	2202      	movs	r2, #2
   b6b7a:	4628      	mov	r0, r5
   b6b7c:	f7ff ffc0 	bl	b6b00 <_ZN14Adafruit_SHT314crc8EPKhi>
   b6b80:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b6b84:	4284      	cmp	r4, r0
   b6b86:	d1e7      	bne.n	b6b58 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6b88:	2202      	movs	r2, #2
   b6b8a:	f10d 0103 	add.w	r1, sp, #3
   b6b8e:	4628      	mov	r0, r5
   b6b90:	f7ff ffb6 	bl	b6b00 <_ZN14Adafruit_SHT314crc8EPKhi>
   b6b94:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6b98:	4284      	cmp	r4, r0
   b6b9a:	d1dd      	bne.n	b6b58 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b6b9c:	f8bd 0000 	ldrh.w	r0, [sp]
   b6ba0:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b6ba4:	ba40      	rev16	r0, r0
   b6ba6:	b280      	uxth	r0, r0
   b6ba8:	f002 f8a8 	bl	b8cfc <__aeabi_ui2d>
  stemp *= 175;
   b6bac:	a316      	add	r3, pc, #88	; (adr r3, b6c08 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b6bae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bb2:	f002 f91d 	bl	b8df0 <__aeabi_dmul>
  stemp /= 0xffff;
   b6bb6:	a310      	add	r3, pc, #64	; (adr r3, b6bf8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bbc:	f002 fa42 	bl	b9044 <__aeabi_ddiv>
  stemp = -45 + stemp;
   b6bc0:	4b0f      	ldr	r3, [pc, #60]	; (b6c00 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b6bc2:	2200      	movs	r2, #0
   b6bc4:	f001 ff5c 	bl	b8a80 <__aeabi_dsub>
  temp = stemp;
   b6bc8:	f002 fb24 	bl	b9214 <__aeabi_d2f>
   b6bcc:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b6bce:	ba60      	rev16	r0, r4
   b6bd0:	b280      	uxth	r0, r0
   b6bd2:	f002 f893 	bl	b8cfc <__aeabi_ui2d>
  shum *= 100;
   b6bd6:	4b0b      	ldr	r3, [pc, #44]	; (b6c04 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b6bd8:	2200      	movs	r2, #0
   b6bda:	f002 f909 	bl	b8df0 <__aeabi_dmul>
  shum /= 0xFFFF;
   b6bde:	a306      	add	r3, pc, #24	; (adr r3, b6bf8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6be0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6be4:	f002 fa2e 	bl	b9044 <__aeabi_ddiv>
  humidity = shum;
   b6be8:	f002 fb14 	bl	b9214 <__aeabi_d2f>
   b6bec:	6068      	str	r0, [r5, #4]
  return true;
   b6bee:	2001      	movs	r0, #1
   b6bf0:	e7b3      	b.n	b6b5a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b6bf2:	bf00      	nop
   b6bf4:	f3af 8000 	nop.w
   b6bf8:	00000000 	.word	0x00000000
   b6bfc:	40efffe0 	.word	0x40efffe0
   b6c00:	40468000 	.word	0x40468000
   b6c04:	40590000 	.word	0x40590000
   b6c08:	00000000 	.word	0x00000000
   b6c0c:	4065e000 	.word	0x4065e000

000b6c10 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6c10:	b510      	push	{r4, lr}
   b6c12:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6c14:	f7ff ff88 	bl	b6b28 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6c18:	b110      	cbz	r0, b6c20 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b6c1a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b6c1e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6c20:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6c28 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b6c24:	e7fb      	b.n	b6c1e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b6c26:	bf00      	nop
   b6c28:	7fc00000 	.word	0x7fc00000

000b6c2c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b6c2c:	b510      	push	{r4, lr}
   b6c2e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6c30:	f7ff ff7a 	bl	b6b28 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6c34:	b110      	cbz	r0, b6c3c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b6c36:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b6c3a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6c3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6c44 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b6c40:	e7fb      	b.n	b6c3a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b6c42:	bf00      	nop
   b6c44:	7fc00000 	.word	0x7fc00000

000b6c48 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <os_thread_create+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	685b      	ldr	r3, [r3, #4]
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	00030248 	.word	0x00030248

000b6c58 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <os_thread_yield+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	68db      	ldr	r3, [r3, #12]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	00030248 	.word	0x00030248

000b6c68 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <os_thread_scheduling+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	69db      	ldr	r3, [r3, #28]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	00030248 	.word	0x00030248

000b6c78 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <os_timer_create+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	6a1b      	ldr	r3, [r3, #32]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	00030248 	.word	0x00030248

000b6c88 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b02      	ldr	r3, [pc, #8]	; (b6c94 <os_timer_destroy+0xc>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c90:	9301      	str	r3, [sp, #4]
   b6c92:	bd08      	pop	{r3, pc}
   b6c94:	00030248 	.word	0x00030248

000b6c98 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b02      	ldr	r3, [pc, #8]	; (b6ca4 <os_timer_get_id+0xc>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ca0:	9301      	str	r3, [sp, #4]
   b6ca2:	bd08      	pop	{r3, pc}
   b6ca4:	00030248 	.word	0x00030248

000b6ca8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6ca8:	b508      	push	{r3, lr}
   b6caa:	4b02      	ldr	r3, [pc, #8]	; (b6cb4 <os_timer_change+0xc>)
   b6cac:	681b      	ldr	r3, [r3, #0]
   b6cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cb0:	9301      	str	r3, [sp, #4]
   b6cb2:	bd08      	pop	{r3, pc}
   b6cb4:	00030248 	.word	0x00030248

000b6cb8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b02      	ldr	r3, [pc, #8]	; (b6cc4 <os_mutex_create+0xc>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	bd08      	pop	{r3, pc}
   b6cc4:	00030248 	.word	0x00030248

000b6cc8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6cc8:	b508      	push	{r3, lr}
   b6cca:	4b02      	ldr	r3, [pc, #8]	; (b6cd4 <os_mutex_lock+0xc>)
   b6ccc:	681b      	ldr	r3, [r3, #0]
   b6cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6cd0:	9301      	str	r3, [sp, #4]
   b6cd2:	bd08      	pop	{r3, pc}
   b6cd4:	00030248 	.word	0x00030248

000b6cd8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6cd8:	b508      	push	{r3, lr}
   b6cda:	4b02      	ldr	r3, [pc, #8]	; (b6ce4 <os_mutex_unlock+0xc>)
   b6cdc:	681b      	ldr	r3, [r3, #0]
   b6cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ce0:	9301      	str	r3, [sp, #4]
   b6ce2:	bd08      	pop	{r3, pc}
   b6ce4:	00030248 	.word	0x00030248

000b6ce8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b02      	ldr	r3, [pc, #8]	; (b6cf4 <os_mutex_recursive_create+0xc>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6cf0:	9301      	str	r3, [sp, #4]
   b6cf2:	bd08      	pop	{r3, pc}
   b6cf4:	00030248 	.word	0x00030248

000b6cf8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <os_thread_exit+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	00030248 	.word	0x00030248

000b6d08 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <os_timer_set_id+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030248 	.word	0x00030248

000b6d18 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <HAL_Feature_Set+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	00030234 	.word	0x00030234

000b6d28 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <HAL_RNG_GetRandomNumber+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	685b      	ldr	r3, [r3, #4]
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	00030218 	.word	0x00030218

000b6d38 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <HAL_Delay_Milliseconds+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	689b      	ldr	r3, [r3, #8]
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030218 	.word	0x00030218

000b6d48 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <HAL_Delay_Microseconds+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	68db      	ldr	r3, [r3, #12]
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030218 	.word	0x00030218

000b6d58 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	695b      	ldr	r3, [r3, #20]
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030218 	.word	0x00030218

000b6d68 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <hal_rtc_time_is_valid+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030218 	.word	0x00030218

000b6d78 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <hal_timer_millis+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	00030218 	.word	0x00030218

000b6d88 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <hal_rtc_get_time+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030218 	.word	0x00030218

000b6d98 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <hal_rtc_set_time+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030218 	.word	0x00030218

000b6da8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <HAL_Pin_Map+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	681b      	ldr	r3, [r3, #0]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	0003022c 	.word	0x0003022c

000b6db8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <HAL_Validate_Pin_Function+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	685b      	ldr	r3, [r3, #4]
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	0003022c 	.word	0x0003022c

000b6dc8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <HAL_Pin_Mode+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	689b      	ldr	r3, [r3, #8]
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	0003022c 	.word	0x0003022c

000b6dd8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <HAL_Get_Pin_Mode+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	68db      	ldr	r3, [r3, #12]
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	0003022c 	.word	0x0003022c

000b6de8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <HAL_GPIO_Read+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	695b      	ldr	r3, [r3, #20]
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	0003022c 	.word	0x0003022c

000b6df8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <HAL_Interrupts_Attach+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	699b      	ldr	r3, [r3, #24]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	0003022c 	.word	0x0003022c

000b6e08 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <HAL_Interrupts_Detach+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	69db      	ldr	r3, [r3, #28]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	0003022c 	.word	0x0003022c

000b6e18 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <hal_adc_read+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	0003022c 	.word	0x0003022c

000b6e28 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <hal_i2c_begin+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	68db      	ldr	r3, [r3, #12]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030228 	.word	0x00030228

000b6e38 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <hal_i2c_begin_transmission+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	699b      	ldr	r3, [r3, #24]
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	00030228 	.word	0x00030228

000b6e48 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <hal_i2c_end_transmission+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	69db      	ldr	r3, [r3, #28]
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	00030228 	.word	0x00030228

000b6e58 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <hal_i2c_write+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6a1b      	ldr	r3, [r3, #32]
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	00030228 	.word	0x00030228

000b6e68 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <hal_i2c_available+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	00030228 	.word	0x00030228

000b6e78 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <hal_i2c_read+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	00030228 	.word	0x00030228

000b6e88 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <hal_i2c_peek+0xc>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e90:	9301      	str	r3, [sp, #4]
   b6e92:	bd08      	pop	{r3, pc}
   b6e94:	00030228 	.word	0x00030228

000b6e98 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <hal_i2c_flush+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	00030228 	.word	0x00030228

000b6ea8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <hal_i2c_is_enabled+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	00030228 	.word	0x00030228

000b6eb8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <hal_i2c_init+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	00030228 	.word	0x00030228

000b6ec8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <hal_i2c_lock+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	00030228 	.word	0x00030228

000b6ed8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <hal_i2c_unlock+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	00030228 	.word	0x00030228

000b6ee8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <hal_i2c_request_ex+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	00030228 	.word	0x00030228

000b6ef8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <inet_inet_ntop+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	695b      	ldr	r3, [r3, #20]
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	00030264 	.word	0x00030264

000b6f08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <netdb_freeaddrinfo+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	689b      	ldr	r3, [r3, #8]
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	00030268 	.word	0x00030268

000b6f18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <netdb_getaddrinfo+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	68db      	ldr	r3, [r3, #12]
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	00030268 	.word	0x00030268

000b6f28 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <hal_spi_init+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	69db      	ldr	r3, [r3, #28]
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	00030230 	.word	0x00030230

000b6f38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <hal_spi_is_enabled+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	6a1b      	ldr	r3, [r3, #32]
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	00030230 	.word	0x00030230

000b6f48 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <hal_usart_write+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	68db      	ldr	r3, [r3, #12]
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	0003023c 	.word	0x0003023c

000b6f58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <hal_usart_available+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	691b      	ldr	r3, [r3, #16]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	0003023c 	.word	0x0003023c

000b6f68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <hal_usart_read+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	695b      	ldr	r3, [r3, #20]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	0003023c 	.word	0x0003023c

000b6f78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <hal_usart_peek+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	699b      	ldr	r3, [r3, #24]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	0003023c 	.word	0x0003023c

000b6f88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <hal_usart_flush+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	69db      	ldr	r3, [r3, #28]
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	0003023c 	.word	0x0003023c

000b6f98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <hal_usart_is_enabled+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	6a1b      	ldr	r3, [r3, #32]
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	0003023c 	.word	0x0003023c

000b6fa8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <hal_usart_available_data_for_write+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	0003023c 	.word	0x0003023c

000b6fb8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <hal_usart_init_ex+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	0003023c 	.word	0x0003023c

000b6fc8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <HAL_USB_USART_Init+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	681b      	ldr	r3, [r3, #0]
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	0003024c 	.word	0x0003024c

000b6fd8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <HAL_USB_USART_Available_Data+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	691b      	ldr	r3, [r3, #16]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	0003024c 	.word	0x0003024c

000b6fe8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	695b      	ldr	r3, [r3, #20]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	0003024c 	.word	0x0003024c

000b6ff8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <HAL_USB_USART_Receive_Data+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	699b      	ldr	r3, [r3, #24]
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	0003024c 	.word	0x0003024c

000b7008 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <HAL_USB_USART_Send_Data+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	69db      	ldr	r3, [r3, #28]
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	0003024c 	.word	0x0003024c

000b7018 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <HAL_USB_USART_Flush_Data+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	6a1b      	ldr	r3, [r3, #32]
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	0003024c 	.word	0x0003024c

000b7028 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <panic_+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	00030260 	.word	0x00030260

000b7038 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <log_message+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	00030260 	.word	0x00030260

000b7048 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <log_message_v+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	00030260 	.word	0x00030260

000b7058 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b03      	ldr	r3, [pc, #12]	; (b7068 <diag_get_source+0x10>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7062:	9301      	str	r3, [sp, #4]
   b7064:	bd08      	pop	{r3, pc}
   b7066:	0000      	.short	0x0000
   b7068:	00030260 	.word	0x00030260

000b706c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <system_mode+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	681b      	ldr	r3, [r3, #0]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030220 	.word	0x00030220

000b707c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <set_system_mode+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	685b      	ldr	r3, [r3, #4]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030220 	.word	0x00030220

000b708c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <system_delay_ms+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	695b      	ldr	r3, [r3, #20]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030220 	.word	0x00030220

000b709c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <system_thread_set_state+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030220 	.word	0x00030220

000b70ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <application_thread_current+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030220 	.word	0x00030220

000b70bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <application_thread_invoke+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030220 	.word	0x00030220

000b70cc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <system_thread_get_state+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030220 	.word	0x00030220

000b70dc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <system_notify_time_changed+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030220 	.word	0x00030220

000b70ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b03      	ldr	r3, [pc, #12]	; (b70fc <system_ctrl_set_app_request_handler+0x10>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b70f6:	9301      	str	r3, [sp, #4]
   b70f8:	bd08      	pop	{r3, pc}
   b70fa:	0000      	.short	0x0000
   b70fc:	00030220 	.word	0x00030220

000b7100 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7100:	b508      	push	{r3, lr}
   b7102:	4b03      	ldr	r3, [pc, #12]	; (b7110 <system_ctrl_set_result+0x10>)
   b7104:	681b      	ldr	r3, [r3, #0]
   b7106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b710a:	9301      	str	r3, [sp, #4]
   b710c:	bd08      	pop	{r3, pc}
   b710e:	0000      	.short	0x0000
   b7110:	00030220 	.word	0x00030220

000b7114 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b03      	ldr	r3, [pc, #12]	; (b7124 <system_sleep_ext+0x10>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b711e:	9301      	str	r3, [sp, #4]
   b7120:	bd08      	pop	{r3, pc}
   b7122:	0000      	.short	0x0000
   b7124:	00030220 	.word	0x00030220

000b7128 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b03      	ldr	r3, [pc, #12]	; (b7138 <system_reset+0x10>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b7132:	9301      	str	r3, [sp, #4]
   b7134:	bd08      	pop	{r3, pc}
   b7136:	0000      	.short	0x0000
   b7138:	00030220 	.word	0x00030220

000b713c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <spark_variable+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	681b      	ldr	r3, [r3, #0]
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	00030244 	.word	0x00030244

000b714c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <spark_function+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	685b      	ldr	r3, [r3, #4]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	00030244 	.word	0x00030244

000b715c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <spark_process+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	689b      	ldr	r3, [r3, #8]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	00030244 	.word	0x00030244

000b716c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <spark_cloud_flag_connect+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	68db      	ldr	r3, [r3, #12]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	00030244 	.word	0x00030244

000b717c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <spark_cloud_flag_connected+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	695b      	ldr	r3, [r3, #20]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	00030244 	.word	0x00030244

000b718c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <spark_deviceID+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	69db      	ldr	r3, [r3, #28]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	00030244 	.word	0x00030244

000b719c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <spark_send_event+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	6a1b      	ldr	r3, [r3, #32]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	00030244 	.word	0x00030244

000b71ac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <spark_subscribe+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	00030244 	.word	0x00030244

000b71bc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <spark_sync_time+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	00030244 	.word	0x00030244

000b71cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <spark_sync_time_pending+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	00030244 	.word	0x00030244

000b71dc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <spark_sync_time_last+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	00030244 	.word	0x00030244

000b71ec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <spark_set_connection_property+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	00030244 	.word	0x00030244

000b71fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b02      	ldr	r3, [pc, #8]	; (b7208 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7204:	9301      	str	r3, [sp, #4]
   b7206:	bd08      	pop	{r3, pc}
   b7208:	00030244 	.word	0x00030244

000b720c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b02      	ldr	r3, [pc, #8]	; (b7218 <spark_cloud_disconnect+0xc>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7214:	9301      	str	r3, [sp, #4]
   b7216:	bd08      	pop	{r3, pc}
   b7218:	00030244 	.word	0x00030244

000b721c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b721c:	b508      	push	{r3, lr}
   b721e:	4b02      	ldr	r3, [pc, #8]	; (b7228 <network_connect+0xc>)
   b7220:	681b      	ldr	r3, [r3, #0]
   b7222:	685b      	ldr	r3, [r3, #4]
   b7224:	9301      	str	r3, [sp, #4]
   b7226:	bd08      	pop	{r3, pc}
   b7228:	00030240 	.word	0x00030240

000b722c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b722c:	b508      	push	{r3, lr}
   b722e:	4b02      	ldr	r3, [pc, #8]	; (b7238 <network_connecting+0xc>)
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	689b      	ldr	r3, [r3, #8]
   b7234:	9301      	str	r3, [sp, #4]
   b7236:	bd08      	pop	{r3, pc}
   b7238:	00030240 	.word	0x00030240

000b723c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b723c:	b508      	push	{r3, lr}
   b723e:	4b02      	ldr	r3, [pc, #8]	; (b7248 <network_disconnect+0xc>)
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	68db      	ldr	r3, [r3, #12]
   b7244:	9301      	str	r3, [sp, #4]
   b7246:	bd08      	pop	{r3, pc}
   b7248:	00030240 	.word	0x00030240

000b724c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b724c:	b508      	push	{r3, lr}
   b724e:	4b02      	ldr	r3, [pc, #8]	; (b7258 <network_ready+0xc>)
   b7250:	681b      	ldr	r3, [r3, #0]
   b7252:	691b      	ldr	r3, [r3, #16]
   b7254:	9301      	str	r3, [sp, #4]
   b7256:	bd08      	pop	{r3, pc}
   b7258:	00030240 	.word	0x00030240

000b725c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b725c:	b508      	push	{r3, lr}
   b725e:	4b02      	ldr	r3, [pc, #8]	; (b7268 <network_on+0xc>)
   b7260:	681b      	ldr	r3, [r3, #0]
   b7262:	695b      	ldr	r3, [r3, #20]
   b7264:	9301      	str	r3, [sp, #4]
   b7266:	bd08      	pop	{r3, pc}
   b7268:	00030240 	.word	0x00030240

000b726c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b726c:	b508      	push	{r3, lr}
   b726e:	4b02      	ldr	r3, [pc, #8]	; (b7278 <network_off+0xc>)
   b7270:	681b      	ldr	r3, [r3, #0]
   b7272:	699b      	ldr	r3, [r3, #24]
   b7274:	9301      	str	r3, [sp, #4]
   b7276:	bd08      	pop	{r3, pc}
   b7278:	00030240 	.word	0x00030240

000b727c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b727c:	b508      	push	{r3, lr}
   b727e:	4b02      	ldr	r3, [pc, #8]	; (b7288 <network_listen+0xc>)
   b7280:	681b      	ldr	r3, [r3, #0]
   b7282:	69db      	ldr	r3, [r3, #28]
   b7284:	9301      	str	r3, [sp, #4]
   b7286:	bd08      	pop	{r3, pc}
   b7288:	00030240 	.word	0x00030240

000b728c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b728c:	b508      	push	{r3, lr}
   b728e:	4b02      	ldr	r3, [pc, #8]	; (b7298 <network_listening+0xc>)
   b7290:	681b      	ldr	r3, [r3, #0]
   b7292:	6a1b      	ldr	r3, [r3, #32]
   b7294:	9301      	str	r3, [sp, #4]
   b7296:	bd08      	pop	{r3, pc}
   b7298:	00030240 	.word	0x00030240

000b729c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b729c:	b508      	push	{r3, lr}
   b729e:	4b02      	ldr	r3, [pc, #8]	; (b72a8 <network_set_listen_timeout+0xc>)
   b72a0:	681b      	ldr	r3, [r3, #0]
   b72a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72a4:	9301      	str	r3, [sp, #4]
   b72a6:	bd08      	pop	{r3, pc}
   b72a8:	00030240 	.word	0x00030240

000b72ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b72ac:	b508      	push	{r3, lr}
   b72ae:	4b02      	ldr	r3, [pc, #8]	; (b72b8 <network_get_listen_timeout+0xc>)
   b72b0:	681b      	ldr	r3, [r3, #0]
   b72b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b72b4:	9301      	str	r3, [sp, #4]
   b72b6:	bd08      	pop	{r3, pc}
   b72b8:	00030240 	.word	0x00030240

000b72bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b72bc:	b508      	push	{r3, lr}
   b72be:	4b02      	ldr	r3, [pc, #8]	; (b72c8 <network_is_on+0xc>)
   b72c0:	681b      	ldr	r3, [r3, #0]
   b72c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72c4:	9301      	str	r3, [sp, #4]
   b72c6:	bd08      	pop	{r3, pc}
   b72c8:	00030240 	.word	0x00030240

000b72cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b72cc:	b508      	push	{r3, lr}
   b72ce:	4b02      	ldr	r3, [pc, #8]	; (b72d8 <network_is_off+0xc>)
   b72d0:	681b      	ldr	r3, [r3, #0]
   b72d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72d4:	9301      	str	r3, [sp, #4]
   b72d6:	bd08      	pop	{r3, pc}
   b72d8:	00030240 	.word	0x00030240

000b72dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b72dc:	b508      	push	{r3, lr}
   b72de:	4b02      	ldr	r3, [pc, #8]	; (b72e8 <malloc+0xc>)
   b72e0:	681b      	ldr	r3, [r3, #0]
   b72e2:	681b      	ldr	r3, [r3, #0]
   b72e4:	9301      	str	r3, [sp, #4]
   b72e6:	bd08      	pop	{r3, pc}
   b72e8:	0003021c 	.word	0x0003021c

000b72ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b72ec:	b508      	push	{r3, lr}
   b72ee:	4b02      	ldr	r3, [pc, #8]	; (b72f8 <free+0xc>)
   b72f0:	681b      	ldr	r3, [r3, #0]
   b72f2:	685b      	ldr	r3, [r3, #4]
   b72f4:	9301      	str	r3, [sp, #4]
   b72f6:	bd08      	pop	{r3, pc}
   b72f8:	0003021c 	.word	0x0003021c

000b72fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b72fc:	b508      	push	{r3, lr}
   b72fe:	4b02      	ldr	r3, [pc, #8]	; (b7308 <realloc+0xc>)
   b7300:	681b      	ldr	r3, [r3, #0]
   b7302:	689b      	ldr	r3, [r3, #8]
   b7304:	9301      	str	r3, [sp, #4]
   b7306:	bd08      	pop	{r3, pc}
   b7308:	0003021c 	.word	0x0003021c

000b730c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b730c:	b508      	push	{r3, lr}
   b730e:	4b02      	ldr	r3, [pc, #8]	; (b7318 <siprintf+0xc>)
   b7310:	681b      	ldr	r3, [r3, #0]
   b7312:	691b      	ldr	r3, [r3, #16]
   b7314:	9301      	str	r3, [sp, #4]
   b7316:	bd08      	pop	{r3, pc}
   b7318:	0003021c 	.word	0x0003021c

000b731c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b731c:	b508      	push	{r3, lr}
   b731e:	4b02      	ldr	r3, [pc, #8]	; (b7328 <snprintf+0xc>)
   b7320:	681b      	ldr	r3, [r3, #0]
   b7322:	69db      	ldr	r3, [r3, #28]
   b7324:	9301      	str	r3, [sp, #4]
   b7326:	bd08      	pop	{r3, pc}
   b7328:	0003021c 	.word	0x0003021c

000b732c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b732c:	b508      	push	{r3, lr}
   b732e:	4b02      	ldr	r3, [pc, #8]	; (b7338 <abort+0xc>)
   b7330:	681b      	ldr	r3, [r3, #0]
   b7332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7334:	9301      	str	r3, [sp, #4]
   b7336:	bd08      	pop	{r3, pc}
   b7338:	0003021c 	.word	0x0003021c

000b733c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b733c:	b508      	push	{r3, lr}
   b733e:	4b02      	ldr	r3, [pc, #8]	; (b7348 <_malloc_r+0xc>)
   b7340:	681b      	ldr	r3, [r3, #0]
   b7342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7344:	9301      	str	r3, [sp, #4]
   b7346:	bd08      	pop	{r3, pc}
   b7348:	0003021c 	.word	0x0003021c

000b734c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b734c:	b508      	push	{r3, lr}
   b734e:	4b02      	ldr	r3, [pc, #8]	; (b7358 <__errno+0xc>)
   b7350:	681b      	ldr	r3, [r3, #0]
   b7352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7354:	9301      	str	r3, [sp, #4]
   b7356:	bd08      	pop	{r3, pc}
   b7358:	0003021c 	.word	0x0003021c

000b735c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b735c:	b508      	push	{r3, lr}
   b735e:	4b02      	ldr	r3, [pc, #8]	; (b7368 <__assert_func+0xc>)
   b7360:	681b      	ldr	r3, [r3, #0]
   b7362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7364:	9301      	str	r3, [sp, #4]
   b7366:	bd08      	pop	{r3, pc}
   b7368:	0003021c 	.word	0x0003021c

000b736c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b736c:	b508      	push	{r3, lr}
   b736e:	4b02      	ldr	r3, [pc, #8]	; (b7378 <newlib_impure_ptr_callback+0xc>)
   b7370:	681b      	ldr	r3, [r3, #0]
   b7372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7374:	9301      	str	r3, [sp, #4]
   b7376:	bd08      	pop	{r3, pc}
   b7378:	0003021c 	.word	0x0003021c

000b737c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b737c:	b508      	push	{r3, lr}
   b737e:	4b02      	ldr	r3, [pc, #8]	; (b7388 <strftime+0xc>)
   b7380:	681b      	ldr	r3, [r3, #0]
   b7382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7384:	9301      	str	r3, [sp, #4]
   b7386:	bd08      	pop	{r3, pc}
   b7388:	0003021c 	.word	0x0003021c

000b738c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b738c:	b508      	push	{r3, lr}
   b738e:	4b02      	ldr	r3, [pc, #8]	; (b7398 <localtime_r+0xc>)
   b7390:	681b      	ldr	r3, [r3, #0]
   b7392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7394:	9301      	str	r3, [sp, #4]
   b7396:	bd08      	pop	{r3, pc}
   b7398:	0003021c 	.word	0x0003021c

000b739c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b739c:	b508      	push	{r3, lr}
   b739e:	4b02      	ldr	r3, [pc, #8]	; (b73a8 <gmtime_r+0xc>)
   b73a0:	681b      	ldr	r3, [r3, #0]
   b73a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b73a4:	9301      	str	r3, [sp, #4]
   b73a6:	bd08      	pop	{r3, pc}
   b73a8:	0003021c 	.word	0x0003021c

000b73ac <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b73ac:	b508      	push	{r3, lr}
   b73ae:	4b02      	ldr	r3, [pc, #8]	; (b73b8 <mktime+0xc>)
   b73b0:	681b      	ldr	r3, [r3, #0]
   b73b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b73b4:	9301      	str	r3, [sp, #4]
   b73b6:	bd08      	pop	{r3, pc}
   b73b8:	0003021c 	.word	0x0003021c

000b73bc <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b73bc:	428a      	cmp	r2, r1
{
   b73be:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b73c0:	d007      	beq.n	b73d2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b73c2:	1a44      	subs	r4, r0, r1
   b73c4:	9802      	ldr	r0, [sp, #8]
   b73c6:	1ac0      	subs	r0, r0, r3
   b73c8:	4344      	muls	r4, r0
   b73ca:	1a50      	subs	r0, r2, r1
   b73cc:	fb94 f0f0 	sdiv	r0, r4, r0
   b73d0:	4418      	add	r0, r3
}
   b73d2:	bd10      	pop	{r4, pc}

000b73d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b73d4:	2100      	movs	r1, #0
   b73d6:	f7ff be59 	b.w	b708c <system_delay_ms>

000b73da <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b73da:	b510      	push	{r4, lr}
      if (_M_empty())
   b73dc:	6883      	ldr	r3, [r0, #8]
   b73de:	4604      	mov	r4, r0
   b73e0:	b90b      	cbnz	r3, b73e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b73e2:	f001 fb45 	bl	b8a70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b73e6:	68c3      	ldr	r3, [r0, #12]
   b73e8:	4798      	blx	r3
      if (_M_manager)
   b73ea:	68a3      	ldr	r3, [r4, #8]
   b73ec:	b11b      	cbz	r3, b73f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b73ee:	2203      	movs	r2, #3
   b73f0:	4621      	mov	r1, r4
   b73f2:	4620      	mov	r0, r4
   b73f4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b73f6:	4620      	mov	r0, r4
   b73f8:	2110      	movs	r1, #16
}
   b73fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b73fe:	f7fc be4e 	b.w	b409e <_ZdlPvj>

000b7402 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7402:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7404:	6843      	ldr	r3, [r0, #4]
   b7406:	3b01      	subs	r3, #1
    {
   b7408:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b740a:	6043      	str	r3, [r0, #4]
   b740c:	b963      	cbnz	r3, b7428 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b740e:	6803      	ldr	r3, [r0, #0]
   b7410:	689b      	ldr	r3, [r3, #8]
   b7412:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7414:	68a3      	ldr	r3, [r4, #8]
   b7416:	3b01      	subs	r3, #1
   b7418:	60a3      	str	r3, [r4, #8]
   b741a:	b92b      	cbnz	r3, b7428 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b741c:	6823      	ldr	r3, [r4, #0]
   b741e:	4620      	mov	r0, r4
   b7420:	68db      	ldr	r3, [r3, #12]
    }
   b7422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7426:	4718      	bx	r3
    }
   b7428:	bd10      	pop	{r4, pc}

000b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b742a:	b510      	push	{r4, lr}
   b742c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b742e:	6800      	ldr	r0, [r0, #0]
   b7430:	b108      	cbz	r0, b7436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7432:	f7ff ffe6 	bl	b7402 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7436:	4620      	mov	r0, r4
   b7438:	bd10      	pop	{r4, pc}

000b743a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b743a:	b513      	push	{r0, r1, r4, lr}
   b743c:	460b      	mov	r3, r1
   b743e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7440:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7444:	466c      	mov	r4, sp
   b7446:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b744a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b744e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7452:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7456:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b745a:	b002      	add	sp, #8
   b745c:	bd10      	pop	{r4, pc}
	...

000b7460 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7460:	4802      	ldr	r0, [pc, #8]	; (b746c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7462:	2300      	movs	r3, #0
   b7464:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7466:	f7ff bc3f 	b.w	b6ce8 <os_mutex_recursive_create>
   b746a:	bf00      	nop
   b746c:	2003e650 	.word	0x2003e650

000b7470 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7470:	2200      	movs	r2, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	4611      	mov	r1, r2
   b7476:	f7ff bee9 	b.w	b724c <network_ready>

000b747a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b747a:	2200      	movs	r2, #0
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	4611      	mov	r1, r2
   b7480:	f7ff bf04 	b.w	b728c <network_listening>

000b7484 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7484:	2200      	movs	r2, #0
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	4611      	mov	r1, r2
   b748a:	f7ff bf0f 	b.w	b72ac <network_get_listen_timeout>

000b748e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b748e:	6840      	ldr	r0, [r0, #4]
   b7490:	2200      	movs	r2, #0
   b7492:	f7ff bf03 	b.w	b729c <network_set_listen_timeout>

000b7496 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7496:	6840      	ldr	r0, [r0, #4]
   b7498:	2200      	movs	r2, #0
   b749a:	f081 0101 	eor.w	r1, r1, #1
   b749e:	f7ff beed 	b.w	b727c <network_listen>

000b74a2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b74a2:	2300      	movs	r3, #0
   b74a4:	6840      	ldr	r0, [r0, #4]
   b74a6:	461a      	mov	r2, r3
   b74a8:	4619      	mov	r1, r3
   b74aa:	f7ff bedf 	b.w	b726c <network_off>

000b74ae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74ae:	2300      	movs	r3, #0
   b74b0:	6840      	ldr	r0, [r0, #4]
   b74b2:	461a      	mov	r2, r3
   b74b4:	4619      	mov	r1, r3
   b74b6:	f7ff bed1 	b.w	b725c <network_on>

000b74ba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74ba:	2200      	movs	r2, #0
   b74bc:	6840      	ldr	r0, [r0, #4]
   b74be:	4611      	mov	r1, r2
   b74c0:	f7ff beb4 	b.w	b722c <network_connecting>

000b74c4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74c4:	6840      	ldr	r0, [r0, #4]
   b74c6:	2200      	movs	r2, #0
   b74c8:	2102      	movs	r1, #2
   b74ca:	f7ff beb7 	b.w	b723c <network_disconnect>

000b74ce <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74ce:	2300      	movs	r3, #0
   b74d0:	6840      	ldr	r0, [r0, #4]
   b74d2:	461a      	mov	r2, r3
   b74d4:	f7ff bea2 	b.w	b721c <network_connect>

000b74d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b74d8:	4b08      	ldr	r3, [pc, #32]	; (b74fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b74da:	b510      	push	{r4, lr}
   b74dc:	2428      	movs	r4, #40	; 0x28
   b74de:	4622      	mov	r2, r4
   b74e0:	4618      	mov	r0, r3
   b74e2:	2100      	movs	r1, #0
   b74e4:	f001 ff5c 	bl	b93a0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b74e8:	4b05      	ldr	r3, [pc, #20]	; (b7500 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b74ea:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b74ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b74f0:	6042      	str	r2, [r0, #4]
   b74f2:	2204      	movs	r2, #4
   b74f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b74f6:	4a03      	ldr	r2, [pc, #12]	; (b7504 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b74f8:	601a      	str	r2, [r3, #0]
   b74fa:	bd10      	pop	{r4, pc}
   b74fc:	2003e65c 	.word	0x2003e65c
   b7500:	2003e654 	.word	0x2003e654
   b7504:	000b9d84 	.word	0x000b9d84

000b7508 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7508:	4770      	bx	lr

000b750a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b750a:	2000      	movs	r0, #0
   b750c:	4770      	bx	lr

000b750e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b750e:	b510      	push	{r4, lr}
   b7510:	2110      	movs	r1, #16
   b7512:	4604      	mov	r4, r0
   b7514:	f7fc fdc3 	bl	b409e <_ZdlPvj>
   b7518:	4620      	mov	r0, r4
   b751a:	bd10      	pop	{r4, pc}

000b751c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b751c:	b508      	push	{r3, lr}
      { delete this; }
   b751e:	f7ff fff6 	bl	b750e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7522:	bd08      	pop	{r3, pc}

000b7524 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7524:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7526:	2200      	movs	r2, #0
   b7528:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b752c:	6002      	str	r2, [r0, #0]
   b752e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7530:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7532:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7534:	680c      	ldr	r4, [r1, #0]
   b7536:	8085      	strh	r5, [r0, #4]
   b7538:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b753a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b753c:	bd30      	pop	{r4, r5, pc}

000b753e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b753e:	b510      	push	{r4, lr}
   b7540:	4604      	mov	r4, r0
    free((void*)msg_);
   b7542:	6800      	ldr	r0, [r0, #0]
   b7544:	f7ff fed2 	bl	b72ec <free>
}
   b7548:	4620      	mov	r0, r4
   b754a:	bd10      	pop	{r4, pc}

000b754c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b754c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b754e:	68c4      	ldr	r4, [r0, #12]
   b7550:	b1f4      	cbz	r4, b7590 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7552:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7554:	2b02      	cmp	r3, #2
   b7556:	d103      	bne.n	b7560 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7558:	f104 000c 	add.w	r0, r4, #12
   b755c:	f7ff ffef 	bl	b753e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7560:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7562:	b135      	cbz	r5, b7572 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7564:	4628      	mov	r0, r5
   b7566:	f7fc ff57 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
   b756a:	2110      	movs	r1, #16
   b756c:	4628      	mov	r0, r5
   b756e:	f7fc fd96 	bl	b409e <_ZdlPvj>
   b7572:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7574:	b135      	cbz	r5, b7584 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7576:	4628      	mov	r0, r5
   b7578:	f7fc ff4e 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
   b757c:	2110      	movs	r1, #16
   b757e:	4628      	mov	r0, r5
   b7580:	f7fc fd8d 	bl	b409e <_ZdlPvj>
   b7584:	4620      	mov	r0, r4
   b7586:	2114      	movs	r1, #20
   b7588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b758c:	f7fc bd87 	b.w	b409e <_ZdlPvj>
   b7590:	bd38      	pop	{r3, r4, r5, pc}

000b7592 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b7592:	b510      	push	{r4, lr}
   b7594:	b088      	sub	sp, #32
   b7596:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b7598:	4668      	mov	r0, sp
   b759a:	f000 fd5e 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b759e:	4669      	mov	r1, sp
   b75a0:	a804      	add	r0, sp, #16
   b75a2:	f000 fd7d 	bl	b80a0 <_ZN6StringC1ERKS_>
   b75a6:	a804      	add	r0, sp, #16
   b75a8:	47a0      	blx	r4
   b75aa:	4604      	mov	r4, r0
   b75ac:	a804      	add	r0, sp, #16
   b75ae:	f000 fd09 	bl	b7fc4 <_ZN6StringD1Ev>
    String p(param);
   b75b2:	4668      	mov	r0, sp
   b75b4:	f000 fd06 	bl	b7fc4 <_ZN6StringD1Ev>
}
   b75b8:	4620      	mov	r0, r4
   b75ba:	b008      	add	sp, #32
   b75bc:	bd10      	pop	{r4, pc}

000b75be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b75be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b75c0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b75c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b75c6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b75c8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b75ca:	461a      	mov	r2, r3
   b75cc:	4669      	mov	r1, sp
   b75ce:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b75d0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b75d4:	f8ad 4000 	strh.w	r4, [sp]
   b75d8:	f7ff fdb8 	bl	b714c <spark_function>
}
   b75dc:	b004      	add	sp, #16
   b75de:	bd10      	pop	{r4, pc}

000b75e0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b75e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b75e2:	230c      	movs	r3, #12
   b75e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b75e8:	6803      	ldr	r3, [r0, #0]
   b75ea:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b75ee:	7a03      	ldrb	r3, [r0, #8]
   b75f0:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b75f4:	6843      	ldr	r3, [r0, #4]
   b75f6:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b75f8:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b75fa:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b75fc:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7600:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b7602:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b7606:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b760a:	f7ff fdff 	bl	b720c <spark_cloud_disconnect>
}
   b760e:	b005      	add	sp, #20
   b7610:	f85d fb04 	ldr.w	pc, [sp], #4

000b7614 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7614:	680b      	ldr	r3, [r1, #0]
   b7616:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7618:	684b      	ldr	r3, [r1, #4]
   b761a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b761c:	b113      	cbz	r3, b7624 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b761e:	685a      	ldr	r2, [r3, #4]
   b7620:	3201      	adds	r2, #1
   b7622:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7624:	4770      	bx	lr

000b7626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7626:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7628:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b762a:	4668      	mov	r0, sp
   b762c:	460d      	mov	r5, r1
   b762e:	f7ff fff1 	bl	b7614 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7632:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7634:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7636:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7638:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b763a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b763c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b763e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b7640:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7642:	f7ff fef2 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7646:	b135      	cbz	r5, b7656 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7648:	1d28      	adds	r0, r5, #4
   b764a:	f7ff feee 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b764e:	2108      	movs	r1, #8
   b7650:	4628      	mov	r0, r5
   b7652:	f7fc fd24 	bl	b409e <_ZdlPvj>
        return p;
    }
   b7656:	4620      	mov	r0, r4
   b7658:	b003      	add	sp, #12
   b765a:	bd30      	pop	{r4, r5, pc}

000b765c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b765c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b765e:	b510      	push	{r4, lr}
      if (_M_empty())
   b7660:	b90a      	cbnz	r2, b7666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7662:	f001 fa05 	bl	b8a70 <_ZSt25__throw_bad_function_callv>
    }
   b7666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b766a:	68c3      	ldr	r3, [r0, #12]
   b766c:	4718      	bx	r3

000b766e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b766e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7670:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7672:	f100 0110 	add.w	r1, r0, #16
   b7676:	f7ff fff1 	bl	b765c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b767a:	bd08      	pop	{r3, pc}

000b767c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b767c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b767e:	b510      	push	{r4, lr}
      if (_M_empty())
   b7680:	b90a      	cbnz	r2, b7686 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7682:	f001 f9f5 	bl	b8a70 <_ZSt25__throw_bad_function_callv>
    }
   b7686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b768a:	68c3      	ldr	r3, [r0, #12]
   b768c:	4718      	bx	r3

000b768e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b768e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7690:	6800      	ldr	r0, [r0, #0]
   b7692:	f100 0110 	add.w	r1, r0, #16
   b7696:	f7ff fff1 	bl	b767c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b769a:	bd08      	pop	{r3, pc}

000b769c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b769c:	b538      	push	{r3, r4, r5, lr}
   b769e:	2300      	movs	r3, #0
   b76a0:	4604      	mov	r4, r0
   b76a2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b76a4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b76a6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b76a8:	f7fc fcf5 	bl	b4096 <_Znwj>
   b76ac:	b128      	cbz	r0, b76ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b76ae:	2301      	movs	r3, #1
   b76b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b76b4:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b76b6:	6003      	str	r3, [r0, #0]
   b76b8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b76ba:	6020      	str	r0, [r4, #0]
	}
   b76bc:	4620      	mov	r0, r4
   b76be:	bd38      	pop	{r3, r4, r5, pc}
   b76c0:	000b9dc0 	.word	0x000b9dc0

000b76c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b76c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b76c6:	2300      	movs	r3, #0
   b76c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b76ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b76cc:	4604      	mov	r4, r0
   b76ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b76d0:	b12b      	cbz	r3, b76de <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b76d2:	2202      	movs	r2, #2
   b76d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b76d6:	68eb      	ldr	r3, [r5, #12]
   b76d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b76da:	68ab      	ldr	r3, [r5, #8]
   b76dc:	60a3      	str	r3, [r4, #8]
    }
   b76de:	4620      	mov	r0, r4
   b76e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b76e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b76e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b76e6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b76e8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b76ea:	4668      	mov	r0, sp
   b76ec:	f7ff ff1a 	bl	b7524 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b76f0:	f04f 0302 	mov.w	r3, #2
   b76f4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b76f8:	2a00      	cmp	r2, #0
   b76fa:	d103      	bne.n	b7704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b76fc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7700:	2900      	cmp	r1, #0
   b7702:	d1f7      	bne.n	b76f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7704:	d125      	bne.n	b7752 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7706:	f104 050c 	add.w	r5, r4, #12
   b770a:	4669      	mov	r1, sp
   b770c:	4628      	mov	r0, r5
   b770e:	f7ff ff09 	bl	b7524 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7712:	f3bf 8f5b 	dmb	ish
   b7716:	2301      	movs	r3, #1
   b7718:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b771a:	2000      	movs	r0, #0
   b771c:	f104 0308 	add.w	r3, r4, #8
   b7720:	f3bf 8f5b 	dmb	ish
   b7724:	e853 6f00 	ldrex	r6, [r3]
   b7728:	e843 0200 	strex	r2, r0, [r3]
   b772c:	2a00      	cmp	r2, #0
   b772e:	d1f9      	bne.n	b7724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7730:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7734:	b16e      	cbz	r6, b7752 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7736:	f7ff fcb9 	bl	b70ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b773a:	b178      	cbz	r0, b775c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b773c:	4629      	mov	r1, r5
   b773e:	4630      	mov	r0, r6
   b7740:	f7ff ff8c 	bl	b765c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7744:	4630      	mov	r0, r6
   b7746:	f7fc fe67 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b774a:	2110      	movs	r1, #16
   b774c:	4630      	mov	r0, r6
   b774e:	f7fc fca6 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b7752:	4668      	mov	r0, sp
   b7754:	f7ff fef3 	bl	b753e <_ZN8particle5ErrorD1Ev>
    }
   b7758:	b009      	add	sp, #36	; 0x24
   b775a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b775c:	4631      	mov	r1, r6
   b775e:	a802      	add	r0, sp, #8
   b7760:	f7ff ffb0 	bl	b76c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7764:	68e0      	ldr	r0, [r4, #12]
   b7766:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b776a:	b108      	cbz	r0, b7770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b776c:	f001 fe60 	bl	b9430 <strdup>
        type_(type) {
   b7770:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7772:	2010      	movs	r0, #16
   b7774:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7778:	f7fc fc8d 	bl	b4096 <_Znwj>
   b777c:	4605      	mov	r5, r0
   b777e:	b1e8      	cbz	r0, b77bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7780:	2700      	movs	r7, #0
   b7782:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7784:	2018      	movs	r0, #24
   b7786:	f7fc fc86 	bl	b4096 <_Znwj>
   b778a:	4604      	mov	r4, r0
   b778c:	b188      	cbz	r0, b77b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b778e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7790:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7792:	a802      	add	r0, sp, #8
   b7794:	f7ff fe51 	bl	b743a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7798:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b779a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b779c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b779e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b77a0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b77a2:	a906      	add	r1, sp, #24
   b77a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b77a6:	60e3      	str	r3, [r4, #12]
   b77a8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b77ac:	9205      	str	r2, [sp, #20]
   b77ae:	f7ff feb9 	bl	b7524 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b77b2:	4b08      	ldr	r3, [pc, #32]	; (b77d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b77b4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b77b6:	4b08      	ldr	r3, [pc, #32]	; (b77d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b77b8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b77ba:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b77bc:	a806      	add	r0, sp, #24
   b77be:	f7ff febe 	bl	b753e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b77c2:	a802      	add	r0, sp, #8
   b77c4:	f7fc fe28 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b77c8:	2200      	movs	r2, #0
   b77ca:	4629      	mov	r1, r5
   b77cc:	4803      	ldr	r0, [pc, #12]	; (b77dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b77ce:	f7ff fc75 	bl	b70bc <application_thread_invoke>
   b77d2:	e7b7      	b.n	b7744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b77d4:	000b766f 	.word	0x000b766f
   b77d8:	000b78f1 	.word	0x000b78f1
   b77dc:	000b73db 	.word	0x000b73db

000b77e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b77e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77e4:	b08b      	sub	sp, #44	; 0x2c
   b77e6:	4605      	mov	r5, r0
   b77e8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b77ec:	460f      	mov	r7, r1
   b77ee:	4690      	mov	r8, r2
   b77f0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b77f2:	f7ff fcc3 	bl	b717c <spark_cloud_flag_connected>
   b77f6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b77f8:	4683      	mov	fp, r0
   b77fa:	bb38      	cbnz	r0, b784c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b77fc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7800:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7802:	a905      	add	r1, sp, #20
   b7804:	4630      	mov	r0, r6
   b7806:	f8ad 3018 	strh.w	r3, [sp, #24]
   b780a:	f7ff fe8b 	bl	b7524 <_ZN8particle5ErrorC1EOS0_>
   b780e:	2014      	movs	r0, #20
   b7810:	f7fc fc41 	bl	b4096 <_Znwj>
   b7814:	4604      	mov	r4, r0
   b7816:	b148      	cbz	r0, b782c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7818:	2302      	movs	r3, #2
   b781a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b781c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b781e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7822:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7824:	4631      	mov	r1, r6
   b7826:	300c      	adds	r0, #12
   b7828:	f7ff fe7c 	bl	b7524 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b782c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b782e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7830:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7834:	f7ff ff32 	bl	b769c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7838:	4630      	mov	r0, r6
   b783a:	f7ff fe80 	bl	b753e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b783e:	a805      	add	r0, sp, #20
   b7840:	f7ff fe7d 	bl	b753e <_ZN8particle5ErrorD1Ev>
}
   b7844:	4628      	mov	r0, r5
   b7846:	b00b      	add	sp, #44	; 0x2c
   b7848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b784c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b784e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7850:	2014      	movs	r0, #20
   b7852:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7856:	9307      	str	r3, [sp, #28]
   b7858:	f7fc fc1d 	bl	b4096 <_Znwj>
   b785c:	4601      	mov	r1, r0
   b785e:	b118      	cbz	r0, b7868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7860:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7864:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7866:	7044      	strb	r4, [r0, #1]
   b7868:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b786a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b786c:	f7ff ff16 	bl	b769c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7870:	4b1e      	ldr	r3, [pc, #120]	; (b78ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7872:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7874:	2008      	movs	r0, #8
   b7876:	f7fc fc0e 	bl	b4096 <_Znwj>
   b787a:	4604      	mov	r4, r0
   b787c:	b110      	cbz	r0, b7884 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b787e:	a903      	add	r1, sp, #12
   b7880:	f7ff fec8 	bl	b7614 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7884:	9600      	str	r6, [sp, #0]
   b7886:	fa5f f38a 	uxtb.w	r3, sl
   b788a:	464a      	mov	r2, r9
   b788c:	4641      	mov	r1, r8
   b788e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7890:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7892:	f7ff fc83 	bl	b719c <spark_send_event>
   b7896:	b9b8      	cbnz	r0, b78c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7898:	9b03      	ldr	r3, [sp, #12]
   b789a:	785b      	ldrb	r3, [r3, #1]
   b789c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b78a0:	b993      	cbnz	r3, b78c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b78a2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b78a6:	a905      	add	r1, sp, #20
   b78a8:	a803      	add	r0, sp, #12
   b78aa:	9205      	str	r2, [sp, #20]
   b78ac:	f8ad 3018 	strh.w	r3, [sp, #24]
   b78b0:	f7ff ff18 	bl	b76e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b78b4:	a805      	add	r0, sp, #20
   b78b6:	f7ff fe42 	bl	b753e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b78ba:	a805      	add	r0, sp, #20
   b78bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   b78be:	f7ff feb2 	bl	b7626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b78c2:	a806      	add	r0, sp, #24
   b78c4:	f7ff fdb1 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78c8:	a903      	add	r1, sp, #12
   b78ca:	a805      	add	r0, sp, #20
   b78cc:	f7ff fea2 	bl	b7614 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b78d0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b78d2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b78d4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b78d6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b78d8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b78da:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b78dc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b78de:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b78e0:	f7ff fda3 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78e4:	a804      	add	r0, sp, #16
   b78e6:	f7ff fda0 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b78ea:	e7ab      	b.n	b7844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b78ec:	000b796d 	.word	0x000b796d

000b78f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b78f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b78f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78f4:	4605      	mov	r5, r0
	switch (__op)
   b78f6:	d103      	bne.n	b7900 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b78f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b78fa:	6003      	str	r3, [r0, #0]
      }
   b78fc:	2000      	movs	r0, #0
   b78fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7900:	2a02      	cmp	r2, #2
   b7902:	d010      	beq.n	b7926 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7904:	2a03      	cmp	r2, #3
   b7906:	d1f9      	bne.n	b78fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7908:	6804      	ldr	r4, [r0, #0]
   b790a:	2c00      	cmp	r4, #0
   b790c:	d0f6      	beq.n	b78fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b790e:	f104 0010 	add.w	r0, r4, #16
   b7912:	f7ff fe14 	bl	b753e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7916:	4620      	mov	r0, r4
   b7918:	f7fc fd7e 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b791c:	2118      	movs	r1, #24
   b791e:	4620      	mov	r0, r4
   b7920:	f7fc fbbd 	bl	b409e <_ZdlPvj>
   b7924:	e7ea      	b.n	b78fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7926:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7928:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b792a:	f7fc fbb4 	bl	b4096 <_Znwj>
   b792e:	4604      	mov	r4, r0
   b7930:	b150      	cbz	r0, b7948 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b7932:	4631      	mov	r1, r6
   b7934:	f7ff fec6 	bl	b76c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7938:	6930      	ldr	r0, [r6, #16]
   b793a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b793e:	b108      	cbz	r0, b7944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7940:	f001 fd76 	bl	b9430 <strdup>
        type_(type) {
   b7944:	6120      	str	r0, [r4, #16]
   b7946:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7948:	602c      	str	r4, [r5, #0]
	}
   b794a:	e7d7      	b.n	b78fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b794c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b794c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b794e:	2300      	movs	r3, #0
   b7950:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7952:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7954:	4604      	mov	r4, r0
   b7956:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7958:	b12b      	cbz	r3, b7966 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b795a:	2202      	movs	r2, #2
   b795c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b795e:	68eb      	ldr	r3, [r5, #12]
   b7960:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7962:	68ab      	ldr	r3, [r5, #8]
   b7964:	60a3      	str	r3, [r4, #8]
    }
   b7966:	4620      	mov	r0, r4
   b7968:	bd38      	pop	{r3, r4, r5, pc}
	...

000b796c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b796c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b796e:	b089      	sub	sp, #36	; 0x24
   b7970:	4604      	mov	r4, r0
   b7972:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7974:	a801      	add	r0, sp, #4
   b7976:	4611      	mov	r1, r2
   b7978:	f7ff fe55 	bl	b7626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b797c:	b1a4      	cbz	r4, b79a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b797e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7980:	b11d      	cbz	r5, b798a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7982:	4628      	mov	r0, r5
   b7984:	f001 fd54 	bl	b9430 <strdup>
   b7988:	4605      	mov	r5, r0
   b798a:	a801      	add	r0, sp, #4
   b798c:	a903      	add	r1, sp, #12
        type_(type) {
   b798e:	9503      	str	r5, [sp, #12]
   b7990:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7994:	f7ff fea6 	bl	b76e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7998:	a803      	add	r0, sp, #12
   b799a:	f7ff fdd0 	bl	b753e <_ZN8particle5ErrorD1Ev>
   b799e:	a802      	add	r0, sp, #8
   b79a0:	f7ff fd43 	bl	b742a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79a4:	b009      	add	sp, #36	; 0x24
   b79a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b79a8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b79aa:	2301      	movs	r3, #1
   b79ac:	e8d5 2f4f 	ldrexb	r2, [r5]
   b79b0:	2a00      	cmp	r2, #0
   b79b2:	d103      	bne.n	b79bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b79b4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b79b8:	2900      	cmp	r1, #0
   b79ba:	d1f7      	bne.n	b79ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b79bc:	d1ef      	bne.n	b799e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b79be:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b79c0:	f3bf 8f5b 	dmb	ish
   b79c4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b79c6:	1d2b      	adds	r3, r5, #4
   b79c8:	f3bf 8f5b 	dmb	ish
   b79cc:	e853 6f00 	ldrex	r6, [r3]
   b79d0:	e843 4200 	strex	r2, r4, [r3]
   b79d4:	2a00      	cmp	r2, #0
   b79d6:	d1f9      	bne.n	b79cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b79d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b79dc:	2e00      	cmp	r6, #0
   b79de:	d0de      	beq.n	b799e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b79e0:	4620      	mov	r0, r4
   b79e2:	f7ff fb63 	bl	b70ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b79e6:	4607      	mov	r7, r0
   b79e8:	b160      	cbz	r0, b7a04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b79ea:	f105 010c 	add.w	r1, r5, #12
   b79ee:	4630      	mov	r0, r6
   b79f0:	f7ff fe44 	bl	b767c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b79f4:	4630      	mov	r0, r6
   b79f6:	f7fc fd0f 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b79fa:	2110      	movs	r1, #16
   b79fc:	4630      	mov	r0, r6
   b79fe:	f7fc fb4e 	bl	b409e <_ZdlPvj>
   b7a02:	e7cc      	b.n	b799e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7a04:	4631      	mov	r1, r6
   b7a06:	a803      	add	r0, sp, #12
   b7a08:	f7ff ffa0 	bl	b794c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7a0c:	7b2b      	ldrb	r3, [r5, #12]
   b7a0e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7a12:	2010      	movs	r0, #16
   b7a14:	f7fc fb3f 	bl	b4096 <_Znwj>
   b7a18:	4605      	mov	r5, r0
   b7a1a:	b1d0      	cbz	r0, b7a52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7a1c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a1e:	2014      	movs	r0, #20
   b7a20:	f7fc fb39 	bl	b4096 <_Znwj>
   b7a24:	4604      	mov	r4, r0
   b7a26:	b178      	cbz	r0, b7a48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7a28:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7a2a:	4601      	mov	r1, r0
   b7a2c:	a803      	add	r0, sp, #12
   b7a2e:	f7ff fd04 	bl	b743a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a32:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7a34:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a36:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a38:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7a3a:	9205      	str	r2, [sp, #20]
   b7a3c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a3e:	60e3      	str	r3, [r4, #12]
   b7a40:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7a44:	9206      	str	r2, [sp, #24]
   b7a46:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7a48:	4b06      	ldr	r3, [pc, #24]	; (b7a64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7a4a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7a4c:	4b06      	ldr	r3, [pc, #24]	; (b7a68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a4e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7a50:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7a52:	a803      	add	r0, sp, #12
   b7a54:	f7fc fce0 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7a58:	2200      	movs	r2, #0
   b7a5a:	4629      	mov	r1, r5
   b7a5c:	4803      	ldr	r0, [pc, #12]	; (b7a6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7a5e:	f7ff fb2d 	bl	b70bc <application_thread_invoke>
   b7a62:	e7c7      	b.n	b79f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7a64:	000b768f 	.word	0x000b768f
   b7a68:	000b7a71 	.word	0x000b7a71
   b7a6c:	000b73db 	.word	0x000b73db

000b7a70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7a70:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7a72:	b570      	push	{r4, r5, r6, lr}
   b7a74:	4604      	mov	r4, r0
	switch (__op)
   b7a76:	d103      	bne.n	b7a80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7a78:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7a7a:	6003      	str	r3, [r0, #0]
      }
   b7a7c:	2000      	movs	r0, #0
   b7a7e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7a80:	2a02      	cmp	r2, #2
   b7a82:	d00c      	beq.n	b7a9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7a84:	2a03      	cmp	r2, #3
   b7a86:	d1f9      	bne.n	b7a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7a88:	6804      	ldr	r4, [r0, #0]
   b7a8a:	2c00      	cmp	r4, #0
   b7a8c:	d0f6      	beq.n	b7a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7a8e:	4620      	mov	r0, r4
   b7a90:	f7fc fcc2 	bl	b4418 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7a94:	2114      	movs	r1, #20
   b7a96:	4620      	mov	r0, r4
   b7a98:	f7fc fb01 	bl	b409e <_ZdlPvj>
   b7a9c:	e7ee      	b.n	b7a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7a9e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7aa0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7aa2:	f7fc faf8 	bl	b4096 <_Znwj>
   b7aa6:	4605      	mov	r5, r0
   b7aa8:	b120      	cbz	r0, b7ab4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7aaa:	4631      	mov	r1, r6
   b7aac:	f7ff ff4e 	bl	b794c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7ab0:	7c33      	ldrb	r3, [r6, #16]
   b7ab2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7ab4:	6025      	str	r5, [r4, #0]
	}
   b7ab6:	e7e1      	b.n	b7a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7ab8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ab8:	2200      	movs	r2, #0
   b7aba:	6840      	ldr	r0, [r0, #4]
   b7abc:	4611      	mov	r1, r2
   b7abe:	f7ff bbe5 	b.w	b728c <network_listening>

000b7ac2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ac2:	2200      	movs	r2, #0
   b7ac4:	6840      	ldr	r0, [r0, #4]
   b7ac6:	4611      	mov	r1, r2
   b7ac8:	f7ff bbf0 	b.w	b72ac <network_get_listen_timeout>

000b7acc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7acc:	6840      	ldr	r0, [r0, #4]
   b7ace:	2200      	movs	r2, #0
   b7ad0:	f7ff bbe4 	b.w	b729c <network_set_listen_timeout>

000b7ad4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ad4:	6840      	ldr	r0, [r0, #4]
   b7ad6:	2200      	movs	r2, #0
   b7ad8:	f081 0101 	eor.w	r1, r1, #1
   b7adc:	f7ff bbce 	b.w	b727c <network_listen>

000b7ae0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7ae0:	2300      	movs	r3, #0
   b7ae2:	6840      	ldr	r0, [r0, #4]
   b7ae4:	461a      	mov	r2, r3
   b7ae6:	4619      	mov	r1, r3
   b7ae8:	f7ff bbc0 	b.w	b726c <network_off>

000b7aec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7aec:	2300      	movs	r3, #0
   b7aee:	6840      	ldr	r0, [r0, #4]
   b7af0:	461a      	mov	r2, r3
   b7af2:	4619      	mov	r1, r3
   b7af4:	f7ff bbb2 	b.w	b725c <network_on>

000b7af8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7af8:	2200      	movs	r2, #0
   b7afa:	6840      	ldr	r0, [r0, #4]
   b7afc:	4611      	mov	r1, r2
   b7afe:	f7ff bba5 	b.w	b724c <network_ready>

000b7b02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7b02:	2200      	movs	r2, #0
   b7b04:	6840      	ldr	r0, [r0, #4]
   b7b06:	4611      	mov	r1, r2
   b7b08:	f7ff bb90 	b.w	b722c <network_connecting>

000b7b0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7b0c:	6840      	ldr	r0, [r0, #4]
   b7b0e:	2200      	movs	r2, #0
   b7b10:	2102      	movs	r1, #2
   b7b12:	f7ff bb93 	b.w	b723c <network_disconnect>

000b7b16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7b16:	2300      	movs	r3, #0
   b7b18:	6840      	ldr	r0, [r0, #4]
   b7b1a:	461a      	mov	r2, r3
   b7b1c:	f7ff bb7e 	b.w	b721c <network_connect>

000b7b20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7b20:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7b22:	2203      	movs	r2, #3
   b7b24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7b26:	4a02      	ldr	r2, [pc, #8]	; (b7b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7b28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7b2a:	4770      	bx	lr
   b7b2c:	2003e684 	.word	0x2003e684
   b7b30:	000b9ddc 	.word	0x000b9ddc

000b7b34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7b34:	4770      	bx	lr

000b7b36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b38:	4606      	mov	r6, r0
   b7b3a:	4615      	mov	r5, r2
   b7b3c:	460c      	mov	r4, r1
   b7b3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7b40:	42bc      	cmp	r4, r7
   b7b42:	d006      	beq.n	b7b52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7b44:	6833      	ldr	r3, [r6, #0]
   b7b46:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b4a:	689b      	ldr	r3, [r3, #8]
   b7b4c:	4630      	mov	r0, r6
   b7b4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7b50:	e7f6      	b.n	b7b40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7b52:	4628      	mov	r0, r5
   b7b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7b56:	7c00      	ldrb	r0, [r0, #16]
   b7b58:	2200      	movs	r2, #0
   b7b5a:	f7ff b97d 	b.w	b6e58 <hal_i2c_write>

000b7b5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7b5e:	7c00      	ldrb	r0, [r0, #16]
   b7b60:	2100      	movs	r1, #0
   b7b62:	f7ff b981 	b.w	b6e68 <hal_i2c_available>

000b7b66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7b66:	7c00      	ldrb	r0, [r0, #16]
   b7b68:	2100      	movs	r1, #0
   b7b6a:	f7ff b985 	b.w	b6e78 <hal_i2c_read>

000b7b6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7b6e:	7c00      	ldrb	r0, [r0, #16]
   b7b70:	2100      	movs	r1, #0
   b7b72:	f7ff b989 	b.w	b6e88 <hal_i2c_peek>

000b7b76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7b76:	7c00      	ldrb	r0, [r0, #16]
   b7b78:	2100      	movs	r1, #0
   b7b7a:	f7ff b98d 	b.w	b6e98 <hal_i2c_flush>

000b7b7e <_ZN7TwoWireD0Ev>:
   b7b7e:	b510      	push	{r4, lr}
   b7b80:	2114      	movs	r1, #20
   b7b82:	4604      	mov	r4, r0
   b7b84:	f7fc fa8b 	bl	b409e <_ZdlPvj>
   b7b88:	4620      	mov	r0, r4
   b7b8a:	bd10      	pop	{r4, pc}

000b7b8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7b8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b92:	4604      	mov	r4, r0
   b7b94:	4608      	mov	r0, r1
   b7b96:	2100      	movs	r1, #0
   b7b98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b9c:	4b03      	ldr	r3, [pc, #12]	; (b7bac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7b9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7ba0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7ba2:	4611      	mov	r1, r2
   b7ba4:	f7ff f988 	bl	b6eb8 <hal_i2c_init>
}
   b7ba8:	4620      	mov	r0, r4
   b7baa:	bd10      	pop	{r4, pc}
   b7bac:	000b9e18 	.word	0x000b9e18

000b7bb0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7bb0:	2300      	movs	r3, #0
   b7bb2:	7c00      	ldrb	r0, [r0, #16]
   b7bb4:	461a      	mov	r2, r3
   b7bb6:	4619      	mov	r1, r3
   b7bb8:	f7ff b936 	b.w	b6e28 <hal_i2c_begin>

000b7bbc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7bbe:	2200      	movs	r2, #0
   b7bc0:	2314      	movs	r3, #20
   b7bc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7bc6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7bca:	780b      	ldrb	r3, [r1, #0]
   b7bcc:	f88d 3008 	strb.w	r3, [sp, #8]
   b7bd0:	684b      	ldr	r3, [r1, #4]
   b7bd2:	9303      	str	r3, [sp, #12]
   b7bd4:	68cb      	ldr	r3, [r1, #12]
   b7bd6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7bd8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7bda:	7a0b      	ldrb	r3, [r1, #8]
   b7bdc:	9305      	str	r3, [sp, #20]
   b7bde:	a901      	add	r1, sp, #4
   b7be0:	f7ff f982 	bl	b6ee8 <hal_i2c_request_ex>
}
   b7be4:	b007      	add	sp, #28
   b7be6:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bea <_ZN7TwoWire11requestFromEhjh>:
{
   b7bea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7bec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7bee:	f88d 1000 	strb.w	r1, [sp]
   b7bf2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7bf6:	9103      	str	r1, [sp, #12]
   b7bf8:	bf18      	it	ne
   b7bfa:	2301      	movne	r3, #1
   b7bfc:	4669      	mov	r1, sp
    size_ = size;
   b7bfe:	9201      	str	r2, [sp, #4]
   b7c00:	f88d 3008 	strb.w	r3, [sp, #8]
   b7c04:	f7ff ffda 	bl	b7bbc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7c08:	b005      	add	sp, #20
   b7c0a:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c0e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7c0e:	2301      	movs	r3, #1
   b7c10:	f7ff bfeb 	b.w	b7bea <_ZN7TwoWire11requestFromEhjh>

000b7c14 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7c14:	7c00      	ldrb	r0, [r0, #16]
   b7c16:	2200      	movs	r2, #0
   b7c18:	f7ff b90e 	b.w	b6e38 <hal_i2c_begin_transmission>

000b7c1c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7c1c:	b2c9      	uxtb	r1, r1
   b7c1e:	f7ff bff9 	b.w	b7c14 <_ZN7TwoWire17beginTransmissionEh>

000b7c22 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7c22:	7c00      	ldrb	r0, [r0, #16]
   b7c24:	2200      	movs	r2, #0
   b7c26:	f7ff b90f 	b.w	b6e48 <hal_i2c_end_transmission>

000b7c2a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7c2a:	2101      	movs	r1, #1
   b7c2c:	f7ff bff9 	b.w	b7c22 <_ZN7TwoWire15endTransmissionEh>

000b7c30 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7c30:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7c32:	2100      	movs	r1, #0
   b7c34:	7c00      	ldrb	r0, [r0, #16]
   b7c36:	f7ff f947 	bl	b6ec8 <hal_i2c_lock>
}
   b7c3a:	fab0 f080 	clz	r0, r0
   b7c3e:	0940      	lsrs	r0, r0, #5
   b7c40:	bd08      	pop	{r3, pc}

000b7c42 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7c42:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7c44:	2100      	movs	r1, #0
   b7c46:	7c00      	ldrb	r0, [r0, #16]
   b7c48:	f7ff f946 	bl	b6ed8 <hal_i2c_unlock>
}
   b7c4c:	fab0 f080 	clz	r0, r0
   b7c50:	0940      	lsrs	r0, r0, #5
   b7c52:	bd08      	pop	{r3, pc}

000b7c54 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b7c54:	4700      	bx	r0
	...

000b7c58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7c58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b7c5c:	2400      	movs	r4, #0
{
   b7c5e:	461d      	mov	r5, r3
   b7c60:	460f      	mov	r7, r1
   b7c62:	4690      	mov	r8, r2
   b7c64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b7c66:	f7ff f8cf 	bl	b6e08 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b7c6a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7c6c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b7c70:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7c74:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b7c78:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b7c7c:	bfa2      	ittt	ge
   b7c7e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b7c82:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b7c86:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7c88:	4907      	ldr	r1, [pc, #28]	; (b7ca8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b7c8a:	9400      	str	r4, [sp, #0]
   b7c8c:	4643      	mov	r3, r8
   b7c8e:	463a      	mov	r2, r7
   b7c90:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b7c92:	bfa8      	it	ge
   b7c94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7c98:	f7ff f8ae 	bl	b6df8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b7c9c:	fab0 f080 	clz	r0, r0
   b7ca0:	0940      	lsrs	r0, r0, #5
   b7ca2:	b004      	add	sp, #16
   b7ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7ca8:	000b7c55 	.word	0x000b7c55

000b7cac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7cac:	4770      	bx	lr

000b7cae <_ZN9IPAddressD0Ev>:
   b7cae:	b510      	push	{r4, lr}
   b7cb0:	2118      	movs	r1, #24
   b7cb2:	4604      	mov	r4, r0
   b7cb4:	f7fc f9f3 	bl	b409e <_ZdlPvj>
   b7cb8:	4620      	mov	r0, r4
   b7cba:	bd10      	pop	{r4, pc}

000b7cbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7cbe:	7d03      	ldrb	r3, [r0, #20]
   b7cc0:	2b06      	cmp	r3, #6
{
   b7cc2:	b08d      	sub	sp, #52	; 0x34
   b7cc4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7cc6:	f100 0704 	add.w	r7, r0, #4
   b7cca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7cce:	d012      	beq.n	b7cf6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7cd0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7cd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7cd8:	220a      	movs	r2, #10
   b7cda:	4630      	mov	r0, r6
   b7cdc:	f000 f943 	bl	b7f66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7ce0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7ce2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7ce4:	d019      	beq.n	b7d1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7ce6:	2c00      	cmp	r4, #0
   b7ce8:	d0f4      	beq.n	b7cd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7cea:	212e      	movs	r1, #46	; 0x2e
   b7cec:	4630      	mov	r0, r6
   b7cee:	f000 f937 	bl	b7f60 <_ZN5Print5printEc>
   b7cf2:	4404      	add	r4, r0
   b7cf4:	e7ee      	b.n	b7cd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7cf6:	232f      	movs	r3, #47	; 0x2f
   b7cf8:	466a      	mov	r2, sp
   b7cfa:	4639      	mov	r1, r7
   b7cfc:	200a      	movs	r0, #10
		buf[0] = 0;
   b7cfe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d02:	f7ff f8f9 	bl	b6ef8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7d06:	4668      	mov	r0, sp
   b7d08:	f001 fbaf 	bl	b946a <strlen>
   b7d0c:	6833      	ldr	r3, [r6, #0]
   b7d0e:	4602      	mov	r2, r0
   b7d10:	68db      	ldr	r3, [r3, #12]
   b7d12:	4669      	mov	r1, sp
   b7d14:	4630      	mov	r0, r6
   b7d16:	4798      	blx	r3
   b7d18:	4604      	mov	r4, r0
    }
    return n;
}
   b7d1a:	4620      	mov	r0, r4
   b7d1c:	b00d      	add	sp, #52	; 0x34
   b7d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7d20:	b510      	push	{r4, lr}
   b7d22:	4b05      	ldr	r3, [pc, #20]	; (b7d38 <_ZN9IPAddressC1Ev+0x18>)
   b7d24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7d26:	2211      	movs	r2, #17
   b7d28:	f840 3b04 	str.w	r3, [r0], #4
   b7d2c:	2100      	movs	r1, #0
   b7d2e:	f001 fb37 	bl	b93a0 <memset>
}
   b7d32:	4620      	mov	r0, r4
   b7d34:	bd10      	pop	{r4, pc}
   b7d36:	bf00      	nop
   b7d38:	000b9e40 	.word	0x000b9e40

000b7d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7d3c:	4603      	mov	r3, r0
   b7d3e:	4a07      	ldr	r2, [pc, #28]	; (b7d5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7d40:	b510      	push	{r4, lr}
   b7d42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7d46:	f101 0210 	add.w	r2, r1, #16
   b7d4a:	f851 4b04 	ldr.w	r4, [r1], #4
   b7d4e:	f843 4b04 	str.w	r4, [r3], #4
   b7d52:	4291      	cmp	r1, r2
   b7d54:	d1f9      	bne.n	b7d4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7d56:	780a      	ldrb	r2, [r1, #0]
   b7d58:	701a      	strb	r2, [r3, #0]
}
   b7d5a:	bd10      	pop	{r4, pc}
   b7d5c:	000b9e40 	.word	0x000b9e40

000b7d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7d72:	2304      	movs	r3, #4
   b7d74:	6041      	str	r1, [r0, #4]
   b7d76:	7503      	strb	r3, [r0, #20]
}
   b7d78:	bd10      	pop	{r4, pc}
	...

000b7d7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7d7c:	b507      	push	{r0, r1, r2, lr}
   b7d7e:	4b06      	ldr	r3, [pc, #24]	; (b7d98 <_ZN9IPAddressC1EPKh+0x1c>)
   b7d80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7d82:	78cb      	ldrb	r3, [r1, #3]
   b7d84:	9300      	str	r3, [sp, #0]
   b7d86:	788b      	ldrb	r3, [r1, #2]
   b7d88:	784a      	ldrb	r2, [r1, #1]
   b7d8a:	7809      	ldrb	r1, [r1, #0]
   b7d8c:	f7ff ffe8 	bl	b7d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7d90:	b003      	add	sp, #12
   b7d92:	f85d fb04 	ldr.w	pc, [sp], #4
   b7d96:	bf00      	nop
   b7d98:	000b9e40 	.word	0x000b9e40

000b7d9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7d9c:	4b01      	ldr	r3, [pc, #4]	; (b7da4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7d9e:	4a02      	ldr	r2, [pc, #8]	; (b7da8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7da0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7da2:	4770      	bx	lr
   b7da4:	2003e68c 	.word	0x2003e68c
   b7da8:	000b9e4c 	.word	0x000b9e4c

000b7dac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7dac:	2300      	movs	r3, #0
   b7dae:	6840      	ldr	r0, [r0, #4]
   b7db0:	461a      	mov	r2, r3
   b7db2:	f7ff ba33 	b.w	b721c <network_connect>

000b7db6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7db6:	6840      	ldr	r0, [r0, #4]
   b7db8:	2200      	movs	r2, #0
   b7dba:	2102      	movs	r1, #2
   b7dbc:	f7ff ba3e 	b.w	b723c <network_disconnect>

000b7dc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7dc0:	2200      	movs	r2, #0
   b7dc2:	6840      	ldr	r0, [r0, #4]
   b7dc4:	4611      	mov	r1, r2
   b7dc6:	f7ff ba31 	b.w	b722c <network_connecting>

000b7dca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7dca:	2200      	movs	r2, #0
   b7dcc:	6840      	ldr	r0, [r0, #4]
   b7dce:	4611      	mov	r1, r2
   b7dd0:	f7ff ba3c 	b.w	b724c <network_ready>

000b7dd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7dd4:	2300      	movs	r3, #0
   b7dd6:	6840      	ldr	r0, [r0, #4]
   b7dd8:	461a      	mov	r2, r3
   b7dda:	4619      	mov	r1, r3
   b7ddc:	f7ff ba3e 	b.w	b725c <network_on>

000b7de0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7de0:	2300      	movs	r3, #0
   b7de2:	6840      	ldr	r0, [r0, #4]
   b7de4:	461a      	mov	r2, r3
   b7de6:	4619      	mov	r1, r3
   b7de8:	f7ff ba40 	b.w	b726c <network_off>

000b7dec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7dec:	6840      	ldr	r0, [r0, #4]
   b7dee:	2100      	movs	r1, #0
   b7df0:	f7ff ba64 	b.w	b72bc <network_is_on>

000b7df4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7df4:	6840      	ldr	r0, [r0, #4]
   b7df6:	2100      	movs	r1, #0
   b7df8:	f7ff ba68 	b.w	b72cc <network_is_off>

000b7dfc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7dfc:	6840      	ldr	r0, [r0, #4]
   b7dfe:	2200      	movs	r2, #0
   b7e00:	f081 0101 	eor.w	r1, r1, #1
   b7e04:	f7ff ba3a 	b.w	b727c <network_listen>

000b7e08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7e08:	6840      	ldr	r0, [r0, #4]
   b7e0a:	2200      	movs	r2, #0
   b7e0c:	f7ff ba46 	b.w	b729c <network_set_listen_timeout>

000b7e10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7e10:	2200      	movs	r2, #0
   b7e12:	6840      	ldr	r0, [r0, #4]
   b7e14:	4611      	mov	r1, r2
   b7e16:	f7ff ba49 	b.w	b72ac <network_get_listen_timeout>

000b7e1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7e1a:	2200      	movs	r2, #0
   b7e1c:	6840      	ldr	r0, [r0, #4]
   b7e1e:	4611      	mov	r1, r2
   b7e20:	f7ff ba34 	b.w	b728c <network_listening>

000b7e24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e28:	b095      	sub	sp, #84	; 0x54
   b7e2a:	4614      	mov	r4, r2
   b7e2c:	460d      	mov	r5, r1
   b7e2e:	4607      	mov	r7, r0
    IPAddress addr;
   b7e30:	f7ff ff76 	bl	b7d20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7e34:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7e36:	221c      	movs	r2, #28
   b7e38:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7e3a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7e3c:	f001 fab0 	bl	b93a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7e40:	2340      	movs	r3, #64	; 0x40
   b7e42:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7e44:	4620      	mov	r0, r4
   b7e46:	466b      	mov	r3, sp
   b7e48:	aa0c      	add	r2, sp, #48	; 0x30
   b7e4a:	2100      	movs	r1, #0
   b7e4c:	f7ff f864 	bl	b6f18 <netdb_getaddrinfo>
    if (!r) {
   b7e50:	4604      	mov	r4, r0
   b7e52:	2800      	cmp	r0, #0
   b7e54:	d14b      	bne.n	b7eee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7e56:	4602      	mov	r2, r0
   b7e58:	2101      	movs	r1, #1
   b7e5a:	6868      	ldr	r0, [r5, #4]
   b7e5c:	f7ff f9f6 	bl	b724c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e60:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7e62:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e64:	4622      	mov	r2, r4
   b7e66:	6868      	ldr	r0, [r5, #4]
   b7e68:	f7ff f9f0 	bl	b724c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e6c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e6e:	4681      	mov	r9, r0
        bool ok = false;
   b7e70:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e72:	2e00      	cmp	r6, #0
   b7e74:	d03b      	beq.n	b7eee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7e76:	2900      	cmp	r1, #0
   b7e78:	d139      	bne.n	b7eee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7e7a:	6873      	ldr	r3, [r6, #4]
   b7e7c:	2b02      	cmp	r3, #2
   b7e7e:	d003      	beq.n	b7e88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7e80:	2b0a      	cmp	r3, #10
   b7e82:	d011      	beq.n	b7ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e84:	69f6      	ldr	r6, [r6, #28]
   b7e86:	e7f4      	b.n	b7e72 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7e88:	f1b8 0f00 	cmp.w	r8, #0
   b7e8c:	d0fa      	beq.n	b7e84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7e8e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7e90:	a806      	add	r0, sp, #24
   b7e92:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7e94:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7e96:	f7ff ff71 	bl	b7d7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e9c:	1d3c      	adds	r4, r7, #4
   b7e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ea0:	682b      	ldr	r3, [r5, #0]
   b7ea2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7ea4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7ea6:	e7ed      	b.n	b7e84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7ea8:	f1b9 0f00 	cmp.w	r9, #0
   b7eac:	d0ea      	beq.n	b7e84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7eae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7eb0:	2210      	movs	r2, #16
   b7eb2:	a801      	add	r0, sp, #4
   b7eb4:	f001 fa74 	bl	b93a0 <memset>
                    a.v = 6;
   b7eb8:	2306      	movs	r3, #6
   b7eba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7ebe:	ad01      	add	r5, sp, #4
   b7ec0:	f104 0308 	add.w	r3, r4, #8
   b7ec4:	3418      	adds	r4, #24
   b7ec6:	6818      	ldr	r0, [r3, #0]
   b7ec8:	6859      	ldr	r1, [r3, #4]
   b7eca:	462a      	mov	r2, r5
   b7ecc:	c203      	stmia	r2!, {r0, r1}
   b7ece:	3308      	adds	r3, #8
   b7ed0:	42a3      	cmp	r3, r4
   b7ed2:	4615      	mov	r5, r2
   b7ed4:	d1f7      	bne.n	b7ec6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7ed6:	a901      	add	r1, sp, #4
   b7ed8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7eda:	ad07      	add	r5, sp, #28
   b7edc:	f7ff ff2e 	bl	b7d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7ee2:	1d3c      	adds	r4, r7, #4
   b7ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ee6:	682b      	ldr	r3, [r5, #0]
   b7ee8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7eea:	4649      	mov	r1, r9
   b7eec:	e7ca      	b.n	b7e84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7eee:	9800      	ldr	r0, [sp, #0]
   b7ef0:	f7ff f80a 	bl	b6f08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7ef4:	4638      	mov	r0, r7
   b7ef6:	b015      	add	sp, #84	; 0x54
   b7ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7efc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7efc:	4b02      	ldr	r3, [pc, #8]	; (b7f08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7efe:	4a03      	ldr	r2, [pc, #12]	; (b7f0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7f00:	601a      	str	r2, [r3, #0]
   b7f02:	2200      	movs	r2, #0
   b7f04:	605a      	str	r2, [r3, #4]

} // spark
   b7f06:	4770      	bx	lr
   b7f08:	2003e690 	.word	0x2003e690
   b7f0c:	000b9e58 	.word	0x000b9e58

000b7f10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f12:	4606      	mov	r6, r0
   b7f14:	460d      	mov	r5, r1
  size_t n = 0;
   b7f16:	188f      	adds	r7, r1, r2
   b7f18:	2400      	movs	r4, #0
  while (size--) {
   b7f1a:	42bd      	cmp	r5, r7
   b7f1c:	d00c      	beq.n	b7f38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7f1e:	6833      	ldr	r3, [r6, #0]
   b7f20:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7f24:	689b      	ldr	r3, [r3, #8]
   b7f26:	4630      	mov	r0, r6
   b7f28:	4798      	blx	r3
     if (chunk>=0)
   b7f2a:	1e03      	subs	r3, r0, #0
   b7f2c:	db01      	blt.n	b7f32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7f2e:	441c      	add	r4, r3
  while (size--) {
   b7f30:	e7f3      	b.n	b7f1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7f32:	2c00      	cmp	r4, #0
   b7f34:	bf08      	it	eq
   b7f36:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7f38:	4620      	mov	r0, r4
   b7f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f3c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7f3c:	b513      	push	{r0, r1, r4, lr}
   b7f3e:	4604      	mov	r4, r0
    }
   b7f40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7f42:	b159      	cbz	r1, b7f5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7f44:	9101      	str	r1, [sp, #4]
   b7f46:	f001 fa90 	bl	b946a <strlen>
   b7f4a:	6823      	ldr	r3, [r4, #0]
   b7f4c:	9901      	ldr	r1, [sp, #4]
   b7f4e:	68db      	ldr	r3, [r3, #12]
   b7f50:	4602      	mov	r2, r0
   b7f52:	4620      	mov	r0, r4
    }
   b7f54:	b002      	add	sp, #8
   b7f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7f5a:	4718      	bx	r3
    }
   b7f5c:	b002      	add	sp, #8
   b7f5e:	bd10      	pop	{r4, pc}

000b7f60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7f60:	6803      	ldr	r3, [r0, #0]
   b7f62:	689b      	ldr	r3, [r3, #8]
   b7f64:	4718      	bx	r3

000b7f66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7f66:	b530      	push	{r4, r5, lr}
   b7f68:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7f6a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7f6c:	2a01      	cmp	r2, #1
  *str = '\0';
   b7f6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7f72:	bf98      	it	ls
   b7f74:	220a      	movls	r2, #10
   b7f76:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7f78:	460d      	mov	r5, r1
   b7f7a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7f7e:	fb01 5312 	mls	r3, r1, r2, r5
   b7f82:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f86:	2b09      	cmp	r3, #9
   b7f88:	bf94      	ite	ls
   b7f8a:	3330      	addls	r3, #48	; 0x30
   b7f8c:	3337      	addhi	r3, #55	; 0x37
   b7f8e:	b2db      	uxtb	r3, r3
  } while(n);
   b7f90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f92:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7f96:	d9ef      	bls.n	b7f78 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7f98:	4621      	mov	r1, r4
   b7f9a:	f7ff ffcf 	bl	b7f3c <_ZN5Print5writeEPKc>
}
   b7f9e:	b00b      	add	sp, #44	; 0x2c
   b7fa0:	bd30      	pop	{r4, r5, pc}
	...

000b7fa4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7fa4:	4b01      	ldr	r3, [pc, #4]	; (b7fac <_GLOBAL__sub_I_RGB+0x8>)
   b7fa6:	2200      	movs	r2, #0
   b7fa8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7faa:	4770      	bx	lr
   b7fac:	2003e698 	.word	0x2003e698

000b7fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7fb0:	b510      	push	{r4, lr}
   b7fb2:	4604      	mov	r4, r0
   b7fb4:	4608      	mov	r0, r1
{
    _spi = spi;
   b7fb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7fb8:	f7fe ffb6 	bl	b6f28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7fbc:	2300      	movs	r3, #0
   b7fbe:	6063      	str	r3, [r4, #4]
}
   b7fc0:	4620      	mov	r0, r4
   b7fc2:	bd10      	pop	{r4, pc}

000b7fc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7fc4:	b510      	push	{r4, lr}
   b7fc6:	4604      	mov	r4, r0
{
	free(buffer);
   b7fc8:	6800      	ldr	r0, [r0, #0]
   b7fca:	f7ff f98f 	bl	b72ec <free>
}
   b7fce:	4620      	mov	r0, r4
   b7fd0:	bd10      	pop	{r4, pc}

000b7fd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7fd2:	b510      	push	{r4, lr}
   b7fd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7fd6:	6800      	ldr	r0, [r0, #0]
   b7fd8:	b108      	cbz	r0, b7fde <_ZN6String10invalidateEv+0xc>
   b7fda:	f7ff f987 	bl	b72ec <free>
	buffer = NULL;
   b7fde:	2300      	movs	r3, #0
	capacity = len = 0;
   b7fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7fe4:	6023      	str	r3, [r4, #0]
}
   b7fe6:	bd10      	pop	{r4, pc}

000b7fe8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7fe8:	b538      	push	{r3, r4, r5, lr}
   b7fea:	4604      	mov	r4, r0
   b7fec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7fee:	6800      	ldr	r0, [r0, #0]
   b7ff0:	3101      	adds	r1, #1
   b7ff2:	f7ff f983 	bl	b72fc <realloc>
	if (newbuffer) {
   b7ff6:	b110      	cbz	r0, b7ffe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7ff8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7ffc:	2001      	movs	r0, #1
	}
	return 0;
}
   b7ffe:	bd38      	pop	{r3, r4, r5, pc}

000b8000 <_ZN6String7reserveEj>:
{
   b8000:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8002:	6803      	ldr	r3, [r0, #0]
{
   b8004:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8006:	b123      	cbz	r3, b8012 <_ZN6String7reserveEj+0x12>
   b8008:	6843      	ldr	r3, [r0, #4]
   b800a:	428b      	cmp	r3, r1
   b800c:	d301      	bcc.n	b8012 <_ZN6String7reserveEj+0x12>
   b800e:	2001      	movs	r0, #1
}
   b8010:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8012:	4620      	mov	r0, r4
   b8014:	f7ff ffe8 	bl	b7fe8 <_ZN6String12changeBufferEj>
   b8018:	2800      	cmp	r0, #0
   b801a:	d0f9      	beq.n	b8010 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b801c:	68a3      	ldr	r3, [r4, #8]
   b801e:	2b00      	cmp	r3, #0
   b8020:	d1f5      	bne.n	b800e <_ZN6String7reserveEj+0xe>
   b8022:	6822      	ldr	r2, [r4, #0]
   b8024:	7013      	strb	r3, [r2, #0]
   b8026:	e7f2      	b.n	b800e <_ZN6String7reserveEj+0xe>

000b8028 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b802a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b802c:	4611      	mov	r1, r2
   b802e:	9201      	str	r2, [sp, #4]
{
   b8030:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8032:	f7ff ffe5 	bl	b8000 <_ZN6String7reserveEj>
   b8036:	9a01      	ldr	r2, [sp, #4]
   b8038:	b928      	cbnz	r0, b8046 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b803a:	4620      	mov	r0, r4
   b803c:	f7ff ffc9 	bl	b7fd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8040:	4620      	mov	r0, r4
   b8042:	b003      	add	sp, #12
   b8044:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8046:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8048:	4629      	mov	r1, r5
   b804a:	6820      	ldr	r0, [r4, #0]
   b804c:	f001 f980 	bl	b9350 <memcpy>
	buffer[len] = 0;
   b8050:	6822      	ldr	r2, [r4, #0]
   b8052:	68a3      	ldr	r3, [r4, #8]
   b8054:	2100      	movs	r1, #0
   b8056:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8058:	e7f2      	b.n	b8040 <_ZN6String4copyEPKcj+0x18>

000b805a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b805a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b805c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b805e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8062:	4604      	mov	r4, r0
	len = 0;
   b8064:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8066:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8068:	b141      	cbz	r1, b807c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b806a:	4608      	mov	r0, r1
   b806c:	9101      	str	r1, [sp, #4]
   b806e:	f001 f9fc 	bl	b946a <strlen>
   b8072:	9901      	ldr	r1, [sp, #4]
   b8074:	4602      	mov	r2, r0
   b8076:	4620      	mov	r0, r4
   b8078:	f7ff ffd6 	bl	b8028 <_ZN6String4copyEPKcj>
}
   b807c:	4620      	mov	r0, r4
   b807e:	b002      	add	sp, #8
   b8080:	bd10      	pop	{r4, pc}

000b8082 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8082:	4288      	cmp	r0, r1
{
   b8084:	b510      	push	{r4, lr}
   b8086:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8088:	d005      	beq.n	b8096 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b808a:	680b      	ldr	r3, [r1, #0]
   b808c:	b12b      	cbz	r3, b809a <_ZN6StringaSERKS_+0x18>
   b808e:	688a      	ldr	r2, [r1, #8]
   b8090:	4619      	mov	r1, r3
   b8092:	f7ff ffc9 	bl	b8028 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8096:	4620      	mov	r0, r4
   b8098:	bd10      	pop	{r4, pc}
	else invalidate();
   b809a:	f7ff ff9a 	bl	b7fd2 <_ZN6String10invalidateEv>
   b809e:	e7fa      	b.n	b8096 <_ZN6StringaSERKS_+0x14>

000b80a0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b80a0:	b510      	push	{r4, lr}
	buffer = NULL;
   b80a2:	2300      	movs	r3, #0
String::String(const String &value)
   b80a4:	4604      	mov	r4, r0
	capacity = 0;
   b80a6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b80aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   b80ac:	7303      	strb	r3, [r0, #12]
	*this = value;
   b80ae:	f7ff ffe8 	bl	b8082 <_ZN6StringaSERKS_>
}
   b80b2:	4620      	mov	r0, r4
   b80b4:	bd10      	pop	{r4, pc}

000b80b6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b80b6:	b570      	push	{r4, r5, r6, lr}
   b80b8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b80ba:	460e      	mov	r6, r1
   b80bc:	b909      	cbnz	r1, b80c2 <_ZN6String6concatEPKcj+0xc>
   b80be:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b80c0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b80c2:	b16a      	cbz	r2, b80e0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b80c4:	6884      	ldr	r4, [r0, #8]
   b80c6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b80c8:	4621      	mov	r1, r4
   b80ca:	f7ff ff99 	bl	b8000 <_ZN6String7reserveEj>
   b80ce:	2800      	cmp	r0, #0
   b80d0:	d0f5      	beq.n	b80be <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b80d2:	6828      	ldr	r0, [r5, #0]
   b80d4:	68ab      	ldr	r3, [r5, #8]
   b80d6:	4631      	mov	r1, r6
   b80d8:	4418      	add	r0, r3
   b80da:	f001 f9a1 	bl	b9420 <strcpy>
	len = newlen;
   b80de:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b80e0:	2001      	movs	r0, #1
   b80e2:	e7ed      	b.n	b80c0 <_ZN6String6concatEPKcj+0xa>

000b80e4 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b80e4:	b513      	push	{r0, r1, r4, lr}
   b80e6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b80e8:	b929      	cbnz	r1, b80f6 <_ZplRK15StringSumHelperPKc+0x12>
   b80ea:	4620      	mov	r0, r4
   b80ec:	f7ff ff71 	bl	b7fd2 <_ZN6String10invalidateEv>
	return a;
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	b002      	add	sp, #8
   b80f4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b80f6:	4608      	mov	r0, r1
   b80f8:	9101      	str	r1, [sp, #4]
   b80fa:	f001 f9b6 	bl	b946a <strlen>
   b80fe:	9901      	ldr	r1, [sp, #4]
   b8100:	4602      	mov	r2, r0
   b8102:	4620      	mov	r0, r4
   b8104:	f7ff ffd7 	bl	b80b6 <_ZN6String6concatEPKcj>
   b8108:	2800      	cmp	r0, #0
   b810a:	d0ee      	beq.n	b80ea <_ZplRK15StringSumHelperPKc+0x6>
   b810c:	e7f0      	b.n	b80f0 <_ZplRK15StringSumHelperPKc+0xc>

000b810e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b810e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8110:	6882      	ldr	r2, [r0, #8]
   b8112:	b93a      	cbnz	r2, b8124 <_ZNK6String6equalsEPKc+0x16>
   b8114:	b121      	cbz	r1, b8120 <_ZNK6String6equalsEPKc+0x12>
   b8116:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8118:	fab0 f080 	clz	r0, r0
   b811c:	0940      	lsrs	r0, r0, #5
   b811e:	e000      	b.n	b8122 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8120:	2001      	movs	r0, #1
}
   b8122:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8124:	6800      	ldr	r0, [r0, #0]
   b8126:	b909      	cbnz	r1, b812c <_ZNK6String6equalsEPKc+0x1e>
   b8128:	7800      	ldrb	r0, [r0, #0]
   b812a:	e7f5      	b.n	b8118 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b812c:	f001 f96e 	bl	b940c <strcmp>
   b8130:	e7f2      	b.n	b8118 <_ZNK6String6equalsEPKc+0xa>

000b8132 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b8132:	b538      	push	{r3, r4, r5, lr}
   b8134:	460c      	mov	r4, r1
   b8136:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8138:	f7fc f9e0 	bl	b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b813c:	b154      	cbz	r4, b8154 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b813e:	8820      	ldrh	r0, [r4, #0]
   b8140:	f7ff f8cc 	bl	b72dc <malloc>
   b8144:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b8146:	b128      	cbz	r0, b8154 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b8148:	8822      	ldrh	r2, [r4, #0]
   b814a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b8150:	f001 b8fe 	b.w	b9350 <memcpy>
    }
   b8154:	bd38      	pop	{r3, r4, r5, pc}

000b8156 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8156:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b8158:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b815c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b815e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b8162:	f8c0 3006 	str.w	r3, [r0, #6]
   b8166:	894b      	ldrh	r3, [r1, #10]
   b8168:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b816a:	460c      	mov	r4, r1
   b816c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b816e:	f7fc f9c5 	bl	b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b8172:	6823      	ldr	r3, [r4, #0]
   b8174:	b113      	cbz	r3, b817c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b8176:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b8178:	2300      	movs	r3, #0
   b817a:	6023      	str	r3, [r4, #0]
    }
   b817c:	bd38      	pop	{r3, r4, r5, pc}

000b817e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b817e:	b507      	push	{r0, r1, r2, lr}
   b8180:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8182:	2100      	movs	r1, #0
{
   b8184:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8186:	9100      	str	r1, [sp, #0]
   b8188:	2001      	movs	r0, #1
   b818a:	218c      	movs	r1, #140	; 0x8c
   b818c:	f7fe ffcc 	bl	b7128 <system_reset>
}
   b8190:	b003      	add	sp, #12
   b8192:	f85d fb04 	ldr.w	pc, [sp], #4

000b8196 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8196:	4601      	mov	r1, r0
    reset(0, flags);
   b8198:	2000      	movs	r0, #0
   b819a:	f7ff bff0 	b.w	b817e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b819e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b819e:	2000      	movs	r0, #0
   b81a0:	f7ff bff9 	b.w	b8196 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b81a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b81a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81a6:	4d2b      	ldr	r5, [pc, #172]	; (b8254 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b81a8:	7d0b      	ldrb	r3, [r1, #20]
   b81aa:	4604      	mov	r4, r0
   b81ac:	b08b      	sub	sp, #44	; 0x2c
   b81ae:	4608      	mov	r0, r1
   b81b0:	1daf      	adds	r7, r5, #6
   b81b2:	2b00      	cmp	r3, #0
   b81b4:	d036      	beq.n	b8224 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b81b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b81b8:	791b      	ldrb	r3, [r3, #4]
   b81ba:	2b00      	cmp	r3, #0
   b81bc:	d032      	beq.n	b8224 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b81be:	4b26      	ldr	r3, [pc, #152]	; (b8258 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b81c0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b81c2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b81c4:	a902      	add	r1, sp, #8
   b81c6:	3004      	adds	r0, #4
   b81c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b81cc:	f7fe ffa2 	bl	b7114 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b81d0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b81d4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b81d8:	b200      	sxth	r0, r0
   b81da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b81de:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b81e2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b81e4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b81e6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b81e8:	4628      	mov	r0, r5
   b81ea:	f7ff ffa2 	bl	b8132 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b81ee:	a802      	add	r0, sp, #8
   b81f0:	f7fc f984 	bl	b44fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b81f4:	2300      	movs	r3, #0
   b81f6:	6023      	str	r3, [r4, #0]
   b81f8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b81fa:	71a3      	strb	r3, [r4, #6]
   b81fc:	8123      	strh	r3, [r4, #8]
   b81fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8202:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b8204:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b8208:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b820a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b820e:	f8c4 3006 	str.w	r3, [r4, #6]
   b8212:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8214:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b8216:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b8218:	4620      	mov	r0, r4
   b821a:	f7ff ff8a 	bl	b8132 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b821e:	4620      	mov	r0, r4
   b8220:	b00b      	add	sp, #44	; 0x2c
   b8222:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b8224:	2600      	movs	r6, #0
   b8226:	2320      	movs	r3, #32
   b8228:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b822c:	4b0b      	ldr	r3, [pc, #44]	; (b825c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b822e:	9300      	str	r3, [sp, #0]
   b8230:	aa02      	add	r2, sp, #8
   b8232:	4633      	mov	r3, r6
   b8234:	490a      	ldr	r1, [pc, #40]	; (b8260 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b8236:	2032      	movs	r0, #50	; 0x32
   b8238:	f7fe fefe 	bl	b7038 <log_message>
            : wakeupSource_(nullptr),
   b823c:	4b06      	ldr	r3, [pc, #24]	; (b8258 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b823e:	4805      	ldr	r0, [pc, #20]	; (b8254 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b8240:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b8242:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b8246:	a902      	add	r1, sp, #8
   b8248:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b824c:	f7ff ff83 	bl	b8156 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b8250:	e7cd      	b.n	b81ee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b8252:	bf00      	nop
   b8254:	2003e6a8 	.word	0x2003e6a8
   b8258:	ffff0000 	.word	0xffff0000
   b825c:	000b9e93 	.word	0x000b9e93
   b8260:	000b9e8c 	.word	0x000b9e8c

000b8264 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8264:	4b05      	ldr	r3, [pc, #20]	; (b827c <_GLOBAL__sub_I_System+0x18>)
   b8266:	2202      	movs	r2, #2
   b8268:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b826a:	4b05      	ldr	r3, [pc, #20]	; (b8280 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b826c:	4a05      	ldr	r2, [pc, #20]	; (b8284 <_GLOBAL__sub_I_System+0x20>)
   b826e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8270:	2000      	movs	r0, #0
   b8272:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8276:	f7fe bf01 	b.w	b707c <set_system_mode>
   b827a:	bf00      	nop
   b827c:	2003e6b4 	.word	0x2003e6b4
   b8280:	2003e6a8 	.word	0x2003e6a8
   b8284:	ffff0000 	.word	0xffff0000

000b8288 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b828c:	4a15      	ldr	r2, [pc, #84]	; (b82e4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b828e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b82f0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8292:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8296:	1980      	adds	r0, r0, r6
   b8298:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b829c:	4b12      	ldr	r3, [pc, #72]	; (b82e8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b829e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b82a2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b82a6:	1986      	adds	r6, r0, r6
   b82a8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b82ac:	42bb      	cmp	r3, r7
   b82ae:	bf08      	it	eq
   b82b0:	42b2      	cmpeq	r2, r6
{
   b82b2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b82b4:	d013      	beq.n	b82de <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b82b6:	a903      	add	r1, sp, #12
   b82b8:	4668      	mov	r0, sp
   b82ba:	e9cd 6700 	strd	r6, r7, [sp]
   b82be:	f7ff f865 	bl	b738c <localtime_r>
	calendar_time.tm_year += 1900;
   b82c2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b82c4:	4d09      	ldr	r5, [pc, #36]	; (b82ec <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b82c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b82ca:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b82cc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b82ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b82d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b82d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b82d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b82d6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b82da:	6823      	ldr	r3, [r4, #0]
   b82dc:	602b      	str	r3, [r5, #0]
    }
}
   b82de:	b00c      	add	sp, #48	; 0x30
   b82e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b82e4:	2003e6f0 	.word	0x2003e6f0
   b82e8:	2003e6e8 	.word	0x2003e6e8
   b82ec:	2003e6c0 	.word	0x2003e6c0
   b82f0:	2003e6f8 	.word	0x2003e6f8

000b82f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b82f4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b82f6:	2000      	movs	r0, #0
   b82f8:	f7fe ff68 	bl	b71cc <spark_sync_time_pending>
   b82fc:	b128      	cbz	r0, b830a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b82fe:	f7fe ff3d 	bl	b717c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8302:	f080 0001 	eor.w	r0, r0, #1
   b8306:	b2c0      	uxtb	r0, r0
    }
   b8308:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b830a:	2001      	movs	r0, #1
   b830c:	e7fc      	b.n	b8308 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b830e <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b830e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8310:	4602      	mov	r2, r0
   b8312:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b8314:	4668      	mov	r0, sp
    struct timeval tv = {
   b8316:	2100      	movs	r1, #0
    };
   b8318:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b831c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b8320:	f7fe fd3a 	bl	b6d98 <hal_rtc_set_time>
   b8324:	4602      	mov	r2, r0
   b8326:	b910      	cbnz	r0, b832e <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b8328:	4601      	mov	r1, r0
   b832a:	f7fe fed7 	bl	b70dc <system_notify_time_changed>
    }
}
   b832e:	b005      	add	sp, #20
   b8330:	f85d fb04 	ldr.w	pc, [sp], #4

000b8334 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8334:	b530      	push	{r4, r5, lr}
   b8336:	b093      	sub	sp, #76	; 0x4c
   b8338:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b833c:	4b19      	ldr	r3, [pc, #100]	; (b83a4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b833e:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8340:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8344:	9b01      	ldr	r3, [sp, #4]
   b8346:	1852      	adds	r2, r2, r1
   b8348:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b834c:	4816      	ldr	r0, [pc, #88]	; (b83a8 <_ZN9TimeClass7timeStrEx+0x74>)
   b834e:	e9d0 1000 	ldrd	r1, r0, [r0]
   b8352:	1852      	adds	r2, r2, r1
   b8354:	eb43 0300 	adc.w	r3, r3, r0
   b8358:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b835c:	2224      	movs	r2, #36	; 0x24
   b835e:	eb0d 0002 	add.w	r0, sp, r2
   b8362:	2100      	movs	r1, #0
   b8364:	f001 f81c 	bl	b93a0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8368:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b836a:	a909      	add	r1, sp, #36	; 0x24
   b836c:	4668      	mov	r0, sp
   b836e:	f7ff f80d 	bl	b738c <localtime_r>
    char ascstr[26] = {};
   b8372:	2216      	movs	r2, #22
   b8374:	4629      	mov	r1, r5
   b8376:	a803      	add	r0, sp, #12
   b8378:	9502      	str	r5, [sp, #8]
   b837a:	f001 f811 	bl	b93a0 <memset>
    asctime_r(&calendar_time, ascstr);
   b837e:	a902      	add	r1, sp, #8
   b8380:	a809      	add	r0, sp, #36	; 0x24
   b8382:	f000 ff97 	bl	b92b4 <asctime_r>
    int len = strlen(ascstr);
   b8386:	a802      	add	r0, sp, #8
   b8388:	f001 f86f 	bl	b946a <strlen>
    ascstr[len-1] = 0; // remove final newline
   b838c:	ab12      	add	r3, sp, #72	; 0x48
   b838e:	4418      	add	r0, r3
    return String(ascstr);
   b8390:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b8392:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8396:	4620      	mov	r0, r4
   b8398:	f7ff fe5f 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b839c:	4620      	mov	r0, r4
   b839e:	b013      	add	sp, #76	; 0x4c
   b83a0:	bd30      	pop	{r4, r5, pc}
   b83a2:	bf00      	nop
   b83a4:	2003e6f0 	.word	0x2003e6f0
   b83a8:	2003e6e8 	.word	0x2003e6e8

000b83ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b83ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b83b0:	b0a4      	sub	sp, #144	; 0x90
   b83b2:	4607      	mov	r7, r0
   b83b4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b83b6:	a814      	add	r0, sp, #80	; 0x50
{
   b83b8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b83ba:	223f      	movs	r2, #63	; 0x3f
{
   b83bc:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b83be:	f001 f85c 	bl	b947a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b83c2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b83c4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b83c6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b83ca:	f001 f84e 	bl	b946a <strlen>
   b83ce:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b83d0:	bb4c      	cbnz	r4, b8426 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b83d2:	4929      	ldr	r1, [pc, #164]	; (b8478 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b83d4:	a803      	add	r0, sp, #12
   b83d6:	f001 f823 	bl	b9420 <strcpy>
   b83da:	ac14      	add	r4, sp, #80	; 0x50
{
   b83dc:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b83de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   b83e2:	45b1      	cmp	r9, r6
   b83e4:	d934      	bls.n	b8450 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b83e6:	7823      	ldrb	r3, [r4, #0]
   b83e8:	2b25      	cmp	r3, #37	; 0x25
   b83ea:	f106 0a01 	add.w	sl, r6, #1
   b83ee:	d117      	bne.n	b8420 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b83f0:	7863      	ldrb	r3, [r4, #1]
   b83f2:	2b7a      	cmp	r3, #122	; 0x7a
   b83f4:	d114      	bne.n	b8420 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b83f6:	a803      	add	r0, sp, #12
   b83f8:	f001 f837 	bl	b946a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b83fc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b83fe:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8400:	1830      	adds	r0, r6, r0
   b8402:	4418      	add	r0, r3
   b8404:	eba9 0206 	sub.w	r2, r9, r6
   b8408:	1ca1      	adds	r1, r4, #2
   b840a:	f000 ffa1 	bl	b9350 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b840e:	462a      	mov	r2, r5
   b8410:	a903      	add	r1, sp, #12
   b8412:	4620      	mov	r0, r4
   b8414:	f000 ff9c 	bl	b9350 <memcpy>
            len = strlen(format_str);
   b8418:	a814      	add	r0, sp, #80	; 0x50
   b841a:	f001 f826 	bl	b946a <strlen>
   b841e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b8420:	3401      	adds	r4, #1
   b8422:	4656      	mov	r6, sl
   b8424:	e7db      	b.n	b83de <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b8426:	233c      	movs	r3, #60	; 0x3c
   b8428:	fb94 f2f3 	sdiv	r2, r4, r3
   b842c:	2a00      	cmp	r2, #0
   b842e:	bfb8      	it	lt
   b8430:	4252      	neglt	r2, r2
   b8432:	fbb2 f1f3 	udiv	r1, r2, r3
   b8436:	fb03 2211 	mls	r2, r3, r1, r2
   b843a:	9200      	str	r2, [sp, #0]
   b843c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b8440:	4a0e      	ldr	r2, [pc, #56]	; (b847c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b8442:	fb94 f3f3 	sdiv	r3, r4, r3
   b8446:	2110      	movs	r1, #16
   b8448:	a803      	add	r0, sp, #12
   b844a:	f7fe ff67 	bl	b731c <snprintf>
   b844e:	e7c4      	b.n	b83da <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b8450:	2100      	movs	r1, #0
   b8452:	222e      	movs	r2, #46	; 0x2e
   b8454:	a808      	add	r0, sp, #32
   b8456:	9107      	str	r1, [sp, #28]
   b8458:	f000 ffa2 	bl	b93a0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b845c:	4643      	mov	r3, r8
   b845e:	aa14      	add	r2, sp, #80	; 0x50
   b8460:	2132      	movs	r1, #50	; 0x32
   b8462:	a807      	add	r0, sp, #28
   b8464:	f7fe ff8a 	bl	b737c <strftime>
    return String(buf);
   b8468:	a907      	add	r1, sp, #28
   b846a:	4638      	mov	r0, r7
   b846c:	f7ff fdf5 	bl	b805a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8470:	4638      	mov	r0, r7
   b8472:	b024      	add	sp, #144	; 0x90
   b8474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8478:	000b9eba 	.word	0x000b9eba
   b847c:	000b9ebc 	.word	0x000b9ebc

000b8480 <_ZN9TimeClass6formatExPKc>:
{
   b8480:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8482:	b08d      	sub	sp, #52	; 0x34
   b8484:	e9cd 2300 	strd	r2, r3, [sp]
   b8488:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b848a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b848c:	b915      	cbnz	r5, b8494 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b848e:	4b19      	ldr	r3, [pc, #100]	; (b84f4 <_ZN9TimeClass6formatExPKc+0x74>)
   b8490:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b8492:	b12d      	cbz	r5, b84a0 <_ZN9TimeClass6formatExPKc+0x20>
   b8494:	4b18      	ldr	r3, [pc, #96]	; (b84f8 <_ZN9TimeClass6formatExPKc+0x78>)
   b8496:	4628      	mov	r0, r5
   b8498:	6819      	ldr	r1, [r3, #0]
   b849a:	f000 ffb7 	bl	b940c <strcmp>
   b849e:	b938      	cbnz	r0, b84b0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b84a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   b84a4:	4620      	mov	r0, r4
   b84a6:	f7ff ff45 	bl	b8334 <_ZN9TimeClass7timeStrEx>
}
   b84aa:	4620      	mov	r0, r4
   b84ac:	b00d      	add	sp, #52	; 0x34
   b84ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b84b0:	4e12      	ldr	r6, [pc, #72]	; (b84fc <_ZN9TimeClass6formatExPKc+0x7c>)
   b84b2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b84b4:	4f12      	ldr	r7, [pc, #72]	; (b8500 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b84b6:	e9d6 3200 	ldrd	r3, r2, [r6]
   b84ba:	185b      	adds	r3, r3, r1
   b84bc:	9901      	ldr	r1, [sp, #4]
   b84be:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b84c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   b84c6:	181b      	adds	r3, r3, r0
   b84c8:	eb42 0201 	adc.w	r2, r2, r1
   b84cc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b84d0:	2100      	movs	r1, #0
   b84d2:	2224      	movs	r2, #36	; 0x24
   b84d4:	a803      	add	r0, sp, #12
   b84d6:	f000 ff63 	bl	b93a0 <memset>
    localtime_r(&t, &calendar_time);
   b84da:	a903      	add	r1, sp, #12
   b84dc:	4668      	mov	r0, sp
   b84de:	f7fe ff55 	bl	b738c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b84e2:	6832      	ldr	r2, [r6, #0]
   b84e4:	683b      	ldr	r3, [r7, #0]
   b84e6:	a903      	add	r1, sp, #12
   b84e8:	4413      	add	r3, r2
   b84ea:	4620      	mov	r0, r4
   b84ec:	462a      	mov	r2, r5
   b84ee:	f7ff ff5d 	bl	b83ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b84f2:	e7da      	b.n	b84aa <_ZN9TimeClass6formatExPKc+0x2a>
   b84f4:	2003e6bc 	.word	0x2003e6bc
   b84f8:	2003e3f8 	.word	0x2003e3f8
   b84fc:	2003e6f0 	.word	0x2003e6f0
   b8500:	2003e6e8 	.word	0x2003e6e8

000b8504 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b8504:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8506:	2000      	movs	r0, #0
   b8508:	f7fe fc2e 	bl	b6d68 <hal_rtc_time_is_valid>
    if (rtcstate)
   b850c:	4604      	mov	r4, r0
   b850e:	b9a0      	cbnz	r0, b853a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8510:	f7fe fdac 	bl	b706c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8514:	2801      	cmp	r0, #1
   b8516:	d110      	bne.n	b853a <_ZN9TimeClass7isValidEv+0x36>
   b8518:	4620      	mov	r0, r4
   b851a:	f7fe fdd7 	bl	b70cc <system_thread_get_state>
   b851e:	b960      	cbnz	r0, b853a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8520:	f7ff fee8 	bl	b82f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8524:	b910      	cbnz	r0, b852c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8526:	f7fe fe19 	bl	b715c <spark_process>
        while (_while() && !_condition()) {
   b852a:	e7f9      	b.n	b8520 <_ZN9TimeClass7isValidEv+0x1c>
   b852c:	f7ff fee2 	bl	b82f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8534:	2000      	movs	r0, #0
   b8536:	f7fe bc17 	b.w	b6d68 <hal_rtc_time_is_valid>
}
   b853a:	4620      	mov	r0, r4
   b853c:	bd10      	pop	{r4, pc}

000b853e <_ZN9TimeClass3nowEv>:
{
   b853e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8540:	f7ff ffe0 	bl	b8504 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8544:	2210      	movs	r2, #16
   b8546:	2100      	movs	r1, #0
   b8548:	4668      	mov	r0, sp
   b854a:	f000 ff29 	bl	b93a0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b854e:	2100      	movs	r1, #0
   b8550:	4668      	mov	r0, sp
   b8552:	f7fe fc19 	bl	b6d88 <hal_rtc_get_time>
}
   b8556:	9800      	ldr	r0, [sp, #0]
   b8558:	b005      	add	sp, #20
   b855a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8560 <_ZN9TimeClass4hourEv>:
{
   b8560:	b508      	push	{r3, lr}
	return hour(now());
   b8562:	f7ff ffec 	bl	b853e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8566:	17c1      	asrs	r1, r0, #31
   b8568:	f7ff fe8e 	bl	b8288 <_ZL22Refresh_UnixTime_Cachex>
}
   b856c:	4b01      	ldr	r3, [pc, #4]	; (b8574 <_ZN9TimeClass4hourEv+0x14>)
   b856e:	6898      	ldr	r0, [r3, #8]
   b8570:	bd08      	pop	{r3, pc}
   b8572:	bf00      	nop
   b8574:	2003e6c0 	.word	0x2003e6c0

000b8578 <_ZN9TimeClass4yearEv>:
{
   b8578:	b508      	push	{r3, lr}
	return year(now());
   b857a:	f7ff ffe0 	bl	b853e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b857e:	17c1      	asrs	r1, r0, #31
   b8580:	f7ff fe82 	bl	b8288 <_ZL22Refresh_UnixTime_Cachex>
}
   b8584:	4b01      	ldr	r3, [pc, #4]	; (b858c <_ZN9TimeClass4yearEv+0x14>)
   b8586:	6958      	ldr	r0, [r3, #20]
   b8588:	bd08      	pop	{r3, pc}
   b858a:	bf00      	nop
   b858c:	2003e6c0 	.word	0x2003e6c0

000b8590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8590:	4b02      	ldr	r3, [pc, #8]	; (b859c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8592:	681a      	ldr	r2, [r3, #0]
   b8594:	4b02      	ldr	r3, [pc, #8]	; (b85a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8596:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8598:	4770      	bx	lr
   b859a:	bf00      	nop
   b859c:	2003e3f8 	.word	0x2003e3f8
   b85a0:	2003e6bc 	.word	0x2003e6bc

000b85a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b85a4:	4770      	bx	lr

000b85a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b85a6:	7441      	strb	r1, [r0, #17]
}
   b85a8:	4770      	bx	lr

000b85aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b85aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b85ac:	7c00      	ldrb	r0, [r0, #16]
   b85ae:	f7fe fcfb 	bl	b6fa8 <hal_usart_available_data_for_write>
}
   b85b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85b6:	bd08      	pop	{r3, pc}

000b85b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b85b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b85ba:	7c00      	ldrb	r0, [r0, #16]
   b85bc:	f7fe fccc 	bl	b6f58 <hal_usart_available>
}
   b85c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85c4:	bd08      	pop	{r3, pc}

000b85c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b85c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b85c8:	7c00      	ldrb	r0, [r0, #16]
   b85ca:	f7fe fcd5 	bl	b6f78 <hal_usart_peek>
}
   b85ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85d2:	bd08      	pop	{r3, pc}

000b85d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b85d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b85d6:	7c00      	ldrb	r0, [r0, #16]
   b85d8:	f7fe fcc6 	bl	b6f68 <hal_usart_read>
}
   b85dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85e0:	bd08      	pop	{r3, pc}

000b85e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b85e2:	7c00      	ldrb	r0, [r0, #16]
   b85e4:	f7fe bcd0 	b.w	b6f88 <hal_usart_flush>

000b85e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b85e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85ea:	7c45      	ldrb	r5, [r0, #17]
{
   b85ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85ee:	b12d      	cbz	r5, b85fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b85f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b85f2:	b003      	add	sp, #12
   b85f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b85f8:	f7fe bca6 	b.w	b6f48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85fc:	7c00      	ldrb	r0, [r0, #16]
   b85fe:	9101      	str	r1, [sp, #4]
   b8600:	f7fe fcd2 	bl	b6fa8 <hal_usart_available_data_for_write>
   b8604:	2800      	cmp	r0, #0
   b8606:	9901      	ldr	r1, [sp, #4]
   b8608:	dcf2      	bgt.n	b85f0 <_ZN11USARTSerial5writeEh+0x8>
}
   b860a:	4628      	mov	r0, r5
   b860c:	b003      	add	sp, #12
   b860e:	bd30      	pop	{r4, r5, pc}

000b8610 <_ZN11USARTSerialD0Ev>:
   b8610:	b510      	push	{r4, lr}
   b8612:	2114      	movs	r1, #20
   b8614:	4604      	mov	r4, r0
   b8616:	f7fb fd42 	bl	b409e <_ZdlPvj>
   b861a:	4620      	mov	r0, r4
   b861c:	bd10      	pop	{r4, pc}
	...

000b8620 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8620:	b510      	push	{r4, lr}
   b8622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8626:	4604      	mov	r4, r0
   b8628:	4608      	mov	r0, r1
   b862a:	4611      	mov	r1, r2
   b862c:	2200      	movs	r2, #0
   b862e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8632:	4b04      	ldr	r3, [pc, #16]	; (b8644 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8634:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8636:	2301      	movs	r3, #1
  _serial = serial;
   b8638:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b863a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b863c:	f7fe fcbc 	bl	b6fb8 <hal_usart_init_ex>
}
   b8640:	4620      	mov	r0, r4
   b8642:	bd10      	pop	{r4, pc}
   b8644:	000b9eec 	.word	0x000b9eec

000b8648 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8648:	7441      	strb	r1, [r0, #17]
}
   b864a:	4770      	bx	lr

000b864c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b864c:	4770      	bx	lr

000b864e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b864e:	4770      	bx	lr

000b8650 <_ZN9USBSerial4readEv>:
{
   b8650:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8652:	2100      	movs	r1, #0
   b8654:	7c00      	ldrb	r0, [r0, #16]
   b8656:	f7fe fccf 	bl	b6ff8 <HAL_USB_USART_Receive_Data>
}
   b865a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b865e:	bd08      	pop	{r3, pc}

000b8660 <_ZN9USBSerial4peekEv>:
{
   b8660:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8662:	2101      	movs	r1, #1
   b8664:	7c00      	ldrb	r0, [r0, #16]
   b8666:	f7fe fcc7 	bl	b6ff8 <HAL_USB_USART_Receive_Data>
}
   b866a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b866e:	bd08      	pop	{r3, pc}

000b8670 <_ZN9USBSerial17availableForWriteEv>:
{
   b8670:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8672:	7c00      	ldrb	r0, [r0, #16]
   b8674:	f7fe fcb8 	bl	b6fe8 <HAL_USB_USART_Available_Data_For_Write>
}
   b8678:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b867c:	bd08      	pop	{r3, pc}

000b867e <_ZN9USBSerial9availableEv>:
{
   b867e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8680:	7c00      	ldrb	r0, [r0, #16]
   b8682:	f7fe fca9 	bl	b6fd8 <HAL_USB_USART_Available_Data>
}
   b8686:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b868a:	bd08      	pop	{r3, pc}

000b868c <_ZN9USBSerial5writeEh>:
{
   b868c:	b513      	push	{r0, r1, r4, lr}
   b868e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8690:	7c00      	ldrb	r0, [r0, #16]
{
   b8692:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8694:	f7fe fca8 	bl	b6fe8 <HAL_USB_USART_Available_Data_For_Write>
   b8698:	2800      	cmp	r0, #0
   b869a:	9901      	ldr	r1, [sp, #4]
   b869c:	dc01      	bgt.n	b86a2 <_ZN9USBSerial5writeEh+0x16>
   b869e:	7c60      	ldrb	r0, [r4, #17]
   b86a0:	b120      	cbz	r0, b86ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b86a2:	7c20      	ldrb	r0, [r4, #16]
   b86a4:	f7fe fcb0 	bl	b7008 <HAL_USB_USART_Send_Data>
   b86a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b86ac:	b002      	add	sp, #8
   b86ae:	bd10      	pop	{r4, pc}

000b86b0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b86b0:	7c00      	ldrb	r0, [r0, #16]
   b86b2:	f7fe bcb1 	b.w	b7018 <HAL_USB_USART_Flush_Data>

000b86b6 <_ZN9USBSerialD0Ev>:
   b86b6:	b510      	push	{r4, lr}
   b86b8:	2114      	movs	r1, #20
   b86ba:	4604      	mov	r4, r0
   b86bc:	f7fb fcef 	bl	b409e <_ZdlPvj>
   b86c0:	4620      	mov	r0, r4
   b86c2:	bd10      	pop	{r4, pc}

000b86c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b86c4:	b510      	push	{r4, lr}
   b86c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b86ca:	4604      	mov	r4, r0
   b86cc:	4608      	mov	r0, r1
   b86ce:	2100      	movs	r1, #0
   b86d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b86d4:	4b04      	ldr	r3, [pc, #16]	; (b86e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b86d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b86d8:	2301      	movs	r3, #1
  _serial = serial;
   b86da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b86dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b86de:	4611      	mov	r1, r2
   b86e0:	f7fe fc72 	bl	b6fc8 <HAL_USB_USART_Init>
}
   b86e4:	4620      	mov	r0, r4
   b86e6:	bd10      	pop	{r4, pc}
   b86e8:	000b9f1c 	.word	0x000b9f1c

000b86ec <_Z19acquireSerialBufferv>:
{
   b86ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b86ee:	2214      	movs	r2, #20
{
   b86f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b86f2:	2100      	movs	r1, #0
   b86f4:	f000 fe54 	bl	b93a0 <memset>
}
   b86f8:	4620      	mov	r0, r4
   b86fa:	bd10      	pop	{r4, pc}

000b86fc <_Z16_fetch_usbserialv>:
{
   b86fc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b86fe:	4c0f      	ldr	r4, [pc, #60]	; (b873c <_Z16_fetch_usbserialv+0x40>)
{
   b8700:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8702:	a803      	add	r0, sp, #12
   b8704:	f7ff fff2 	bl	b86ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8708:	7821      	ldrb	r1, [r4, #0]
   b870a:	f3bf 8f5b 	dmb	ish
   b870e:	f011 0101 	ands.w	r1, r1, #1
   b8712:	d10f      	bne.n	b8734 <_Z16_fetch_usbserialv+0x38>
   b8714:	4620      	mov	r0, r4
   b8716:	9101      	str	r1, [sp, #4]
   b8718:	f7fb fcd0 	bl	b40bc <__cxa_guard_acquire>
   b871c:	9901      	ldr	r1, [sp, #4]
   b871e:	b148      	cbz	r0, b8734 <_Z16_fetch_usbserialv+0x38>
   b8720:	aa03      	add	r2, sp, #12
   b8722:	4807      	ldr	r0, [pc, #28]	; (b8740 <_Z16_fetch_usbserialv+0x44>)
   b8724:	f7ff ffce 	bl	b86c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8728:	4620      	mov	r0, r4
   b872a:	f7fb fccc 	bl	b40c6 <__cxa_guard_release>
   b872e:	4805      	ldr	r0, [pc, #20]	; (b8744 <_Z16_fetch_usbserialv+0x48>)
   b8730:	f000 fde6 	bl	b9300 <atexit>
	return _usbserial;
}
   b8734:	4802      	ldr	r0, [pc, #8]	; (b8740 <_Z16_fetch_usbserialv+0x44>)
   b8736:	b008      	add	sp, #32
   b8738:	bd10      	pop	{r4, pc}
   b873a:	bf00      	nop
   b873c:	2003e700 	.word	0x2003e700
   b8740:	2003e704 	.word	0x2003e704
   b8744:	000b864d 	.word	0x000b864d

000b8748 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8748:	4b01      	ldr	r3, [pc, #4]	; (b8750 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b874a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b874c:	4770      	bx	lr
   b874e:	bf00      	nop
   b8750:	2003e3fc 	.word	0x2003e3fc

000b8754 <serialEventRun>:
{
   b8754:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8756:	4b0b      	ldr	r3, [pc, #44]	; (b8784 <serialEventRun+0x30>)
   b8758:	b143      	cbz	r3, b876c <serialEventRun+0x18>
   b875a:	f7ff ffcf 	bl	b86fc <_Z16_fetch_usbserialv>
   b875e:	6803      	ldr	r3, [r0, #0]
   b8760:	691b      	ldr	r3, [r3, #16]
   b8762:	4798      	blx	r3
   b8764:	2800      	cmp	r0, #0
   b8766:	dd01      	ble.n	b876c <serialEventRun+0x18>
        serialEvent();
   b8768:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b876c:	4b06      	ldr	r3, [pc, #24]	; (b8788 <serialEventRun+0x34>)
   b876e:	b143      	cbz	r3, b8782 <serialEventRun+0x2e>
   b8770:	f000 f956 	bl	b8a20 <_Z22__fetch_global_Serial1v>
   b8774:	6803      	ldr	r3, [r0, #0]
   b8776:	691b      	ldr	r3, [r3, #16]
   b8778:	4798      	blx	r3
   b877a:	2800      	cmp	r0, #0
   b877c:	dd01      	ble.n	b8782 <serialEventRun+0x2e>
        serialEvent1();
   b877e:	f3af 8000 	nop.w
}
   b8782:	bd08      	pop	{r3, pc}
	...

000b878c <_post_loop>:
{
   b878c:	b508      	push	{r3, lr}
	serialEventRun();
   b878e:	f7ff ffe1 	bl	b8754 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8792:	f7fe fae1 	bl	b6d58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8796:	4b01      	ldr	r3, [pc, #4]	; (b879c <_post_loop+0x10>)
   b8798:	6018      	str	r0, [r3, #0]
}
   b879a:	bd08      	pop	{r3, pc}
   b879c:	2003e72c 	.word	0x2003e72c

000b87a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b87a0:	4805      	ldr	r0, [pc, #20]	; (b87b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b87a2:	4a06      	ldr	r2, [pc, #24]	; (b87bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b87a4:	4906      	ldr	r1, [pc, #24]	; (b87c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b87a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b87a8:	1a12      	subs	r2, r2, r0
   b87aa:	f000 fdd1 	bl	b9350 <memcpy>
    __backup_sram_signature = signature;
   b87ae:	4b05      	ldr	r3, [pc, #20]	; (b87c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b87b0:	4a05      	ldr	r2, [pc, #20]	; (b87c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b87b2:	601a      	str	r2, [r3, #0]
}
   b87b4:	bd08      	pop	{r3, pc}
   b87b6:	bf00      	nop
   b87b8:	2003f400 	.word	0x2003f400
   b87bc:	2003fc04 	.word	0x2003fc04
   b87c0:	000ba1c4 	.word	0x000ba1c4
   b87c4:	2003fc00 	.word	0x2003fc00
   b87c8:	9a271c1e 	.word	0x9a271c1e

000b87cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b87cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b87ce:	2300      	movs	r3, #0
   b87d0:	9300      	str	r3, [sp, #0]
   b87d2:	461a      	mov	r2, r3
   b87d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b87d8:	f7fe fc92 	bl	b7100 <system_ctrl_set_result>
}
   b87dc:	b003      	add	sp, #12
   b87de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b87e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b87e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b87e6:	8843      	ldrh	r3, [r0, #2]
   b87e8:	2b0a      	cmp	r3, #10
   b87ea:	d008      	beq.n	b87fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b87ec:	2b50      	cmp	r3, #80	; 0x50
   b87ee:	d10b      	bne.n	b8808 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b87f0:	4b09      	ldr	r3, [pc, #36]	; (b8818 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b87f2:	681b      	ldr	r3, [r3, #0]
   b87f4:	b14b      	cbz	r3, b880a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b87f6:	b003      	add	sp, #12
   b87f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b87fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b87fe:	f7ff ffe5 	bl	b87cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8802:	b003      	add	sp, #12
   b8804:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8808:	2300      	movs	r3, #0
   b880a:	9300      	str	r3, [sp, #0]
   b880c:	461a      	mov	r2, r3
   b880e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8812:	f7fe fc75 	bl	b7100 <system_ctrl_set_result>
}
   b8816:	e7f4      	b.n	b8802 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8818:	2003e71c 	.word	0x2003e71c

000b881c <module_user_init_hook>:
{
   b881c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b881e:	4812      	ldr	r0, [pc, #72]	; (b8868 <module_user_init_hook+0x4c>)
   b8820:	2100      	movs	r1, #0
   b8822:	f7fe fda3 	bl	b736c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8826:	4b11      	ldr	r3, [pc, #68]	; (b886c <module_user_init_hook+0x50>)
   b8828:	681a      	ldr	r2, [r3, #0]
   b882a:	4b11      	ldr	r3, [pc, #68]	; (b8870 <module_user_init_hook+0x54>)
   b882c:	429a      	cmp	r2, r3
   b882e:	4b11      	ldr	r3, [pc, #68]	; (b8874 <module_user_init_hook+0x58>)
   b8830:	bf0c      	ite	eq
   b8832:	2201      	moveq	r2, #1
   b8834:	2200      	movne	r2, #0
   b8836:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8838:	d001      	beq.n	b883e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b883a:	f7ff ffb1 	bl	b87a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b883e:	f7fe fa73 	bl	b6d28 <HAL_RNG_GetRandomNumber>
   b8842:	4604      	mov	r4, r0
    srand(seed);
   b8844:	f000 fdb4 	bl	b93b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8848:	4b0b      	ldr	r3, [pc, #44]	; (b8878 <module_user_init_hook+0x5c>)
   b884a:	b113      	cbz	r3, b8852 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b884c:	4620      	mov	r0, r4
   b884e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8852:	2100      	movs	r1, #0
   b8854:	4808      	ldr	r0, [pc, #32]	; (b8878 <module_user_init_hook+0x5c>)
   b8856:	f7fe fcd1 	bl	b71fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b885a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b885e:	4807      	ldr	r0, [pc, #28]	; (b887c <module_user_init_hook+0x60>)
   b8860:	2100      	movs	r1, #0
   b8862:	f7fe bc43 	b.w	b70ec <system_ctrl_set_app_request_handler>
   b8866:	bf00      	nop
   b8868:	000b8749 	.word	0x000b8749
   b886c:	2003fc00 	.word	0x2003fc00
   b8870:	9a271c1e 	.word	0x9a271c1e
   b8874:	2003e718 	.word	0x2003e718
   b8878:	00000000 	.word	0x00000000
   b887c:	000b87e5 	.word	0x000b87e5

000b8880 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8880:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8882:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8884:	d902      	bls.n	b888c <pinAvailable+0xc>
    return false;
   b8886:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8888:	b002      	add	sp, #8
   b888a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b888c:	f1a0 030b 	sub.w	r3, r0, #11
   b8890:	2b02      	cmp	r3, #2
   b8892:	d81a      	bhi.n	b88ca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8894:	4c17      	ldr	r4, [pc, #92]	; (b88f4 <pinAvailable+0x74>)
   b8896:	7821      	ldrb	r1, [r4, #0]
   b8898:	f3bf 8f5b 	dmb	ish
   b889c:	f011 0101 	ands.w	r1, r1, #1
   b88a0:	d10b      	bne.n	b88ba <pinAvailable+0x3a>
   b88a2:	4620      	mov	r0, r4
   b88a4:	9101      	str	r1, [sp, #4]
   b88a6:	f7fb fc09 	bl	b40bc <__cxa_guard_acquire>
   b88aa:	9901      	ldr	r1, [sp, #4]
   b88ac:	b128      	cbz	r0, b88ba <pinAvailable+0x3a>
   b88ae:	4812      	ldr	r0, [pc, #72]	; (b88f8 <pinAvailable+0x78>)
   b88b0:	f7ff fb7e 	bl	b7fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b88b4:	4620      	mov	r0, r4
   b88b6:	f7fb fc06 	bl	b40c6 <__cxa_guard_release>
   b88ba:	4b0f      	ldr	r3, [pc, #60]	; (b88f8 <pinAvailable+0x78>)
   b88bc:	7818      	ldrb	r0, [r3, #0]
   b88be:	f7fe fb3b 	bl	b6f38 <hal_spi_is_enabled>
   b88c2:	2800      	cmp	r0, #0
   b88c4:	d1df      	bne.n	b8886 <pinAvailable+0x6>
  return true; // 'pin' is available
   b88c6:	2001      	movs	r0, #1
   b88c8:	e7de      	b.n	b8888 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b88ca:	2801      	cmp	r0, #1
   b88cc:	d809      	bhi.n	b88e2 <pinAvailable+0x62>
   b88ce:	f000 f867 	bl	b89a0 <_Z19__fetch_global_Wirev>
   b88d2:	2100      	movs	r1, #0
   b88d4:	7c00      	ldrb	r0, [r0, #16]
   b88d6:	f7fe fae7 	bl	b6ea8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b88da:	f080 0001 	eor.w	r0, r0, #1
   b88de:	b2c0      	uxtb	r0, r0
   b88e0:	e7d2      	b.n	b8888 <pinAvailable+0x8>
   b88e2:	3809      	subs	r0, #9
   b88e4:	2801      	cmp	r0, #1
   b88e6:	d8ee      	bhi.n	b88c6 <pinAvailable+0x46>
   b88e8:	f000 f89a 	bl	b8a20 <_Z22__fetch_global_Serial1v>
   b88ec:	7c00      	ldrb	r0, [r0, #16]
   b88ee:	f7fe fb53 	bl	b6f98 <hal_usart_is_enabled>
   b88f2:	e7f2      	b.n	b88da <pinAvailable+0x5a>
   b88f4:	2003e720 	.word	0x2003e720
   b88f8:	2003e724 	.word	0x2003e724

000b88fc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88fc:	2823      	cmp	r0, #35	; 0x23
{
   b88fe:	b538      	push	{r3, r4, r5, lr}
   b8900:	4604      	mov	r4, r0
   b8902:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8904:	d80a      	bhi.n	b891c <pinMode+0x20>
   b8906:	29ff      	cmp	r1, #255	; 0xff
   b8908:	d008      	beq.n	b891c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b890a:	f7ff ffb9 	bl	b8880 <pinAvailable>
   b890e:	b128      	cbz	r0, b891c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8910:	4629      	mov	r1, r5
   b8912:	4620      	mov	r0, r4
}
   b8914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8918:	f7fe ba56 	b.w	b6dc8 <HAL_Pin_Mode>
}
   b891c:	bd38      	pop	{r3, r4, r5, pc}

000b891e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b891e:	b510      	push	{r4, lr}
   b8920:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8922:	f7fe fa59 	bl	b6dd8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8926:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8928:	b2db      	uxtb	r3, r3
   b892a:	2b01      	cmp	r3, #1
   b892c:	d908      	bls.n	b8940 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b892e:	4620      	mov	r0, r4
   b8930:	f7ff ffa6 	bl	b8880 <pinAvailable>
   b8934:	b120      	cbz	r0, b8940 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8936:	4620      	mov	r0, r4
}
   b8938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b893c:	f7fe ba54 	b.w	b6de8 <HAL_GPIO_Read>
}
   b8940:	2000      	movs	r0, #0
   b8942:	bd10      	pop	{r4, pc}

000b8944 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8944:	280d      	cmp	r0, #13
{
   b8946:	b510      	push	{r4, lr}
   b8948:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b894a:	bf9c      	itt	ls
   b894c:	340e      	addls	r4, #14
   b894e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8950:	4620      	mov	r0, r4
   b8952:	f7ff ff95 	bl	b8880 <pinAvailable>
   b8956:	b150      	cbz	r0, b896e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8958:	2103      	movs	r1, #3
   b895a:	4620      	mov	r0, r4
   b895c:	f7fe fa2c 	bl	b6db8 <HAL_Validate_Pin_Function>
   b8960:	2803      	cmp	r0, #3
   b8962:	d104      	bne.n	b896e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8964:	4620      	mov	r0, r4
}
   b8966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b896a:	f7fe ba55 	b.w	b6e18 <hal_adc_read>
}
   b896e:	2000      	movs	r0, #0
   b8970:	bd10      	pop	{r4, pc}

000b8972 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8972:	4770      	bx	lr

000b8974 <_Z17acquireWireBufferv>:
{
   b8974:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8976:	2520      	movs	r5, #32
   b8978:	2314      	movs	r3, #20
{
   b897a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b897c:	6003      	str	r3, [r0, #0]
   b897e:	6085      	str	r5, [r0, #8]
   b8980:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8982:	4906      	ldr	r1, [pc, #24]	; (b899c <_Z17acquireWireBufferv+0x28>)
   b8984:	4628      	mov	r0, r5
   b8986:	f000 f871 	bl	b8a6c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b898a:	4904      	ldr	r1, [pc, #16]	; (b899c <_Z17acquireWireBufferv+0x28>)
	};
   b898c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b898e:	4628      	mov	r0, r5
   b8990:	f000 f86c 	bl	b8a6c <_ZnajRKSt9nothrow_t>
	};
   b8994:	60e0      	str	r0, [r4, #12]
}
   b8996:	4620      	mov	r0, r4
   b8998:	bd38      	pop	{r3, r4, r5, pc}
   b899a:	bf00      	nop
   b899c:	000b9f44 	.word	0x000b9f44

000b89a0 <_Z19__fetch_global_Wirev>:
{
   b89a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89a2:	4d0e      	ldr	r5, [pc, #56]	; (b89dc <_Z19__fetch_global_Wirev+0x3c>)
   b89a4:	7829      	ldrb	r1, [r5, #0]
   b89a6:	f3bf 8f5b 	dmb	ish
   b89aa:	f011 0401 	ands.w	r4, r1, #1
{
   b89ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89b0:	d111      	bne.n	b89d6 <_Z19__fetch_global_Wirev+0x36>
   b89b2:	4628      	mov	r0, r5
   b89b4:	f7fb fb82 	bl	b40bc <__cxa_guard_acquire>
   b89b8:	b168      	cbz	r0, b89d6 <_Z19__fetch_global_Wirev+0x36>
   b89ba:	a801      	add	r0, sp, #4
   b89bc:	f7ff ffda 	bl	b8974 <_Z17acquireWireBufferv>
   b89c0:	aa01      	add	r2, sp, #4
   b89c2:	4621      	mov	r1, r4
   b89c4:	4806      	ldr	r0, [pc, #24]	; (b89e0 <_Z19__fetch_global_Wirev+0x40>)
   b89c6:	f7ff f8e1 	bl	b7b8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b89ca:	4628      	mov	r0, r5
   b89cc:	f7fb fb7b 	bl	b40c6 <__cxa_guard_release>
   b89d0:	4804      	ldr	r0, [pc, #16]	; (b89e4 <_Z19__fetch_global_Wirev+0x44>)
   b89d2:	f000 fc95 	bl	b9300 <atexit>
	return wire;
}
   b89d6:	4802      	ldr	r0, [pc, #8]	; (b89e0 <_Z19__fetch_global_Wirev+0x40>)
   b89d8:	b007      	add	sp, #28
   b89da:	bd30      	pop	{r4, r5, pc}
   b89dc:	2003e730 	.word	0x2003e730
   b89e0:	2003e734 	.word	0x2003e734
   b89e4:	000b8973 	.word	0x000b8973

000b89e8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89e8:	4770      	bx	lr
	...

000b89ec <_Z20acquireSerial1Bufferv>:
{
   b89ec:	b538      	push	{r3, r4, r5, lr}
   b89ee:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b89f0:	2514      	movs	r5, #20
   b89f2:	462a      	mov	r2, r5
   b89f4:	2100      	movs	r1, #0
   b89f6:	f000 fcd3 	bl	b93a0 <memset>
   b89fa:	8025      	strh	r5, [r4, #0]
   b89fc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89fe:	4907      	ldr	r1, [pc, #28]	; (b8a1c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8a00:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a02:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8a04:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a06:	f000 f831 	bl	b8a6c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a0a:	4904      	ldr	r1, [pc, #16]	; (b8a1c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8a0c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a0e:	4628      	mov	r0, r5
   b8a10:	f000 f82c 	bl	b8a6c <_ZnajRKSt9nothrow_t>
    };
   b8a14:	60e0      	str	r0, [r4, #12]
}
   b8a16:	4620      	mov	r0, r4
   b8a18:	bd38      	pop	{r3, r4, r5, pc}
   b8a1a:	bf00      	nop
   b8a1c:	000b9f44 	.word	0x000b9f44

000b8a20 <_Z22__fetch_global_Serial1v>:
{
   b8a20:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a22:	4d0e      	ldr	r5, [pc, #56]	; (b8a5c <_Z22__fetch_global_Serial1v+0x3c>)
   b8a24:	7829      	ldrb	r1, [r5, #0]
   b8a26:	f3bf 8f5b 	dmb	ish
   b8a2a:	f011 0401 	ands.w	r4, r1, #1
{
   b8a2e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a30:	d111      	bne.n	b8a56 <_Z22__fetch_global_Serial1v+0x36>
   b8a32:	4628      	mov	r0, r5
   b8a34:	f7fb fb42 	bl	b40bc <__cxa_guard_acquire>
   b8a38:	b168      	cbz	r0, b8a56 <_Z22__fetch_global_Serial1v+0x36>
   b8a3a:	a801      	add	r0, sp, #4
   b8a3c:	f7ff ffd6 	bl	b89ec <_Z20acquireSerial1Bufferv>
   b8a40:	aa01      	add	r2, sp, #4
   b8a42:	4621      	mov	r1, r4
   b8a44:	4806      	ldr	r0, [pc, #24]	; (b8a60 <_Z22__fetch_global_Serial1v+0x40>)
   b8a46:	f7ff fdeb 	bl	b8620 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8a4a:	4628      	mov	r0, r5
   b8a4c:	f7fb fb3b 	bl	b40c6 <__cxa_guard_release>
   b8a50:	4804      	ldr	r0, [pc, #16]	; (b8a64 <_Z22__fetch_global_Serial1v+0x44>)
   b8a52:	f000 fc55 	bl	b9300 <atexit>
    return serial1;
}
   b8a56:	4802      	ldr	r0, [pc, #8]	; (b8a60 <_Z22__fetch_global_Serial1v+0x40>)
   b8a58:	b007      	add	sp, #28
   b8a5a:	bd30      	pop	{r4, r5, pc}
   b8a5c:	2003e748 	.word	0x2003e748
   b8a60:	2003e74c 	.word	0x2003e74c
   b8a64:	000b89e9 	.word	0x000b89e9

000b8a68 <_ZnwjRKSt9nothrow_t>:
   b8a68:	f7fb bb15 	b.w	b4096 <_Znwj>

000b8a6c <_ZnajRKSt9nothrow_t>:
   b8a6c:	f7fb bb15 	b.w	b409a <_Znaj>

000b8a70 <_ZSt25__throw_bad_function_callv>:
   b8a70:	b508      	push	{r3, lr}
   b8a72:	f7fe fc5b 	bl	b732c <abort>
	...

000b8a78 <__aeabi_drsub>:
   b8a78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8a7c:	e002      	b.n	b8a84 <__adddf3>
   b8a7e:	bf00      	nop

000b8a80 <__aeabi_dsub>:
   b8a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8a84 <__adddf3>:
   b8a84:	b530      	push	{r4, r5, lr}
   b8a86:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8a8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8a8e:	ea94 0f05 	teq	r4, r5
   b8a92:	bf08      	it	eq
   b8a94:	ea90 0f02 	teqeq	r0, r2
   b8a98:	bf1f      	itttt	ne
   b8a9a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8a9e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8aa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8aa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8aaa:	f000 80e2 	beq.w	b8c72 <__adddf3+0x1ee>
   b8aae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8ab2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8ab6:	bfb8      	it	lt
   b8ab8:	426d      	neglt	r5, r5
   b8aba:	dd0c      	ble.n	b8ad6 <__adddf3+0x52>
   b8abc:	442c      	add	r4, r5
   b8abe:	ea80 0202 	eor.w	r2, r0, r2
   b8ac2:	ea81 0303 	eor.w	r3, r1, r3
   b8ac6:	ea82 0000 	eor.w	r0, r2, r0
   b8aca:	ea83 0101 	eor.w	r1, r3, r1
   b8ace:	ea80 0202 	eor.w	r2, r0, r2
   b8ad2:	ea81 0303 	eor.w	r3, r1, r3
   b8ad6:	2d36      	cmp	r5, #54	; 0x36
   b8ad8:	bf88      	it	hi
   b8ada:	bd30      	pophi	{r4, r5, pc}
   b8adc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8ae4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8ae8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8aec:	d002      	beq.n	b8af4 <__adddf3+0x70>
   b8aee:	4240      	negs	r0, r0
   b8af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8af4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8afc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8b00:	d002      	beq.n	b8b08 <__adddf3+0x84>
   b8b02:	4252      	negs	r2, r2
   b8b04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8b08:	ea94 0f05 	teq	r4, r5
   b8b0c:	f000 80a7 	beq.w	b8c5e <__adddf3+0x1da>
   b8b10:	f1a4 0401 	sub.w	r4, r4, #1
   b8b14:	f1d5 0e20 	rsbs	lr, r5, #32
   b8b18:	db0d      	blt.n	b8b36 <__adddf3+0xb2>
   b8b1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8b1e:	fa22 f205 	lsr.w	r2, r2, r5
   b8b22:	1880      	adds	r0, r0, r2
   b8b24:	f141 0100 	adc.w	r1, r1, #0
   b8b28:	fa03 f20e 	lsl.w	r2, r3, lr
   b8b2c:	1880      	adds	r0, r0, r2
   b8b2e:	fa43 f305 	asr.w	r3, r3, r5
   b8b32:	4159      	adcs	r1, r3
   b8b34:	e00e      	b.n	b8b54 <__adddf3+0xd0>
   b8b36:	f1a5 0520 	sub.w	r5, r5, #32
   b8b3a:	f10e 0e20 	add.w	lr, lr, #32
   b8b3e:	2a01      	cmp	r2, #1
   b8b40:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8b44:	bf28      	it	cs
   b8b46:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8b4a:	fa43 f305 	asr.w	r3, r3, r5
   b8b4e:	18c0      	adds	r0, r0, r3
   b8b50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8b58:	d507      	bpl.n	b8b6a <__adddf3+0xe6>
   b8b5a:	f04f 0e00 	mov.w	lr, #0
   b8b5e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8b62:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8b66:	eb6e 0101 	sbc.w	r1, lr, r1
   b8b6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8b6e:	d31b      	bcc.n	b8ba8 <__adddf3+0x124>
   b8b70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8b74:	d30c      	bcc.n	b8b90 <__adddf3+0x10c>
   b8b76:	0849      	lsrs	r1, r1, #1
   b8b78:	ea5f 0030 	movs.w	r0, r0, rrx
   b8b7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8b80:	f104 0401 	add.w	r4, r4, #1
   b8b84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8b88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8b8c:	f080 809a 	bcs.w	b8cc4 <__adddf3+0x240>
   b8b90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8b94:	bf08      	it	eq
   b8b96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8b9a:	f150 0000 	adcs.w	r0, r0, #0
   b8b9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8ba2:	ea41 0105 	orr.w	r1, r1, r5
   b8ba6:	bd30      	pop	{r4, r5, pc}
   b8ba8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8bac:	4140      	adcs	r0, r0
   b8bae:	eb41 0101 	adc.w	r1, r1, r1
   b8bb2:	3c01      	subs	r4, #1
   b8bb4:	bf28      	it	cs
   b8bb6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8bba:	d2e9      	bcs.n	b8b90 <__adddf3+0x10c>
   b8bbc:	f091 0f00 	teq	r1, #0
   b8bc0:	bf04      	itt	eq
   b8bc2:	4601      	moveq	r1, r0
   b8bc4:	2000      	moveq	r0, #0
   b8bc6:	fab1 f381 	clz	r3, r1
   b8bca:	bf08      	it	eq
   b8bcc:	3320      	addeq	r3, #32
   b8bce:	f1a3 030b 	sub.w	r3, r3, #11
   b8bd2:	f1b3 0220 	subs.w	r2, r3, #32
   b8bd6:	da0c      	bge.n	b8bf2 <__adddf3+0x16e>
   b8bd8:	320c      	adds	r2, #12
   b8bda:	dd08      	ble.n	b8bee <__adddf3+0x16a>
   b8bdc:	f102 0c14 	add.w	ip, r2, #20
   b8be0:	f1c2 020c 	rsb	r2, r2, #12
   b8be4:	fa01 f00c 	lsl.w	r0, r1, ip
   b8be8:	fa21 f102 	lsr.w	r1, r1, r2
   b8bec:	e00c      	b.n	b8c08 <__adddf3+0x184>
   b8bee:	f102 0214 	add.w	r2, r2, #20
   b8bf2:	bfd8      	it	le
   b8bf4:	f1c2 0c20 	rsble	ip, r2, #32
   b8bf8:	fa01 f102 	lsl.w	r1, r1, r2
   b8bfc:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8c00:	bfdc      	itt	le
   b8c02:	ea41 010c 	orrle.w	r1, r1, ip
   b8c06:	4090      	lslle	r0, r2
   b8c08:	1ae4      	subs	r4, r4, r3
   b8c0a:	bfa2      	ittt	ge
   b8c0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8c10:	4329      	orrge	r1, r5
   b8c12:	bd30      	popge	{r4, r5, pc}
   b8c14:	ea6f 0404 	mvn.w	r4, r4
   b8c18:	3c1f      	subs	r4, #31
   b8c1a:	da1c      	bge.n	b8c56 <__adddf3+0x1d2>
   b8c1c:	340c      	adds	r4, #12
   b8c1e:	dc0e      	bgt.n	b8c3e <__adddf3+0x1ba>
   b8c20:	f104 0414 	add.w	r4, r4, #20
   b8c24:	f1c4 0220 	rsb	r2, r4, #32
   b8c28:	fa20 f004 	lsr.w	r0, r0, r4
   b8c2c:	fa01 f302 	lsl.w	r3, r1, r2
   b8c30:	ea40 0003 	orr.w	r0, r0, r3
   b8c34:	fa21 f304 	lsr.w	r3, r1, r4
   b8c38:	ea45 0103 	orr.w	r1, r5, r3
   b8c3c:	bd30      	pop	{r4, r5, pc}
   b8c3e:	f1c4 040c 	rsb	r4, r4, #12
   b8c42:	f1c4 0220 	rsb	r2, r4, #32
   b8c46:	fa20 f002 	lsr.w	r0, r0, r2
   b8c4a:	fa01 f304 	lsl.w	r3, r1, r4
   b8c4e:	ea40 0003 	orr.w	r0, r0, r3
   b8c52:	4629      	mov	r1, r5
   b8c54:	bd30      	pop	{r4, r5, pc}
   b8c56:	fa21 f004 	lsr.w	r0, r1, r4
   b8c5a:	4629      	mov	r1, r5
   b8c5c:	bd30      	pop	{r4, r5, pc}
   b8c5e:	f094 0f00 	teq	r4, #0
   b8c62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8c66:	bf06      	itte	eq
   b8c68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8c6c:	3401      	addeq	r4, #1
   b8c6e:	3d01      	subne	r5, #1
   b8c70:	e74e      	b.n	b8b10 <__adddf3+0x8c>
   b8c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8c76:	bf18      	it	ne
   b8c78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8c7c:	d029      	beq.n	b8cd2 <__adddf3+0x24e>
   b8c7e:	ea94 0f05 	teq	r4, r5
   b8c82:	bf08      	it	eq
   b8c84:	ea90 0f02 	teqeq	r0, r2
   b8c88:	d005      	beq.n	b8c96 <__adddf3+0x212>
   b8c8a:	ea54 0c00 	orrs.w	ip, r4, r0
   b8c8e:	bf04      	itt	eq
   b8c90:	4619      	moveq	r1, r3
   b8c92:	4610      	moveq	r0, r2
   b8c94:	bd30      	pop	{r4, r5, pc}
   b8c96:	ea91 0f03 	teq	r1, r3
   b8c9a:	bf1e      	ittt	ne
   b8c9c:	2100      	movne	r1, #0
   b8c9e:	2000      	movne	r0, #0
   b8ca0:	bd30      	popne	{r4, r5, pc}
   b8ca2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8ca6:	d105      	bne.n	b8cb4 <__adddf3+0x230>
   b8ca8:	0040      	lsls	r0, r0, #1
   b8caa:	4149      	adcs	r1, r1
   b8cac:	bf28      	it	cs
   b8cae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8cb2:	bd30      	pop	{r4, r5, pc}
   b8cb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8cb8:	bf3c      	itt	cc
   b8cba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8cbe:	bd30      	popcc	{r4, r5, pc}
   b8cc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8cc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8ccc:	f04f 0000 	mov.w	r0, #0
   b8cd0:	bd30      	pop	{r4, r5, pc}
   b8cd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8cd6:	bf1a      	itte	ne
   b8cd8:	4619      	movne	r1, r3
   b8cda:	4610      	movne	r0, r2
   b8cdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8ce0:	bf1c      	itt	ne
   b8ce2:	460b      	movne	r3, r1
   b8ce4:	4602      	movne	r2, r0
   b8ce6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8cea:	bf06      	itte	eq
   b8cec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8cf0:	ea91 0f03 	teqeq	r1, r3
   b8cf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8cf8:	bd30      	pop	{r4, r5, pc}
   b8cfa:	bf00      	nop

000b8cfc <__aeabi_ui2d>:
   b8cfc:	f090 0f00 	teq	r0, #0
   b8d00:	bf04      	itt	eq
   b8d02:	2100      	moveq	r1, #0
   b8d04:	4770      	bxeq	lr
   b8d06:	b530      	push	{r4, r5, lr}
   b8d08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8d0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8d10:	f04f 0500 	mov.w	r5, #0
   b8d14:	f04f 0100 	mov.w	r1, #0
   b8d18:	e750      	b.n	b8bbc <__adddf3+0x138>
   b8d1a:	bf00      	nop

000b8d1c <__aeabi_i2d>:
   b8d1c:	f090 0f00 	teq	r0, #0
   b8d20:	bf04      	itt	eq
   b8d22:	2100      	moveq	r1, #0
   b8d24:	4770      	bxeq	lr
   b8d26:	b530      	push	{r4, r5, lr}
   b8d28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8d2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8d30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8d34:	bf48      	it	mi
   b8d36:	4240      	negmi	r0, r0
   b8d38:	f04f 0100 	mov.w	r1, #0
   b8d3c:	e73e      	b.n	b8bbc <__adddf3+0x138>
   b8d3e:	bf00      	nop

000b8d40 <__aeabi_f2d>:
   b8d40:	0042      	lsls	r2, r0, #1
   b8d42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8d46:	ea4f 0131 	mov.w	r1, r1, rrx
   b8d4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8d4e:	bf1f      	itttt	ne
   b8d50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8d54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8d58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8d5c:	4770      	bxne	lr
   b8d5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8d62:	bf08      	it	eq
   b8d64:	4770      	bxeq	lr
   b8d66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8d6a:	bf04      	itt	eq
   b8d6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8d70:	4770      	bxeq	lr
   b8d72:	b530      	push	{r4, r5, lr}
   b8d74:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8d7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8d80:	e71c      	b.n	b8bbc <__adddf3+0x138>
   b8d82:	bf00      	nop

000b8d84 <__aeabi_ul2d>:
   b8d84:	ea50 0201 	orrs.w	r2, r0, r1
   b8d88:	bf08      	it	eq
   b8d8a:	4770      	bxeq	lr
   b8d8c:	b530      	push	{r4, r5, lr}
   b8d8e:	f04f 0500 	mov.w	r5, #0
   b8d92:	e00a      	b.n	b8daa <__aeabi_l2d+0x16>

000b8d94 <__aeabi_l2d>:
   b8d94:	ea50 0201 	orrs.w	r2, r0, r1
   b8d98:	bf08      	it	eq
   b8d9a:	4770      	bxeq	lr
   b8d9c:	b530      	push	{r4, r5, lr}
   b8d9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8da2:	d502      	bpl.n	b8daa <__aeabi_l2d+0x16>
   b8da4:	4240      	negs	r0, r0
   b8da6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8daa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8dae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8db2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8db6:	f43f aed8 	beq.w	b8b6a <__adddf3+0xe6>
   b8dba:	f04f 0203 	mov.w	r2, #3
   b8dbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8dc2:	bf18      	it	ne
   b8dc4:	3203      	addne	r2, #3
   b8dc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8dca:	bf18      	it	ne
   b8dcc:	3203      	addne	r2, #3
   b8dce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8dd2:	f1c2 0320 	rsb	r3, r2, #32
   b8dd6:	fa00 fc03 	lsl.w	ip, r0, r3
   b8dda:	fa20 f002 	lsr.w	r0, r0, r2
   b8dde:	fa01 fe03 	lsl.w	lr, r1, r3
   b8de2:	ea40 000e 	orr.w	r0, r0, lr
   b8de6:	fa21 f102 	lsr.w	r1, r1, r2
   b8dea:	4414      	add	r4, r2
   b8dec:	e6bd      	b.n	b8b6a <__adddf3+0xe6>
   b8dee:	bf00      	nop

000b8df0 <__aeabi_dmul>:
   b8df0:	b570      	push	{r4, r5, r6, lr}
   b8df2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8df6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8dfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8dfe:	bf1d      	ittte	ne
   b8e00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8e04:	ea94 0f0c 	teqne	r4, ip
   b8e08:	ea95 0f0c 	teqne	r5, ip
   b8e0c:	f000 f8de 	bleq	b8fcc <__aeabi_dmul+0x1dc>
   b8e10:	442c      	add	r4, r5
   b8e12:	ea81 0603 	eor.w	r6, r1, r3
   b8e16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8e1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8e1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8e22:	bf18      	it	ne
   b8e24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8e28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8e30:	d038      	beq.n	b8ea4 <__aeabi_dmul+0xb4>
   b8e32:	fba0 ce02 	umull	ip, lr, r0, r2
   b8e36:	f04f 0500 	mov.w	r5, #0
   b8e3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8e3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8e42:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8e46:	f04f 0600 	mov.w	r6, #0
   b8e4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8e4e:	f09c 0f00 	teq	ip, #0
   b8e52:	bf18      	it	ne
   b8e54:	f04e 0e01 	orrne.w	lr, lr, #1
   b8e58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8e5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8e60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8e64:	d204      	bcs.n	b8e70 <__aeabi_dmul+0x80>
   b8e66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8e6a:	416d      	adcs	r5, r5
   b8e6c:	eb46 0606 	adc.w	r6, r6, r6
   b8e70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8e74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8e78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8e7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8e80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8e84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8e88:	bf88      	it	hi
   b8e8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8e8e:	d81e      	bhi.n	b8ece <__aeabi_dmul+0xde>
   b8e90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8e94:	bf08      	it	eq
   b8e96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8e9a:	f150 0000 	adcs.w	r0, r0, #0
   b8e9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8ea2:	bd70      	pop	{r4, r5, r6, pc}
   b8ea4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8ea8:	ea46 0101 	orr.w	r1, r6, r1
   b8eac:	ea40 0002 	orr.w	r0, r0, r2
   b8eb0:	ea81 0103 	eor.w	r1, r1, r3
   b8eb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8eb8:	bfc2      	ittt	gt
   b8eba:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8ebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8ec2:	bd70      	popgt	{r4, r5, r6, pc}
   b8ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ec8:	f04f 0e00 	mov.w	lr, #0
   b8ecc:	3c01      	subs	r4, #1
   b8ece:	f300 80ab 	bgt.w	b9028 <__aeabi_dmul+0x238>
   b8ed2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8ed6:	bfde      	ittt	le
   b8ed8:	2000      	movle	r0, #0
   b8eda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8ede:	bd70      	pople	{r4, r5, r6, pc}
   b8ee0:	f1c4 0400 	rsb	r4, r4, #0
   b8ee4:	3c20      	subs	r4, #32
   b8ee6:	da35      	bge.n	b8f54 <__aeabi_dmul+0x164>
   b8ee8:	340c      	adds	r4, #12
   b8eea:	dc1b      	bgt.n	b8f24 <__aeabi_dmul+0x134>
   b8eec:	f104 0414 	add.w	r4, r4, #20
   b8ef0:	f1c4 0520 	rsb	r5, r4, #32
   b8ef4:	fa00 f305 	lsl.w	r3, r0, r5
   b8ef8:	fa20 f004 	lsr.w	r0, r0, r4
   b8efc:	fa01 f205 	lsl.w	r2, r1, r5
   b8f00:	ea40 0002 	orr.w	r0, r0, r2
   b8f04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8f0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8f10:	fa21 f604 	lsr.w	r6, r1, r4
   b8f14:	eb42 0106 	adc.w	r1, r2, r6
   b8f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8f1c:	bf08      	it	eq
   b8f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8f22:	bd70      	pop	{r4, r5, r6, pc}
   b8f24:	f1c4 040c 	rsb	r4, r4, #12
   b8f28:	f1c4 0520 	rsb	r5, r4, #32
   b8f2c:	fa00 f304 	lsl.w	r3, r0, r4
   b8f30:	fa20 f005 	lsr.w	r0, r0, r5
   b8f34:	fa01 f204 	lsl.w	r2, r1, r4
   b8f38:	ea40 0002 	orr.w	r0, r0, r2
   b8f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8f40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8f44:	f141 0100 	adc.w	r1, r1, #0
   b8f48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8f4c:	bf08      	it	eq
   b8f4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8f52:	bd70      	pop	{r4, r5, r6, pc}
   b8f54:	f1c4 0520 	rsb	r5, r4, #32
   b8f58:	fa00 f205 	lsl.w	r2, r0, r5
   b8f5c:	ea4e 0e02 	orr.w	lr, lr, r2
   b8f60:	fa20 f304 	lsr.w	r3, r0, r4
   b8f64:	fa01 f205 	lsl.w	r2, r1, r5
   b8f68:	ea43 0302 	orr.w	r3, r3, r2
   b8f6c:	fa21 f004 	lsr.w	r0, r1, r4
   b8f70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8f74:	fa21 f204 	lsr.w	r2, r1, r4
   b8f78:	ea20 0002 	bic.w	r0, r0, r2
   b8f7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8f84:	bf08      	it	eq
   b8f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8f8a:	bd70      	pop	{r4, r5, r6, pc}
   b8f8c:	f094 0f00 	teq	r4, #0
   b8f90:	d10f      	bne.n	b8fb2 <__aeabi_dmul+0x1c2>
   b8f92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8f96:	0040      	lsls	r0, r0, #1
   b8f98:	eb41 0101 	adc.w	r1, r1, r1
   b8f9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8fa0:	bf08      	it	eq
   b8fa2:	3c01      	subeq	r4, #1
   b8fa4:	d0f7      	beq.n	b8f96 <__aeabi_dmul+0x1a6>
   b8fa6:	ea41 0106 	orr.w	r1, r1, r6
   b8faa:	f095 0f00 	teq	r5, #0
   b8fae:	bf18      	it	ne
   b8fb0:	4770      	bxne	lr
   b8fb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8fb6:	0052      	lsls	r2, r2, #1
   b8fb8:	eb43 0303 	adc.w	r3, r3, r3
   b8fbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8fc0:	bf08      	it	eq
   b8fc2:	3d01      	subeq	r5, #1
   b8fc4:	d0f7      	beq.n	b8fb6 <__aeabi_dmul+0x1c6>
   b8fc6:	ea43 0306 	orr.w	r3, r3, r6
   b8fca:	4770      	bx	lr
   b8fcc:	ea94 0f0c 	teq	r4, ip
   b8fd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8fd4:	bf18      	it	ne
   b8fd6:	ea95 0f0c 	teqne	r5, ip
   b8fda:	d00c      	beq.n	b8ff6 <__aeabi_dmul+0x206>
   b8fdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8fe0:	bf18      	it	ne
   b8fe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8fe6:	d1d1      	bne.n	b8f8c <__aeabi_dmul+0x19c>
   b8fe8:	ea81 0103 	eor.w	r1, r1, r3
   b8fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8ff0:	f04f 0000 	mov.w	r0, #0
   b8ff4:	bd70      	pop	{r4, r5, r6, pc}
   b8ff6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8ffa:	bf06      	itte	eq
   b8ffc:	4610      	moveq	r0, r2
   b8ffe:	4619      	moveq	r1, r3
   b9000:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9004:	d019      	beq.n	b903a <__aeabi_dmul+0x24a>
   b9006:	ea94 0f0c 	teq	r4, ip
   b900a:	d102      	bne.n	b9012 <__aeabi_dmul+0x222>
   b900c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9010:	d113      	bne.n	b903a <__aeabi_dmul+0x24a>
   b9012:	ea95 0f0c 	teq	r5, ip
   b9016:	d105      	bne.n	b9024 <__aeabi_dmul+0x234>
   b9018:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b901c:	bf1c      	itt	ne
   b901e:	4610      	movne	r0, r2
   b9020:	4619      	movne	r1, r3
   b9022:	d10a      	bne.n	b903a <__aeabi_dmul+0x24a>
   b9024:	ea81 0103 	eor.w	r1, r1, r3
   b9028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b902c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9030:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9034:	f04f 0000 	mov.w	r0, #0
   b9038:	bd70      	pop	{r4, r5, r6, pc}
   b903a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b903e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9042:	bd70      	pop	{r4, r5, r6, pc}

000b9044 <__aeabi_ddiv>:
   b9044:	b570      	push	{r4, r5, r6, lr}
   b9046:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b904a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b904e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9052:	bf1d      	ittte	ne
   b9054:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9058:	ea94 0f0c 	teqne	r4, ip
   b905c:	ea95 0f0c 	teqne	r5, ip
   b9060:	f000 f8a7 	bleq	b91b2 <__aeabi_ddiv+0x16e>
   b9064:	eba4 0405 	sub.w	r4, r4, r5
   b9068:	ea81 0e03 	eor.w	lr, r1, r3
   b906c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9070:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9074:	f000 8088 	beq.w	b9188 <__aeabi_ddiv+0x144>
   b9078:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b907c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9080:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9084:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9088:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b908c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9090:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9094:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9098:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b909c:	429d      	cmp	r5, r3
   b909e:	bf08      	it	eq
   b90a0:	4296      	cmpeq	r6, r2
   b90a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b90a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b90aa:	d202      	bcs.n	b90b2 <__aeabi_ddiv+0x6e>
   b90ac:	085b      	lsrs	r3, r3, #1
   b90ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b90b2:	1ab6      	subs	r6, r6, r2
   b90b4:	eb65 0503 	sbc.w	r5, r5, r3
   b90b8:	085b      	lsrs	r3, r3, #1
   b90ba:	ea4f 0232 	mov.w	r2, r2, rrx
   b90be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b90c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b90c6:	ebb6 0e02 	subs.w	lr, r6, r2
   b90ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90ce:	bf22      	ittt	cs
   b90d0:	1ab6      	subcs	r6, r6, r2
   b90d2:	4675      	movcs	r5, lr
   b90d4:	ea40 000c 	orrcs.w	r0, r0, ip
   b90d8:	085b      	lsrs	r3, r3, #1
   b90da:	ea4f 0232 	mov.w	r2, r2, rrx
   b90de:	ebb6 0e02 	subs.w	lr, r6, r2
   b90e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90e6:	bf22      	ittt	cs
   b90e8:	1ab6      	subcs	r6, r6, r2
   b90ea:	4675      	movcs	r5, lr
   b90ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b90f0:	085b      	lsrs	r3, r3, #1
   b90f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b90f6:	ebb6 0e02 	subs.w	lr, r6, r2
   b90fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90fe:	bf22      	ittt	cs
   b9100:	1ab6      	subcs	r6, r6, r2
   b9102:	4675      	movcs	r5, lr
   b9104:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9108:	085b      	lsrs	r3, r3, #1
   b910a:	ea4f 0232 	mov.w	r2, r2, rrx
   b910e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9112:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9116:	bf22      	ittt	cs
   b9118:	1ab6      	subcs	r6, r6, r2
   b911a:	4675      	movcs	r5, lr
   b911c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9120:	ea55 0e06 	orrs.w	lr, r5, r6
   b9124:	d018      	beq.n	b9158 <__aeabi_ddiv+0x114>
   b9126:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b912a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b912e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9132:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9136:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b913a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b913e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9142:	d1c0      	bne.n	b90c6 <__aeabi_ddiv+0x82>
   b9144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9148:	d10b      	bne.n	b9162 <__aeabi_ddiv+0x11e>
   b914a:	ea41 0100 	orr.w	r1, r1, r0
   b914e:	f04f 0000 	mov.w	r0, #0
   b9152:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9156:	e7b6      	b.n	b90c6 <__aeabi_ddiv+0x82>
   b9158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b915c:	bf04      	itt	eq
   b915e:	4301      	orreq	r1, r0
   b9160:	2000      	moveq	r0, #0
   b9162:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9166:	bf88      	it	hi
   b9168:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b916c:	f63f aeaf 	bhi.w	b8ece <__aeabi_dmul+0xde>
   b9170:	ebb5 0c03 	subs.w	ip, r5, r3
   b9174:	bf04      	itt	eq
   b9176:	ebb6 0c02 	subseq.w	ip, r6, r2
   b917a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b917e:	f150 0000 	adcs.w	r0, r0, #0
   b9182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9186:	bd70      	pop	{r4, r5, r6, pc}
   b9188:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b918c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9190:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9194:	bfc2      	ittt	gt
   b9196:	ebd4 050c 	rsbsgt	r5, r4, ip
   b919a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b919e:	bd70      	popgt	{r4, r5, r6, pc}
   b91a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b91a4:	f04f 0e00 	mov.w	lr, #0
   b91a8:	3c01      	subs	r4, #1
   b91aa:	e690      	b.n	b8ece <__aeabi_dmul+0xde>
   b91ac:	ea45 0e06 	orr.w	lr, r5, r6
   b91b0:	e68d      	b.n	b8ece <__aeabi_dmul+0xde>
   b91b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b91b6:	ea94 0f0c 	teq	r4, ip
   b91ba:	bf08      	it	eq
   b91bc:	ea95 0f0c 	teqeq	r5, ip
   b91c0:	f43f af3b 	beq.w	b903a <__aeabi_dmul+0x24a>
   b91c4:	ea94 0f0c 	teq	r4, ip
   b91c8:	d10a      	bne.n	b91e0 <__aeabi_ddiv+0x19c>
   b91ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b91ce:	f47f af34 	bne.w	b903a <__aeabi_dmul+0x24a>
   b91d2:	ea95 0f0c 	teq	r5, ip
   b91d6:	f47f af25 	bne.w	b9024 <__aeabi_dmul+0x234>
   b91da:	4610      	mov	r0, r2
   b91dc:	4619      	mov	r1, r3
   b91de:	e72c      	b.n	b903a <__aeabi_dmul+0x24a>
   b91e0:	ea95 0f0c 	teq	r5, ip
   b91e4:	d106      	bne.n	b91f4 <__aeabi_ddiv+0x1b0>
   b91e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b91ea:	f43f aefd 	beq.w	b8fe8 <__aeabi_dmul+0x1f8>
   b91ee:	4610      	mov	r0, r2
   b91f0:	4619      	mov	r1, r3
   b91f2:	e722      	b.n	b903a <__aeabi_dmul+0x24a>
   b91f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b91f8:	bf18      	it	ne
   b91fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b91fe:	f47f aec5 	bne.w	b8f8c <__aeabi_dmul+0x19c>
   b9202:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9206:	f47f af0d 	bne.w	b9024 <__aeabi_dmul+0x234>
   b920a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b920e:	f47f aeeb 	bne.w	b8fe8 <__aeabi_dmul+0x1f8>
   b9212:	e712      	b.n	b903a <__aeabi_dmul+0x24a>

000b9214 <__aeabi_d2f>:
   b9214:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9218:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b921c:	bf24      	itt	cs
   b921e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9222:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9226:	d90d      	bls.n	b9244 <__aeabi_d2f+0x30>
   b9228:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b922c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9230:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9234:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9238:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b923c:	bf08      	it	eq
   b923e:	f020 0001 	biceq.w	r0, r0, #1
   b9242:	4770      	bx	lr
   b9244:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9248:	d121      	bne.n	b928e <__aeabi_d2f+0x7a>
   b924a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b924e:	bfbc      	itt	lt
   b9250:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9254:	4770      	bxlt	lr
   b9256:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b925a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b925e:	f1c2 0218 	rsb	r2, r2, #24
   b9262:	f1c2 0c20 	rsb	ip, r2, #32
   b9266:	fa10 f30c 	lsls.w	r3, r0, ip
   b926a:	fa20 f002 	lsr.w	r0, r0, r2
   b926e:	bf18      	it	ne
   b9270:	f040 0001 	orrne.w	r0, r0, #1
   b9274:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9278:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b927c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9280:	ea40 000c 	orr.w	r0, r0, ip
   b9284:	fa23 f302 	lsr.w	r3, r3, r2
   b9288:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b928c:	e7cc      	b.n	b9228 <__aeabi_d2f+0x14>
   b928e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b9292:	d107      	bne.n	b92a4 <__aeabi_d2f+0x90>
   b9294:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9298:	bf1e      	ittt	ne
   b929a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b929e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b92a2:	4770      	bxne	lr
   b92a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b92a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b92ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b92b0:	4770      	bx	lr
   b92b2:	bf00      	nop

000b92b4 <asctime_r>:
   b92b4:	b510      	push	{r4, lr}
   b92b6:	460c      	mov	r4, r1
   b92b8:	6941      	ldr	r1, [r0, #20]
   b92ba:	6903      	ldr	r3, [r0, #16]
   b92bc:	6982      	ldr	r2, [r0, #24]
   b92be:	b086      	sub	sp, #24
   b92c0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b92c4:	9104      	str	r1, [sp, #16]
   b92c6:	6801      	ldr	r1, [r0, #0]
   b92c8:	9103      	str	r1, [sp, #12]
   b92ca:	6841      	ldr	r1, [r0, #4]
   b92cc:	9102      	str	r1, [sp, #8]
   b92ce:	6881      	ldr	r1, [r0, #8]
   b92d0:	9101      	str	r1, [sp, #4]
   b92d2:	68c1      	ldr	r1, [r0, #12]
   b92d4:	9100      	str	r1, [sp, #0]
   b92d6:	4907      	ldr	r1, [pc, #28]	; (b92f4 <asctime_r+0x40>)
   b92d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b92dc:	440b      	add	r3, r1
   b92de:	4906      	ldr	r1, [pc, #24]	; (b92f8 <asctime_r+0x44>)
   b92e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b92e4:	440a      	add	r2, r1
   b92e6:	4620      	mov	r0, r4
   b92e8:	4904      	ldr	r1, [pc, #16]	; (b92fc <asctime_r+0x48>)
   b92ea:	f7fe f80f 	bl	b730c <siprintf>
   b92ee:	4620      	mov	r0, r4
   b92f0:	b006      	add	sp, #24
   b92f2:	bd10      	pop	{r4, pc}
   b92f4:	000b9f7a 	.word	0x000b9f7a
   b92f8:	000b9f65 	.word	0x000b9f65
   b92fc:	000b9f45 	.word	0x000b9f45

000b9300 <atexit>:
   b9300:	2300      	movs	r3, #0
   b9302:	4601      	mov	r1, r0
   b9304:	461a      	mov	r2, r3
   b9306:	4618      	mov	r0, r3
   b9308:	f000 b956 	b.w	b95b8 <__register_exitproc>

000b930c <atoi>:
   b930c:	220a      	movs	r2, #10
   b930e:	2100      	movs	r1, #0
   b9310:	f000 b948 	b.w	b95a4 <strtol>

000b9314 <gmtime>:
   b9314:	b538      	push	{r3, r4, r5, lr}
   b9316:	4b0b      	ldr	r3, [pc, #44]	; (b9344 <gmtime+0x30>)
   b9318:	681d      	ldr	r5, [r3, #0]
   b931a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b931c:	4604      	mov	r4, r0
   b931e:	b953      	cbnz	r3, b9336 <gmtime+0x22>
   b9320:	2024      	movs	r0, #36	; 0x24
   b9322:	f7fd ffdb 	bl	b72dc <malloc>
   b9326:	4602      	mov	r2, r0
   b9328:	63e8      	str	r0, [r5, #60]	; 0x3c
   b932a:	b920      	cbnz	r0, b9336 <gmtime+0x22>
   b932c:	4b06      	ldr	r3, [pc, #24]	; (b9348 <gmtime+0x34>)
   b932e:	4807      	ldr	r0, [pc, #28]	; (b934c <gmtime+0x38>)
   b9330:	2139      	movs	r1, #57	; 0x39
   b9332:	f7fe f813 	bl	b735c <__assert_func>
   b9336:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b9338:	4620      	mov	r0, r4
   b933a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b933e:	f7fe b82d 	b.w	b739c <gmtime_r>
   b9342:	bf00      	nop
   b9344:	2003e3fc 	.word	0x2003e3fc
   b9348:	000b9f9e 	.word	0x000b9f9e
   b934c:	000b9fb5 	.word	0x000b9fb5

000b9350 <memcpy>:
   b9350:	440a      	add	r2, r1
   b9352:	4291      	cmp	r1, r2
   b9354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9358:	d100      	bne.n	b935c <memcpy+0xc>
   b935a:	4770      	bx	lr
   b935c:	b510      	push	{r4, lr}
   b935e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9362:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9366:	4291      	cmp	r1, r2
   b9368:	d1f9      	bne.n	b935e <memcpy+0xe>
   b936a:	bd10      	pop	{r4, pc}

000b936c <memmove>:
   b936c:	4288      	cmp	r0, r1
   b936e:	b510      	push	{r4, lr}
   b9370:	eb01 0402 	add.w	r4, r1, r2
   b9374:	d902      	bls.n	b937c <memmove+0x10>
   b9376:	4284      	cmp	r4, r0
   b9378:	4623      	mov	r3, r4
   b937a:	d807      	bhi.n	b938c <memmove+0x20>
   b937c:	1e43      	subs	r3, r0, #1
   b937e:	42a1      	cmp	r1, r4
   b9380:	d008      	beq.n	b9394 <memmove+0x28>
   b9382:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9386:	f803 2f01 	strb.w	r2, [r3, #1]!
   b938a:	e7f8      	b.n	b937e <memmove+0x12>
   b938c:	4402      	add	r2, r0
   b938e:	4601      	mov	r1, r0
   b9390:	428a      	cmp	r2, r1
   b9392:	d100      	bne.n	b9396 <memmove+0x2a>
   b9394:	bd10      	pop	{r4, pc}
   b9396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b939a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b939e:	e7f7      	b.n	b9390 <memmove+0x24>

000b93a0 <memset>:
   b93a0:	4402      	add	r2, r0
   b93a2:	4603      	mov	r3, r0
   b93a4:	4293      	cmp	r3, r2
   b93a6:	d100      	bne.n	b93aa <memset+0xa>
   b93a8:	4770      	bx	lr
   b93aa:	f803 1b01 	strb.w	r1, [r3], #1
   b93ae:	e7f9      	b.n	b93a4 <memset+0x4>

000b93b0 <srand>:
   b93b0:	b538      	push	{r3, r4, r5, lr}
   b93b2:	4b10      	ldr	r3, [pc, #64]	; (b93f4 <srand+0x44>)
   b93b4:	681d      	ldr	r5, [r3, #0]
   b93b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b93b8:	4604      	mov	r4, r0
   b93ba:	b9b3      	cbnz	r3, b93ea <srand+0x3a>
   b93bc:	2018      	movs	r0, #24
   b93be:	f7fd ff8d 	bl	b72dc <malloc>
   b93c2:	4602      	mov	r2, r0
   b93c4:	63a8      	str	r0, [r5, #56]	; 0x38
   b93c6:	b920      	cbnz	r0, b93d2 <srand+0x22>
   b93c8:	4b0b      	ldr	r3, [pc, #44]	; (b93f8 <srand+0x48>)
   b93ca:	480c      	ldr	r0, [pc, #48]	; (b93fc <srand+0x4c>)
   b93cc:	2142      	movs	r1, #66	; 0x42
   b93ce:	f7fd ffc5 	bl	b735c <__assert_func>
   b93d2:	490b      	ldr	r1, [pc, #44]	; (b9400 <srand+0x50>)
   b93d4:	4b0b      	ldr	r3, [pc, #44]	; (b9404 <srand+0x54>)
   b93d6:	e9c0 1300 	strd	r1, r3, [r0]
   b93da:	4b0b      	ldr	r3, [pc, #44]	; (b9408 <srand+0x58>)
   b93dc:	6083      	str	r3, [r0, #8]
   b93de:	230b      	movs	r3, #11
   b93e0:	8183      	strh	r3, [r0, #12]
   b93e2:	2100      	movs	r1, #0
   b93e4:	2001      	movs	r0, #1
   b93e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b93ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b93ec:	2200      	movs	r2, #0
   b93ee:	611c      	str	r4, [r3, #16]
   b93f0:	615a      	str	r2, [r3, #20]
   b93f2:	bd38      	pop	{r3, r4, r5, pc}
   b93f4:	2003e3fc 	.word	0x2003e3fc
   b93f8:	000b9f9e 	.word	0x000b9f9e
   b93fc:	000ba00e 	.word	0x000ba00e
   b9400:	abcd330e 	.word	0xabcd330e
   b9404:	e66d1234 	.word	0xe66d1234
   b9408:	0005deec 	.word	0x0005deec

000b940c <strcmp>:
   b940c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9410:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9414:	2a01      	cmp	r2, #1
   b9416:	bf28      	it	cs
   b9418:	429a      	cmpcs	r2, r3
   b941a:	d0f7      	beq.n	b940c <strcmp>
   b941c:	1ad0      	subs	r0, r2, r3
   b941e:	4770      	bx	lr

000b9420 <strcpy>:
   b9420:	4603      	mov	r3, r0
   b9422:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9426:	f803 2b01 	strb.w	r2, [r3], #1
   b942a:	2a00      	cmp	r2, #0
   b942c:	d1f9      	bne.n	b9422 <strcpy+0x2>
   b942e:	4770      	bx	lr

000b9430 <strdup>:
   b9430:	4b02      	ldr	r3, [pc, #8]	; (b943c <strdup+0xc>)
   b9432:	4601      	mov	r1, r0
   b9434:	6818      	ldr	r0, [r3, #0]
   b9436:	f000 b803 	b.w	b9440 <_strdup_r>
   b943a:	bf00      	nop
   b943c:	2003e3fc 	.word	0x2003e3fc

000b9440 <_strdup_r>:
   b9440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9442:	4604      	mov	r4, r0
   b9444:	4608      	mov	r0, r1
   b9446:	460d      	mov	r5, r1
   b9448:	f000 f80f 	bl	b946a <strlen>
   b944c:	1c42      	adds	r2, r0, #1
   b944e:	4611      	mov	r1, r2
   b9450:	4620      	mov	r0, r4
   b9452:	9201      	str	r2, [sp, #4]
   b9454:	f7fd ff72 	bl	b733c <_malloc_r>
   b9458:	4604      	mov	r4, r0
   b945a:	b118      	cbz	r0, b9464 <_strdup_r+0x24>
   b945c:	9a01      	ldr	r2, [sp, #4]
   b945e:	4629      	mov	r1, r5
   b9460:	f7ff ff76 	bl	b9350 <memcpy>
   b9464:	4620      	mov	r0, r4
   b9466:	b003      	add	sp, #12
   b9468:	bd30      	pop	{r4, r5, pc}

000b946a <strlen>:
   b946a:	4603      	mov	r3, r0
   b946c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9470:	2a00      	cmp	r2, #0
   b9472:	d1fb      	bne.n	b946c <strlen+0x2>
   b9474:	1a18      	subs	r0, r3, r0
   b9476:	3801      	subs	r0, #1
   b9478:	4770      	bx	lr

000b947a <strncpy>:
   b947a:	b510      	push	{r4, lr}
   b947c:	3901      	subs	r1, #1
   b947e:	4603      	mov	r3, r0
   b9480:	b132      	cbz	r2, b9490 <strncpy+0x16>
   b9482:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9486:	f803 4b01 	strb.w	r4, [r3], #1
   b948a:	3a01      	subs	r2, #1
   b948c:	2c00      	cmp	r4, #0
   b948e:	d1f7      	bne.n	b9480 <strncpy+0x6>
   b9490:	441a      	add	r2, r3
   b9492:	2100      	movs	r1, #0
   b9494:	4293      	cmp	r3, r2
   b9496:	d100      	bne.n	b949a <strncpy+0x20>
   b9498:	bd10      	pop	{r4, pc}
   b949a:	f803 1b01 	strb.w	r1, [r3], #1
   b949e:	e7f9      	b.n	b9494 <strncpy+0x1a>

000b94a0 <_strtol_l.constprop.0>:
   b94a0:	2b01      	cmp	r3, #1
   b94a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b94a6:	d001      	beq.n	b94ac <_strtol_l.constprop.0+0xc>
   b94a8:	2b24      	cmp	r3, #36	; 0x24
   b94aa:	d906      	bls.n	b94ba <_strtol_l.constprop.0+0x1a>
   b94ac:	f7fd ff4e 	bl	b734c <__errno>
   b94b0:	2316      	movs	r3, #22
   b94b2:	6003      	str	r3, [r0, #0]
   b94b4:	2000      	movs	r0, #0
   b94b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b94ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b95a0 <_strtol_l.constprop.0+0x100>
   b94be:	460d      	mov	r5, r1
   b94c0:	462e      	mov	r6, r5
   b94c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b94c6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b94ca:	f017 0708 	ands.w	r7, r7, #8
   b94ce:	d1f7      	bne.n	b94c0 <_strtol_l.constprop.0+0x20>
   b94d0:	2c2d      	cmp	r4, #45	; 0x2d
   b94d2:	d132      	bne.n	b953a <_strtol_l.constprop.0+0x9a>
   b94d4:	782c      	ldrb	r4, [r5, #0]
   b94d6:	2701      	movs	r7, #1
   b94d8:	1cb5      	adds	r5, r6, #2
   b94da:	2b00      	cmp	r3, #0
   b94dc:	d05b      	beq.n	b9596 <_strtol_l.constprop.0+0xf6>
   b94de:	2b10      	cmp	r3, #16
   b94e0:	d109      	bne.n	b94f6 <_strtol_l.constprop.0+0x56>
   b94e2:	2c30      	cmp	r4, #48	; 0x30
   b94e4:	d107      	bne.n	b94f6 <_strtol_l.constprop.0+0x56>
   b94e6:	782c      	ldrb	r4, [r5, #0]
   b94e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b94ec:	2c58      	cmp	r4, #88	; 0x58
   b94ee:	d14d      	bne.n	b958c <_strtol_l.constprop.0+0xec>
   b94f0:	786c      	ldrb	r4, [r5, #1]
   b94f2:	2310      	movs	r3, #16
   b94f4:	3502      	adds	r5, #2
   b94f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b94fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b94fe:	f04f 0c00 	mov.w	ip, #0
   b9502:	fbb8 f9f3 	udiv	r9, r8, r3
   b9506:	4666      	mov	r6, ip
   b9508:	fb03 8a19 	mls	sl, r3, r9, r8
   b950c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9510:	f1be 0f09 	cmp.w	lr, #9
   b9514:	d816      	bhi.n	b9544 <_strtol_l.constprop.0+0xa4>
   b9516:	4674      	mov	r4, lr
   b9518:	42a3      	cmp	r3, r4
   b951a:	dd24      	ble.n	b9566 <_strtol_l.constprop.0+0xc6>
   b951c:	f1bc 0f00 	cmp.w	ip, #0
   b9520:	db1e      	blt.n	b9560 <_strtol_l.constprop.0+0xc0>
   b9522:	45b1      	cmp	r9, r6
   b9524:	d31c      	bcc.n	b9560 <_strtol_l.constprop.0+0xc0>
   b9526:	d101      	bne.n	b952c <_strtol_l.constprop.0+0x8c>
   b9528:	45a2      	cmp	sl, r4
   b952a:	db19      	blt.n	b9560 <_strtol_l.constprop.0+0xc0>
   b952c:	fb06 4603 	mla	r6, r6, r3, r4
   b9530:	f04f 0c01 	mov.w	ip, #1
   b9534:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9538:	e7e8      	b.n	b950c <_strtol_l.constprop.0+0x6c>
   b953a:	2c2b      	cmp	r4, #43	; 0x2b
   b953c:	bf04      	itt	eq
   b953e:	782c      	ldrbeq	r4, [r5, #0]
   b9540:	1cb5      	addeq	r5, r6, #2
   b9542:	e7ca      	b.n	b94da <_strtol_l.constprop.0+0x3a>
   b9544:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9548:	f1be 0f19 	cmp.w	lr, #25
   b954c:	d801      	bhi.n	b9552 <_strtol_l.constprop.0+0xb2>
   b954e:	3c37      	subs	r4, #55	; 0x37
   b9550:	e7e2      	b.n	b9518 <_strtol_l.constprop.0+0x78>
   b9552:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9556:	f1be 0f19 	cmp.w	lr, #25
   b955a:	d804      	bhi.n	b9566 <_strtol_l.constprop.0+0xc6>
   b955c:	3c57      	subs	r4, #87	; 0x57
   b955e:	e7db      	b.n	b9518 <_strtol_l.constprop.0+0x78>
   b9560:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9564:	e7e6      	b.n	b9534 <_strtol_l.constprop.0+0x94>
   b9566:	f1bc 0f00 	cmp.w	ip, #0
   b956a:	da05      	bge.n	b9578 <_strtol_l.constprop.0+0xd8>
   b956c:	2322      	movs	r3, #34	; 0x22
   b956e:	6003      	str	r3, [r0, #0]
   b9570:	4646      	mov	r6, r8
   b9572:	b942      	cbnz	r2, b9586 <_strtol_l.constprop.0+0xe6>
   b9574:	4630      	mov	r0, r6
   b9576:	e79e      	b.n	b94b6 <_strtol_l.constprop.0+0x16>
   b9578:	b107      	cbz	r7, b957c <_strtol_l.constprop.0+0xdc>
   b957a:	4276      	negs	r6, r6
   b957c:	2a00      	cmp	r2, #0
   b957e:	d0f9      	beq.n	b9574 <_strtol_l.constprop.0+0xd4>
   b9580:	f1bc 0f00 	cmp.w	ip, #0
   b9584:	d000      	beq.n	b9588 <_strtol_l.constprop.0+0xe8>
   b9586:	1e69      	subs	r1, r5, #1
   b9588:	6011      	str	r1, [r2, #0]
   b958a:	e7f3      	b.n	b9574 <_strtol_l.constprop.0+0xd4>
   b958c:	2430      	movs	r4, #48	; 0x30
   b958e:	2b00      	cmp	r3, #0
   b9590:	d1b1      	bne.n	b94f6 <_strtol_l.constprop.0+0x56>
   b9592:	2308      	movs	r3, #8
   b9594:	e7af      	b.n	b94f6 <_strtol_l.constprop.0+0x56>
   b9596:	2c30      	cmp	r4, #48	; 0x30
   b9598:	d0a5      	beq.n	b94e6 <_strtol_l.constprop.0+0x46>
   b959a:	230a      	movs	r3, #10
   b959c:	e7ab      	b.n	b94f6 <_strtol_l.constprop.0+0x56>
   b959e:	bf00      	nop
   b95a0:	000ba068 	.word	0x000ba068

000b95a4 <strtol>:
   b95a4:	4613      	mov	r3, r2
   b95a6:	460a      	mov	r2, r1
   b95a8:	4601      	mov	r1, r0
   b95aa:	4802      	ldr	r0, [pc, #8]	; (b95b4 <strtol+0x10>)
   b95ac:	6800      	ldr	r0, [r0, #0]
   b95ae:	f7ff bf77 	b.w	b94a0 <_strtol_l.constprop.0>
   b95b2:	bf00      	nop
   b95b4:	2003e3fc 	.word	0x2003e3fc

000b95b8 <__register_exitproc>:
   b95b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b95bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9678 <__register_exitproc+0xc0>
   b95c0:	4606      	mov	r6, r0
   b95c2:	f8d8 0000 	ldr.w	r0, [r8]
   b95c6:	461f      	mov	r7, r3
   b95c8:	460d      	mov	r5, r1
   b95ca:	4691      	mov	r9, r2
   b95cc:	f000 f856 	bl	b967c <__retarget_lock_acquire_recursive>
   b95d0:	4b25      	ldr	r3, [pc, #148]	; (b9668 <__register_exitproc+0xb0>)
   b95d2:	681c      	ldr	r4, [r3, #0]
   b95d4:	b934      	cbnz	r4, b95e4 <__register_exitproc+0x2c>
   b95d6:	4c25      	ldr	r4, [pc, #148]	; (b966c <__register_exitproc+0xb4>)
   b95d8:	601c      	str	r4, [r3, #0]
   b95da:	4b25      	ldr	r3, [pc, #148]	; (b9670 <__register_exitproc+0xb8>)
   b95dc:	b113      	cbz	r3, b95e4 <__register_exitproc+0x2c>
   b95de:	681b      	ldr	r3, [r3, #0]
   b95e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b95e4:	6863      	ldr	r3, [r4, #4]
   b95e6:	2b1f      	cmp	r3, #31
   b95e8:	dd07      	ble.n	b95fa <__register_exitproc+0x42>
   b95ea:	f8d8 0000 	ldr.w	r0, [r8]
   b95ee:	f000 f847 	bl	b9680 <__retarget_lock_release_recursive>
   b95f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b95f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b95fa:	b34e      	cbz	r6, b9650 <__register_exitproc+0x98>
   b95fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9600:	b988      	cbnz	r0, b9626 <__register_exitproc+0x6e>
   b9602:	4b1c      	ldr	r3, [pc, #112]	; (b9674 <__register_exitproc+0xbc>)
   b9604:	b923      	cbnz	r3, b9610 <__register_exitproc+0x58>
   b9606:	f8d8 0000 	ldr.w	r0, [r8]
   b960a:	f000 f838 	bl	b967e <__retarget_lock_release>
   b960e:	e7f0      	b.n	b95f2 <__register_exitproc+0x3a>
   b9610:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9614:	f7fd fe62 	bl	b72dc <malloc>
   b9618:	2800      	cmp	r0, #0
   b961a:	d0f4      	beq.n	b9606 <__register_exitproc+0x4e>
   b961c:	2300      	movs	r3, #0
   b961e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9622:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9626:	6863      	ldr	r3, [r4, #4]
   b9628:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b962c:	2201      	movs	r2, #1
   b962e:	409a      	lsls	r2, r3
   b9630:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9634:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9638:	4313      	orrs	r3, r2
   b963a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b963e:	2e02      	cmp	r6, #2
   b9640:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9644:	bf02      	ittt	eq
   b9646:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b964a:	4313      	orreq	r3, r2
   b964c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9650:	6863      	ldr	r3, [r4, #4]
   b9652:	f8d8 0000 	ldr.w	r0, [r8]
   b9656:	1c5a      	adds	r2, r3, #1
   b9658:	3302      	adds	r3, #2
   b965a:	6062      	str	r2, [r4, #4]
   b965c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9660:	f000 f80e 	bl	b9680 <__retarget_lock_release_recursive>
   b9664:	2000      	movs	r0, #0
   b9666:	e7c6      	b.n	b95f6 <__register_exitproc+0x3e>
   b9668:	2003e7ec 	.word	0x2003e7ec
   b966c:	2003e760 	.word	0x2003e760
   b9670:	00000000 	.word	0x00000000
   b9674:	000b72dd 	.word	0x000b72dd
   b9678:	2003e460 	.word	0x2003e460

000b967c <__retarget_lock_acquire_recursive>:
   b967c:	4770      	bx	lr

000b967e <__retarget_lock_release>:
   b967e:	4770      	bx	lr

000b9680 <__retarget_lock_release_recursive>:
   b9680:	4770      	bx	lr

000b9682 <link_code_end>:
	...

000b9684 <dynalib_user>:
   b9684:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9694:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b96a4:	7620 7269 7574 6c61 5500 6b6e 6f6e 6e77      virtual.Unknown
   b96b4:	4e00 746f 4320 6168 6772 6e69 0067 6843     .Not Charging.Ch
   b96c4:	7261 6567 0064 6944 6373 6168 6772 6e69     arged.Dischargin
   b96d4:	0067 6146 6c75 0074 6944 6f63 6e6e 6365     g.Fault.Diconnec
   b96e4:	6574 0064 2e31 3132 4100 7373 7265 6974     ted.1.21.Asserti
   b96f4:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b9704:	3c20 2820 3233 2b20 3120 2936 4b00 6565      < (32 + 16).Kee
   b9714:	2070 6c41 7669 2065 6573 2074 6f74 2520     p Alive set to %
   b9724:	2069 6573 0063 654b 7065 4120 696c 6576     i sec.Keep Alive
   b9734:	5300 7465 5620 7265 6f62 6573 4d20 646f     .Set Verbose Mod
   b9744:	0065 0030 6c43 6165 6572 2064 6556 6272     e.0.Cleared Verb
   b9754:	736f 2065 6f4d 6564 4e00 206f 6144 6174     ose Mode.No Data
   b9764:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   b9774:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   b9784:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   b9794:	6255 6469 746f 2073 6f48 6b6f 2a00 5300     Ubidots Hook.*.S
   b97a4:	7465 7420 206f 7233 2064 6150 7472 2079     et to 3rd Party 
   b97b4:	6953 006d 6553 2074 6f74 5020 7261 6974     Sim.Set to Parti
   b97c4:	6c63 2065 6953 006d 6f4c 6461 6e69 2067     cle Sim.Loading 
   b97d4:	7953 7473 6d65 4420 6665 7561 746c 0073     System Defaults.
   b97e4:	227b 6574 706d 7265 7461 7275 2265 253a     {"temperature":%
   b97f4:	2e34 6631 202c 2220 7568 696d 6964 7974     4.1f,  "humidity
   b9804:	3a22 3425 312e 2c66 2020 5322 696f 6d6c     ":%4.1f,  "Soilm
   b9814:	696f 7473 7275 2265 253a 2c69 2020 5322     oisture":%i,  "S
   b9824:	696f 6d6c 696f 7473 7275 3265 3a22 6925     oilmoisture2":%i
   b9834:	202c 2220 756c 2278 253a 2e34 6631 202c     ,  "lux":%4.1f, 
   b9844:	2220 6877 7469 2265 253a 2e34 6631 202c      "white":%4.1f, 
   b9854:	2220 6c61 2273 253a 2e34 6631 222c 6162      "als":%4.1f,"ba
   b9864:	7474 7265 2279 253a 7d69 6500 766e 7269     ttery":%i}.envir
   b9874:	6e6f 656d 746e 6c61 682d 6f6f 006b 7246     onmental-hook.Fr
   b9884:	6d6f 2520 2073 6f74 2520 0073 7453 7461     om %s to %s.Stat
   b9894:	2065 7254 6e61 6973 6974 6e6f 4c00 776f     e Transition.Low
   b98a4:	5020 776f 7265 4d20 646f 0065 7254 6575      Power Mode.True
   b98b4:	4e00 726f 616d 206c 704f 7265 7461 6f69     .Normal Operatio
   b98c4:	736e 4600 6c61 6573 4100 7373 7265 6974     ns.False.Asserti
   b98d4:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   b98e4:	7320 6372 3e2d 6163 6c6c 6162 6b63 2500      src->callback.%
   b98f4:	2e34 6631 432a 2500 2e34 6631 2525 4c00     4.1f*C.%4.1f%%.L
   b9904:	7875 3a20 2520 2e34 6631 5700 6968 6574     ux : %4.1f.White
   b9914:	3a20 2520 2e34 6631 4100 534c 3a20 2520      : %4.1f.ALS : %
   b9924:	2e34 6631 2500 2069 0025 7245 6f72 2072     4.1f.%i %.Error 
   b9934:	6174 696b 676e 4d20 6165 7573 6572 656d     taking Measureme
   b9944:	746e 0073 7453 7461 0065 7073 7261 2f6b     nts.State.spark/
   b9954:	6564 6976 6563 732f 7365 6973 6e6f 652f     device/session/e
   b9964:	646e 4500 7272 726f 5320 6174 6574 2d20     nd.Error State -
   b9974:	5220 7365 7465 2f00 6f68 6b6f 722d 7365      Reset./hook-res
   b9984:	6f70 736e 2f65 6e65 6976 6f72 6d6e 6e65     ponse/environmen
   b9994:	6174 2d6c 6f68 6b6f 002f 6552 656c 7361     tal-hook/.Releas
   b99a4:	0065 6574 706d 7265 7461 7275 0065 7568     e.temperature.hu
   b99b4:	696d 6964 7974 4c00 7875 5700 6968 6574     midity.Lux.White
   b99c4:	5200 7761 4120 534c 4200 7461 6574 7972     .Raw ALS.Battery
   b99d4:	4200 7461 6574 7972 6f43 746e 7865 0074     .BatteryContext.
   b99e4:	654b 7065 4120 696c 6576 5320 6365 6c00     Keep Alive Sec.l
   b99f4:	776f 6f50 6577 4d72 646f 0065 654d 7361     owPowerMode.Meas
   b9a04:	7275 2d65 6f4e 0077 6556 6272 736f 2d65     ure-Now.Verbose-
   b9a14:	6f4d 6564 5300 7465 4c20 776f 5020 776f     Mode.Set Low Pow
   b9a24:	7265 4500 7272 726f 2d20 5320 5448 3133     er.Error - SHT31
   b9a34:	4920 696e 6974 6c61 7a69 7461 6f69 006e      Initialization.
   b9a44:	7245 6f72 2072 202d 4556 4c4d 4920 696e     Error - VEML Ini
   b9a54:	6974 6c61 7a69 7461 6f69 006e 7453 7261     tialization.Star
   b9a64:	7574 0070                                   tup.

000b9a68 <_ZTV5Timer>:
	...
   b9a70:	442d 000b 4481 000b 4179 000b               -D...D..yA..

000b9a7c <_ZTV17PublishQueueAsync>:
	...
   b9a84:	4151 000b 4165 000b 662d 000b 6871 000b     QA..eA..-f..qh..
   b9a94:	6831 000b 680f 000b 69b7 000b 6857 000b     1h...h...i..Wh..

000b9aa4 <_ZTV8MB85RC64>:
	...
   b9aac:	4129 000b 413d 000b 5aa9 000b 5b3f 000b     )A..=A...Z..?[..
   b9abc:	5bc1 000b 96ad 000b 96b5 000b 96b9 000b     .[..............
   b9acc:	96c2 000b 96ca 000b 96d6 000b 96dc 000b     ................
   b9adc:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   b9aec:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000b9b1c <_ZL17FRAMversionNumber>:
   b9b1c:	0005 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   b9b2c:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   b9b3c:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000b9b4c <_ZTV6MB85RC>:
	...
   b9b54:	59c9 000b 59cb 000b 5aa9 000b 5b3f 000b     .Y...Y...Z..?[..
   b9b64:	5bc1 000b 6564 6976 6563 6552 6461 6620     .[..deviceRead f
   b9b74:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   b9b84:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   b9b94:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   b9ba4:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   b9bb4:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   b9bc4:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   b9bd4:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   b9be4:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   b9bf4:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   b9c04:	0063 0000                                   c...

000b9c08 <_ZTV12MCP79410SRAM>:
	...
   b9c10:	5c81 000b 5c97 000b 5c71 000b 5c75 000b     .\...\..q\..u\..
   b9c20:	5cc1 000b 5fb1 000b 6211 000b               .\..._...b..

000b9c2c <_ZTV12MCP79410Time>:
	...
   b9c34:	5c85 000b 5c89 000b                         .\...\..

000b9c3c <_ZTV14MCP79410EEPROM>:
	...
   b9c44:	5c83 000b 5ca5 000b 5c79 000b 5c7d 000b     .\...\..y\..}\..
   b9c54:	5cc1 000b 5feb 000b 6459 000b               .\..._..Yd..

000b9c60 <_ZTV8MCP79410>:
	...
   b9c68:	5c87 000b 5cb3 000b 7550 6c62 7369 5168     .\...\..PublishQ
   b9c78:	6575 6575 7341 6e79 0063 7570 6c62 7369     ueueAsync.publis
   b9c88:	6968 676e 2520 2073 7325 7420 6c74 253d     hing %s %s ttl=%
   b9c98:	2064 6c66 6761 3d73 7825 7000 6275 696c     d flags=%x.publi
   b9ca8:	6873 6465 7320 6375 6563 7373 7566 6c6c     shed successfull
   b9cb8:	0079 7570 6c62 7369 6568 2064 6166 6c69     y.published fail
   b9cc8:	6465 202c 6977 6c6c 7220 7465 7972 6920     ed, will retry i
   b9cd8:	206e 6c25 2075 736d 7100 6575 6575 6e69     n %lu ms.queuein
   b9ce8:	2067 7665 6e65 4e74 6d61 3d65 7325 6420     g eventName=%s d
   b9cf8:	7461 3d61 7325 7420 6c74 253d 2064 6c66     ata=%s ttl=%d fl
   b9d08:	6761 3173 253d 2064 6c66 6761 3273 253d     ags1=%d flags2=%
   b9d18:	2064 6973 657a 253d 0064 7061 2e70 7570     d size=%d.app.pu
   b9d28:	7162 0000                                   bq..

000b9d2c <_ZTV21PublishQueueAsyncBase>:
	...
   b9d3c:	662d 000b 40a5 000b 40a5 000b 40a5 000b     -f...@...@...@..
   b9d4c:	40a5 000b 40a5 000b                         .@...@..

000b9d54 <_ZTV25PublishQueueAsyncRetained>:
	...
   b9d5c:	67cd 000b 67e1 000b 662d 000b 6871 000b     .g...g..-f..qh..
   b9d6c:	6831 000b 680f 000b 69b7 000b 6857 000b     1h...h...i..Wh..

000b9d7c <_ZTVN5spark13CellularClassE>:
	...
   b9d84:	74cf 000b 74c5 000b 74bb 000b 7471 000b     .t...t...t..qt..
   b9d94:	74af 000b 74a3 000b 7ded 000b 7df5 000b     .t...t...}...}..
   b9da4:	7497 000b 748f 000b 7485 000b 747b 000b     .t...t...t..{t..
   b9db4:	7e25 000b                                   %~..

000b9db8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9dc0:	7509 000b 750f 000b 754d 000b 751d 000b     .u...u..Mu...u..
   b9dd0:	750b 000b                                   .u..

000b9dd4 <_ZTVN5spark13EthernetClassE>:
	...
   b9ddc:	7b17 000b 7b0d 000b 7b03 000b 7af9 000b     .{...{...{...z..
   b9dec:	7aed 000b 7ae1 000b 7ded 000b 7df5 000b     .z...z...}...}..
   b9dfc:	7ad5 000b 7acd 000b 7ac3 000b 7ab9 000b     .z...z...z...z..
   b9e0c:	7e25 000b                                   %~..

000b9e10 <_ZTV7TwoWire>:
	...
   b9e18:	7b35 000b 7b7f 000b 7b57 000b 7b37 000b     5{...{..W{..7{..
   b9e28:	7b5f 000b 7b67 000b 7b6f 000b 7b77 000b     _{..g{..o{..w{..

000b9e38 <_ZTV9IPAddress>:
	...
   b9e40:	7cbd 000b 7cad 000b 7caf 000b 7061 0070     .|...|...|..app.

000b9e50 <_ZTVN5spark12NetworkClassE>:
	...
   b9e58:	7dad 000b 7db7 000b 7dc1 000b 7dcb 000b     .}...}...}...}..
   b9e68:	7dd5 000b 7de1 000b 7ded 000b 7df5 000b     .}...}...}...}..
   b9e78:	7dfd 000b 7e09 000b 7e11 000b 7e1b 000b     .}...~...~...~..
   b9e88:	7e25 000b 6977 6972 676e 5300 7379 6574     %~..wiring.Syste
   b9e98:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b9ea8:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b9eb8:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   b9ec8:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   b9ed8:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000b9ee4 <_ZTV11USARTSerial>:
	...
   b9eec:	85a5 000b 8611 000b 85e9 000b 7f11 000b     ................
   b9efc:	85b9 000b 85d5 000b 85c7 000b 85e3 000b     ................
   b9f0c:	85a7 000b 85ab 000b                         ........

000b9f14 <_ZTV9USBSerial>:
	...
   b9f1c:	864f 000b 86b7 000b 868d 000b 7f11 000b     O...............
   b9f2c:	867f 000b 8651 000b 8661 000b 86b1 000b     ....Q...a.......
   b9f3c:	8671 000b 8649 000b                         q...I...

000b9f44 <_ZSt7nothrow>:
   b9f44:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b9f54:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b9f65 <day_name.1>:
   b9f65:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b9f75:	6972 6153                                    riSat

000b9f7a <mon_name.0>:
   b9f7a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b9f8a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b9f9a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b9faa:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   b9fba:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b9fca:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b9fda:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   b9fea:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b9ffa:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   ba00a:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   ba01a:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   ba02a:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   ba03a:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   ba04a:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   ba05a:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000ba067 <_ctype_>:
   ba067:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba077:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba087:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba097:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba0a7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba0b7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba0c7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba0d7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba0e7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba168 <link_const_variable_data_end>:
   ba168:	000b5355 	.word	0x000b5355
   ba16c:	000b6489 	.word	0x000b6489
   ba170:	000b6a8d 	.word	0x000b6a8d
   ba174:	000b7461 	.word	0x000b7461
   ba178:	000b74d9 	.word	0x000b74d9
   ba17c:	000b7b21 	.word	0x000b7b21
   ba180:	000b7d9d 	.word	0x000b7d9d
   ba184:	000b7efd 	.word	0x000b7efd
   ba188:	000b7fa5 	.word	0x000b7fa5
   ba18c:	000b8265 	.word	0x000b8265
   ba190:	000b8591 	.word	0x000b8591

000ba194 <link_constructors_end>:
	...
