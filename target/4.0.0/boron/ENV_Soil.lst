
/Users/abdulhannanmustajab/Desktop/IoT/GLE_Chili_Dryer/Env-soil/ENV_Soil/target/4.0.0/boron/ENV_Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008ce0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bcd00  000bcd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bcd24  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000010c  2003e2dc  000bcd28  0001e2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000408  2003e3e8  2003e3e8  0002e3e8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bce34  000bce34  0002ce34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bce5c  000bce5c  0002ce5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001dbbd6  00000000  00000000  0002ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001fc5e  00000000  00000000  00208a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00054867  00000000  00000000  00228694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003eb0  00000000  00000000  0027cefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e5c8  00000000  00000000  00280dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049dae  00000000  00000000  0028f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000699a5  00000000  00000000  002d9121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001508f5  00000000  00000000  00342ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b8bc  00000000  00000000  004933bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fbad 	bl	bb790 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fbcf 	bl	bb7e0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e2dc 	.word	0x2003e2dc
   b404c:	000bcd28 	.word	0x000bcd28
   b4050:	2003e3e8 	.word	0x2003e3e8
   b4054:	2003e3e8 	.word	0x2003e3e8
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fcd3 	bl	baa0c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bccc4 	.word	0x000bccc4
   b4080:	000bccfc 	.word	0x000bccfc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b80a 	b.w	b509c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fb39 	bl	b5700 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bc73 	b.w	ba97c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 be89 	b.w	b8dac <malloc>

000b409a <_Znaj>:
   b409a:	f004 be87 	b.w	b8dac <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 be8d 	b.w	b8dbc <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   b40b2:	6810      	ldr	r0, [r2, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z11watchdogISRv>:
  systemStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z11watchdogISRv+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
}
   b40be:	4770      	bx	lr
   b40c0:	2003e600 	.word	0x2003e600

000b40c4 <_Z18outOfMemoryHandleryi>:
  sensorDataWriteNeeded = true;
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40c4:	4b01      	ldr	r3, [pc, #4]	; (b40cc <_Z18outOfMemoryHandleryi+0x8>)
   b40c6:	601a      	str	r2, [r3, #0]
}
   b40c8:	4770      	bx	lr
   b40ca:	bf00      	nop
   b40cc:	2003e2e0 	.word	0x2003e2e0

000b40d0 <_Z13userSwitchISRv>:
  sensorDataWriteNeeded = true;
}


void userSwitchISR() {
  userSwitchDetect = true;                                            // The the flag for the user switch interrupt
   b40d0:	4b01      	ldr	r3, [pc, #4]	; (b40d8 <_Z13userSwitchISRv+0x8>)
   b40d2:	2201      	movs	r2, #1
   b40d4:	701a      	strb	r2, [r3, #0]
}
   b40d6:	4770      	bx	lr
   b40d8:	2003e5c1 	.word	0x2003e5c1

000b40dc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40dc:	6943      	ldr	r3, [r0, #20]
   b40de:	b113      	cbz	r3, b40e6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40e0:	6983      	ldr	r3, [r0, #24]
   b40e2:	300c      	adds	r0, #12
   b40e4:	4718      	bx	r3
            callback();
        }
    }
   b40e6:	4770      	bx	lr

000b40e8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40e8:	b530      	push	{r4, r5, lr}
   b40ea:	b085      	sub	sp, #20
   b40ec:	4604      	mov	r4, r0
   b40ee:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40f0:	b160      	cbz	r0, b410c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40f2:	6840      	ldr	r0, [r0, #4]
   b40f4:	b150      	cbz	r0, b410c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40f6:	6885      	ldr	r5, [r0, #8]
   b40f8:	b145      	cbz	r5, b410c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b40fa:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b40fe:	e9cd 2300 	strd	r2, r3, [sp]
   b4102:	68c4      	ldr	r4, [r0, #12]
   b4104:	ab01      	add	r3, sp, #4
   b4106:	466a      	mov	r2, sp
   b4108:	a902      	add	r1, sp, #8
   b410a:	47a0      	blx	r4
    }
   b410c:	b005      	add	sp, #20
   b410e:	bd30      	pop	{r4, r5, pc}

000b4110 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b4110:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4112:	6803      	ldr	r3, [r0, #0]
   b4114:	2b2f      	cmp	r3, #47	; 0x2f
{
   b4116:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4118:	d904      	bls.n	b4124 <nrf_gpio_pin_port_decode+0x14>
   b411a:	4a07      	ldr	r2, [pc, #28]	; (b4138 <nrf_gpio_pin_port_decode+0x28>)
   b411c:	4907      	ldr	r1, [pc, #28]	; (b413c <nrf_gpio_pin_port_decode+0x2c>)
   b411e:	200a      	movs	r0, #10
   b4120:	f004 fcda 	bl	b8ad8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4128:	bf83      	ittte	hi
   b412a:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b412e:	4804      	ldrhi	r0, [pc, #16]	; (b4140 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4130:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b4132:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b4136:	bd10      	pop	{r4, pc}
   b4138:	000b8739 	.word	0x000b8739
   b413c:	000bbcde 	.word	0x000bbcde
   b4140:	50000300 	.word	0x50000300

000b4144 <_Z10measureNow6String>:
{
   b4144:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4146:	4904      	ldr	r1, [pc, #16]	; (b4158 <_Z10measureNow6String+0x14>)
   b4148:	f006 f826 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b414c:	b118      	cbz	r0, b4156 <_Z10measureNow6String+0x12>
    state = REPORTING_STATE;
   b414e:	4b03      	ldr	r3, [pc, #12]	; (b415c <_Z10measureNow6String+0x18>)
   b4150:	2206      	movs	r2, #6
   b4152:	701a      	strb	r2, [r3, #0]
    return 1;
   b4154:	2001      	movs	r0, #1
}
   b4156:	bd08      	pop	{r3, pc}
   b4158:	000bbcd7 	.word	0x000bbcd7
   b415c:	2003e574 	.word	0x2003e574

000b4160 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4160:	b510      	push	{r4, lr}
   b4162:	4b03      	ldr	r3, [pc, #12]	; (b4170 <_ZN8MB85RC64D1Ev+0x10>)
   b4164:	6003      	str	r3, [r0, #0]
   b4166:	4604      	mov	r4, r0
   b4168:	f002 f8be 	bl	b62e8 <_ZN6MB85RCD1Ev>
   b416c:	4620      	mov	r0, r4
   b416e:	bd10      	pop	{r4, pc}
   b4170:	000bc2e0 	.word	0x000bc2e0

000b4174 <_ZN8MB85RC64D0Ev>:
   b4174:	b510      	push	{r4, lr}
   b4176:	4604      	mov	r4, r0
   b4178:	f7ff fff2 	bl	b4160 <_ZN8MB85RC64D1Ev>
   b417c:	4620      	mov	r0, r4
   b417e:	2110      	movs	r1, #16
   b4180:	f7ff ff8d 	bl	b409e <_ZdlPvj>
   b4184:	4620      	mov	r0, r4
   b4186:	bd10      	pop	{r4, pc}

000b4188 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4188:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b418a:	2100      	movs	r1, #0
   b418c:	4604      	mov	r4, r0
   b418e:	4608      	mov	r0, r1
   b4190:	f004 fa4a 	bl	b8628 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4194:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4196:	4620      	mov	r0, r4
   b4198:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b419a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b419c:	f004 fa5c 	bl	b8658 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41a0:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41a2:	b10c      	cbz	r4, b41a8 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41a4:	2301      	movs	r3, #1
   b41a6:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a8:	2100      	movs	r1, #0
   b41aa:	2001      	movs	r0, #1
   b41ac:	f004 fa3c 	bl	b8628 <os_thread_scheduling>
            }
        }
        if (t) {
   b41b0:	b12c      	cbz	r4, b41be <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41b2:	6823      	ldr	r3, [r4, #0]
   b41b4:	4620      	mov	r0, r4
   b41b6:	689b      	ldr	r3, [r3, #8]
   b41b8:	4798      	blx	r3
            t->running = false;
   b41ba:	2300      	movs	r3, #0
   b41bc:	7123      	strb	r3, [r4, #4]
        }
    }
   b41be:	b002      	add	sp, #8
   b41c0:	bd10      	pop	{r4, pc}

000b41c2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b41c2:	b530      	push	{r4, r5, lr}
   b41c4:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b41c6:	6800      	ldr	r0, [r0, #0]
   b41c8:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b41ca:	9301      	str	r3, [sp, #4]
   b41cc:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b41d0:	6883      	ldr	r3, [r0, #8]
   b41d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b41d6:	b90b      	cbnz	r3, b41dc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b41d8:	f006 fd84 	bl	bace4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41dc:	68c3      	ldr	r3, [r0, #12]
   b41de:	aa01      	add	r2, sp, #4
   b41e0:	a902      	add	r1, sp, #8
   b41e2:	4798      	blx	r3
      }
   b41e4:	b005      	add	sp, #20
   b41e6:	bd30      	pop	{r4, r5, pc}

000b41e8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41e8:	2a01      	cmp	r2, #1
   b41ea:	d102      	bne.n	b41f2 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41ec:	6001      	str	r1, [r0, #0]
      }
   b41ee:	2000      	movs	r0, #0
   b41f0:	4770      	bx	lr
	  switch (__op)
   b41f2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41f4:	bf04      	itt	eq
   b41f6:	680b      	ldreq	r3, [r1, #0]
   b41f8:	6003      	streq	r3, [r0, #0]
	      break;
   b41fa:	e7f8      	b.n	b41ee <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41fc <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41fc:	6803      	ldr	r3, [r0, #0]
   b41fe:	6812      	ldr	r2, [r2, #0]
   b4200:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4204:	4718      	bx	r3

000b4206 <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b4206:	2a01      	cmp	r2, #1
   b4208:	d102      	bne.n	b4210 <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b420a:	6001      	str	r1, [r0, #0]
      }
   b420c:	2000      	movs	r0, #0
   b420e:	4770      	bx	lr
	  switch (__op)
   b4210:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4212:	bf04      	itt	eq
   b4214:	680b      	ldreq	r3, [r1, #0]
   b4216:	6003      	streq	r3, [r0, #0]
	      break;
   b4218:	e7f8      	b.n	b420c <_ZNSt17_Function_handlerIFvyiEPFvyjEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b421a <_ZNSt17_Function_handlerIFvyiEPFvyjEE9_M_invokeERKSt9_Any_dataOyOi>:
   b421a:	6803      	ldr	r3, [r0, #0]
   b421c:	6812      	ldr	r2, [r2, #0]
   b421e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4222:	4718      	bx	r3

000b4224 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4224:	2a01      	cmp	r2, #1
   b4226:	d102      	bne.n	b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4228:	6001      	str	r1, [r0, #0]
      }
   b422a:	2000      	movs	r0, #0
   b422c:	4770      	bx	lr
	  switch (__op)
   b422e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4230:	bf04      	itt	eq
   b4232:	680b      	ldreq	r3, [r1, #0]
   b4234:	6003      	streq	r3, [r0, #0]
	      break;
   b4236:	e7f8      	b.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4238 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	4718      	bx	r3

000b423c <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   b423c:	b410      	push	{r4}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b423e:	6803      	ldr	r3, [r0, #0]
   b4240:	68dc      	ldr	r4, [r3, #12]
   b4242:	2330      	movs	r3, #48	; 0x30
   b4244:	46a4      	mov	ip, r4
    }
   b4246:	f85d 4b04 	ldr.w	r4, [sp], #4
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b424a:	4760      	bx	ip

000b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b424c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b424e:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4250:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4254:	f88d 3000 	strb.w	r3, [sp]
   b4258:	f88d 5004 	strb.w	r5, [sp, #4]
   b425c:	6824      	ldr	r4, [r4, #0]
   b425e:	233c      	movs	r3, #60	; 0x3c
   b4260:	47a0      	blx	r4
	}
   b4262:	b003      	add	sp, #12
   b4264:	bd30      	pop	{r4, r5, pc}
	...

000b4268 <_Z21firmwareUpdateHandleryj>:
void firmwareUpdateHandler(system_event_t event, u_int param) {
   b4268:	b570      	push	{r4, r5, r6, lr}
  switch(param) {
   b426a:	2a01      	cmp	r2, #1
void firmwareUpdateHandler(system_event_t event, u_int param) {
   b426c:	b092      	sub	sp, #72	; 0x48
  switch(param) {
   b426e:	d00a      	beq.n	b4286 <_Z21firmwareUpdateHandleryj+0x1e>
   b4270:	1c53      	adds	r3, r2, #1
   b4272:	d024      	beq.n	b42be <_Z21firmwareUpdateHandleryj+0x56>
   b4274:	b912      	cbnz	r2, b427c <_Z21firmwareUpdateHandleryj+0x14>
      firmwareUpdateInProgress = true;
   b4276:	4b21      	ldr	r3, [pc, #132]	; (b42fc <_Z21firmwareUpdateHandleryj+0x94>)
   b4278:	2201      	movs	r2, #1
   b427a:	701a      	strb	r2, [r3, #0]
  sensorDataWriteNeeded = true;
   b427c:	4b20      	ldr	r3, [pc, #128]	; (b4300 <_Z21firmwareUpdateHandleryj+0x98>)
   b427e:	2201      	movs	r2, #1
   b4280:	701a      	strb	r2, [r3, #0]
}
   b4282:	b012      	add	sp, #72	; 0x48
   b4284:	bd70      	pop	{r4, r5, r6, pc}
      firmwareUpdateInProgress = false;
   b4286:	4b1d      	ldr	r3, [pc, #116]	; (b42fc <_Z21firmwareUpdateHandleryj+0x94>)
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b4288:	4d1e      	ldr	r5, [pc, #120]	; (b4304 <_Z21firmwareUpdateHandleryj+0x9c>)
      firmwareUpdateInProgress = false;
   b428a:	2400      	movs	r4, #0
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b428c:	2614      	movs	r6, #20
      firmwareUpdateInProgress = false;
   b428e:	701c      	strb	r4, [r3, #0]
      sensor_data.alerts = 20;                                             // Record a successful attempt
   b4290:	632e      	str	r6, [r5, #48]	; 0x30
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b4292:	f006 fa00 	bl	ba696 <_ZN9TimeClass3nowEv>
   b4296:	4a1c      	ldr	r2, [pc, #112]	; (b4308 <_Z21firmwareUpdateHandleryj+0xa0>)
   b4298:	9000      	str	r0, [sp, #0]
   b429a:	4633      	mov	r3, r6
   b429c:	2140      	movs	r1, #64	; 0x40
   b429e:	a802      	add	r0, sp, #8
   b42a0:	f004 fdac 	bl	b8dfc <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   b42a4:	f003 f9ae 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b42a8:	4b18      	ldr	r3, [pc, #96]	; (b430c <_Z21firmwareUpdateHandleryj+0xa4>)
   b42aa:	f88d 4000 	strb.w	r4, [sp]
   b42ae:	781b      	ldrb	r3, [r3, #0]
   b42b0:	4917      	ldr	r1, [pc, #92]	; (b4310 <_Z21firmwareUpdateHandleryj+0xa8>)
   b42b2:	aa02      	add	r2, sp, #8
   b42b4:	f7ff ffca 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      sensor_data.updateAttempts = 0;                                      // Zero the update attempts counter
   b42b8:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
      break;
   b42bc:	e7de      	b.n	b427c <_Z21firmwareUpdateHandleryj+0x14>
    firmwareUpdateInProgress = false;
   b42be:	4b0f      	ldr	r3, [pc, #60]	; (b42fc <_Z21firmwareUpdateHandleryj+0x94>)
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42c0:	4c10      	ldr	r4, [pc, #64]	; (b4304 <_Z21firmwareUpdateHandleryj+0x9c>)
    firmwareUpdateInProgress = false;
   b42c2:	2500      	movs	r5, #0
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42c4:	2616      	movs	r6, #22
    firmwareUpdateInProgress = false;
   b42c6:	701d      	strb	r5, [r3, #0]
      sensor_data.alerts = 22;                                             // Record a failed attempt
   b42c8:	6326      	str	r6, [r4, #48]	; 0x30
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b42ca:	f006 f9e4 	bl	ba696 <_ZN9TimeClass3nowEv>
   b42ce:	4a0e      	ldr	r2, [pc, #56]	; (b4308 <_Z21firmwareUpdateHandleryj+0xa0>)
   b42d0:	9000      	str	r0, [sp, #0]
   b42d2:	4633      	mov	r3, r6
   b42d4:	2140      	movs	r1, #64	; 0x40
   b42d6:	a802      	add	r0, sp, #8
   b42d8:	f004 fd90 	bl	b8dfc <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publlish queue
   b42dc:	f003 f992 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b42e0:	4b0a      	ldr	r3, [pc, #40]	; (b430c <_Z21firmwareUpdateHandleryj+0xa4>)
   b42e2:	f88d 5000 	strb.w	r5, [sp]
   b42e6:	781b      	ldrb	r3, [r3, #0]
   b42e8:	4909      	ldr	r1, [pc, #36]	; (b4310 <_Z21firmwareUpdateHandleryj+0xa8>)
   b42ea:	aa02      	add	r2, sp, #8
   b42ec:	f7ff ffae 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      sensor_data.updateAttempts++;                                        // Increment the update attempts counter
   b42f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   b42f4:	3301      	adds	r3, #1
   b42f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      break;
   b42fa:	e7bf      	b.n	b427c <_Z21firmwareUpdateHandleryj+0x14>
   b42fc:	2003e495 	.word	0x2003e495
   b4300:	2003e524 	.word	0x2003e524
   b4304:	2003e528 	.word	0x2003e528
   b4308:	000bbd02 	.word	0x000bbd02
   b430c:	2003e44d 	.word	0x2003e44d
   b4310:	000bbd24 	.word	0x000bbd24

000b4314 <_Z12setKeepAlive6String>:
{
   b4314:	b510      	push	{r4, lr}
   b4316:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b4318:	6800      	ldr	r0, [r0, #0]
   b431a:	220a      	movs	r2, #10
   b431c:	a903      	add	r1, sp, #12
   b431e:	f007 fb61 	bl	bb9e4 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4322:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b4326:	d81b      	bhi.n	b4360 <_Z12setKeepAlive6String+0x4c>
  sysStatus.keepAlive = tempTime;
   b4328:	4c0e      	ldr	r4, [pc, #56]	; (b4364 <_Z12setKeepAlive6String+0x50>)
   b432a:	6060      	str	r0, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b432c:	f004 fc8e 	bl	b8c4c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4330:	b188      	cbz	r0, b4356 <_Z12setKeepAlive6String+0x42>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b4332:	6863      	ldr	r3, [r4, #4]
   b4334:	4a0c      	ldr	r2, [pc, #48]	; (b4368 <_Z12setKeepAlive6String+0x54>)
   b4336:	f44f 7180 	mov.w	r1, #256	; 0x100
   b433a:	a804      	add	r0, sp, #16
   b433c:	f004 fd5e 	bl	b8dfc <snprintf>
    PublishQueuePosix::instance().publish("Keep Alive",data, PRIVATE);
   b4340:	f003 f960 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4344:	2300      	movs	r3, #0
   b4346:	f88d 3000 	strb.w	r3, [sp]
   b434a:	4b08      	ldr	r3, [pc, #32]	; (b436c <_Z12setKeepAlive6String+0x58>)
   b434c:	4908      	ldr	r1, [pc, #32]	; (b4370 <_Z12setKeepAlive6String+0x5c>)
   b434e:	781b      	ldrb	r3, [r3, #0]
   b4350:	aa04      	add	r2, sp, #16
   b4352:	f7ff ff7b 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  systemStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b4356:	4b07      	ldr	r3, [pc, #28]	; (b4374 <_Z12setKeepAlive6String+0x60>)
   b4358:	2001      	movs	r0, #1
   b435a:	7018      	strb	r0, [r3, #0]
}
   b435c:	b044      	add	sp, #272	; 0x110
   b435e:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4360:	2000      	movs	r0, #0
   b4362:	e7fb      	b.n	b435c <_Z12setKeepAlive6String+0x48>
   b4364:	2003e580 	.word	0x2003e580
   b4368:	000bbd37 	.word	0x000bbd37
   b436c:	2003e44d 	.word	0x2003e44d
   b4370:	000bbd50 	.word	0x000bbd50
   b4374:	2003e5b0 	.word	0x2003e5b0

000b4378 <_Z14setVerboseMode6String>:
{
   b4378:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b437a:	4917      	ldr	r1, [pc, #92]	; (b43d8 <_Z14setVerboseMode6String+0x60>)
   b437c:	4605      	mov	r5, r0
   b437e:	f005 ff0b 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4382:	4604      	mov	r4, r0
   b4384:	b190      	cbz	r0, b43ac <_Z14setVerboseMode6String+0x34>
    sysStatus.verboseMode = true;
   b4386:	4b15      	ldr	r3, [pc, #84]	; (b43dc <_Z14setVerboseMode6String+0x64>)
   b4388:	2401      	movs	r4, #1
   b438a:	725c      	strb	r4, [r3, #9]
    PublishQueuePosix::instance().publish("Mode","Set Verbose Mode",PRIVATE);
   b438c:	f003 f93a 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b4390:	2300      	movs	r3, #0
   b4392:	f88d 3000 	strb.w	r3, [sp]
   b4396:	4b12      	ldr	r3, [pc, #72]	; (b43e0 <_Z14setVerboseMode6String+0x68>)
   b4398:	4a12      	ldr	r2, [pc, #72]	; (b43e4 <_Z14setVerboseMode6String+0x6c>)
   b439a:	781b      	ldrb	r3, [r3, #0]
   b439c:	4912      	ldr	r1, [pc, #72]	; (b43e8 <_Z14setVerboseMode6String+0x70>)
   b439e:	f7ff ff55 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b43a2:	4b12      	ldr	r3, [pc, #72]	; (b43ec <_Z14setVerboseMode6String+0x74>)
    return 1;
   b43a4:	4620      	mov	r0, r4
    systemStatusWriteNeeded = true;
   b43a6:	701c      	strb	r4, [r3, #0]
}
   b43a8:	b003      	add	sp, #12
   b43aa:	bd30      	pop	{r4, r5, pc}
   b43ac:	4910      	ldr	r1, [pc, #64]	; (b43f0 <_Z14setVerboseMode6String+0x78>)
   b43ae:	4628      	mov	r0, r5
   b43b0:	f005 fef2 	bl	ba198 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b43b4:	2800      	cmp	r0, #0
   b43b6:	d0f7      	beq.n	b43a8 <_Z14setVerboseMode6String+0x30>
    sysStatus.verboseMode = false;
   b43b8:	4b08      	ldr	r3, [pc, #32]	; (b43dc <_Z14setVerboseMode6String+0x64>)
   b43ba:	725c      	strb	r4, [r3, #9]
    PublishQueuePosix::instance().publish("Mode","Cleared Verbose Mode",PRIVATE);
   b43bc:	f003 f922 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b43c0:	4b07      	ldr	r3, [pc, #28]	; (b43e0 <_Z14setVerboseMode6String+0x68>)
   b43c2:	f88d 4000 	strb.w	r4, [sp]
   b43c6:	781b      	ldrb	r3, [r3, #0]
   b43c8:	4a0a      	ldr	r2, [pc, #40]	; (b43f4 <_Z14setVerboseMode6String+0x7c>)
   b43ca:	4907      	ldr	r1, [pc, #28]	; (b43e8 <_Z14setVerboseMode6String+0x70>)
   b43cc:	f7ff ff3e 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b43d0:	4b06      	ldr	r3, [pc, #24]	; (b43ec <_Z14setVerboseMode6String+0x74>)
   b43d2:	2001      	movs	r0, #1
   b43d4:	7018      	strb	r0, [r3, #0]
    return 1;
   b43d6:	e7e7      	b.n	b43a8 <_Z14setVerboseMode6String+0x30>
   b43d8:	000bbcd7 	.word	0x000bbcd7
   b43dc:	2003e580 	.word	0x2003e580
   b43e0:	2003e44d 	.word	0x2003e44d
   b43e4:	000bbd5b 	.word	0x000bbd5b
   b43e8:	000bbd7c 	.word	0x000bbd7c
   b43ec:	2003e5b0 	.word	0x2003e5b0
   b43f0:	000bbcdc 	.word	0x000bbcdc
   b43f4:	000bbd6c 	.word	0x000bbd6c

000b43f8 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   b43f8:	b513      	push	{r0, r1, r4, lr}
  PublishQueuePosix::instance().publish("*", PRIVATE,NO_ACK);
   b43fa:	f003 f903 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   b43fe:	4b08      	ldr	r3, [pc, #32]	; (b4420 <_Z16keepAliveMessagev+0x28>)
   b4400:	7819      	ldrb	r1, [r3, #0]
   b4402:	4b08      	ldr	r3, [pc, #32]	; (b4424 <_Z16keepAliveMessagev+0x2c>)
   b4404:	781a      	ldrb	r2, [r3, #0]
		return publishCommon(eventName, "", 60, flags1, flags2);
   b4406:	6803      	ldr	r3, [r0, #0]
   b4408:	f88d 1004 	strb.w	r1, [sp, #4]
   b440c:	f88d 2000 	strb.w	r2, [sp]
   b4410:	681c      	ldr	r4, [r3, #0]
   b4412:	4a05      	ldr	r2, [pc, #20]	; (b4428 <_Z16keepAliveMessagev+0x30>)
   b4414:	4905      	ldr	r1, [pc, #20]	; (b442c <_Z16keepAliveMessagev+0x34>)
   b4416:	233c      	movs	r3, #60	; 0x3c
   b4418:	47a0      	blx	r4
}
   b441a:	b002      	add	sp, #8
   b441c:	bd10      	pop	{r4, pc}
   b441e:	bf00      	nop
   b4420:	2003e44c 	.word	0x2003e44c
   b4424:	2003e44d 	.word	0x2003e44d
   b4428:	000bcac0 	.word	0x000bcac0
   b442c:	000bbd81 	.word	0x000bbd81

000b4430 <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4430:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4432:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4434:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4436:	b130      	cbz	r0, b4446 <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b4438:	2100      	movs	r1, #0
   b443a:	e9cd 2100 	strd	r2, r1, [sp]
   b443e:	460a      	mov	r2, r1
   b4440:	2103      	movs	r1, #3
   b4442:	f004 f911 	bl	b8668 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4446:	b003      	add	sp, #12
   b4448:	f85d fb04 	ldr.w	pc, [sp], #4

000b444c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b444c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b444e:	2000      	movs	r0, #0
   b4450:	f004 fc24 	bl	b8c9c <spark_sync_time_pending>
   b4454:	b128      	cbz	r0, b4462 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4456:	f004 fbf9 	bl	b8c4c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b445a:	f080 0001 	eor.w	r0, r0, #1
   b445e:	b2c0      	uxtb	r0, r0
    }
   b4460:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4462:	2001      	movs	r0, #1
   b4464:	e7fc      	b.n	b4460 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4466:	2300      	movs	r3, #0
   b4468:	2204      	movs	r2, #4
   b446a:	f004 bbcf 	b.w	b8c0c <spark_variable>

000b446e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b446e:	b510      	push	{r4, lr}
      if (_M_manager)
   b4470:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4472:	4604      	mov	r4, r0
      if (_M_manager)
   b4474:	b113      	cbz	r3, b447c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4476:	2203      	movs	r2, #3
   b4478:	4601      	mov	r1, r0
   b447a:	4798      	blx	r3
    }
   b447c:	4620      	mov	r0, r4
   b447e:	bd10      	pop	{r4, pc}

000b4480 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4480:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4482:	4604      	mov	r4, r0
   b4484:	b138      	cbz	r0, b4496 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4486:	f7ff fff2 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b448a:	4620      	mov	r0, r4
   b448c:	2110      	movs	r1, #16
        };
   b448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4492:	f7ff be04 	b.w	b409e <_ZdlPvj>
        };
   b4496:	bd10      	pop	{r4, pc}

000b4498 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4498:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b449a:	4b13      	ldr	r3, [pc, #76]	; (b44e8 <_ZN5TimerD1Ev+0x50>)
   b449c:	6003      	str	r3, [r0, #0]
   b449e:	4604      	mov	r4, r0
        if (handle) {
   b44a0:	6880      	ldr	r0, [r0, #8]
   b44a2:	b1c8      	cbz	r0, b44d8 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b44a4:	2500      	movs	r5, #0
   b44a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b44aa:	e9cd 3500 	strd	r3, r5, [sp]
   b44ae:	2102      	movs	r1, #2
   b44b0:	462b      	mov	r3, r5
   b44b2:	462a      	mov	r2, r5
   b44b4:	f004 f8d8 	bl	b8668 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b44b8:	68a0      	ldr	r0, [r4, #8]
   b44ba:	4629      	mov	r1, r5
   b44bc:	f004 f914 	bl	b86e8 <os_timer_set_id>
            while (running) {
   b44c0:	7923      	ldrb	r3, [r4, #4]
   b44c2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b44c6:	b113      	cbz	r3, b44ce <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b44c8:	f004 f896 	bl	b85f8 <os_thread_yield>
            while (running) {
   b44cc:	e7f8      	b.n	b44c0 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b44ce:	68a0      	ldr	r0, [r4, #8]
   b44d0:	4629      	mov	r1, r5
   b44d2:	f004 f8b9 	bl	b8648 <os_timer_destroy>
            handle = nullptr;
   b44d6:	60a5      	str	r5, [r4, #8]
   b44d8:	f104 000c 	add.w	r0, r4, #12
   b44dc:	f7ff ffc7 	bl	b446e <_ZNSt14_Function_baseD1Ev>
    }
   b44e0:	4620      	mov	r0, r4
   b44e2:	b003      	add	sp, #12
   b44e4:	bd30      	pop	{r4, r5, pc}
   b44e6:	bf00      	nop
   b44e8:	000bc2cc 	.word	0x000bc2cc

000b44ec <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b44ec:	b510      	push	{r4, lr}
   b44ee:	4604      	mov	r4, r0
    }
   b44f0:	f7ff ffd2 	bl	b4498 <_ZN5TimerD1Ev>
   b44f4:	4620      	mov	r0, r4
   b44f6:	211c      	movs	r1, #28
   b44f8:	f7ff fdd1 	bl	b409e <_ZdlPvj>
   b44fc:	4620      	mov	r0, r4
   b44fe:	bd10      	pop	{r4, pc}

000b4500 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b4500:	2300      	movs	r3, #0
   b4502:	6840      	ldr	r0, [r0, #4]
   b4504:	461a      	mov	r2, r3
   b4506:	4619      	mov	r1, r3
   b4508:	f004 bc10 	b.w	b8d2c <network_on>

000b450c <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b450c:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b450e:	2301      	movs	r3, #1
   b4510:	2208      	movs	r2, #8
   b4512:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b4516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b451a:	2300      	movs	r3, #0
   b451c:	4341      	muls	r1, r0
   b451e:	466a      	mov	r2, sp
   b4520:	4618      	mov	r0, r3
   b4522:	f004 fbcb 	bl	b8cbc <spark_set_connection_property>
    }
   b4526:	b003      	add	sp, #12
   b4528:	f85d fb04 	ldr.w	pc, [sp], #4

000b452c <_Z16setThirdPartySim6String>:
{
   b452c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b452e:	491e      	ldr	r1, [pc, #120]	; (b45a8 <_Z16setThirdPartySim6String+0x7c>)
   b4530:	4605      	mov	r5, r0
   b4532:	f005 fe31 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4536:	4604      	mov	r4, r0
   b4538:	b308      	cbz	r0, b457e <_Z16setThirdPartySim6String+0x52>
    sysStatus.thirdPartySim = true;
   b453a:	4c1c      	ldr	r4, [pc, #112]	; (b45ac <_Z16setThirdPartySim6String+0x80>)
   b453c:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b453e:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   b4540:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4542:	f7ff ffe3 	bl	b450c <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b4546:	6863      	ldr	r3, [r4, #4]
   b4548:	4819      	ldr	r0, [pc, #100]	; (b45b0 <_Z16setThirdPartySim6String+0x84>)
   b454a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b454e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4552:	4359      	muls	r1, r3
   b4554:	f7ff ff6c 	bl	b4430 <_ZN5Timer12changePeriodEjj.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4558:	f004 fb78 	bl	b8c4c <spark_cloud_flag_connected>
    if (Particle.connected()) PublishQueuePosix::instance().publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b455c:	b150      	cbz	r0, b4574 <_Z16setThirdPartySim6String+0x48>
   b455e:	f003 f851 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b4562:	2300      	movs	r3, #0
   b4564:	f88d 3000 	strb.w	r3, [sp]
   b4568:	4b12      	ldr	r3, [pc, #72]	; (b45b4 <_Z16setThirdPartySim6String+0x88>)
   b456a:	4a13      	ldr	r2, [pc, #76]	; (b45b8 <_Z16setThirdPartySim6String+0x8c>)
   b456c:	781b      	ldrb	r3, [r3, #0]
   b456e:	4913      	ldr	r1, [pc, #76]	; (b45bc <_Z16setThirdPartySim6String+0x90>)
   b4570:	f7ff fe6c 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    systemStatusWriteNeeded = true;
   b4574:	4b12      	ldr	r3, [pc, #72]	; (b45c0 <_Z16setThirdPartySim6String+0x94>)
   b4576:	2001      	movs	r0, #1
   b4578:	7018      	strb	r0, [r3, #0]
}
   b457a:	b003      	add	sp, #12
   b457c:	bd30      	pop	{r4, r5, pc}
   b457e:	4911      	ldr	r1, [pc, #68]	; (b45c4 <_Z16setThirdPartySim6String+0x98>)
   b4580:	4628      	mov	r0, r5
   b4582:	f005 fe09 	bl	ba198 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4586:	2800      	cmp	r0, #0
   b4588:	d0f7      	beq.n	b457a <_Z16setThirdPartySim6String+0x4e>
    sysStatus.thirdPartySim = false;
   b458a:	4b08      	ldr	r3, [pc, #32]	; (b45ac <_Z16setThirdPartySim6String+0x80>)
   b458c:	705c      	strb	r4, [r3, #1]
   b458e:	f004 fb5d 	bl	b8c4c <spark_cloud_flag_connected>
    if (Particle.connected()) PublishQueuePosix::instance().publish("Mode","Set to Particle Sim", PRIVATE);
   b4592:	2800      	cmp	r0, #0
   b4594:	d0ee      	beq.n	b4574 <_Z16setThirdPartySim6String+0x48>
   b4596:	f003 f835 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b459a:	4b06      	ldr	r3, [pc, #24]	; (b45b4 <_Z16setThirdPartySim6String+0x88>)
   b459c:	f88d 4000 	strb.w	r4, [sp]
   b45a0:	781b      	ldrb	r3, [r3, #0]
   b45a2:	4a09      	ldr	r2, [pc, #36]	; (b45c8 <_Z16setThirdPartySim6String+0x9c>)
   b45a4:	e7e3      	b.n	b456e <_Z16setThirdPartySim6String+0x42>
   b45a6:	bf00      	nop
   b45a8:	000bbcd7 	.word	0x000bbcd7
   b45ac:	2003e580 	.word	0x2003e580
   b45b0:	2003e4c0 	.word	0x2003e4c0
   b45b4:	2003e44d 	.word	0x2003e44d
   b45b8:	000bbd83 	.word	0x000bbd83
   b45bc:	000bbd7c 	.word	0x000bbd7c
   b45c0:	2003e5b0 	.word	0x2003e5b0
   b45c4:	000bbcdc 	.word	0x000bbcdc
   b45c8:	000bbd98 	.word	0x000bbd98

000b45cc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b45cc:	b40e      	push	{r1, r2, r3}
   b45ce:	b500      	push	{lr}
   b45d0:	b08c      	sub	sp, #48	; 0x30
   b45d2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b45d4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b45d8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b45dc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b45de:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b45e2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b45e4:	6801      	ldr	r1, [r0, #0]
   b45e6:	aa04      	add	r2, sp, #16
   b45e8:	201e      	movs	r0, #30
    attr.flags = 0;
   b45ea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b45ee:	f004 fa83 	bl	b8af8 <log_message_v>
}
   b45f2:	b00c      	add	sp, #48	; 0x30
   b45f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b45f8:	b003      	add	sp, #12
   b45fa:	4770      	bx	lr

000b45fc <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif // HAL_PLATFORM_NRF52840

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   b45fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b45fe:	4d32      	ldr	r5, [pc, #200]	; (b46c8 <digitalWriteFast+0xcc>)
   b4600:	4c32      	ldr	r4, [pc, #200]	; (b46cc <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4602:	782b      	ldrb	r3, [r5, #0]
   b4604:	f3bf 8f5b 	dmb	ish
   b4608:	0106      	lsls	r6, r0, #4
    if (value)
   b460a:	b371      	cbz	r1, b466a <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b460c:	07d8      	lsls	r0, r3, #31
   b460e:	d409      	bmi.n	b4624 <digitalWriteFast+0x28>
   b4610:	4628      	mov	r0, r5
   b4612:	f7ff fd46 	bl	b40a2 <__cxa_guard_acquire>
   b4616:	b128      	cbz	r0, b4624 <digitalWriteFast+0x28>
   b4618:	f004 f8be 	bl	b8798 <HAL_Pin_Map>
   b461c:	6020      	str	r0, [r4, #0]
   b461e:	4628      	mov	r0, r5
   b4620:	f7ff fd44 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4624:	6823      	ldr	r3, [r4, #0]
   b4626:	5d9b      	ldrb	r3, [r3, r6]
   b4628:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b462a:	782b      	ldrb	r3, [r5, #0]
   b462c:	f3bf 8f5b 	dmb	ish
   b4630:	07d9      	lsls	r1, r3, #31
   b4632:	d409      	bmi.n	b4648 <digitalWriteFast+0x4c>
   b4634:	4824      	ldr	r0, [pc, #144]	; (b46c8 <digitalWriteFast+0xcc>)
   b4636:	f7ff fd34 	bl	b40a2 <__cxa_guard_acquire>
   b463a:	b128      	cbz	r0, b4648 <digitalWriteFast+0x4c>
   b463c:	f004 f8ac 	bl	b8798 <HAL_Pin_Map>
   b4640:	6020      	str	r0, [r4, #0]
   b4642:	4821      	ldr	r0, [pc, #132]	; (b46c8 <digitalWriteFast+0xcc>)
   b4644:	f7ff fd32 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4648:	6820      	ldr	r0, [r4, #0]
   b464a:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b464c:	a801      	add	r0, sp, #4
   b464e:	7873      	ldrb	r3, [r6, #1]
   b4650:	f003 031f 	and.w	r3, r3, #31
   b4654:	433b      	orrs	r3, r7
   b4656:	9301      	str	r3, [sp, #4]
   b4658:	f7ff fd5a 	bl	b4110 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b465c:	9a01      	ldr	r2, [sp, #4]
   b465e:	2301      	movs	r3, #1
   b4660:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4662:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   b4666:	b003      	add	sp, #12
   b4668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b466a:	07da      	lsls	r2, r3, #31
   b466c:	d409      	bmi.n	b4682 <digitalWriteFast+0x86>
   b466e:	4628      	mov	r0, r5
   b4670:	f7ff fd17 	bl	b40a2 <__cxa_guard_acquire>
   b4674:	b128      	cbz	r0, b4682 <digitalWriteFast+0x86>
   b4676:	f004 f88f 	bl	b8798 <HAL_Pin_Map>
   b467a:	6020      	str	r0, [r4, #0]
   b467c:	4628      	mov	r0, r5
   b467e:	f7ff fd15 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4682:	6823      	ldr	r3, [r4, #0]
   b4684:	5d9b      	ldrb	r3, [r3, r6]
   b4686:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4688:	782b      	ldrb	r3, [r5, #0]
   b468a:	f3bf 8f5b 	dmb	ish
   b468e:	07db      	lsls	r3, r3, #31
   b4690:	d409      	bmi.n	b46a6 <digitalWriteFast+0xaa>
   b4692:	480d      	ldr	r0, [pc, #52]	; (b46c8 <digitalWriteFast+0xcc>)
   b4694:	f7ff fd05 	bl	b40a2 <__cxa_guard_acquire>
   b4698:	b128      	cbz	r0, b46a6 <digitalWriteFast+0xaa>
   b469a:	f004 f87d 	bl	b8798 <HAL_Pin_Map>
   b469e:	6020      	str	r0, [r4, #0]
   b46a0:	4809      	ldr	r0, [pc, #36]	; (b46c8 <digitalWriteFast+0xcc>)
   b46a2:	f7ff fd03 	bl	b40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b46a6:	6820      	ldr	r0, [r4, #0]
   b46a8:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b46aa:	a801      	add	r0, sp, #4
   b46ac:	7873      	ldrb	r3, [r6, #1]
   b46ae:	f003 031f 	and.w	r3, r3, #31
   b46b2:	433b      	orrs	r3, r7
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	f7ff fd2b 	bl	b4110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b46ba:	9a01      	ldr	r2, [sp, #4]
   b46bc:	2301      	movs	r3, #1
   b46be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b46c0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   b46c4:	e7cf      	b.n	b4666 <digitalWriteFast+0x6a>
   b46c6:	bf00      	nop
   b46c8:	2003e3e8 	.word	0x2003e3e8
   b46cc:	2003e3ec 	.word	0x2003e3ec

000b46d0 <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b46d0:	4b0c      	ldr	r3, [pc, #48]	; (b4704 <_Z17checkSystemValuesv+0x34>)
   b46d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   b46d4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b46d6:	2aff      	cmp	r2, #255	; 0xff
   b46d8:	bf84      	itt	hi
   b46da:	2200      	movhi	r2, #0
   b46dc:	625a      	strhi	r2, [r3, #36]	; 0x24
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   b46de:	4a0a      	ldr	r2, [pc, #40]	; (b4708 <_Z17checkSystemValuesv+0x38>)
   b46e0:	6812      	ldr	r2, [r2, #0]
   b46e2:	4291      	cmp	r1, r2
   b46e4:	bf84      	itt	hi
   b46e6:	2100      	movhi	r1, #0
   b46e8:	8599      	strhhi	r1, [r3, #44]	; 0x2c
  if (sensor_data.maxConnectTime > connectMaxTimeSec) {
   b46ea:	4b08      	ldr	r3, [pc, #32]	; (b470c <_Z17checkSystemValuesv+0x3c>)
   b46ec:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   b46ee:	428a      	cmp	r2, r1
   b46f0:	d204      	bcs.n	b46fc <_Z17checkSystemValuesv+0x2c>
    sensor_data.maxConnectTime = 0;
   b46f2:	2200      	movs	r2, #0
   b46f4:	869a      	strh	r2, [r3, #52]	; 0x34
    sensorDataWriteNeeded = true;
   b46f6:	4b06      	ldr	r3, [pc, #24]	; (b4710 <_Z17checkSystemValuesv+0x40>)
   b46f8:	2201      	movs	r2, #1
   b46fa:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   b46fc:	4b05      	ldr	r3, [pc, #20]	; (b4714 <_Z17checkSystemValuesv+0x44>)
   b46fe:	2201      	movs	r2, #1
   b4700:	701a      	strb	r2, [r3, #0]
}
   b4702:	4770      	bx	lr
   b4704:	2003e580 	.word	0x2003e580
   b4708:	2003e2dc 	.word	0x2003e2dc
   b470c:	2003e528 	.word	0x2003e528
   b4710:	2003e524 	.word	0x2003e524
   b4714:	2003e5b0 	.word	0x2003e5b0

000b4718 <_Z11petWatchdogv>:
{
   b4718:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   b471a:	2101      	movs	r1, #1
   b471c:	2005      	movs	r0, #5
   b471e:	f7ff ff6d 	bl	b45fc <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   b4722:	2100      	movs	r1, #0
   b4724:	2005      	movs	r0, #5
   b4726:	f7ff ff69 	bl	b45fc <digitalWriteFast>
  watchdogFlag = false;
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <_Z11petWatchdogv+0x1c>)
   b472c:	2200      	movs	r2, #0
   b472e:	701a      	strb	r2, [r3, #0]
}
   b4730:	bd08      	pop	{r3, pc}
   b4732:	bf00      	nop
   b4734:	2003e600 	.word	0x2003e600

000b4738 <_Z9sendEventv>:
{
   b4738:	b530      	push	{r4, r5, lr}
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b473a:	4c1d      	ldr	r4, [pc, #116]	; (b47b0 <_Z9sendEventv+0x78>)
{
   b473c:	b0cf      	sub	sp, #316	; 0x13c
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"Soilmoisture2\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture, sensor_data.soilMoisture2 ,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   b473e:	6a23      	ldr	r3, [r4, #32]
   b4740:	69e0      	ldr	r0, [r4, #28]
   b4742:	930c      	str	r3, [sp, #48]	; 0x30
   b4744:	f006 fc36 	bl	bafb4 <__aeabi_f2d>
   b4748:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b474c:	69a0      	ldr	r0, [r4, #24]
   b474e:	f006 fc31 	bl	bafb4 <__aeabi_f2d>
   b4752:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4756:	6960      	ldr	r0, [r4, #20]
   b4758:	f006 fc2c 	bl	bafb4 <__aeabi_f2d>
   b475c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b475e:	9305      	str	r3, [sp, #20]
   b4760:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b4764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4766:	6920      	ldr	r0, [r4, #16]
   b4768:	9304      	str	r3, [sp, #16]
   b476a:	f006 fc23 	bl	bafb4 <__aeabi_f2d>
   b476e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4772:	68e0      	ldr	r0, [r4, #12]
   b4774:	f006 fc1e 	bl	bafb4 <__aeabi_f2d>
   b4778:	4a0e      	ldr	r2, [pc, #56]	; (b47b4 <_Z9sendEventv+0x7c>)
   b477a:	e9cd 0100 	strd	r0, r1, [sp]
   b477e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4782:	a80e      	add	r0, sp, #56	; 0x38
   b4784:	f004 fb3a 	bl	b8dfc <snprintf>
  PublishQueuePosix::instance().publish("environmental-hook", data, PRIVATE | WITH_ACK);
   b4788:	f002 ff3c 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b478c:	4b0a      	ldr	r3, [pc, #40]	; (b47b8 <_Z9sendEventv+0x80>)
   b478e:	490b      	ldr	r1, [pc, #44]	; (b47bc <_Z9sendEventv+0x84>)
   b4790:	781a      	ldrb	r2, [r3, #0]
   b4792:	4b0b      	ldr	r3, [pc, #44]	; (b47c0 <_Z9sendEventv+0x88>)
   b4794:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   b4796:	2500      	movs	r5, #0
   b4798:	4313      	orrs	r3, r2
   b479a:	f88d 5000 	strb.w	r5, [sp]
   b479e:	aa0e      	add	r2, sp, #56	; 0x38
   b47a0:	f7ff fd54 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b47a4:	4b07      	ldr	r3, [pc, #28]	; (b47c4 <_Z9sendEventv+0x8c>)
  sensor_data.alerts = 0;                                                 // Reset the alert after publish
   b47a6:	6325      	str	r5, [r4, #48]	; 0x30
  dataInFlight = true;                                                                      // set the data inflight flag
   b47a8:	2201      	movs	r2, #1
   b47aa:	701a      	strb	r2, [r3, #0]
}
   b47ac:	b04f      	add	sp, #316	; 0x13c
   b47ae:	bd30      	pop	{r4, r5, pc}
   b47b0:	2003e528 	.word	0x2003e528
   b47b4:	000bbdac 	.word	0x000bbdac
   b47b8:	2003e44e 	.word	0x2003e44e
   b47bc:	000bbe37 	.word	0x000bbe37
   b47c0:	2003e44d 	.word	0x2003e44d
   b47c4:	2003e494 	.word	0x2003e494

000b47c8 <_Z22publishStateTransitionv>:
{
   b47c8:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47ca:	4d11      	ldr	r5, [pc, #68]	; (b4810 <_Z22publishStateTransitionv+0x48>)
   b47cc:	4c11      	ldr	r4, [pc, #68]	; (b4814 <_Z22publishStateTransitionv+0x4c>)
   b47ce:	4b12      	ldr	r3, [pc, #72]	; (b4818 <_Z22publishStateTransitionv+0x50>)
   b47d0:	782a      	ldrb	r2, [r5, #0]
   b47d2:	7821      	ldrb	r1, [r4, #0]
{
   b47d4:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b47da:	9200      	str	r2, [sp, #0]
   b47dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b47e0:	4a0e      	ldr	r2, [pc, #56]	; (b481c <_Z22publishStateTransitionv+0x54>)
   b47e2:	2128      	movs	r1, #40	; 0x28
   b47e4:	a802      	add	r0, sp, #8
   b47e6:	f004 fb09 	bl	b8dfc <snprintf>
  oldState = state;
   b47ea:	782b      	ldrb	r3, [r5, #0]
   b47ec:	7023      	strb	r3, [r4, #0]
   b47ee:	f004 fa2d 	bl	b8c4c <spark_cloud_flag_connected>
  if(Particle.connected()) PublishQueuePosix::instance().publish("State Transition",stateTransitionString, PRIVATE);
   b47f2:	b150      	cbz	r0, b480a <_Z22publishStateTransitionv+0x42>
   b47f4:	f002 ff06 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b47f8:	2300      	movs	r3, #0
   b47fa:	f88d 3000 	strb.w	r3, [sp]
   b47fe:	4b08      	ldr	r3, [pc, #32]	; (b4820 <_Z22publishStateTransitionv+0x58>)
   b4800:	4908      	ldr	r1, [pc, #32]	; (b4824 <_Z22publishStateTransitionv+0x5c>)
   b4802:	781b      	ldrb	r3, [r3, #0]
   b4804:	aa02      	add	r2, sp, #8
   b4806:	f7ff fd21 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b480a:	b00d      	add	sp, #52	; 0x34
   b480c:	bd30      	pop	{r4, r5, pc}
   b480e:	bf00      	nop
   b4810:	2003e574 	.word	0x2003e574
   b4814:	2003e500 	.word	0x2003e500
   b4818:	2003e2e8 	.word	0x2003e2e8
   b481c:	000bbe4a 	.word	0x000bbe4a
   b4820:	2003e44d 	.word	0x2003e44d
   b4824:	000bbe58 	.word	0x000bbe58

000b4828 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   b4828:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b482a:	4d19      	ldr	r5, [pc, #100]	; (b4890 <_Z17getSignalStrengthv+0x68>)
   b482c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b482e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b4830:	ac0c      	add	r4, sp, #48	; 0x30
   b4832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4838:	e895 0003 	ldmia.w	r5, {r0, r1}
   b483c:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   b4840:	4914      	ldr	r1, [pc, #80]	; (b4894 <_Z17getSignalStrengthv+0x6c>)
   b4842:	a804      	add	r0, sp, #16
   b4844:	f004 fb8c 	bl	b8f60 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   b4848:	a804      	add	r0, sp, #16
   b484a:	f004 fbcc 	bl	b8fe6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b484e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   b4850:	a804      	add	r0, sp, #16
   b4852:	f004 fc01 	bl	b9058 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   b4856:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b4858:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b485c:	f004 fc2c 	bl	b90b8 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b4860:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b4862:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b4866:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b486a:	f006 fba3 	bl	bafb4 <__aeabi_f2d>
   b486e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4872:	4628      	mov	r0, r5
   b4874:	f006 fb9e 	bl	bafb4 <__aeabi_f2d>
   b4878:	e9cd 0100 	strd	r0, r1, [sp]
   b487c:	4a06      	ldr	r2, [pc, #24]	; (b4898 <_Z17getSignalStrengthv+0x70>)
   b487e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b4882:	4806      	ldr	r0, [pc, #24]	; (b489c <_Z17getSignalStrengthv+0x74>)
   b4884:	2140      	movs	r1, #64	; 0x40
   b4886:	f004 fab9 	bl	b8dfc <snprintf>
}
   b488a:	b017      	add	sp, #92	; 0x5c
   b488c:	bd30      	pop	{r4, r5, pc}
   b488e:	bf00      	nop
   b4890:	000bc2f4 	.word	0x000bc2f4
   b4894:	2003e634 	.word	0x2003e634
   b4898:	000bbe69 	.word	0x000bbe69
   b489c:	2003e400 	.word	0x2003e400

000b48a0 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   b48a0:	b508      	push	{r3, lr}
   b48a2:	f004 f9d3 	bl	b8c4c <spark_cloud_flag_connected>
  return !Particle.connected();
   b48a6:	f080 0001 	eor.w	r0, r0, #1
}
   b48aa:	b2c0      	uxtb	r0, r0
   b48ac:	bd08      	pop	{r3, pc}
	...

000b48b0 <_Z22disconnectFromParticlev>:
{
   b48b0:	b530      	push	{r4, r5, lr}
   b48b2:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b48b4:	2400      	movs	r4, #0
  Particle.disconnect();
   b48b6:	a801      	add	r0, sp, #4
   b48b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b48bc:	f8ad 400c 	strh.w	r4, [sp, #12]
   b48c0:	f004 fca2 	bl	b9208 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b48c4:	4620      	mov	r0, r4
   b48c6:	f003 ff4f 	bl	b8768 <hal_timer_millis>
        while (_while() && !_condition()) {
   b48ca:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b48ce:	4604      	mov	r4, r0
   b48d0:	2000      	movs	r0, #0
   b48d2:	f003 ff49 	bl	b8768 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b48d6:	1b00      	subs	r0, r0, r4
   b48d8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b48dc:	42a8      	cmp	r0, r5
   b48de:	f171 0300 	sbcs.w	r3, r1, #0
   b48e2:	d205      	bcs.n	b48f0 <_Z22disconnectFromParticlev+0x40>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   b48e4:	f7ff ffdc 	bl	b48a0 <_Z12notConnectedv>
   b48e8:	b910      	cbnz	r0, b48f0 <_Z22disconnectFromParticlev+0x40>
            spark_process();
   b48ea:	f004 f99f 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b48ee:	e7ef      	b.n	b48d0 <_Z22disconnectFromParticlev+0x20>
   b48f0:	f7ff ffd6 	bl	b48a0 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b48f4:	4809      	ldr	r0, [pc, #36]	; (b491c <_Z22disconnectFromParticlev+0x6c>)
   b48f6:	2300      	movs	r3, #0
   b48f8:	4619      	mov	r1, r3
   b48fa:	461a      	mov	r2, r3
   b48fc:	6840      	ldr	r0, [r0, #4]
   b48fe:	f004 fa1d 	bl	b8d3c <network_off>
  sysStatus.connectedStatus = false;
   b4902:	4b07      	ldr	r3, [pc, #28]	; (b4920 <_Z22disconnectFromParticlev+0x70>)
   b4904:	2200      	movs	r2, #0
   b4906:	721a      	strb	r2, [r3, #8]
  systemStatusWriteNeeded = true;
   b4908:	4b06      	ldr	r3, [pc, #24]	; (b4924 <_Z22disconnectFromParticlev+0x74>)
   b490a:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   b490c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   b4910:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   b4912:	f004 fad7 	bl	b8ec4 <delay>
}
   b4916:	4620      	mov	r0, r4
   b4918:	b005      	add	sp, #20
   b491a:	bd30      	pop	{r4, r5, pc}
   b491c:	2003e634 	.word	0x2003e634
   b4920:	2003e580 	.word	0x2003e580
   b4924:	2003e5b0 	.word	0x2003e5b0

000b4928 <_Z20meterParticlePublishv>:


bool meterParticlePublish() {
   b4928:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b492a:	f003 ff0d 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;  
  
  if (millis() - lastPublish >= 1000) return 1;
  
  return 0;
   b492e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4932:	bf34      	ite	cc
   b4934:	2000      	movcc	r0, #0
   b4936:	2001      	movcs	r0, #1
   b4938:	bd08      	pop	{r3, pc}
	...

000b493c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b493c:	b530      	push	{r4, r5, lr}
   b493e:	b085      	sub	sp, #20
   b4940:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b4942:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b4944:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b4946:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b4948:	f004 f8de 	bl	b8b08 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b494c:	b990      	cbnz	r0, b4974 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b494e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b4950:	b10c      	cbz	r4, b4956 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b4952:	6923      	ldr	r3, [r4, #16]
   b4954:	b923      	cbnz	r3, b4960 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b4956:	4a08      	ldr	r2, [pc, #32]	; (b4978 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b4958:	4908      	ldr	r1, [pc, #32]	; (b497c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b495a:	200a      	movs	r0, #10
   b495c:	f004 f8bc 	bl	b8ad8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4960:	230c      	movs	r3, #12
   b4962:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b4966:	2304      	movs	r3, #4
   b4968:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b496a:	aa01      	add	r2, sp, #4
   b496c:	6923      	ldr	r3, [r4, #16]
   b496e:	2101      	movs	r1, #1
   b4970:	4620      	mov	r0, r4
   b4972:	4798      	blx	r3
}
   b4974:	b005      	add	sp, #20
   b4976:	bd30      	pop	{r4, r5, pc}
   b4978:	000b8739 	.word	0x000b8739
   b497c:	000bbe82 	.word	0x000bbe82

000b4980 <_Z17getBatteryContextv>:
void getBatteryContext() {
   b4980:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4982:	4d0e      	ldr	r5, [pc, #56]	; (b49bc <_Z17getBatteryContextv+0x3c>)
   b4984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   b4986:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4988:	ac01      	add	r4, sp, #4
   b498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b498c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b4994:	4669      	mov	r1, sp
   b4996:	2007      	movs	r0, #7
   b4998:	f7ff ffd0 	bl	b493c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b499c:	2800      	cmp	r0, #0
        return val;
   b499e:	bfa8      	it	ge
   b49a0:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b49a2:	4a07      	ldr	r2, [pc, #28]	; (b49c0 <_Z17getBatteryContextv+0x40>)
   b49a4:	ab08      	add	r3, sp, #32
   b49a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b49aa:	2110      	movs	r1, #16
   b49ac:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b49b0:	4804      	ldr	r0, [pc, #16]	; (b49c4 <_Z17getBatteryContextv+0x44>)
}
   b49b2:	b009      	add	sp, #36	; 0x24
   b49b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   b49b8:	f004 ba20 	b.w	b8dfc <snprintf>
   b49bc:	000bc31c 	.word	0x000bc31c
   b49c0:	000bc3f0 	.word	0x000bc3f0
   b49c4:	2003e45c 	.word	0x2003e45c

000b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b49c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b49ca:	2300      	movs	r3, #0
   b49cc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b49ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b49d0:	4604      	mov	r4, r0
   b49d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b49d4:	b12b      	cbz	r3, b49e2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b49d6:	2202      	movs	r2, #2
   b49d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b49da:	68eb      	ldr	r3, [r5, #12]
   b49dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b49de:	68ab      	ldr	r3, [r5, #8]
   b49e0:	60a3      	str	r3, [r4, #8]
    }
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd38      	pop	{r3, r4, r5, pc}

000b49e6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b49e6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b49e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49ea:	4604      	mov	r4, r0
	switch (__op)
   b49ec:	d104      	bne.n	b49f8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b49ee:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b49f0:	6003      	str	r3, [r0, #0]
      }
   b49f2:	2000      	movs	r0, #0
   b49f4:	b003      	add	sp, #12
   b49f6:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b49f8:	2a02      	cmp	r2, #2
   b49fa:	d00c      	beq.n	b4a16 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b49fc:	2a03      	cmp	r2, #3
   b49fe:	d1f8      	bne.n	b49f2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4a00:	6804      	ldr	r4, [r0, #0]
   b4a02:	2c00      	cmp	r4, #0
   b4a04:	d0f5      	beq.n	b49f2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4a06:	4620      	mov	r0, r4
   b4a08:	f7ff fd31 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4a0c:	2110      	movs	r1, #16
   b4a0e:	4620      	mov	r0, r4
   b4a10:	f7ff fb45 	bl	b409e <_ZdlPvj>
   b4a14:	e7ed      	b.n	b49f2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4a16:	6809      	ldr	r1, [r1, #0]
   b4a18:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a1a:	2010      	movs	r0, #16
   b4a1c:	f7ff fb3b 	bl	b4096 <_Znwj>
   b4a20:	4605      	mov	r5, r0
   b4a22:	b110      	cbz	r0, b4a2a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4a24:	9901      	ldr	r1, [sp, #4]
   b4a26:	f7ff ffcf 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4a2a:	6025      	str	r5, [r4, #0]
	}
   b4a2c:	e7e1      	b.n	b49f2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4a2e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4a30:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4a32:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4a34:	b17c      	cbz	r4, b4a56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4a36:	6863      	ldr	r3, [r4, #4]
   b4a38:	3b01      	subs	r3, #1
   b4a3a:	6063      	str	r3, [r4, #4]
   b4a3c:	b95b      	cbnz	r3, b4a56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4a3e:	6823      	ldr	r3, [r4, #0]
   b4a40:	4620      	mov	r0, r4
   b4a42:	689b      	ldr	r3, [r3, #8]
   b4a44:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4a46:	68a3      	ldr	r3, [r4, #8]
   b4a48:	3b01      	subs	r3, #1
   b4a4a:	60a3      	str	r3, [r4, #8]
   b4a4c:	b91b      	cbnz	r3, b4a56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4a4e:	6823      	ldr	r3, [r4, #0]
   b4a50:	4620      	mov	r0, r4
   b4a52:	68db      	ldr	r3, [r3, #12]
   b4a54:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4a56:	4628      	mov	r0, r5
   b4a58:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a5c <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4a5c:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   b4a5e:	780b      	ldrb	r3, [r1, #0]
   b4a60:	4d23      	ldr	r5, [pc, #140]	; (b4af0 <_Z14UbidotsHandlerPKcS0_+0x94>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   b4a62:	b095      	sub	sp, #84	; 0x54
   b4a64:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   b4a66:	b983      	cbnz	r3, b4a8a <_Z14UbidotsHandlerPKcS0_+0x2e>
    snprintf(responseString, sizeof(responseString),"No Data");
   b4a68:	4922      	ldr	r1, [pc, #136]	; (b4af4 <_Z14UbidotsHandlerPKcS0_+0x98>)
   b4a6a:	a804      	add	r0, sp, #16
   b4a6c:	f006 fef8 	bl	bb860 <strcpy>
  if (sysStatus.verboseMode && Particle.connected()) {
   b4a70:	7a6b      	ldrb	r3, [r5, #9]
   b4a72:	2b00      	cmp	r3, #0
   b4a74:	d03a      	beq.n	b4aec <_Z14UbidotsHandlerPKcS0_+0x90>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4a76:	f004 f8e9 	bl	b8c4c <spark_cloud_flag_connected>
   b4a7a:	2800      	cmp	r0, #0
   b4a7c:	d036      	beq.n	b4aec <_Z14UbidotsHandlerPKcS0_+0x90>
    waitUntil(meterParticlePublish);
   b4a7e:	f7ff ff53 	bl	b4928 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   b4a82:	bb20      	cbnz	r0, b4ace <_Z14UbidotsHandlerPKcS0_+0x72>
            spark_process();
   b4a84:	f004 f8d2 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b4a88:	e7f9      	b.n	b4a7e <_Z14UbidotsHandlerPKcS0_+0x22>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4a8a:	4608      	mov	r0, r1
   b4a8c:	f006 fe5e 	bl	bb74c <atoi>
   b4a90:	28c8      	cmp	r0, #200	; 0xc8
   b4a92:	d10d      	bne.n	b4ab0 <_Z14UbidotsHandlerPKcS0_+0x54>
    snprintf(responseString, sizeof(responseString),"Response Received");
   b4a94:	4918      	ldr	r1, [pc, #96]	; (b4af8 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   b4a96:	a804      	add	r0, sp, #16
   b4a98:	f006 fee2 	bl	bb860 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   b4a9c:	f005 fdfb 	bl	ba696 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   b4aa0:	4b16      	ldr	r3, [pc, #88]	; (b4afc <_Z14UbidotsHandlerPKcS0_+0xa0>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   b4aa2:	6128      	str	r0, [r5, #16]
    systemStatusWriteNeeded = true;
   b4aa4:	2201      	movs	r2, #1
   b4aa6:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   b4aa8:	4b15      	ldr	r3, [pc, #84]	; (b4b00 <_Z14UbidotsHandlerPKcS0_+0xa4>)
   b4aaa:	2200      	movs	r2, #0
   b4aac:	701a      	strb	r2, [r3, #0]
   b4aae:	e7df      	b.n	b4a70 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   b4ab0:	4620      	mov	r0, r4
   b4ab2:	f006 fe4b 	bl	bb74c <atoi>
   b4ab6:	28c9      	cmp	r0, #201	; 0xc9
   b4ab8:	d0ec      	beq.n	b4a94 <_Z14UbidotsHandlerPKcS0_+0x38>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   b4aba:	4620      	mov	r0, r4
   b4abc:	f006 fe46 	bl	bb74c <atoi>
   b4ac0:	4a10      	ldr	r2, [pc, #64]	; (b4b04 <_Z14UbidotsHandlerPKcS0_+0xa8>)
   b4ac2:	4603      	mov	r3, r0
   b4ac4:	2140      	movs	r1, #64	; 0x40
   b4ac6:	a804      	add	r0, sp, #16
   b4ac8:	f004 f998 	bl	b8dfc <snprintf>
   b4acc:	e7d0      	b.n	b4a70 <_Z14UbidotsHandlerPKcS0_+0x14>
    waitUntil(meterParticlePublish);
   b4ace:	f7ff ff2b 	bl	b4928 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4ad2:	4b0d      	ldr	r3, [pc, #52]	; (b4b08 <_Z14UbidotsHandlerPKcS0_+0xac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ad4:	490d      	ldr	r1, [pc, #52]	; (b4b0c <_Z14UbidotsHandlerPKcS0_+0xb0>)
   b4ad6:	781b      	ldrb	r3, [r3, #0]
   b4ad8:	f88d 3000 	strb.w	r3, [sp]
   b4adc:	a802      	add	r0, sp, #8
   b4ade:	233c      	movs	r3, #60	; 0x3c
   b4ae0:	aa04      	add	r2, sp, #16
   b4ae2:	f004 fcad 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4ae6:	a803      	add	r0, sp, #12
   b4ae8:	f7ff ffa1 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4aec:	b015      	add	sp, #84	; 0x54
   b4aee:	bd30      	pop	{r4, r5, pc}
   b4af0:	2003e580 	.word	0x2003e580
   b4af4:	000bbea8 	.word	0x000bbea8
   b4af8:	000bbeb0 	.word	0x000bbeb0
   b4afc:	2003e5b0 	.word	0x2003e5b0
   b4b00:	2003e494 	.word	0x2003e494
   b4b04:	000bbec2 	.word	0x000bbec2
   b4b08:	2003e44d 	.word	0x2003e44d
   b4b0c:	000bbedf 	.word	0x000bbedf

000b4b10 <_Z15setLowPowerMode6String>:
{
   b4b10:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4b12:	4928      	ldr	r1, [pc, #160]	; (b4bb4 <_Z15setLowPowerMode6String+0xa4>)
   b4b14:	b085      	sub	sp, #20
   b4b16:	4604      	mov	r4, r0
   b4b18:	f005 fb3e 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4b1c:	b1d0      	cbz	r0, b4b54 <_Z15setLowPowerMode6String+0x44>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b1e:	4925      	ldr	r1, [pc, #148]	; (b4bb4 <_Z15setLowPowerMode6String+0xa4>)
   b4b20:	4620      	mov	r0, r4
   b4b22:	f005 fb39 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   b4b26:	4605      	mov	r5, r0
   b4b28:	b9e0      	cbnz	r0, b4b64 <_Z15setLowPowerMode6String+0x54>
   b4b2a:	4923      	ldr	r1, [pc, #140]	; (b4bb8 <_Z15setLowPowerMode6String+0xa8>)
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f005 fb33 	bl	ba198 <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   b4b32:	b158      	cbz	r0, b4b4c <_Z15setLowPowerMode6String+0x3c>
    sysStatus.lowPowerMode = false;
   b4b34:	4b21      	ldr	r3, [pc, #132]	; (b4bbc <_Z15setLowPowerMode6String+0xac>)
    Log.info("Cleared Low Power Mode");
   b4b36:	4922      	ldr	r1, [pc, #136]	; (b4bc0 <_Z15setLowPowerMode6String+0xb0>)
   b4b38:	4822      	ldr	r0, [pc, #136]	; (b4bc4 <_Z15setLowPowerMode6String+0xb4>)
    sysStatus.lowPowerMode = false;
   b4b3a:	72dd      	strb	r5, [r3, #11]
    Log.info("Cleared Low Power Mode");
   b4b3c:	f7ff fd46 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b40:	f004 f884 	bl	b8c4c <spark_cloud_flag_connected>
    if (!Particle.connected()) {                                 // In case we are not connected, we will do so now.
   b4b44:	b9f8      	cbnz	r0, b4b86 <_Z15setLowPowerMode6String+0x76>
      state = CONNECTING_STATE;                                       // Will connect - if connection fails, will need to reset device
   b4b46:	4b20      	ldr	r3, [pc, #128]	; (b4bc8 <_Z15setLowPowerMode6String+0xb8>)
   b4b48:	2205      	movs	r2, #5
   b4b4a:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   b4b4c:	4b1f      	ldr	r3, [pc, #124]	; (b4bcc <_Z15setLowPowerMode6String+0xbc>)
   b4b4e:	2001      	movs	r0, #1
   b4b50:	7018      	strb	r0, [r3, #0]
  return 1;
   b4b52:	e005      	b.n	b4b60 <_Z15setLowPowerMode6String+0x50>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4b54:	4918      	ldr	r1, [pc, #96]	; (b4bb8 <_Z15setLowPowerMode6String+0xa8>)
   b4b56:	4620      	mov	r0, r4
   b4b58:	f005 fb1e 	bl	ba198 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4b5c:	2800      	cmp	r0, #0
   b4b5e:	d1de      	bne.n	b4b1e <_Z15setLowPowerMode6String+0xe>
}
   b4b60:	b005      	add	sp, #20
   b4b62:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   b4b64:	4b15      	ldr	r3, [pc, #84]	; (b4bbc <_Z15setLowPowerMode6String+0xac>)
    Log.info("Set Low Power Mode");
   b4b66:	491a      	ldr	r1, [pc, #104]	; (b4bd0 <_Z15setLowPowerMode6String+0xc0>)
   b4b68:	4816      	ldr	r0, [pc, #88]	; (b4bc4 <_Z15setLowPowerMode6String+0xb4>)
    sysStatus.lowPowerMode = true;
   b4b6a:	2201      	movs	r2, #1
   b4b6c:	72da      	strb	r2, [r3, #11]
    Log.info("Set Low Power Mode");
   b4b6e:	f7ff fd2d 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
   b4b72:	f004 f86b 	bl	b8c4c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b4b76:	2800      	cmp	r0, #0
   b4b78:	d0e8      	beq.n	b4b4c <_Z15setLowPowerMode6String+0x3c>
      waitUntil(meterParticlePublish);
   b4b7a:	f7ff fed5 	bl	b4928 <_Z20meterParticlePublishv>
   b4b7e:	b940      	cbnz	r0, b4b92 <_Z15setLowPowerMode6String+0x82>
            spark_process();
   b4b80:	f004 f854 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b4b84:	e7f9      	b.n	b4b7a <_Z15setLowPowerMode6String+0x6a>
      waitUntil(meterParticlePublish);
   b4b86:	f7ff fecf 	bl	b4928 <_Z20meterParticlePublishv>
   b4b8a:	b910      	cbnz	r0, b4b92 <_Z15setLowPowerMode6String+0x82>
            spark_process();
   b4b8c:	f004 f84e 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b4b90:	e7f9      	b.n	b4b86 <_Z15setLowPowerMode6String+0x76>
   b4b92:	f7ff fec9 	bl	b4928 <_Z20meterParticlePublishv>
   b4b96:	4b0f      	ldr	r3, [pc, #60]	; (b4bd4 <_Z15setLowPowerMode6String+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4b98:	4a0f      	ldr	r2, [pc, #60]	; (b4bd8 <_Z15setLowPowerMode6String+0xc8>)
   b4b9a:	781b      	ldrb	r3, [r3, #0]
   b4b9c:	f88d 3000 	strb.w	r3, [sp]
   b4ba0:	a802      	add	r0, sp, #8
   b4ba2:	490e      	ldr	r1, [pc, #56]	; (b4bdc <_Z15setLowPowerMode6String+0xcc>)
   b4ba4:	233c      	movs	r3, #60	; 0x3c
   b4ba6:	f004 fc4b 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4baa:	a803      	add	r0, sp, #12
   b4bac:	f7ff ff3f 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4bb0:	e7cc      	b.n	b4b4c <_Z15setLowPowerMode6String+0x3c>
   b4bb2:	bf00      	nop
   b4bb4:	000bbcd7 	.word	0x000bbcd7
   b4bb8:	000bbcdc 	.word	0x000bbcdc
   b4bbc:	2003e580 	.word	0x2003e580
   b4bc0:	000bbeff 	.word	0x000bbeff
   b4bc4:	2003e66c 	.word	0x2003e66c
   b4bc8:	2003e574 	.word	0x2003e574
   b4bcc:	2003e5b0 	.word	0x2003e5b0
   b4bd0:	000bbeec 	.word	0x000bbeec
   b4bd4:	2003e44d 	.word	0x2003e44d
   b4bd8:	2003e4e0 	.word	0x2003e4e0
   b4bdc:	000bbd7c 	.word	0x000bbd7c

000b4be0 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b4be0:	b570      	push	{r4, r5, r6, lr}
  sensor_data.validData = false;
   b4be2:	4c61      	ldr	r4, [pc, #388]	; (b4d68 <_Z16takeMeasurementsv+0x188>)
  if (sht31.readTemperature()){
   b4be4:	4861      	ldr	r0, [pc, #388]	; (b4d6c <_Z16takeMeasurementsv+0x18c>)
bool takeMeasurements() {
   b4be6:	b086      	sub	sp, #24
  sensor_data.validData = false;
   b4be8:	2500      	movs	r5, #0
   b4bea:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   b4bec:	f002 f9a8 	bl	b6f40 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4bf0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bf8:	f000 80aa 	beq.w	b4d50 <_Z16takeMeasurementsv+0x170>
    sensor_data.temperatureInC = sht31.readTemperature();
   b4bfc:	485b      	ldr	r0, [pc, #364]	; (b4d6c <_Z16takeMeasurementsv+0x18c>)
   b4bfe:	f002 f99f 	bl	b6f40 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4c02:	ee10 0a10 	vmov	r0, s0
   b4c06:	ed84 0a03 	vstr	s0, [r4, #12]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   b4c0a:	f006 f9d3 	bl	bafb4 <__aeabi_f2d>
   b4c0e:	4a58      	ldr	r2, [pc, #352]	; (b4d70 <_Z16takeMeasurementsv+0x190>)
   b4c10:	e9cd 0100 	strd	r0, r1, [sp]
   b4c14:	2110      	movs	r1, #16
   b4c16:	4857      	ldr	r0, [pc, #348]	; (b4d74 <_Z16takeMeasurementsv+0x194>)
   b4c18:	f004 f8f0 	bl	b8dfc <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   b4c1c:	4853      	ldr	r0, [pc, #332]	; (b4d6c <_Z16takeMeasurementsv+0x18c>)
   b4c1e:	f002 f99d 	bl	b6f5c <_ZN14Adafruit_SHT3112readHumidityEv>
   b4c22:	ee10 0a10 	vmov	r0, s0
   b4c26:	ed84 0a04 	vstr	s0, [r4, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   b4c2a:	f006 f9c3 	bl	bafb4 <__aeabi_f2d>
   b4c2e:	4a52      	ldr	r2, [pc, #328]	; (b4d78 <_Z16takeMeasurementsv+0x198>)
   b4c30:	e9cd 0100 	strd	r0, r1, [sp]
   b4c34:	2110      	movs	r1, #16
   b4c36:	4851      	ldr	r0, [pc, #324]	; (b4d7c <_Z16takeMeasurementsv+0x19c>)
   b4c38:	f004 f8e0 	bl	b8dfc <snprintf>
    sensor_data.lux = veml.readLux();
   b4c3c:	4850      	ldr	r0, [pc, #320]	; (b4d80 <_Z16takeMeasurementsv+0x1a0>)
   b4c3e:	f001 fa27 	bl	b6090 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   b4c42:	484f      	ldr	r0, [pc, #316]	; (b4d80 <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.lux = veml.readLux();
   b4c44:	ed84 0a05 	vstr	s0, [r4, #20]
    sensor_data.white = veml.readWhite();
   b4c48:	f001 fa42 	bl	b60d0 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   b4c4c:	484c      	ldr	r0, [pc, #304]	; (b4d80 <_Z16takeMeasurementsv+0x1a0>)
    sensor_data.white = veml.readWhite();
   b4c4e:	ed84 0a06 	vstr	s0, [r4, #24]
    sensor_data.raw_als = veml.readALS();
   b4c52:	f001 f9bc 	bl	b5fce <_ZN17Adafruit_VEML77007readALSEv>
   b4c56:	ee07 0a90 	vmov	s15, r0
   b4c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4c5e:	2664      	movs	r6, #100	; 0x64
   b4c60:	2013      	movs	r0, #19
    sensor_data.raw_als = veml.readALS();
   b4c62:	edc4 7a07 	vstr	s15, [r4, #28]
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4c66:	f005 ff65 	bl	bab34 <analogRead>
   b4c6a:	462b      	mov	r3, r5
   b4c6c:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4c70:	4629      	mov	r1, r5
   b4c72:	9600      	str	r6, [sp, #0]
   b4c74:	f004 f91a 	bl	b8eac <_Z3mapiiiii>
   b4c78:	62a0      	str	r0, [r4, #40]	; 0x28
    sensor_data.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   b4c7a:	2012      	movs	r0, #18
   b4c7c:	f005 ff5a 	bl	bab34 <analogRead>
   b4c80:	462b      	mov	r3, r5
   b4c82:	f640 628a 	movw	r2, #3722	; 0xe8a
   b4c86:	4629      	mov	r1, r5
   b4c88:	9600      	str	r6, [sp, #0]
   b4c8a:	f004 f90f 	bl	b8eac <_Z3mapiiiii>
   b4c8e:	62e0      	str	r0, [r4, #44]	; 0x2c
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   b4c90:	6960      	ldr	r0, [r4, #20]
   b4c92:	f006 f98f 	bl	bafb4 <__aeabi_f2d>
   b4c96:	4a3b      	ldr	r2, [pc, #236]	; (b4d84 <_Z16takeMeasurementsv+0x1a4>)
   b4c98:	e9cd 0100 	strd	r0, r1, [sp]
   b4c9c:	2110      	movs	r1, #16
   b4c9e:	483a      	ldr	r0, [pc, #232]	; (b4d88 <_Z16takeMeasurementsv+0x1a8>)
   b4ca0:	f004 f8ac 	bl	b8dfc <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   b4ca4:	69a0      	ldr	r0, [r4, #24]
   b4ca6:	f006 f985 	bl	bafb4 <__aeabi_f2d>
   b4caa:	4a38      	ldr	r2, [pc, #224]	; (b4d8c <_Z16takeMeasurementsv+0x1ac>)
   b4cac:	e9cd 0100 	strd	r0, r1, [sp]
   b4cb0:	2110      	movs	r1, #16
   b4cb2:	4837      	ldr	r0, [pc, #220]	; (b4d90 <_Z16takeMeasurementsv+0x1b0>)
   b4cb4:	f004 f8a2 	bl	b8dfc <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   b4cb8:	69e0      	ldr	r0, [r4, #28]
   b4cba:	f006 f97b 	bl	bafb4 <__aeabi_f2d>
   b4cbe:	4a35      	ldr	r2, [pc, #212]	; (b4d94 <_Z16takeMeasurementsv+0x1b4>)
   b4cc0:	e9cd 0100 	strd	r0, r1, [sp]
   b4cc4:	2110      	movs	r1, #16
   b4cc6:	4834      	ldr	r0, [pc, #208]	; (b4d98 <_Z16takeMeasurementsv+0x1b8>)
   b4cc8:	f004 f898 	bl	b8dfc <snprintf>
   b4ccc:	a902      	add	r1, sp, #8
   b4cce:	2003      	movs	r0, #3
   b4cd0:	f7ff fe34 	bl	b493c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b4cd4:	2800      	cmp	r0, #0
   b4cd6:	d13e      	bne.n	b4d56 <_Z16takeMeasurementsv+0x176>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4cd8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4cdc:	ee07 3a90 	vmov	s15, r3
   b4ce0:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4ce8:	2110      	movs	r1, #16
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4cea:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4cee:	4a2b      	ldr	r2, [pc, #172]	; (b4d9c <_Z16takeMeasurementsv+0x1bc>)
   b4cf0:	482b      	ldr	r0, [pc, #172]	; (b4da0 <_Z16takeMeasurementsv+0x1c0>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   b4cf2:	edc4 7a08 	vstr	s15, [r4, #32]
    snprintf(batteryString, sizeof(batteryString), "%i ", sensor_data.stateOfCharge);
   b4cf6:	f004 f881 	bl	b8dfc <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   b4cfa:	f7ff fe41 	bl	b4980 <_Z17getBatteryContextv>
   b4cfe:	a902      	add	r1, sp, #8
   b4d00:	2003      	movs	r0, #3
   b4d02:	f7ff fe1b 	bl	b493c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   b4d06:	bb48      	cbnz	r0, b4d5c <_Z16takeMeasurementsv+0x17c>
   b4d08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b4d0c:	ee07 3a90 	vmov	s15, r3
   b4d10:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b4d18:	4a22      	ldr	r2, [pc, #136]	; (b4da4 <_Z16takeMeasurementsv+0x1c4>)
   b4d1a:	ee17 3a90 	vmov	r3, s15
    if (sysStatus.stateOfCharge < 30) {
   b4d1e:	2b1d      	cmp	r3, #29
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   b4d20:	edc2 7a03 	vstr	s15, [r2, #12]
    if (sysStatus.stateOfCharge < 30) {
   b4d24:	dc1d      	bgt.n	b4d62 <_Z16takeMeasurementsv+0x182>
      sysStatus.lowBatteryMode = true;
   b4d26:	2301      	movs	r3, #1
   b4d28:	7293      	strb	r3, [r2, #10]
      if (!sysStatus.lowPowerMode) setLowPowerMode("1");                 // Should be there already but just in case...
   b4d2a:	7ad3      	ldrb	r3, [r2, #11]
   b4d2c:	b94b      	cbnz	r3, b4d42 <_Z16takeMeasurementsv+0x162>
   b4d2e:	491e      	ldr	r1, [pc, #120]	; (b4da8 <_Z16takeMeasurementsv+0x1c8>)
   b4d30:	a802      	add	r0, sp, #8
   b4d32:	f005 f970 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d36:	a802      	add	r0, sp, #8
   b4d38:	f7ff feea 	bl	b4b10 <_Z15setLowPowerMode6String>
   b4d3c:	a802      	add	r0, sp, #8
   b4d3e:	f005 f91f 	bl	b9f80 <_ZN6StringD1Ev>
    sensor_data.validData = true;
   b4d42:	2501      	movs	r5, #1
   b4d44:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   b4d46:	f005 fca6 	bl	ba696 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;  
   b4d4a:	4b18      	ldr	r3, [pc, #96]	; (b4dac <_Z16takeMeasurementsv+0x1cc>)
    sensor_data.timeStamp = Time.now();
   b4d4c:	6060      	str	r0, [r4, #4]
    sensorDataWriteNeeded = true;  
   b4d4e:	701d      	strb	r5, [r3, #0]
    }else return 0;
   b4d50:	4628      	mov	r0, r5
  }                                                                       // Take measurement from all the sensors
   b4d52:	b006      	add	sp, #24
   b4d54:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   b4d56:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4d5a:	e7c3      	b.n	b4ce4 <_Z16takeMeasurementsv+0x104>
   b4d5c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4d60:	e7d8      	b.n	b4d14 <_Z16takeMeasurementsv+0x134>
    else sysStatus.lowBatteryMode = false;                              // We have sufficient to continue operations
   b4d62:	2300      	movs	r3, #0
   b4d64:	7293      	strb	r3, [r2, #10]
   b4d66:	e7ec      	b.n	b4d42 <_Z16takeMeasurementsv+0x162>
   b4d68:	2003e528 	.word	0x2003e528
   b4d6c:	2003e568 	.word	0x2003e568
   b4d70:	000bbf16 	.word	0x000bbf16
   b4d74:	2003e5b1 	.word	0x2003e5b1
   b4d78:	000bbf1e 	.word	0x000bbf1e
   b4d7c:	2003e4b0 	.word	0x2003e4b0
   b4d80:	2003e5c4 	.word	0x2003e5c4
   b4d84:	000bbf26 	.word	0x000bbf26
   b4d88:	2003e4f0 	.word	0x2003e4f0
   b4d8c:	000bbf32 	.word	0x000bbf32
   b4d90:	2003e601 	.word	0x2003e601
   b4d94:	000bbf40 	.word	0x000bbf40
   b4d98:	2003e3f0 	.word	0x2003e3f0
   b4d9c:	000bbf4c 	.word	0x000bbf4c
   b4da0:	2003e46c 	.word	0x2003e46c
   b4da4:	2003e580 	.word	0x2003e580
   b4da8:	000bbcd7 	.word	0x000bbcd7
   b4dac:	2003e524 	.word	0x2003e524

000b4db0 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                           // Default settings for the device - connected, not-low power and always on
   b4db0:	b510      	push	{r4, lr}
   b4db2:	b086      	sub	sp, #24
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4db4:	f003 ff4a 	bl	b8c4c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4db8:	b1a0      	cbz	r0, b4de4 <_Z18loadSystemDefaultsv+0x34>
    waitUntil(meterParticlePublish);
   b4dba:	f7ff fdb5 	bl	b4928 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   b4dbe:	b910      	cbnz	r0, b4dc6 <_Z18loadSystemDefaultsv+0x16>
            spark_process();
   b4dc0:	f003 ff34 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b4dc4:	e7f9      	b.n	b4dba <_Z18loadSystemDefaultsv+0xa>
   b4dc6:	f7ff fdaf 	bl	b4928 <_Z20meterParticlePublishv>
   b4dca:	4b19      	ldr	r3, [pc, #100]	; (b4e30 <_Z18loadSystemDefaultsv+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4dcc:	4a19      	ldr	r2, [pc, #100]	; (b4e34 <_Z18loadSystemDefaultsv+0x84>)
   b4dce:	781b      	ldrb	r3, [r3, #0]
   b4dd0:	f88d 3000 	strb.w	r3, [sp]
   b4dd4:	a802      	add	r0, sp, #8
   b4dd6:	4918      	ldr	r1, [pc, #96]	; (b4e38 <_Z18loadSystemDefaultsv+0x88>)
   b4dd8:	233c      	movs	r3, #60	; 0x3c
   b4dda:	f004 fb31 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4dde:	a803      	add	r0, sp, #12
   b4de0:	f7ff fe25 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 1;
   b4de4:	4c15      	ldr	r4, [pc, #84]	; (b4e3c <_Z18loadSystemDefaultsv+0x8c>)
  Log.info("Loading system defaults");
   b4de6:	4816      	ldr	r0, [pc, #88]	; (b4e40 <_Z18loadSystemDefaultsv+0x90>)
   b4de8:	4916      	ldr	r1, [pc, #88]	; (b4e44 <_Z18loadSystemDefaultsv+0x94>)
   b4dea:	f7ff fbef 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   b4dee:	2301      	movs	r3, #1
   b4df0:	7023      	strb	r3, [r4, #0]
  sysStatus.verboseMode = true;
   b4df2:	7263      	strb	r3, [r4, #9]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   b4df4:	2004      	movs	r0, #4
  sysStatus.lowBatteryMode = false;
   b4df6:	2300      	movs	r3, #0
   b4df8:	72a3      	strb	r3, [r4, #10]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   b4dfa:	f005 fe88 	bl	bab0e <digitalRead>
   b4dfe:	b1a0      	cbz	r0, b4e2a <_Z18loadSystemDefaultsv+0x7a>
   b4e00:	4911      	ldr	r1, [pc, #68]	; (b4e48 <_Z18loadSystemDefaultsv+0x98>)
  else setLowPowerMode("0");
   b4e02:	a802      	add	r0, sp, #8
   b4e04:	f005 f907 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e08:	a802      	add	r0, sp, #8
   b4e0a:	f7ff fe81 	bl	b4b10 <_Z15setLowPowerMode6String>
   b4e0e:	a802      	add	r0, sp, #8
   b4e10:	f005 f8b6 	bl	b9f80 <_ZN6StringD1Ev>
  fram.put(FRAM::sysStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   b4e14:	4a09      	ldr	r2, [pc, #36]	; (b4e3c <_Z18loadSystemDefaultsv+0x8c>)
   b4e16:	480d      	ldr	r0, [pc, #52]	; (b4e4c <_Z18loadSystemDefaultsv+0x9c>)
  sysStatus.solarPowerMode = true;
   b4e18:	2101      	movs	r1, #1
  sysStatus.lastConnectionDuration = 0;                               // New measure
   b4e1a:	2300      	movs	r3, #0
  sysStatus.solarPowerMode = true;
   b4e1c:	75e1      	strb	r1, [r4, #23]
  sysStatus.lastConnectionDuration = 0;                               // New measure
   b4e1e:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   b4e20:	b006      	add	sp, #24
   b4e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  fram.put(FRAM::sysStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   b4e26:	f7ff ba09 	b.w	b423c <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
  else setLowPowerMode("0");
   b4e2a:	4909      	ldr	r1, [pc, #36]	; (b4e50 <_Z18loadSystemDefaultsv+0xa0>)
   b4e2c:	e7e9      	b.n	b4e02 <_Z18loadSystemDefaultsv+0x52>
   b4e2e:	bf00      	nop
   b4e30:	2003e44d 	.word	0x2003e44d
   b4e34:	000bbf50 	.word	0x000bbf50
   b4e38:	000bbd7c 	.word	0x000bbd7c
   b4e3c:	2003e580 	.word	0x2003e580
   b4e40:	2003e66c 	.word	0x2003e66c
   b4e44:	000bbf68 	.word	0x000bbf68
   b4e48:	000bbcd7 	.word	0x000bbcd7
   b4e4c:	2003e498 	.word	0x2003e498
   b4e50:	000bbcdc 	.word	0x000bbcdc

000b4e54 <_Z23recordConnectionDetailsv>:
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   b4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   b4e56:	4a3b      	ldr	r2, [pc, #236]	; (b4f44 <_Z23recordConnectionDetailsv+0xf0>)
   b4e58:	4d3b      	ldr	r5, [pc, #236]	; (b4f48 <_Z23recordConnectionDetailsv+0xf4>)
   b4e5a:	6812      	ldr	r2, [r2, #0]
   b4e5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   b4e5e:	3201      	adds	r2, #1
   b4e60:	4293      	cmp	r3, r2
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   b4e62:	b095      	sub	sp, #84	; 0x54
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   b4e64:	d932      	bls.n	b4ecc <_Z23recordConnectionDetailsv+0x78>
   b4e66:	2300      	movs	r3, #0
   b4e68:	85ab      	strh	r3, [r5, #44]	; 0x2c
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4e6a:	4e38      	ldr	r6, [pc, #224]	; (b4f4c <_Z23recordConnectionDetailsv+0xf8>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4e6c:	2200      	movs	r2, #0
   b4e6e:	6870      	ldr	r0, [r6, #4]
   b4e70:	4611      	mov	r1, r2
   b4e72:	f003 ff53 	bl	b8d1c <network_ready>
  if (Cellular.ready()) getSignalStrength();                           // Test signal strength if the cellular modem is on and ready
   b4e76:	b108      	cbz	r0, b4e7c <_Z23recordConnectionDetailsv+0x28>
   b4e78:	f7ff fcd6 	bl	b4828 <_Z17getSignalStrengthv>
  snprintf(data, sizeof(data),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   b4e7c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   b4e7e:	4a34      	ldr	r2, [pc, #208]	; (b4f50 <_Z23recordConnectionDetailsv+0xfc>)
   b4e80:	2140      	movs	r1, #64	; 0x40
   b4e82:	a804      	add	r0, sp, #16
   b4e84:	f003 ffba 	bl	b8dfc <snprintf>
  Log.info(data);
   b4e88:	4832      	ldr	r0, [pc, #200]	; (b4f54 <_Z23recordConnectionDetailsv+0x100>)
   b4e8a:	a904      	add	r1, sp, #16
   b4e8c:	f7ff fb9e 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e90:	f003 fedc 	bl	b8c4c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4e94:	4604      	mov	r4, r0
   b4e96:	b1f8      	cbz	r0, b4ed8 <_Z23recordConnectionDetailsv+0x84>
    Log.info("Cloud connection successful");
   b4e98:	492f      	ldr	r1, [pc, #188]	; (b4f58 <_Z23recordConnectionDetailsv+0x104>)
   b4e9a:	482e      	ldr	r0, [pc, #184]	; (b4f54 <_Z23recordConnectionDetailsv+0x100>)
   b4e9c:	f7ff fb96 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.verboseMode) Particle.publish("Cellular",data,PRIVATE);
   b4ea0:	7a6b      	ldrb	r3, [r5, #9]
   b4ea2:	b163      	cbz	r3, b4ebe <_Z23recordConnectionDetailsv+0x6a>
   b4ea4:	4b2d      	ldr	r3, [pc, #180]	; (b4f5c <_Z23recordConnectionDetailsv+0x108>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ea6:	492e      	ldr	r1, [pc, #184]	; (b4f60 <_Z23recordConnectionDetailsv+0x10c>)
   b4ea8:	781b      	ldrb	r3, [r3, #0]
   b4eaa:	f88d 3000 	strb.w	r3, [sp]
   b4eae:	a802      	add	r0, sp, #8
   b4eb0:	233c      	movs	r3, #60	; 0x3c
   b4eb2:	aa04      	add	r2, sp, #16
   b4eb4:	f004 fac4 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4eb8:	a803      	add	r0, sp, #12
   b4eba:	f7ff fdb8 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  systemStatusWriteNeeded = true;
   b4ebe:	4a29      	ldr	r2, [pc, #164]	; (b4f64 <_Z23recordConnectionDetailsv+0x110>)
   b4ec0:	2301      	movs	r3, #1
   b4ec2:	7013      	strb	r3, [r2, #0]
  sensorDataWriteNeeded = true;
   b4ec4:	4a28      	ldr	r2, [pc, #160]	; (b4f68 <_Z23recordConnectionDetailsv+0x114>)
   b4ec6:	7013      	strb	r3, [r2, #0]
}
   b4ec8:	b015      	add	sp, #84	; 0x54
   b4eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (sysStatus.lastConnectionDuration > sensor_data.maxConnectTime) sensor_data.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   b4ecc:	4a27      	ldr	r2, [pc, #156]	; (b4f6c <_Z23recordConnectionDetailsv+0x118>)
   b4ece:	8e91      	ldrh	r1, [r2, #52]	; 0x34
   b4ed0:	4299      	cmp	r1, r3
   b4ed2:	bf38      	it	cc
   b4ed4:	8693      	strhcc	r3, [r2, #52]	; 0x34
   b4ed6:	e7c8      	b.n	b4e6a <_Z23recordConnectionDetailsv+0x16>
   b4ed8:	4602      	mov	r2, r0
   b4eda:	4601      	mov	r1, r0
   b4edc:	6870      	ldr	r0, [r6, #4]
   b4ede:	4f23      	ldr	r7, [pc, #140]	; (b4f6c <_Z23recordConnectionDetailsv+0x118>)
   b4ee0:	4e1e      	ldr	r6, [pc, #120]	; (b4f5c <_Z23recordConnectionDetailsv+0x108>)
   b4ee2:	f003 ff1b 	bl	b8d1c <network_ready>
  else if (Cellular.ready()) {                                        // We want to take note of this as it implies an issue with the Particle back-end
   b4ee6:	4605      	mov	r5, r0
   b4ee8:	b1c0      	cbz	r0, b4f1c <_Z23recordConnectionDetailsv+0xc8>
    Log.info("Connected to cellular but not Particle");
   b4eea:	4921      	ldr	r1, [pc, #132]	; (b4f70 <_Z23recordConnectionDetailsv+0x11c>)
   b4eec:	4819      	ldr	r0, [pc, #100]	; (b4f54 <_Z23recordConnectionDetailsv+0x100>)
    sensor_data.alerts = 30;                                              // Record alert for timeout on Particle but connected to cellular
   b4eee:	251e      	movs	r5, #30
    Log.info("Connected to cellular but not Particle");
   b4ef0:	f7ff fb6c 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
    sensor_data.alerts = 30;                                              // Record alert for timeout on Particle but connected to cellular
   b4ef4:	633d      	str	r5, [r7, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b4ef6:	f005 fbce 	bl	ba696 <_ZN9TimeClass3nowEv>
   b4efa:	4a1e      	ldr	r2, [pc, #120]	; (b4f74 <_Z23recordConnectionDetailsv+0x120>)
   b4efc:	9000      	str	r0, [sp, #0]
   b4efe:	462b      	mov	r3, r5
   b4f00:	2140      	movs	r1, #64	; 0x40
   b4f02:	a804      	add	r0, sp, #16
   b4f04:	f003 ff7a 	bl	b8dfc <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b4f08:	f002 fb7c 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b4f0c:	f88d 4000 	strb.w	r4, [sp]
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b4f10:	7833      	ldrb	r3, [r6, #0]
   b4f12:	4919      	ldr	r1, [pc, #100]	; (b4f78 <_Z23recordConnectionDetailsv+0x124>)
   b4f14:	aa04      	add	r2, sp, #16
   b4f16:	f7ff f999 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4f1a:	e7d0      	b.n	b4ebe <_Z23recordConnectionDetailsv+0x6a>
    Log.info("Failed to connect");
   b4f1c:	4917      	ldr	r1, [pc, #92]	; (b4f7c <_Z23recordConnectionDetailsv+0x128>)
   b4f1e:	480d      	ldr	r0, [pc, #52]	; (b4f54 <_Z23recordConnectionDetailsv+0x100>)
    sensor_data.alerts = 31;                                              // Record alert for timeout on cellular
   b4f20:	241f      	movs	r4, #31
    Log.info("Failed to connect");
   b4f22:	f7ff fb53 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
    sensor_data.alerts = 31;                                              // Record alert for timeout on cellular
   b4f26:	633c      	str	r4, [r7, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b4f28:	f005 fbb5 	bl	ba696 <_ZN9TimeClass3nowEv>
   b4f2c:	4a11      	ldr	r2, [pc, #68]	; (b4f74 <_Z23recordConnectionDetailsv+0x120>)
   b4f2e:	9000      	str	r0, [sp, #0]
   b4f30:	4623      	mov	r3, r4
   b4f32:	2140      	movs	r1, #64	; 0x40
   b4f34:	a804      	add	r0, sp, #16
   b4f36:	f003 ff61 	bl	b8dfc <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b4f3a:	f002 fb63 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b4f3e:	f88d 5000 	strb.w	r5, [sp]
   b4f42:	e7e5      	b.n	b4f10 <_Z23recordConnectionDetailsv+0xbc>
   b4f44:	2003e2dc 	.word	0x2003e2dc
   b4f48:	2003e580 	.word	0x2003e580
   b4f4c:	2003e634 	.word	0x2003e634
   b4f50:	000bbf80 	.word	0x000bbf80
   b4f54:	2003e66c 	.word	0x2003e66c
   b4f58:	000bbf95 	.word	0x000bbf95
   b4f5c:	2003e44d 	.word	0x2003e44d
   b4f60:	000bbfb1 	.word	0x000bbfb1
   b4f64:	2003e5b0 	.word	0x2003e5b0
   b4f68:	2003e524 	.word	0x2003e524
   b4f6c:	2003e528 	.word	0x2003e528
   b4f70:	000bbfba 	.word	0x000bbfba
   b4f74:	000bbd02 	.word	0x000bbd02
   b4f78:	000bbd24 	.word	0x000bbd24
   b4f7c:	000bbfe1 	.word	0x000bbfe1

000b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4f80:	b513      	push	{r0, r1, r4, lr}
   b4f82:	460b      	mov	r3, r1
   b4f84:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f86:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4f8a:	466c      	mov	r4, sp
   b4f8c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4f90:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4f94:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4f98:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4f9c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4fa0:	b002      	add	sp, #8
   b4fa2:	bd10      	pop	{r4, pc}

000b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4fa8:	b094      	sub	sp, #80	; 0x50
   b4faa:	4605      	mov	r5, r0
        };
   b4fac:	991a      	ldr	r1, [sp, #104]	; 0x68
   b4fae:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4fb0:	4617      	mov	r7, r2
   b4fb2:	461e      	mov	r6, r3
        };
   b4fb4:	f7ff fd08 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4fb8:	a904      	add	r1, sp, #16
   b4fba:	a808      	add	r0, sp, #32
   b4fbc:	f7ff fd04 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4fc0:	a908      	add	r1, sp, #32
   b4fc2:	a80c      	add	r0, sp, #48	; 0x30
   b4fc4:	f7ff fd00 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4fc8:	f04f 0800 	mov.w	r8, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fcc:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4fce:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fd2:	f7ff f860 	bl	b4096 <_Znwj>
   b4fd6:	4604      	mov	r4, r0
   b4fd8:	b168      	cbz	r0, b4ff6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x52>
    _Function_base() : _M_manager(nullptr) { }
   b4fda:	f8c0 8008 	str.w	r8, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4fde:	4601      	mov	r1, r0
   b4fe0:	a80c      	add	r0, sp, #48	; 0x30
   b4fe2:	f7ff ffcd 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4fe8:	68a2      	ldr	r2, [r4, #8]
   b4fea:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   b4fec:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4fee:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4ff2:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4ff4:	920f      	str	r2, [sp, #60]	; 0x3c
	    _M_invoker = &_My_handler::_M_invoke;
   b4ff6:	4b24      	ldr	r3, [pc, #144]	; (b5088 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe4>)
   b4ff8:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4ffa:	4b24      	ldr	r3, [pc, #144]	; (b508c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>)
   b4ffc:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4ffe:	2200      	movs	r2, #0
   b5000:	2300      	movs	r3, #0
   b5002:	f04f 0800 	mov.w	r8, #0
   b5006:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b500a:	4b21      	ldr	r3, [pc, #132]	; (b5090 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xec>)
              callable_(callable) {
   b500c:	f8c5 8008 	str.w	r8, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5010:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5012:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5014:	e9cd 3801 	strd	r3, r8, [sp, #4]
   b5018:	f8cd 800c 	str.w	r8, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b501c:	f7ff f83b 	bl	b4096 <_Znwj>
   b5020:	4604      	mov	r4, r0
   b5022:	b1d8      	cbz	r0, b505c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
    bool _M_empty() const { return !_M_manager; }
   b5024:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b5026:	f8c0 8008 	str.w	r8, [r0, #8]
      if (static_cast<bool>(__x))
   b502a:	b133      	cbz	r3, b503a <_ZN11SystemClass2onEySt8functionIFvyiEE+0x96>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b502c:	2202      	movs	r2, #2
   b502e:	a910      	add	r1, sp, #64	; 0x40
   b5030:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5034:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5036:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5038:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b503a:	4b16      	ldr	r3, [pc, #88]	; (b5094 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf0>)
   b503c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b503e:	4a16      	ldr	r2, [pc, #88]	; (b5098 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
        context.callable = wrapper;
   b5040:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5042:	ab01      	add	r3, sp, #4
   b5044:	4638      	mov	r0, r7
   b5046:	4631      	mov	r1, r6
   b5048:	f003 fd80 	bl	b8b4c <system_subscribe_event>
        if (r) {
   b504c:	b1b0      	cbz	r0, b507c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xd8>
    class function<_Res(_ArgTypes...)>
   b504e:	4620      	mov	r0, r4
   b5050:	f7ff fa0d 	bl	b446e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b5054:	2110      	movs	r1, #16
   b5056:	4620      	mov	r0, r4
   b5058:	f7ff f821 	bl	b409e <_ZdlPvj>
   b505c:	a810      	add	r0, sp, #64	; 0x40
   b505e:	f7ff fa06 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b5062:	a80c      	add	r0, sp, #48	; 0x30
   b5064:	f7ff fa03 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b5068:	a808      	add	r0, sp, #32
   b506a:	f7ff fa00 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b506e:	a804      	add	r0, sp, #16
   b5070:	f7ff f9fd 	bl	b446e <_ZNSt14_Function_baseD1Ev>
    }
   b5074:	4628      	mov	r0, r5
   b5076:	b014      	add	sp, #80	; 0x50
   b5078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sub = SystemEventSubscription(events, context.callable);
   b507c:	9b02      	ldr	r3, [sp, #8]
   b507e:	60ab      	str	r3, [r5, #8]
   b5080:	e9c5 7600 	strd	r7, r6, [r5]
   b5084:	e7ea      	b.n	b505c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
   b5086:	bf00      	nop
   b5088:	000b41c3 	.word	0x000b41c3
   b508c:	000b49e7 	.word	0x000b49e7
   b5090:	000c0002 	.word	0x000c0002
   b5094:	000b4481 	.word	0x000b4481
   b5098:	000b40e9 	.word	0x000b40e9

000b509c <setup>:
{
   b509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b50a0:	2100      	movs	r1, #0
{
   b50a2:	b0a6      	sub	sp, #152	; 0x98
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b50a4:	2008      	movs	r0, #8
   b50a6:	f005 fd21 	bl	baaec <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b50aa:	2101      	movs	r1, #1
   b50ac:	2005      	movs	r0, #5
   b50ae:	f005 fd1d 	bl	baaec <pinMode>
  pinMode(userSwitch,INPUT);                                                                // Momentary contact button on board for direct user input
   b50b2:	2100      	movs	r1, #0
   b50b4:	2004      	movs	r0, #4
   b50b6:	f005 fd19 	bl	baaec <pinMode>
  pinMode(soilPin, INPUT);    
   b50ba:	2100      	movs	r1, #0
   b50bc:	2013      	movs	r0, #19
   b50be:	f005 fd15 	bl	baaec <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   b50c2:	f7ff fb29 	bl	b4718 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   b50c6:	2300      	movs	r3, #0
   b50c8:	9300      	str	r3, [sp, #0]
   b50ca:	2201      	movs	r2, #1
   b50cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b50d0:	49b1      	ldr	r1, [pc, #708]	; (b5398 <setup+0x2fc>)
   b50d2:	2008      	movs	r0, #8
   b50d4:	f004 fcc6 	bl	b9a64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b50d8:	4bb0      	ldr	r3, [pc, #704]	; (b539c <setup+0x300>)
   b50da:	aa06      	add	r2, sp, #24
   b50dc:	f103 0510 	add.w	r5, r3, #16
   b50e0:	4690      	mov	r8, r2
   b50e2:	6818      	ldr	r0, [r3, #0]
   b50e4:	6859      	ldr	r1, [r3, #4]
   b50e6:	4614      	mov	r4, r2
   b50e8:	c403      	stmia	r4!, {r0, r1}
   b50ea:	3308      	adds	r3, #8
   b50ec:	42ab      	cmp	r3, r5
   b50ee:	4622      	mov	r2, r4
   b50f0:	d1f7      	bne.n	b50e2 <setup+0x46>
   b50f2:	8819      	ldrh	r1, [r3, #0]
   b50f4:	789b      	ldrb	r3, [r3, #2]
   b50f6:	70a3      	strb	r3, [r4, #2]
   b50f8:	222d      	movs	r2, #45	; 0x2d
   b50fa:	8021      	strh	r1, [r4, #0]
  state = IDLE_STATE;
   b50fc:	4fa8      	ldr	r7, [pc, #672]	; (b53a0 <setup+0x304>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b50fe:	4ea9      	ldr	r6, [pc, #676]	; (b53a4 <setup+0x308>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5100:	2100      	movs	r1, #0
   b5102:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   b5106:	f006 fb6b 	bl	bb7e0 <memset>
  state = IDLE_STATE;
   b510a:	2502      	movs	r5, #2
        return spark_deviceID();
   b510c:	a802      	add	r0, sp, #8
   b510e:	703d      	strb	r5, [r7, #0]
   b5110:	f003 fda4 	bl	b8c5c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b5114:	a902      	add	r1, sp, #8
   b5116:	a816      	add	r0, sp, #88	; 0x58
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5118:	2400      	movs	r4, #0
   b511a:	f004 ffbc 	bl	ba096 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/environmental-hook/", UbidotsHandler, MY_DEVICES);
   b511e:	49a2      	ldr	r1, [pc, #648]	; (b53a8 <setup+0x30c>)
   b5120:	a816      	add	r0, sp, #88	; 0x58
   b5122:	f005 f824 	bl	ba16e <_ZplRK15StringSumHelperPKc>
   b5126:	e9cd 4400 	strd	r4, r4, [sp]
   b512a:	49a0      	ldr	r1, [pc, #640]	; (b53ac <setup+0x310>)
   b512c:	6800      	ldr	r0, [r0, #0]
   b512e:	4623      	mov	r3, r4
   b5130:	4622      	mov	r2, r4
   b5132:	f003 fda3 	bl	b8c7c <spark_subscribe>
class StringSumHelper : public String
   b5136:	a816      	add	r0, sp, #88	; 0x58
   b5138:	f004 ff22 	bl	b9f80 <_ZN6StringD1Ev>
   b513c:	a802      	add	r0, sp, #8
   b513e:	f004 ff1f 	bl	b9f80 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5142:	4b9b      	ldr	r3, [pc, #620]	; (b53b0 <setup+0x314>)
   b5144:	9316      	str	r3, [sp, #88]	; 0x58
	    _M_invoker = &_My_handler::_M_invoke;
   b5146:	4b9b      	ldr	r3, [pc, #620]	; (b53b4 <setup+0x318>)
   b5148:	9319      	str	r3, [sp, #100]	; 0x64
	    _M_manager = &_My_handler::_M_manager;
   b514a:	4b9b      	ldr	r3, [pc, #620]	; (b53b8 <setup+0x31c>)
   b514c:	9318      	str	r3, [sp, #96]	; 0x60
  System.on(firmware_update, firmwareUpdateHandler);// Registers a handler that will track if we are getting an update
   b514e:	ab16      	add	r3, sp, #88	; 0x58
   b5150:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5154:	9300      	str	r3, [sp, #0]
   b5156:	a802      	add	r0, sp, #8
   b5158:	2300      	movs	r3, #0
   b515a:	f7ff ff23 	bl	b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b515e:	a816      	add	r0, sp, #88	; 0x58
   b5160:	f7ff f985 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5164:	4b95      	ldr	r3, [pc, #596]	; (b53bc <setup+0x320>)
   b5166:	9316      	str	r3, [sp, #88]	; 0x58
	    _M_invoker = &_My_handler::_M_invoke;
   b5168:	4b95      	ldr	r3, [pc, #596]	; (b53c0 <setup+0x324>)
   b516a:	9319      	str	r3, [sp, #100]	; 0x64
	    _M_manager = &_My_handler::_M_manager;
   b516c:	4b95      	ldr	r3, [pc, #596]	; (b53c4 <setup+0x328>)
   b516e:	9318      	str	r3, [sp, #96]	; 0x60
  System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5170:	ab16      	add	r3, sp, #88	; 0x58
   b5172:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5176:	9300      	str	r3, [sp, #0]
   b5178:	a802      	add	r0, sp, #8
   b517a:	2300      	movs	r3, #0
   b517c:	f7ff ff12 	bl	b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5180:	a816      	add	r0, sp, #88	; 0x58
   b5182:	f7ff f974 	bl	b446e <_ZNSt14_Function_baseD1Ev>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5186:	4b90      	ldr	r3, [pc, #576]	; (b53c8 <setup+0x32c>)
   b5188:	4890      	ldr	r0, [pc, #576]	; (b53cc <setup+0x330>)
   b518a:	6819      	ldr	r1, [r3, #0]
   b518c:	f7ff f96b 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5190:	498f      	ldr	r1, [pc, #572]	; (b53d0 <setup+0x334>)
   b5192:	4890      	ldr	r0, [pc, #576]	; (b53d4 <setup+0x338>)
   b5194:	f7ff f967 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5198:	498f      	ldr	r1, [pc, #572]	; (b53d8 <setup+0x33c>)
   b519a:	4890      	ldr	r0, [pc, #576]	; (b53dc <setup+0x340>)
   b519c:	f7ff f963 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51a0:	498f      	ldr	r1, [pc, #572]	; (b53e0 <setup+0x344>)
   b51a2:	4890      	ldr	r0, [pc, #576]	; (b53e4 <setup+0x348>)
   b51a4:	f7ff f95f 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51a8:	498f      	ldr	r1, [pc, #572]	; (b53e8 <setup+0x34c>)
   b51aa:	4890      	ldr	r0, [pc, #576]	; (b53ec <setup+0x350>)
   b51ac:	f7ff f95b 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51b0:	498f      	ldr	r1, [pc, #572]	; (b53f0 <setup+0x354>)
   b51b2:	4890      	ldr	r0, [pc, #576]	; (b53f4 <setup+0x358>)
   b51b4:	f7ff f957 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51b8:	498f      	ldr	r1, [pc, #572]	; (b53f8 <setup+0x35c>)
   b51ba:	4890      	ldr	r0, [pc, #576]	; (b53fc <setup+0x360>)
   b51bc:	f7ff f953 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51c0:	498f      	ldr	r1, [pc, #572]	; (b5400 <setup+0x364>)
   b51c2:	4890      	ldr	r0, [pc, #576]	; (b5404 <setup+0x368>)
   b51c4:	f7ff f94f 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b51c8:	462a      	mov	r2, r5
   b51ca:	498f      	ldr	r1, [pc, #572]	; (b5408 <setup+0x36c>)
   b51cc:	488f      	ldr	r0, [pc, #572]	; (b540c <setup+0x370>)
   b51ce:	4623      	mov	r3, r4
   b51d0:	f003 fd1c 	bl	b8c0c <spark_variable>
   b51d4:	4623      	mov	r3, r4
   b51d6:	2201      	movs	r2, #1
   b51d8:	498d      	ldr	r1, [pc, #564]	; (b5410 <setup+0x374>)
   b51da:	488e      	ldr	r0, [pc, #568]	; (b5414 <setup+0x378>)
   b51dc:	f003 fd16 	bl	b8c0c <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b51e0:	498d      	ldr	r1, [pc, #564]	; (b5418 <setup+0x37c>)
   b51e2:	488e      	ldr	r0, [pc, #568]	; (b541c <setup+0x380>)
   b51e4:	f7ff f93f 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b51e8:	498d      	ldr	r1, [pc, #564]	; (b5420 <setup+0x384>)
   b51ea:	488e      	ldr	r0, [pc, #568]	; (b5424 <setup+0x388>)
   b51ec:	f7ff f93b 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b51f0:	462a      	mov	r2, r5
   b51f2:	498d      	ldr	r1, [pc, #564]	; (b5428 <setup+0x38c>)
   b51f4:	488d      	ldr	r0, [pc, #564]	; (b542c <setup+0x390>)
   b51f6:	4623      	mov	r3, r4
   b51f8:	f003 fd08 	bl	b8c0c <spark_variable>
   b51fc:	4623      	mov	r3, r4
   b51fe:	2209      	movs	r2, #9
   b5200:	498b      	ldr	r1, [pc, #556]	; (b5430 <setup+0x394>)
   b5202:	488c      	ldr	r0, [pc, #560]	; (b5434 <setup+0x398>)
   b5204:	f003 fd02 	bl	b8c0c <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5208:	4983      	ldr	r1, [pc, #524]	; (b5418 <setup+0x37c>)
   b520a:	4884      	ldr	r0, [pc, #528]	; (b541c <setup+0x380>)
   b520c:	f7ff f92b 	bl	b4466 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5210:	462a      	mov	r2, r5
   b5212:	4623      	mov	r3, r4
   b5214:	f106 0130 	add.w	r1, r6, #48	; 0x30
   b5218:	4887      	ldr	r0, [pc, #540]	; (b5438 <setup+0x39c>)
   b521a:	4d88      	ldr	r5, [pc, #544]	; (b543c <setup+0x3a0>)
   b521c:	f003 fcf6 	bl	b8c0c <spark_variable>
  Particle.variable("Reporting Duration",String(wakeBoundary));  
   b5220:	4b87      	ldr	r3, [pc, #540]	; (b5440 <setup+0x3a4>)
   b5222:	220a      	movs	r2, #10
   b5224:	6819      	ldr	r1, [r3, #0]
   b5226:	a816      	add	r0, sp, #88	; 0x58
   b5228:	f004 ff5a 	bl	ba0e0 <_ZN6StringC1Eih>
        extra.update = update_string_variable;
   b522c:	4b85      	ldr	r3, [pc, #532]	; (b5444 <setup+0x3a8>)
   b522e:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   b5230:	2204      	movs	r2, #4
   b5232:	ab02      	add	r3, sp, #8
   b5234:	a916      	add	r1, sp, #88	; 0x58
   b5236:	4884      	ldr	r0, [pc, #528]	; (b5448 <setup+0x3ac>)
        spark_variable_t extra = {};
   b5238:	9402      	str	r4, [sp, #8]
        extra.size = sizeof(extra);
   b523a:	f04f 0a0c 	mov.w	sl, #12
        spark_variable_t extra = {};
   b523e:	9404      	str	r4, [sp, #16]
        extra.size = sizeof(extra);
   b5240:	f8ad a008 	strh.w	sl, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   b5244:	f003 fce2 	bl	b8c0c <spark_variable>
   b5248:	a816      	add	r0, sp, #88	; 0x58
   b524a:	f004 fe99 	bl	b9f80 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b524e:	4a7f      	ldr	r2, [pc, #508]	; (b544c <setup+0x3b0>)
   b5250:	497f      	ldr	r1, [pc, #508]	; (b5450 <setup+0x3b4>)
   b5252:	4880      	ldr	r0, [pc, #512]	; (b5454 <setup+0x3b8>)
   b5254:	f003 ffc7 	bl	b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5258:	4a7f      	ldr	r2, [pc, #508]	; (b5458 <setup+0x3bc>)
   b525a:	4980      	ldr	r1, [pc, #512]	; (b545c <setup+0x3c0>)
   b525c:	487d      	ldr	r0, [pc, #500]	; (b5454 <setup+0x3b8>)
   b525e:	f003 ffc2 	bl	b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5262:	4a7f      	ldr	r2, [pc, #508]	; (b5460 <setup+0x3c4>)
   b5264:	497f      	ldr	r1, [pc, #508]	; (b5464 <setup+0x3c8>)
   b5266:	487b      	ldr	r0, [pc, #492]	; (b5454 <setup+0x3b8>)
   b5268:	f003 ffbd 	bl	b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b526c:	4a69      	ldr	r2, [pc, #420]	; (b5414 <setup+0x378>)
   b526e:	497e      	ldr	r1, [pc, #504]	; (b5468 <setup+0x3cc>)
   b5270:	4878      	ldr	r0, [pc, #480]	; (b5454 <setup+0x3b8>)
   b5272:	f003 ffb8 	bl	b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5276:	497d      	ldr	r1, [pc, #500]	; (b546c <setup+0x3d0>)
   b5278:	4a7d      	ldr	r2, [pc, #500]	; (b5470 <setup+0x3d4>)
   b527a:	4876      	ldr	r0, [pc, #472]	; (b5454 <setup+0x3b8>)
   b527c:	f003 ffb3 	bl	b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        bool clearSession) :
   b5280:	f04f 0901 	mov.w	r9, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b5284:	2203      	movs	r2, #3
   b5286:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   b528a:	a816      	add	r0, sp, #88	; 0x58
   b528c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        bool clearSession) :
   b5290:	f8ad 9060 	strh.w	r9, [sp, #96]	; 0x60
   b5294:	f003 ffd2 	bl	b923c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  rtc.setup();                                                                                       // Start the real time clock
   b5298:	4876      	ldr	r0, [pc, #472]	; (b5474 <setup+0x3d8>)
   b529a:	f001 fbc3 	bl	b6a24 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                                                   // Ensures alarm is still not set from last cycle
   b529e:	4621      	mov	r1, r4
   b52a0:	4874      	ldr	r0, [pc, #464]	; (b5474 <setup+0x3d8>)
   b52a2:	f001 fcfe 	bl	b6ca2 <_ZN8MCP7941010clearAlarmEi>
  fuelGauge.wakeup();                                                  // Expliciely wake the Feul gauge and give it a half-sec
   b52a6:	4874      	ldr	r0, [pc, #464]	; (b5478 <setup+0x3dc>)
   b52a8:	f004 fb0e 	bl	b98c8 <_ZN9FuelGauge6wakeupEv>
  delay(500);
   b52ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b52b0:	f003 fe08 	bl	b8ec4 <delay>
  fuelGauge.quickStart();                                              // May help us re-establish a baseline for SoC
   b52b4:	4870      	ldr	r0, [pc, #448]	; (b5478 <setup+0x3dc>)
   b52b6:	f004 fafe 	bl	b98b6 <_ZN9FuelGauge10quickStartEv>
  fram.begin();                                                        // Initialize the FRAM module
   b52ba:	4870      	ldr	r0, [pc, #448]	; (b547c <setup+0x3e0>)
   b52bc:	f001 f82a 	bl	b6314 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b52c0:	464b      	mov	r3, r9
   b52c2:	486e      	ldr	r0, [pc, #440]	; (b547c <setup+0x3e0>)
   b52c4:	aa02      	add	r2, sp, #8
   b52c6:	4621      	mov	r1, r4
   b52c8:	f001 f866 	bl	b6398 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   b52cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b52d0:	2b06      	cmp	r3, #6
   b52d2:	f000 8119 	beq.w	b5508 <setup+0x46c>
    fram.erase();                                                      // Reset the FRAM to correct the issue
   b52d6:	4869      	ldr	r0, [pc, #420]	; (b547c <setup+0x3e0>)
   b52d8:	f001 f826 	bl	b6328 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b52dc:	4a68      	ldr	r2, [pc, #416]	; (b5480 <setup+0x3e4>)
   b52de:	4867      	ldr	r0, [pc, #412]	; (b547c <setup+0x3e0>)
   b52e0:	2304      	movs	r3, #4
   b52e2:	4621      	mov	r1, r4
   b52e4:	f001 f8a3 	bl	b642e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b52e8:	464b      	mov	r3, r9
   b52ea:	4864      	ldr	r0, [pc, #400]	; (b547c <setup+0x3e0>)
   b52ec:	aa02      	add	r2, sp, #8
   b52ee:	4621      	mov	r1, r4
   b52f0:	f001 f852 	bl	b6398 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   b52f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b52f8:	2b06      	cmp	r3, #6
   b52fa:	f000 8102 	beq.w	b5502 <setup+0x466>
      state = ERROR_STATE;                                             // Device will not work without FRAM will need to reset
   b52fe:	f887 9000 	strb.w	r9, [r7]
   b5302:	f003 fa21 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();                                       // Likely close to zero but, for form's sake
   b5306:	4b5f      	ldr	r3, [pc, #380]	; (b5484 <setup+0x3e8>)
      sensor_data.alerts = 12;                                         // FRAM is messed up so can't store but will be read in ERROR state
   b5308:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
      resetTimeStamp = millis();                                       // Likely close to zero but, for form's sake
   b530c:	6018      	str	r0, [r3, #0]
  if (! sht31.begin(0x44)) {                                                                      // Start the SHT Sensor
   b530e:	485e      	ldr	r0, [pc, #376]	; (b5488 <setup+0x3ec>)
   b5310:	2144      	movs	r1, #68	; 0x44
   b5312:	f001 fd7e 	bl	b6e12 <_ZN14Adafruit_SHT315beginEh>
   b5316:	b948      	cbnz	r0, b532c <setup+0x290>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b5318:	495c      	ldr	r1, [pc, #368]	; (b548c <setup+0x3f0>)
   b531a:	4640      	mov	r0, r8
   b531c:	f006 faa0 	bl	bb860 <strcpy>
    state = ERROR_STATE;
   b5320:	2301      	movs	r3, #1
   b5322:	703b      	strb	r3, [r7, #0]
   b5324:	f003 fa10 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5328:	4b56      	ldr	r3, [pc, #344]	; (b5484 <setup+0x3e8>)
   b532a:	6018      	str	r0, [r3, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   b532c:	f005 fc48 	bl	babc0 <_Z19__fetch_global_Wirev>
   b5330:	4601      	mov	r1, r0
   b5332:	4857      	ldr	r0, [pc, #348]	; (b5490 <setup+0x3f4>)
   b5334:	f000 feef 	bl	b6116 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b5338:	b960      	cbnz	r0, b5354 <setup+0x2b8>
   b533a:	f003 fa05 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b533e:	4c51      	ldr	r4, [pc, #324]	; (b5484 <setup+0x3e8>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b5340:	4954      	ldr	r1, [pc, #336]	; (b5494 <setup+0x3f8>)
    resetTimeStamp = millis();
   b5342:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   b5344:	4640      	mov	r0, r8
   b5346:	f006 fa8b 	bl	bb860 <strcpy>
    state = ERROR_STATE;
   b534a:	2301      	movs	r3, #1
   b534c:	703b      	strb	r3, [r7, #0]
   b534e:	f003 f9fb 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5352:	6020      	str	r0, [r4, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   b5354:	484e      	ldr	r0, [pc, #312]	; (b5490 <setup+0x3f4>)
   b5356:	2100      	movs	r1, #0
   b5358:	f000 fe53 	bl	b6002 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   b535c:	484c      	ldr	r0, [pc, #304]	; (b5490 <setup+0x3f4>)
   b535e:	210c      	movs	r1, #12
   b5360:	f000 fe46 	bl	b5ff0 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.interruptEnable(true);
   b5364:	2101      	movs	r1, #1
   b5366:	484a      	ldr	r0, [pc, #296]	; (b5490 <setup+0x3f4>)
   b5368:	f000 fe3c 	bl	b5fe4 <_ZN17Adafruit_VEML770015interruptEnableEb>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b536c:	f7ff f9b0 	bl	b46d0 <_Z17checkSystemValuesv>
        int reason = RESET_REASON_NONE;
   b5370:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b5372:	4611      	mov	r1, r2
   b5374:	a816      	add	r0, sp, #88	; 0x58
        int reason = RESET_REASON_NONE;
   b5376:	9216      	str	r2, [sp, #88]	; 0x58
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b5378:	f003 f9c6 	bl	b8708 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b537c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   b537e:	2b14      	cmp	r3, #20
   b5380:	f04f 0200 	mov.w	r2, #0
   b5384:	f040 80cd 	bne.w	b5522 <setup+0x486>
    sysStatus.resetCount++;
   b5388:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b538a:	3301      	adds	r3, #1
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b538c:	2b03      	cmp	r3, #3
    sysStatus.resetCount++;
   b538e:	626b      	str	r3, [r5, #36]	; 0x24
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b5390:	f300 80d0 	bgt.w	b5534 <setup+0x498>
   b5394:	e080      	b.n	b5498 <setup+0x3fc>
   b5396:	bf00      	nop
   b5398:	000b40b9 	.word	0x000b40b9
   b539c:	000bc338 	.word	0x000bc338
   b53a0:	2003e574 	.word	0x2003e574
   b53a4:	2003e528 	.word	0x2003e528
   b53a8:	000bbff3 	.word	0x000bbff3
   b53ac:	000b4a5d 	.word	0x000b4a5d
   b53b0:	000b4269 	.word	0x000b4269
   b53b4:	000b421b 	.word	0x000b421b
   b53b8:	000b4207 	.word	0x000b4207
   b53bc:	000b40c5 	.word	0x000b40c5
   b53c0:	000b41fd 	.word	0x000b41fd
   b53c4:	000b41e9 	.word	0x000b41e9
   b53c8:	2003e2e4 	.word	0x2003e2e4
   b53cc:	000bc016 	.word	0x000bc016
   b53d0:	2003e5b1 	.word	0x2003e5b1
   b53d4:	000bc01e 	.word	0x000bc01e
   b53d8:	2003e4b0 	.word	0x2003e4b0
   b53dc:	000bc02a 	.word	0x000bc02a
   b53e0:	2003e4f0 	.word	0x2003e4f0
   b53e4:	000bc033 	.word	0x000bc033
   b53e8:	2003e601 	.word	0x2003e601
   b53ec:	000bc037 	.word	0x000bc037
   b53f0:	2003e3f0 	.word	0x2003e3f0
   b53f4:	000bc03d 	.word	0x000bc03d
   b53f8:	2003e46c 	.word	0x2003e46c
   b53fc:	000bc045 	.word	0x000bc045
   b5400:	2003e45c 	.word	0x2003e45c
   b5404:	000bc04d 	.word	0x000bc04d
   b5408:	2003e584 	.word	0x2003e584
   b540c:	000bc05c 	.word	0x000bc05c
   b5410:	2003e581 	.word	0x2003e581
   b5414:	000bbd8a 	.word	0x000bbd8a
   b5418:	2003e4e0 	.word	0x2003e4e0
   b541c:	000bc06b 	.word	0x000bc06b
   b5420:	2003e400 	.word	0x2003e400
   b5424:	000bc078 	.word	0x000bc078
   b5428:	2003e5a4 	.word	0x2003e5a4
   b542c:	000bc07f 	.word	0x000bc07f
   b5430:	2003e598 	.word	0x2003e598
   b5434:	000bc08a 	.word	0x000bc08a
   b5438:	000bc099 	.word	0x000bc099
   b543c:	2003e580 	.word	0x2003e580
   b5440:	2003e378 	.word	0x2003e378
   b5444:	000b40b3 	.word	0x000b40b3
   b5448:	000bc0a0 	.word	0x000bc0a0
   b544c:	000bc0b3 	.word	0x000bc0b3
   b5450:	000b4145 	.word	0x000b4145
   b5454:	000b91bb 	.word	0x000b91bb
   b5458:	000bc0bf 	.word	0x000bc0bf
   b545c:	000b4379 	.word	0x000b4379
   b5460:	000bbd50 	.word	0x000bbd50
   b5464:	000b4315 	.word	0x000b4315
   b5468:	000b452d 	.word	0x000b452d
   b546c:	000b4b11 	.word	0x000b4b11
   b5470:	000bc0cc 	.word	0x000bc0cc
   b5474:	2003e508 	.word	0x2003e508
   b5478:	2003e4a8 	.word	0x2003e4a8
   b547c:	2003e498 	.word	0x2003e498
   b5480:	000bc378 	.word	0x000bc378
   b5484:	2003e504 	.word	0x2003e504
   b5488:	2003e568 	.word	0x2003e568
   b548c:	000bc0da 	.word	0x000bc0da
   b5490:	2003e5c4 	.word	0x2003e5c4
   b5494:	000bc0f7 	.word	0x000bc0f7
  PublishQueuePosix::instance().setup();                             // Start the Publish Queie
   b5498:	f002 f8b4 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b549c:	f002 fabe 	bl	b7a1c <_ZN17PublishQueuePosix5setupEv>
  if (sensor_data.updateAttempts >= 3 && sensor_data.alerts != 23) {         // Send out alert the first time we are over the limit
   b54a0:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   b54a4:	2b02      	cmp	r3, #2
   b54a6:	d91d      	bls.n	b54e4 <setup+0x448>
   b54a8:	6b33      	ldr	r3, [r6, #48]	; 0x30
   b54aa:	2b17      	cmp	r3, #23
   b54ac:	d01a      	beq.n	b54e4 <setup+0x448>
        system_set_flag(flag, value, nullptr);
   b54ae:	2200      	movs	r2, #0
   b54b0:	4611      	mov	r1, r2
    sensor_data.alerts = 23;                                             // Set an alert that we have maxed out our updates for the day
   b54b2:	2417      	movs	r4, #23
   b54b4:	2001      	movs	r0, #1
   b54b6:	f003 fb59 	bl	b8b6c <system_set_flag>
   b54ba:	6334      	str	r4, [r6, #48]	; 0x30
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b54bc:	f005 f8eb 	bl	ba696 <_ZN9TimeClass3nowEv>
   b54c0:	4a39      	ldr	r2, [pc, #228]	; (b55a8 <setup+0x50c>)
   b54c2:	9000      	str	r0, [sp, #0]
   b54c4:	4623      	mov	r3, r4
   b54c6:	2140      	movs	r1, #64	; 0x40
   b54c8:	a816      	add	r0, sp, #88	; 0x58
   b54ca:	f003 fc97 	bl	b8dfc <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   b54ce:	f002 f899 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b54d2:	2300      	movs	r3, #0
   b54d4:	f88d 3000 	strb.w	r3, [sp]
   b54d8:	4b34      	ldr	r3, [pc, #208]	; (b55ac <setup+0x510>)
   b54da:	4935      	ldr	r1, [pc, #212]	; (b55b0 <setup+0x514>)
   b54dc:	781b      	ldrb	r3, [r3, #0]
   b54de:	aa16      	add	r2, sp, #88	; 0x58
   b54e0:	f7fe feb4 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b54e4:	7aeb      	ldrb	r3, [r5, #11]
   b54e6:	2210      	movs	r2, #16
   b54e8:	b33b      	cbz	r3, b553a <setup+0x49e>
   b54ea:	4932      	ldr	r1, [pc, #200]	; (b55b4 <setup+0x518>)
   b54ec:	4832      	ldr	r0, [pc, #200]	; (b55b8 <setup+0x51c>)
   b54ee:	f006 f9e4 	bl	bb8ba <strncpy>
  if (sysStatus.thirdPartySim) {
   b54f2:	786b      	ldrb	r3, [r5, #1]
   b54f4:	b38b      	cbz	r3, b555a <setup+0x4be>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b54f6:	f003 fba9 	bl	b8c4c <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b54fa:	bb00      	cbnz	r0, b553e <setup+0x4a2>
            spark_process();
   b54fc:	f003 fb96 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b5500:	e7f9      	b.n	b54f6 <setup+0x45a>
    else loadSystemDefaults();                                         // Out of the box, we need the device to be awake and connected
   b5502:	f7ff fc55 	bl	b4db0 <_Z18loadSystemDefaultsv>
   b5506:	e702      	b.n	b530e <setup+0x272>
   b5508:	462a      	mov	r2, r5
   b550a:	4649      	mov	r1, r9
   b550c:	2330      	movs	r3, #48	; 0x30
   b550e:	482b      	ldr	r0, [pc, #172]	; (b55bc <setup+0x520>)
   b5510:	f000 ff42 	bl	b6398 <_ZN6MB85RC8readDataEjPhj>
   b5514:	2340      	movs	r3, #64	; 0x40
   b5516:	4632      	mov	r2, r6
   b5518:	21a0      	movs	r1, #160	; 0xa0
   b551a:	4828      	ldr	r0, [pc, #160]	; (b55bc <setup+0x520>)
   b551c:	f000 ff3c 	bl	b6398 <_ZN6MB85RC8readDataEjPhj>
        return t;
   b5520:	e6f5      	b.n	b530e <setup+0x272>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b5522:	4611      	mov	r1, r2
   b5524:	a816      	add	r0, sp, #88	; 0x58
        int reason = RESET_REASON_NONE;
   b5526:	9216      	str	r2, [sp, #88]	; 0x58
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b5528:	f003 f8ee 	bl	b8708 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b552c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   b552e:	2b8c      	cmp	r3, #140	; 0x8c
   b5530:	d1b2      	bne.n	b5498 <setup+0x3fc>
   b5532:	e729      	b.n	b5388 <setup+0x2ec>
    if (sysStatus.resetCount > 3) sensor_data.alerts = 13;               // Excessive resets
   b5534:	230d      	movs	r3, #13
   b5536:	6333      	str	r3, [r6, #48]	; 0x30
   b5538:	e7ae      	b.n	b5498 <setup+0x3fc>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   b553a:	4921      	ldr	r1, [pc, #132]	; (b55c0 <setup+0x524>)
   b553c:	e7d6      	b.n	b54ec <setup+0x450>
   b553e:	f003 fb85 	bl	b8c4c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                    // Set the keep alive value
   b5542:	6868      	ldr	r0, [r5, #4]
   b5544:	f7fe ffe2 	bl	b450c <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b5548:	686b      	ldr	r3, [r5, #4]
   b554a:	481e      	ldr	r0, [pc, #120]	; (b55c4 <setup+0x528>)
   b554c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5550:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5554:	4359      	muls	r1, r3
   b5556:	f7fe ff6b 	bl	b4430 <_ZN5Timer12changePeriodEjj.isra.0>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                                       // Make sure the device wakes up and connects
   b555a:	2004      	movs	r0, #4
   b555c:	f005 fad7 	bl	bab0e <digitalRead>
   b5560:	b908      	cbnz	r0, b5566 <setup+0x4ca>
   b5562:	f7ff fc25 	bl	b4db0 <_Z18loadSystemDefaultsv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b5566:	f7ff fb3b 	bl	b4be0 <_Z16takeMeasurementsv>
  setLowPowerMode("0");
   b556a:	4917      	ldr	r1, [pc, #92]	; (b55c8 <setup+0x52c>)
   b556c:	a816      	add	r0, sp, #88	; 0x58
   b556e:	f004 fd52 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b5572:	a816      	add	r0, sp, #88	; 0x58
   b5574:	f7ff facc 	bl	b4b10 <_Z15setLowPowerMode6String>
   b5578:	a816      	add	r0, sp, #88	; 0x58
   b557a:	f004 fd01 	bl	b9f80 <_ZN6StringD1Ev>
  if(sysStatus.verboseMode) PublishQueuePosix::instance().publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b557e:	7a6b      	ldrb	r3, [r5, #9]
   b5580:	b153      	cbz	r3, b5598 <setup+0x4fc>
   b5582:	f002 f83f 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b5586:	2300      	movs	r3, #0
   b5588:	f88d 3000 	strb.w	r3, [sp]
   b558c:	4b07      	ldr	r3, [pc, #28]	; (b55ac <setup+0x510>)
   b558e:	490f      	ldr	r1, [pc, #60]	; (b55cc <setup+0x530>)
   b5590:	781b      	ldrb	r3, [r3, #0]
   b5592:	4642      	mov	r2, r8
   b5594:	f7fe fe5a 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = CONNECTING_STATE;                                    // We made it throughgo let's go to idle
   b5598:	783b      	ldrb	r3, [r7, #0]
   b559a:	b90b      	cbnz	r3, b55a0 <setup+0x504>
   b559c:	2305      	movs	r3, #5
   b559e:	703b      	strb	r3, [r7, #0]
}
   b55a0:	b026      	add	sp, #152	; 0x98
   b55a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b55a6:	bf00      	nop
   b55a8:	000bbd02 	.word	0x000bbd02
   b55ac:	2003e44d 	.word	0x2003e44d
   b55b0:	000bbd24 	.word	0x000bbd24
   b55b4:	000bc113 	.word	0x000bc113
   b55b8:	2003e4e0 	.word	0x2003e4e0
   b55bc:	2003e498 	.word	0x2003e498
   b55c0:	000bc118 	.word	0x000bc118
   b55c4:	2003e4c0 	.word	0x2003e4c0
   b55c8:	000bbcdc 	.word	0x000bbcdc
   b55cc:	000bc11e 	.word	0x000bc11e

000b55d0 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   b55d0:	4b37      	ldr	r3, [pc, #220]	; (b56b0 <_GLOBAL__sub_I_sysStatus+0xe0>)
   b55d2:	b530      	push	{r4, r5, lr}
   b55d4:	2501      	movs	r5, #1
   b55d6:	701d      	strb	r5, [r3, #0]
   b55d8:	4b36      	ldr	r3, [pc, #216]	; (b56b4 <_GLOBAL__sub_I_sysStatus+0xe4>)
   b55da:	2002      	movs	r0, #2
   b55dc:	7018      	strb	r0, [r3, #0]
   b55de:	4b36      	ldr	r3, [pc, #216]	; (b56b8 <_GLOBAL__sub_I_sysStatus+0xe8>)
   b55e0:	2208      	movs	r2, #8
   b55e2:	701a      	strb	r2, [r3, #0]
struct sensor_data_struct {                        // Here we define the structure for collecting and storing data from the sensors
   b55e4:	4b35      	ldr	r3, [pc, #212]	; (b56bc <_GLOBAL__sub_I_sysStatus+0xec>)
   b55e6:	2400      	movs	r4, #0
   b55e8:	2264      	movs	r2, #100	; 0x64
   b55ea:	869c      	strh	r4, [r3, #52]	; 0x34
   b55ec:	639a      	str	r2, [r3, #56]	; 0x38
   b55ee:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
              error_(SYSTEM_ERROR_NONE) {
   b55f2:	4b33      	ldr	r3, [pc, #204]	; (b56c0 <_GLOBAL__sub_I_sysStatus+0xf0>)
    SleepResult() {}
   b55f4:	4a33      	ldr	r2, [pc, #204]	; (b56c4 <_GLOBAL__sub_I_sysStatus+0xf4>)
   b55f6:	609a      	str	r2, [r3, #8]
   b55f8:	b087      	sub	sp, #28
              error_(SYSTEM_ERROR_NONE) {
   b55fa:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b55fe:	f003 fa95 	bl	b8b2c <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b5602:	4621      	mov	r1, r4
   b5604:	4628      	mov	r0, r5
   b5606:	f003 faa9 	bl	b8b5c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b560a:	4629      	mov	r1, r5
   b560c:	2004      	movs	r0, #4
   b560e:	f003 f873 	bl	b86f8 <HAL_Feature_Set>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5612:	4b2d      	ldr	r3, [pc, #180]	; (b56c8 <_GLOBAL__sub_I_sysStatus+0xf8>)
Adafruit_VEML7700 veml;
   b5614:	482d      	ldr	r0, [pc, #180]	; (b56cc <_GLOBAL__sub_I_sysStatus+0xfc>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b5616:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b5618:	1d1a      	adds	r2, r3, #4
   b561a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b561c:	4a2c      	ldr	r2, [pc, #176]	; (b56d0 <_GLOBAL__sub_I_sysStatus+0x100>)
   b561e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5620:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5624:	751d      	strb	r5, [r3, #20]
   b5626:	f000 fcd1 	bl	b5fcc <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b562a:	482a      	ldr	r0, [pc, #168]	; (b56d4 <_GLOBAL__sub_I_sysStatus+0x104>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b562c:	4d2a      	ldr	r5, [pc, #168]	; (b56d8 <_GLOBAL__sub_I_sysStatus+0x108>)
   b562e:	f001 fbcb 	bl	b6dc8 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b5632:	f005 fac5 	bl	babc0 <_Z19__fetch_global_Wirev>
   b5636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b563a:	4601      	mov	r1, r0
   b563c:	4623      	mov	r3, r4
   b563e:	4628      	mov	r0, r5
   b5640:	f000 fe5e 	bl	b6300 <_ZN6MB85RCC1ER7TwoWireji>
   b5644:	4b25      	ldr	r3, [pc, #148]	; (b56dc <_GLOBAL__sub_I_sysStatus+0x10c>)
   b5646:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   b5648:	f005 faba 	bl	babc0 <_Z19__fetch_global_Wirev>
   b564c:	4601      	mov	r1, r0
   b564e:	4824      	ldr	r0, [pc, #144]	; (b56e0 <_GLOBAL__sub_I_sysStatus+0x110>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5650:	4d24      	ldr	r5, [pc, #144]	; (b56e4 <_GLOBAL__sub_I_sysStatus+0x114>)
   b5652:	f001 f8cf 	bl	b67f4 <_ZN8MCP79410C1ER7TwoWire>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5656:	4b24      	ldr	r3, [pc, #144]	; (b56e8 <_GLOBAL__sub_I_sysStatus+0x118>)
   b5658:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b565a:	4b24      	ldr	r3, [pc, #144]	; (b56ec <_GLOBAL__sub_I_sysStatus+0x11c>)
   b565c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b565e:	4b24      	ldr	r3, [pc, #144]	; (b56f0 <_GLOBAL__sub_I_sysStatus+0x120>)
   b5660:	9304      	str	r3, [sp, #16]
   b5662:	4b24      	ldr	r3, [pc, #144]	; (b56f4 <_GLOBAL__sub_I_sysStatus+0x124>)
   b5664:	602b      	str	r3, [r5, #0]
	std::swap(_M_functor, __x._M_functor);
   b5666:	f105 010c 	add.w	r1, r5, #12
   b566a:	a802      	add	r0, sp, #8
   b566c:	712c      	strb	r4, [r5, #4]
   b566e:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   b5670:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   b5672:	f7ff fc85 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
   b5676:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5678:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b567a:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   b567c:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b567e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5680:	69aa      	ldr	r2, [r5, #24]
   b5682:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b5684:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5686:	4a1c      	ldr	r2, [pc, #112]	; (b56f8 <_GLOBAL__sub_I_sysStatus+0x128>)
   b5688:	462b      	mov	r3, r5
   b568a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b568e:	e9cd 4400 	strd	r4, r4, [sp]
   b5692:	f105 0008 	add.w	r0, r5, #8
   b5696:	f002 ffcf 	bl	b8638 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b569a:	a802      	add	r0, sp, #8
   b569c:	f7fe fee7 	bl	b446e <_ZNSt14_Function_baseD1Ev>
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state
   b56a0:	4816      	ldr	r0, [pc, #88]	; (b56fc <_GLOBAL__sub_I_sysStatus+0x12c>)
   b56a2:	4621      	mov	r1, r4
   b56a4:	b007      	add	sp, #28
   b56a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state
   b56aa:	f004 b87f 	b.w	b97ac <_ZN9FuelGaugeC1Eb>
   b56ae:	bf00      	nop
   b56b0:	2003e44d 	.word	0x2003e44d
   b56b4:	2003e44c 	.word	0x2003e44c
   b56b8:	2003e44e 	.word	0x2003e44e
   b56bc:	2003e528 	.word	0x2003e528
   b56c0:	2003e440 	.word	0x2003e440
   b56c4:	ffff0000 	.word	0xffff0000
   b56c8:	2003e47c 	.word	0x2003e47c
   b56cc:	2003e5c4 	.word	0x2003e5c4
   b56d0:	00030010 	.word	0x00030010
   b56d4:	2003e568 	.word	0x2003e568
   b56d8:	2003e498 	.word	0x2003e498
   b56dc:	000bc2e0 	.word	0x000bc2e0
   b56e0:	2003e508 	.word	0x2003e508
   b56e4:	2003e4c0 	.word	0x2003e4c0
   b56e8:	000b43f9 	.word	0x000b43f9
   b56ec:	000b4239 	.word	0x000b4239
   b56f0:	000b4225 	.word	0x000b4225
   b56f4:	000bc2cc 	.word	0x000bc2cc
   b56f8:	000b4189 	.word	0x000b4189
   b56fc:	2003e4a8 	.word	0x2003e4a8

000b5700 <loop>:
{
   b5700:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   b5702:	4c97      	ldr	r4, [pc, #604]	; (b5960 <loop+0x260>)
   b5704:	7823      	ldrb	r3, [r4, #0]
   b5706:	3b01      	subs	r3, #1
{
   b5708:	b097      	sub	sp, #92	; 0x5c
   b570a:	2b07      	cmp	r3, #7
   b570c:	d85c      	bhi.n	b57c8 <loop+0xc8>
   b570e:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5712:	025f      	.short	0x025f
   b5714:	005b0008 	.word	0x005b0008
   b5718:	01ca00d5 	.word	0x01ca00d5
   b571c:	00a6002e 	.word	0x00a6002e
   b5720:	02b8      	.short	0x02b8
    if (state != oldState) publishStateTransition();
   b5722:	4b90      	ldr	r3, [pc, #576]	; (b5964 <loop+0x264>)
   b5724:	781b      	ldrb	r3, [r3, #0]
   b5726:	2b02      	cmp	r3, #2
   b5728:	d001      	beq.n	b572e <loop+0x2e>
   b572a:	f7ff f84d 	bl	b47c8 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;     
   b572e:	4b8e      	ldr	r3, [pc, #568]	; (b5968 <loop+0x268>)
   b5730:	7adb      	ldrb	r3, [r3, #11]
   b5732:	b153      	cbz	r3, b574a <loop+0x4a>
   b5734:	f003 f808 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
   b5738:	4b8c      	ldr	r3, [pc, #560]	; (b596c <loop+0x26c>)
   b573a:	681b      	ldr	r3, [r3, #0]
   b573c:	1ac0      	subs	r0, r0, r3
   b573e:	4b8c      	ldr	r3, [pc, #560]	; (b5970 <loop+0x270>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	4298      	cmp	r0, r3
   b5744:	bf84      	itt	hi
   b5746:	2304      	movhi	r3, #4
   b5748:	7023      	strbhi	r3, [r4, #0]
    if (firmwareUpdateInProgress) state= FIRMWARE_UPDATE;                                                     // This means there is a firemware update on deck
   b574a:	4b8a      	ldr	r3, [pc, #552]	; (b5974 <loop+0x274>)
   b574c:	781b      	ldrb	r3, [r3, #0]
   b574e:	b10b      	cbz	r3, b5754 <loop+0x54>
   b5750:	2308      	movs	r3, #8
   b5752:	7023      	strb	r3, [r4, #0]
    if (!(Time.now() % wakeBoundary)) state = REPORTING_STATE;  
   b5754:	f004 ff9f 	bl	ba696 <_ZN9TimeClass3nowEv>
   b5758:	4b87      	ldr	r3, [pc, #540]	; (b5978 <loop+0x278>)
   b575a:	681b      	ldr	r3, [r3, #0]
   b575c:	fb90 f2f3 	sdiv	r2, r0, r3
   b5760:	fb02 0013 	mls	r0, r2, r3, r0
   b5764:	2800      	cmp	r0, #0
   b5766:	d12f      	bne.n	b57c8 <loop+0xc8>
   b5768:	2306      	movs	r3, #6
          state = IDLE_STATE;
   b576a:	7023      	strb	r3, [r4, #0]
    } break;
   b576c:	e02c      	b.n	b57c8 <loop+0xc8>
    if (state != oldState) publishStateTransition();
   b576e:	4b7d      	ldr	r3, [pc, #500]	; (b5964 <loop+0x264>)
   b5770:	781b      	ldrb	r3, [r3, #0]
   b5772:	2b06      	cmp	r3, #6
   b5774:	d001      	beq.n	b577a <loop+0x7a>
   b5776:	f7ff f827 	bl	b47c8 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                     // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   b577a:	f004 ff8c 	bl	ba696 <_ZN9TimeClass3nowEv>
   b577e:	4b7f      	ldr	r3, [pc, #508]	; (b597c <loop+0x27c>)
   b5780:	6018      	str	r0, [r3, #0]
    takeMeasurements();                                                // Take Measurements here for reporting
   b5782:	f7ff fa2d 	bl	b4be0 <_Z16takeMeasurementsv>
    sendEvent();                                                       // Publish hourly but not at opening time as there is nothing to publish
   b5786:	f7fe ffd7 	bl	b4738 <_Z9sendEventv>
    state = CONNECTING_STATE;                                          // Default behaviour would be to connect and send report to Ubidots
   b578a:	2305      	movs	r3, #5
   b578c:	7023      	strb	r3, [r4, #0]
   b578e:	f003 fa5d 	bl	b8c4c <spark_cloud_flag_connected>
    if (Particle.connected()) {                                        // We are already connected go to response wait
   b5792:	b140      	cbz	r0, b57a6 <loop+0xa6>
      stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b5794:	4b76      	ldr	r3, [pc, #472]	; (b5970 <loop+0x270>)
   b5796:	4a7a      	ldr	r2, [pc, #488]	; (b5980 <loop+0x280>)
   b5798:	601a      	str	r2, [r3, #0]
   b579a:	f002 ffd5 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   b579e:	4b73      	ldr	r3, [pc, #460]	; (b596c <loop+0x26c>)
   b57a0:	6018      	str	r0, [r3, #0]
          (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b57a2:	2307      	movs	r3, #7
   b57a4:	e7e1      	b.n	b576a <loop+0x6a>
    else if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   b57a6:	4d70      	ldr	r5, [pc, #448]	; (b5968 <loop+0x268>)
   b57a8:	7aab      	ldrb	r3, [r5, #10]
   b57aa:	2b00      	cmp	r3, #0
   b57ac:	d13c      	bne.n	b5828 <loop+0x128>
    else if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {      // Low power mode and user switch not pressed
   b57ae:	7aeb      	ldrb	r3, [r5, #11]
   b57b0:	b153      	cbz	r3, b57c8 <loop+0xc8>
   b57b2:	2004      	movs	r0, #4
   b57b4:	f005 f9ab 	bl	bab0e <digitalRead>
   b57b8:	b130      	cbz	r0, b57c8 <loop+0xc8>
      if (sysStatus.stateOfCharge > 65) {
   b57ba:	68eb      	ldr	r3, [r5, #12]
   b57bc:	2b41      	cmp	r3, #65	; 0x41
   b57be:	dd3d      	ble.n	b583c <loop+0x13c>
        Log.info("Sufficient battery power connecting");
   b57c0:	4970      	ldr	r1, [pc, #448]	; (b5984 <loop+0x284>)
   b57c2:	4871      	ldr	r0, [pc, #452]	; (b5988 <loop+0x288>)
   b57c4:	f7fe ff02 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
  PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   b57c8:	f001 ff1c 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b57cc:	f001 fe0d 	bl	b73ea <_ZN17PublishQueuePosix4loopEv>
  rtc.loop();                   // keeps the clock up to date
   b57d0:	486e      	ldr	r0, [pc, #440]	; (b598c <loop+0x28c>)
   b57d2:	f001 fa2f 	bl	b6c34 <_ZN8MCP794104loopEv>
   if (outOfMemory >= 0) {                                              // In this function we are going to reset the system if there is an out of memory error
   b57d6:	4b6e      	ldr	r3, [pc, #440]	; (b5990 <loop+0x290>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	2b00      	cmp	r3, #0
   b57dc:	db08      	blt.n	b57f0 <loop+0xf0>
    sensor_data.alerts = 14;                                               // Out of memory alert
   b57de:	4b6d      	ldr	r3, [pc, #436]	; (b5994 <loop+0x294>)
   b57e0:	220e      	movs	r2, #14
   b57e2:	631a      	str	r2, [r3, #48]	; 0x30
   b57e4:	f002 ffb0 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b57e8:	4b6b      	ldr	r3, [pc, #428]	; (b5998 <loop+0x298>)
   b57ea:	6018      	str	r0, [r3, #0]
    state = ERROR_STATE;
   b57ec:	2301      	movs	r3, #1
   b57ee:	7023      	strb	r3, [r4, #0]
  if (watchdogFlag) petWatchdog();                                     // Watchdog flag is raised - time to pet the watchdog
   b57f0:	4b6a      	ldr	r3, [pc, #424]	; (b599c <loop+0x29c>)
   b57f2:	781b      	ldrb	r3, [r3, #0]
   b57f4:	b10b      	cbz	r3, b57fa <loop+0xfa>
   b57f6:	f7fe ff8f 	bl	b4718 <_Z11petWatchdogv>
  if (systemStatusWriteNeeded) {
   b57fa:	4c69      	ldr	r4, [pc, #420]	; (b59a0 <loop+0x2a0>)
   b57fc:	7823      	ldrb	r3, [r4, #0]
   b57fe:	b133      	cbz	r3, b580e <loop+0x10e>
    fram.put(FRAM::sysStatusAddr,sysStatus);
   b5800:	4a59      	ldr	r2, [pc, #356]	; (b5968 <loop+0x268>)
   b5802:	4868      	ldr	r0, [pc, #416]	; (b59a4 <loop+0x2a4>)
   b5804:	2101      	movs	r1, #1
   b5806:	f7fe fd19 	bl	b423c <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
    systemStatusWriteNeeded = false;
   b580a:	2300      	movs	r3, #0
   b580c:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   b580e:	4c66      	ldr	r4, [pc, #408]	; (b59a8 <loop+0x2a8>)
   b5810:	7823      	ldrb	r3, [r4, #0]
   b5812:	b13b      	cbz	r3, b5824 <loop+0x124>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5814:	2340      	movs	r3, #64	; 0x40
   b5816:	4a5f      	ldr	r2, [pc, #380]	; (b5994 <loop+0x294>)
   b5818:	4862      	ldr	r0, [pc, #392]	; (b59a4 <loop+0x2a4>)
   b581a:	21a0      	movs	r1, #160	; 0xa0
   b581c:	f000 fe07 	bl	b642e <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b5820:	2300      	movs	r3, #0
   b5822:	7023      	strb	r3, [r4, #0]
}
   b5824:	b017      	add	sp, #92	; 0x5c
   b5826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   b5828:	2004      	movs	r0, #4
   b582a:	f005 f970 	bl	bab0e <digitalRead>
   b582e:	2800      	cmp	r0, #0
   b5830:	d0bd      	beq.n	b57ae <loop+0xae>
      Log.info("Not connecting - low battery mode");
   b5832:	495e      	ldr	r1, [pc, #376]	; (b59ac <loop+0x2ac>)
          Log.info("firmware update completed");
   b5834:	4854      	ldr	r0, [pc, #336]	; (b5988 <loop+0x288>)
   b5836:	f7fe fec9 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
          state = IDLE_STATE;
   b583a:	e01f      	b.n	b587c <loop+0x17c>
      else if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {   // If the battery level is <50%, only connect every fourth hour
   b583c:	2b32      	cmp	r3, #50	; 0x32
   b583e:	dc06      	bgt.n	b584e <loop+0x14e>
   b5840:	f004 ff3a 	bl	ba6b8 <_ZN9TimeClass4hourEv>
   b5844:	0782      	lsls	r2, r0, #30
   b5846:	d108      	bne.n	b585a <loop+0x15a>
      else if (sysStatus.stateOfCharge <= 65 && (Time.hour() % 2)) {   // If the battery level is 50% -  65%, only connect every other hour
   b5848:	68eb      	ldr	r3, [r5, #12]
   b584a:	2b41      	cmp	r3, #65	; 0x41
   b584c:	dcbc      	bgt.n	b57c8 <loop+0xc8>
   b584e:	f004 ff33 	bl	ba6b8 <_ZN9TimeClass4hourEv>
   b5852:	07c3      	lsls	r3, r0, #31
   b5854:	d5b8      	bpl.n	b57c8 <loop+0xc8>
        Log.info("Not connecting - 50-65%% charge - two hour schedule");
   b5856:	4956      	ldr	r1, [pc, #344]	; (b59b0 <loop+0x2b0>)
   b5858:	e7ec      	b.n	b5834 <loop+0x134>
        Log.info("Not connecting - <50%% charge - four hour schedule");
   b585a:	4956      	ldr	r1, [pc, #344]	; (b59b4 <loop+0x2b4>)
   b585c:	e7ea      	b.n	b5834 <loop+0x134>
    if (state != oldState) {
   b585e:	4b41      	ldr	r3, [pc, #260]	; (b5964 <loop+0x264>)
   b5860:	4d55      	ldr	r5, [pc, #340]	; (b59b8 <loop+0x2b8>)
   b5862:	781b      	ldrb	r3, [r3, #0]
   b5864:	2b07      	cmp	r3, #7
   b5866:	d007      	beq.n	b5878 <loop+0x178>
   b5868:	f002 ff6e 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // We are connected and we have published, head to the response wait state
   b586c:	4b53      	ldr	r3, [pc, #332]	; (b59bc <loop+0x2bc>)
   b586e:	6018      	str	r0, [r3, #0]
      dataInFlight = true;                                            // set the data inflight flag
   b5870:	2301      	movs	r3, #1
   b5872:	702b      	strb	r3, [r5, #0]
      publishStateTransition();
   b5874:	f7fe ffa8 	bl	b47c8 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   b5878:	782b      	ldrb	r3, [r5, #0]
   b587a:	b90b      	cbnz	r3, b5880 <loop+0x180>
          state = IDLE_STATE;
   b587c:	2302      	movs	r3, #2
   b587e:	e774      	b.n	b576a <loop+0x6a>
   b5880:	f002 ff62 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   b5884:	4b4d      	ldr	r3, [pc, #308]	; (b59bc <loop+0x2bc>)
   b5886:	681b      	ldr	r3, [r3, #0]
   b5888:	1ac0      	subs	r0, r0, r3
   b588a:	f247 5330 	movw	r3, #30000	; 0x7530
   b588e:	4298      	cmp	r0, r3
   b5890:	d99a      	bls.n	b57c8 <loop+0xc8>
      sensor_data.alerts = 40;                                            // Raise the missed webhook flag
   b5892:	4b40      	ldr	r3, [pc, #256]	; (b5994 <loop+0x294>)
   b5894:	2228      	movs	r2, #40	; 0x28
   b5896:	631a      	str	r2, [r3, #48]	; 0x30
      sensorDataWriteNeeded = true;
   b5898:	4b43      	ldr	r3, [pc, #268]	; (b59a8 <loop+0x2a8>)
   b589a:	2501      	movs	r5, #1
   b589c:	701d      	strb	r5, [r3, #0]
      if (Time.now() - sysStatus.lastHookResponse > 3 * 3600L) {      // Failed to get a webhook response for over three hours
   b589e:	f004 fefa 	bl	ba696 <_ZN9TimeClass3nowEv>
   b58a2:	4b31      	ldr	r3, [pc, #196]	; (b5968 <loop+0x268>)
   b58a4:	691b      	ldr	r3, [r3, #16]
   b58a6:	1ac0      	subs	r0, r0, r3
   b58a8:	f642 2330 	movw	r3, #10800	; 0x2a30
   b58ac:	4298      	cmp	r0, r3
   b58ae:	d9e5      	bls.n	b587c <loop+0x17c>
   b58b0:	f002 ff4a 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   b58b4:	4b38      	ldr	r3, [pc, #224]	; (b5998 <loop+0x298>)
        state = ERROR_STATE;                                          // Response timed out
   b58b6:	7025      	strb	r5, [r4, #0]
        resetTimeStamp = millis();
   b58b8:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                          // Response timed out
   b58ba:	e785      	b.n	b57c8 <loop+0xc8>
      if (state != oldState) publishStateTransition();
   b58bc:	4b29      	ldr	r3, [pc, #164]	; (b5964 <loop+0x264>)
   b58be:	781b      	ldrb	r3, [r3, #0]
   b58c0:	2b04      	cmp	r3, #4
   b58c2:	d001      	beq.n	b58c8 <loop+0x1c8>
   b58c4:	f7fe ff80 	bl	b47c8 <_Z22publishStateTransitionv>
   b58c8:	f003 f9c0 	bl	b8c4c <spark_cloud_flag_connected>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle and power down the modem
   b58cc:	2800      	cmp	r0, #0
   b58ce:	d03e      	beq.n	b594e <loop+0x24e>
   b58d0:	f7fe ffee 	bl	b48b0 <_Z22disconnectFromParticlev>
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b58d4:	4b26      	ldr	r3, [pc, #152]	; (b5970 <loop+0x270>)
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b58d6:	4e28      	ldr	r6, [pc, #160]	; (b5978 <loop+0x278>)
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b58d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b58dc:	6835      	ldr	r5, [r6, #0]
      stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   b58de:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   b58e0:	f004 fed9 	bl	ba696 <_ZN9TimeClass3nowEv>
   b58e4:	6837      	ldr	r7, [r6, #0]
   b58e6:	fb90 f3f7 	sdiv	r3, r0, r7
   b58ea:	fb03 0017 	mls	r0, r3, r7, r0
   b58ee:	1a28      	subs	r0, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b58f0:	2800      	cmp	r0, #0
   b58f2:	dd32      	ble.n	b595a <loop+0x25a>
   b58f4:	4287      	cmp	r7, r0
   b58f6:	bfa8      	it	ge
   b58f8:	4607      	movge	r7, r0
      Log.info("Napping for %i seconds",wakeInSeconds);
   b58fa:	4931      	ldr	r1, [pc, #196]	; (b59c0 <loop+0x2c0>)
   b58fc:	4822      	ldr	r0, [pc, #136]	; (b5988 <loop+0x288>)
   b58fe:	463a      	mov	r2, r7
   b5900:	f7fe fe64 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
      PublishQueuePosix::instance().publish("Napping Duration", String(wakeInSeconds), PRIVATE);      
   b5904:	f001 fe7e 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
   b5908:	220a      	movs	r2, #10
   b590a:	4605      	mov	r5, r0
   b590c:	4639      	mov	r1, r7
   b590e:	a806      	add	r0, sp, #24
   b5910:	f004 fbe6 	bl	ba0e0 <_ZN6StringC1Eih>
        val_(0) {
   b5914:	2300      	movs	r3, #0
   b5916:	f88d 3000 	strb.w	r3, [sp]
   b591a:	4b2a      	ldr	r3, [pc, #168]	; (b59c4 <loop+0x2c4>)
   b591c:	9a06      	ldr	r2, [sp, #24]
   b591e:	781b      	ldrb	r3, [r3, #0]
   b5920:	4929      	ldr	r1, [pc, #164]	; (b59c8 <loop+0x2c8>)
   b5922:	4628      	mov	r0, r5
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5924:	4d29      	ldr	r5, [pc, #164]	; (b59cc <loop+0x2cc>)
   b5926:	f7fe fc91 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b592a:	a806      	add	r0, sp, #24
   b592c:	f004 fb28 	bl	b9f80 <_ZN6StringD1Ev>
   b5930:	7d2b      	ldrb	r3, [r5, #20]
   b5932:	2b00      	cmp	r3, #0
   b5934:	f000 8091 	beq.w	b5a5a <loop+0x35a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5938:	2302      	movs	r3, #2
   b593a:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b593c:	682b      	ldr	r3, [r5, #0]
   b593e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5940:	2b00      	cmp	r3, #0
   b5942:	d060      	beq.n	b5a06 <loop+0x306>
            if (start->type == type) {
   b5944:	889a      	ldrh	r2, [r3, #4]
   b5946:	2a01      	cmp	r2, #1
   b5948:	d049      	beq.n	b59de <loop+0x2de>
            start = start->next;
   b594a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b594c:	e7f8      	b.n	b5940 <loop+0x240>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle and power down the modem
   b594e:	4820      	ldr	r0, [pc, #128]	; (b59d0 <loop+0x2d0>)
   b5950:	f004 f956 	bl	b9c00 <_ZN5spark12NetworkClass5isOffEv>
   b5954:	2800      	cmp	r0, #0
   b5956:	d0bb      	beq.n	b58d0 <loop+0x1d0>
   b5958:	e7bc      	b.n	b58d4 <loop+0x1d4>
   b595a:	2701      	movs	r7, #1
   b595c:	e7cd      	b.n	b58fa <loop+0x1fa>
   b595e:	bf00      	nop
   b5960:	2003e574 	.word	0x2003e574
   b5964:	2003e500 	.word	0x2003e500
   b5968:	2003e580 	.word	0x2003e580
   b596c:	2003e57c 	.word	0x2003e57c
   b5970:	2003e578 	.word	0x2003e578
   b5974:	2003e495 	.word	0x2003e495
   b5978:	2003e378 	.word	0x2003e378
   b597c:	2003e4dc 	.word	0x2003e4dc
   b5980:	00015f90 	.word	0x00015f90
   b5984:	000bc148 	.word	0x000bc148
   b5988:	2003e66c 	.word	0x2003e66c
   b598c:	2003e508 	.word	0x2003e508
   b5990:	2003e2e0 	.word	0x2003e2e0
   b5994:	2003e528 	.word	0x2003e528
   b5998:	2003e504 	.word	0x2003e504
   b599c:	2003e600 	.word	0x2003e600
   b59a0:	2003e5b0 	.word	0x2003e5b0
   b59a4:	2003e498 	.word	0x2003e498
   b59a8:	2003e524 	.word	0x2003e524
   b59ac:	000bc126 	.word	0x000bc126
   b59b0:	000bc19f 	.word	0x000bc19f
   b59b4:	000bc16c 	.word	0x000bc16c
   b59b8:	2003e494 	.word	0x2003e494
   b59bc:	2003e450 	.word	0x2003e450
   b59c0:	000bc1d3 	.word	0x000bc1d3
   b59c4:	2003e44d 	.word	0x2003e44d
   b59c8:	000bc1ea 	.word	0x000bc1ea
   b59cc:	2003e47c 	.word	0x2003e47c
   b59d0:	2003e634 	.word	0x2003e634
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b59d4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b59d6:	b1b3      	cbz	r3, b5a06 <loop+0x306>
            if (start->type == type) {
   b59d8:	889a      	ldrh	r2, [r3, #4]
   b59da:	2a01      	cmp	r2, #1
   b59dc:	d1fa      	bne.n	b59d4 <loop+0x2d4>
                if (gpioWakeup->pin == pin) {
   b59de:	899a      	ldrh	r2, [r3, #12]
   b59e0:	2a04      	cmp	r2, #4
   b59e2:	d1f7      	bne.n	b59d4 <loop+0x2d4>
                    gpioWakeup->mode = mode;
   b59e4:	2200      	movs	r2, #0
   b59e6:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b59e8:	7d2b      	ldrb	r3, [r5, #20]
   b59ea:	2b00      	cmp	r3, #0
   b59ec:	d035      	beq.n	b5a5a <loop+0x35a>
        .duration(wakeInSeconds * 1000);
   b59ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59f2:	435f      	muls	r7, r3
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b59f4:	682b      	ldr	r3, [r5, #0]
   b59f6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b59f8:	b1db      	cbz	r3, b5a32 <loop+0x332>
            if (start->type == type) {
   b59fa:	889a      	ldrh	r2, [r3, #4]
   b59fc:	2a04      	cmp	r2, #4
   b59fe:	f000 81b9 	beq.w	b5d74 <loop+0x674>
            start = start->next;
   b5a02:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5a04:	e7f8      	b.n	b59f8 <loop+0x2f8>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5a06:	49a9      	ldr	r1, [pc, #676]	; (b5cac <loop+0x5ac>)
   b5a08:	2010      	movs	r0, #16
   b5a0a:	f005 f961 	bl	bacd0 <_ZnwjRKSt9nothrow_t>
   b5a0e:	4606      	mov	r6, r0
   b5a10:	2800      	cmp	r0, #0
   b5a12:	f000 81b1 	beq.w	b5d78 <loop+0x678>
   b5a16:	2210      	movs	r2, #16
   b5a18:	2100      	movs	r1, #0
   b5a1a:	f005 fee1 	bl	bb7e0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5a1e:	4ba4      	ldr	r3, [pc, #656]	; (b5cb0 <loop+0x5b0>)
   b5a20:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5a22:	2301      	movs	r3, #1
   b5a24:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5a26:	692b      	ldr	r3, [r5, #16]
   b5a28:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5a2a:	2304      	movs	r3, #4
   b5a2c:	81b3      	strh	r3, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5a2e:	612e      	str	r6, [r5, #16]
   b5a30:	e7da      	b.n	b59e8 <loop+0x2e8>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5a32:	499e      	ldr	r1, [pc, #632]	; (b5cac <loop+0x5ac>)
   b5a34:	2010      	movs	r0, #16
   b5a36:	f005 f94b 	bl	bacd0 <_ZnwjRKSt9nothrow_t>
   b5a3a:	4606      	mov	r6, r0
   b5a3c:	2800      	cmp	r0, #0
   b5a3e:	f000 819b 	beq.w	b5d78 <loop+0x678>
   b5a42:	2210      	movs	r2, #16
   b5a44:	2100      	movs	r1, #0
   b5a46:	f005 fecb 	bl	bb7e0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5a4a:	4b99      	ldr	r3, [pc, #612]	; (b5cb0 <loop+0x5b0>)
   b5a4c:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5a4e:	2304      	movs	r3, #4
   b5a50:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5a52:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5a54:	612e      	str	r6, [r5, #16]
            wakeupSource->ms = ms;
   b5a56:	e9c6 3702 	strd	r3, r7, [r6, #8]
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   b5a5a:	4996      	ldr	r1, [pc, #600]	; (b5cb4 <loop+0x5b4>)
   b5a5c:	a803      	add	r0, sp, #12
   b5a5e:	f004 fc4d 	bl	ba2fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   b5a62:	4895      	ldr	r0, [pc, #596]	; (b5cb8 <loop+0x5b8>)
   b5a64:	f003 ff30 	bl	b98c8 <_ZN9FuelGauge6wakeupEv>
   b5a68:	f002 fe6e 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   b5a6c:	4b93      	ldr	r3, [pc, #588]	; (b5cbc <loop+0x5bc>)
   b5a6e:	6018      	str	r0, [r3, #0]
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5a70:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b5a72:	b17b      	cbz	r3, b5a94 <loop+0x394>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5a74:	889a      	ldrh	r2, [r3, #4]
   b5a76:	2a01      	cmp	r2, #1
   b5a78:	d10c      	bne.n	b5a94 <loop+0x394>
      if (result.wakeupPin() == userSwitch) setLowPowerMode("0");        // The user woke the device and we need to make sure it stays awake
   b5a7a:	899b      	ldrh	r3, [r3, #12]
   b5a7c:	2b04      	cmp	r3, #4
   b5a7e:	d109      	bne.n	b5a94 <loop+0x394>
   b5a80:	498f      	ldr	r1, [pc, #572]	; (b5cc0 <loop+0x5c0>)
   b5a82:	a806      	add	r0, sp, #24
   b5a84:	f004 fac7 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a88:	a806      	add	r0, sp, #24
   b5a8a:	f7ff f841 	bl	b4b10 <_Z15setLowPowerMode6String>
   b5a8e:	a806      	add	r0, sp, #24
   b5a90:	f004 fa76 	bl	b9f80 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5a94:	9803      	ldr	r0, [sp, #12]
      state = REPORTING_STATE;
   b5a96:	2306      	movs	r3, #6
   b5a98:	7023      	strb	r3, [r4, #0]
   b5a9a:	2800      	cmp	r0, #0
   b5a9c:	f43f ae94 	beq.w	b57c8 <loop+0xc8>
            free(wakeupSource_);
   b5aa0:	f003 f98c 	bl	b8dbc <free>
    } break;
   b5aa4:	e690      	b.n	b57c8 <loop+0xc8>
      if (state != oldState) {                                           // Non-blocking function - these are first time items
   b5aa6:	4b87      	ldr	r3, [pc, #540]	; (b5cc4 <loop+0x5c4>)
   b5aa8:	4d87      	ldr	r5, [pc, #540]	; (b5cc8 <loop+0x5c8>)
   b5aaa:	781b      	ldrb	r3, [r3, #0]
   b5aac:	2b05      	cmp	r3, #5
   b5aae:	d021      	beq.n	b5af4 <loop+0x3f4>
        retainedOldState = oldState;                                     // Keep track for where to go next
   b5ab0:	4e86      	ldr	r6, [pc, #536]	; (b5ccc <loop+0x5cc>)
   b5ab2:	7033      	strb	r3, [r6, #0]
        sysStatus.lastConnectionDuration = 0;                            // Will exit with 0 if we do not connect or are connected or the connection time if we do
   b5ab4:	2300      	movs	r3, #0
   b5ab6:	85ab      	strh	r3, [r5, #44]	; 0x2c
        publishStateTransition();
   b5ab8:	f7fe fe86 	bl	b47c8 <_Z22publishStateTransitionv>
   b5abc:	f003 f8c6 	bl	b8c4c <spark_cloud_flag_connected>
        if (Particle.connected()) {
   b5ac0:	b178      	cbz	r0, b5ae2 <loop+0x3e2>
          Log.info("Connecting state but already connected");
   b5ac2:	4983      	ldr	r1, [pc, #524]	; (b5cd0 <loop+0x5d0>)
   b5ac4:	4883      	ldr	r0, [pc, #524]	; (b5cd4 <loop+0x5d4>)
   b5ac6:	f7fe fd81 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
          stayAwake = stayAwakeLong;                                     // Keeps device awake after reboot - helps with recovery
   b5aca:	4b83      	ldr	r3, [pc, #524]	; (b5cd8 <loop+0x5d8>)
   b5acc:	4a83      	ldr	r2, [pc, #524]	; (b5cdc <loop+0x5dc>)
   b5ace:	601a      	str	r2, [r3, #0]
   b5ad0:	f002 fe3a 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
          stayAwakeTimeStamp = millis();
   b5ad4:	4b79      	ldr	r3, [pc, #484]	; (b5cbc <loop+0x5bc>)
   b5ad6:	6018      	str	r0, [r3, #0]
          (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b5ad8:	7833      	ldrb	r3, [r6, #0]
   b5ada:	2b06      	cmp	r3, #6
   b5adc:	f47f aece 	bne.w	b587c <loop+0x17c>
   b5ae0:	e65f      	b.n	b57a2 <loop+0xa2>
   b5ae2:	f002 fe31 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        connectionStartTimeStamp = millis();                             // Have to use millis as the clock will get reset on connect
   b5ae6:	4b7e      	ldr	r3, [pc, #504]	; (b5ce0 <loop+0x5e0>)
   b5ae8:	6018      	str	r0, [r3, #0]
        Cellular.on();                                                   // Needed until they fix this: https://github.com/particle-iot/device-os/issues/1631
   b5aea:	487e      	ldr	r0, [pc, #504]	; (b5ce4 <loop+0x5e4>)
   b5aec:	f7fe fd08 	bl	b4500 <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
   b5af0:	f003 f8a4 	bl	b8c3c <spark_cloud_flag_connect>
   b5af4:	f002 fe28 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      sysStatus.lastConnectionDuration = int((millis() - connectionStartTimeStamp)/1000);
   b5af8:	4b79      	ldr	r3, [pc, #484]	; (b5ce0 <loop+0x5e0>)
   b5afa:	681b      	ldr	r3, [r3, #0]
   b5afc:	1ac0      	subs	r0, r0, r3
   b5afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b02:	fbb0 f0f3 	udiv	r0, r0, r3
   b5b06:	85a8      	strh	r0, [r5, #44]	; 0x2c
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5b08:	f003 f8a0 	bl	b8c4c <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b5b0c:	2800      	cmp	r0, #0
   b5b0e:	d035      	beq.n	b5b7c <loop+0x47c>
   b5b10:	f003 f89c 	bl	b8c4c <spark_cloud_flag_connected>
        if (!connected()) {
   b5b14:	b110      	cbz	r0, b5b1c <loop+0x41c>
        return spark_sync_time(NULL);
   b5b16:	2000      	movs	r0, #0
   b5b18:	f003 f8b8 	bl	b8c8c <spark_sync_time>
        return hal_timer_millis(nullptr);
   b5b1c:	2000      	movs	r0, #0
   b5b1e:	f002 fe23 	bl	b8768 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5b22:	f247 5730 	movw	r7, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5b26:	4606      	mov	r6, r0
   b5b28:	2000      	movs	r0, #0
   b5b2a:	f002 fe1d 	bl	b8768 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5b2e:	1b83      	subs	r3, r0, r6
   b5b30:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5b34:	42bb      	cmp	r3, r7
   b5b36:	f171 0300 	sbcs.w	r3, r1, #0
   b5b3a:	d205      	bcs.n	b5b48 <loop+0x448>
        waitFor(Particle.syncTimeDone,30000);                          // Wait for up to 30 seconds for the SyncTime to complete
   b5b3c:	f7fe fc86 	bl	b444c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   b5b40:	b910      	cbnz	r0, b5b48 <loop+0x448>
            spark_process();
   b5b42:	f003 f873 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   b5b46:	e7ef      	b.n	b5b28 <loop+0x428>
   b5b48:	f7fe fc80 	bl	b444c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   b5b4c:	f004 fda3 	bl	ba696 <_ZN9TimeClass3nowEv>
        stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   b5b50:	4b61      	ldr	r3, [pc, #388]	; (b5cd8 <loop+0x5d8>)
   b5b52:	4a62      	ldr	r2, [pc, #392]	; (b5cdc <loop+0x5dc>)
   b5b54:	601a      	str	r2, [r3, #0]
        sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   b5b56:	62a8      	str	r0, [r5, #40]	; 0x28
   b5b58:	f002 fdf6 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   b5b5c:	4b57      	ldr	r3, [pc, #348]	; (b5cbc <loop+0x5bc>)
   b5b5e:	6018      	str	r0, [r3, #0]
        recordConnectionDetails();                                       // Record outcome of connection attempt
   b5b60:	f7ff f978 	bl	b4e54 <_Z23recordConnectionDetailsv>
        attachInterrupt(userSwitch, userSwitchISR,FALLING);              // Attach interrupt for the user switch to enable verbose counts
   b5b64:	2300      	movs	r3, #0
   b5b66:	9300      	str	r3, [sp, #0]
   b5b68:	495f      	ldr	r1, [pc, #380]	; (b5ce8 <loop+0x5e8>)
   b5b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b6e:	2202      	movs	r2, #2
   b5b70:	2004      	movs	r0, #4
   b5b72:	f003 ff77 	bl	b9a64 <_Z15attachInterrupttPFvvE13InterruptModeah>
        (retainedOldState == REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   b5b76:	4b55      	ldr	r3, [pc, #340]	; (b5ccc <loop+0x5cc>)
   b5b78:	781b      	ldrb	r3, [r3, #0]
   b5b7a:	e7ae      	b.n	b5ada <loop+0x3da>
      else if (sysStatus.lastConnectionDuration > connectMaxTimeSec) {
   b5b7c:	4b5b      	ldr	r3, [pc, #364]	; (b5cec <loop+0x5ec>)
   b5b7e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	429a      	cmp	r2, r3
   b5b84:	f67f ae20 	bls.w	b57c8 <loop+0xc8>
        recordConnectionDetails();                                       // Record outcome of connection attempt
   b5b88:	f7ff f964 	bl	b4e54 <_Z23recordConnectionDetailsv>
        Log.info("cloud connection unsuccessful");
   b5b8c:	4958      	ldr	r1, [pc, #352]	; (b5cf0 <loop+0x5f0>)
   b5b8e:	4851      	ldr	r0, [pc, #324]	; (b5cd4 <loop+0x5d4>)
   b5b90:	f7fe fd1c 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
        disconnectFromParticle();                                        // Make sure the modem is turned off
   b5b94:	f7fe fe8c 	bl	b48b0 <_Z22disconnectFromParticlev>
        if (sysStatus.solarPowerMode) setLowPowerMode("1");              // If we cannot connect, there is no point to stayng out of low power mode
   b5b98:	7deb      	ldrb	r3, [r5, #23]
   b5b9a:	b14b      	cbz	r3, b5bb0 <loop+0x4b0>
   b5b9c:	4955      	ldr	r1, [pc, #340]	; (b5cf4 <loop+0x5f4>)
   b5b9e:	a806      	add	r0, sp, #24
   b5ba0:	f004 fa39 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ba4:	a806      	add	r0, sp, #24
   b5ba6:	f7fe ffb3 	bl	b4b10 <_Z15setLowPowerMode6String>
   b5baa:	a806      	add	r0, sp, #24
   b5bac:	f004 f9e8 	bl	b9f80 <_ZN6StringD1Ev>
        if ((Time.now() - sysStatus.lastConnection) > 6 * 3600L) {       // Only sends to ERROR_STATE if it has been over six hours - this ties to reporting and low battery state
   b5bb0:	f004 fd71 	bl	ba696 <_ZN9TimeClass3nowEv>
   b5bb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   b5bb6:	1ac0      	subs	r0, r0, r3
   b5bb8:	f245 4360 	movw	r3, #21600	; 0x5460
   b5bbc:	4298      	cmp	r0, r3
   b5bbe:	f67f ae5d 	bls.w	b587c <loop+0x17c>
          state = ERROR_STATE;
   b5bc2:	2301      	movs	r3, #1
   b5bc4:	7023      	strb	r3, [r4, #0]
   b5bc6:	f002 fdbf 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
          resetTimeStamp = millis();
   b5bca:	4b4b      	ldr	r3, [pc, #300]	; (b5cf8 <loop+0x5f8>)
   b5bcc:	6018      	str	r0, [r3, #0]
          break;
   b5bce:	e5fb      	b.n	b57c8 <loop+0xc8>
    if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5bd0:	4b3c      	ldr	r3, [pc, #240]	; (b5cc4 <loop+0x5c4>)
   b5bd2:	781b      	ldrb	r3, [r3, #0]
   b5bd4:	2b01      	cmp	r3, #1
   b5bd6:	d001      	beq.n	b5bdc <loop+0x4dc>
   b5bd8:	f7fe fdf6 	bl	b47c8 <_Z22publishStateTransitionv>
   b5bdc:	f002 fdb4 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {                       // This simply gives us some time to catch the device if it is in a reset loop                           
   b5be0:	4b45      	ldr	r3, [pc, #276]	; (b5cf8 <loop+0x5f8>)
   b5be2:	681b      	ldr	r3, [r3, #0]
   b5be4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   b5be8:	3330      	adds	r3, #48	; 0x30
   b5bea:	4283      	cmp	r3, r0
   b5bec:	f4bf adec 	bcs.w	b57c8 <loop+0xc8>
      snprintf(errorStr, sizeof(errorStr),"Resetting device with alert code %i",sensor_data.alerts);
   b5bf0:	4d42      	ldr	r5, [pc, #264]	; (b5cfc <loop+0x5fc>)
   b5bf2:	4a43      	ldr	r2, [pc, #268]	; (b5d00 <loop+0x600>)
   b5bf4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   b5bf6:	2140      	movs	r1, #64	; 0x40
   b5bf8:	a806      	add	r0, sp, #24
   b5bfa:	f003 f8ff 	bl	b8dfc <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5bfe:	f003 f825 	bl	b8c4c <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("ERROR_STATE", errorStr, PRIVATE);
   b5c02:	b160      	cbz	r0, b5c1e <loop+0x51e>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c04:	4b3f      	ldr	r3, [pc, #252]	; (b5d04 <loop+0x604>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c06:	4940      	ldr	r1, [pc, #256]	; (b5d08 <loop+0x608>)
   b5c08:	781b      	ldrb	r3, [r3, #0]
   b5c0a:	f88d 3000 	strb.w	r3, [sp]
   b5c0e:	a803      	add	r0, sp, #12
   b5c10:	233c      	movs	r3, #60	; 0x3c
   b5c12:	aa06      	add	r2, sp, #24
   b5c14:	f003 fc14 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5c18:	a804      	add	r0, sp, #16
   b5c1a:	f7fe ff08 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Log.info(errorStr);
   b5c1e:	482d      	ldr	r0, [pc, #180]	; (b5cd4 <loop+0x5d4>)
   b5c20:	a906      	add	r1, sp, #24
   b5c22:	f7fe fcd3 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
      delay(2000);
   b5c26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5c2a:	f003 f94b 	bl	b8ec4 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c2e:	f003 f80d 	bl	b8c4c <spark_cloud_flag_connected>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle and power down the modem
   b5c32:	b1a8      	cbz	r0, b5c60 <loop+0x560>
   b5c34:	f7fe fe3c 	bl	b48b0 <_Z22disconnectFromParticlev>
      switch (sensor_data.alerts) {                                        // All of these events will reset the device
   b5c38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   b5c3a:	2b0d      	cmp	r3, #13
   b5c3c:	d016      	beq.n	b5c6c <loop+0x56c>
   b5c3e:	3b1e      	subs	r3, #30
   b5c40:	2b01      	cmp	r3, #1
   b5c42:	d80a      	bhi.n	b5c5a <loop+0x55a>
          sysStatus.lastConnection = Time.now();                       // Make sure we don't do this very often
   b5c44:	f004 fd27 	bl	ba696 <_ZN9TimeClass3nowEv>
   b5c48:	4a1f      	ldr	r2, [pc, #124]	; (b5cc8 <loop+0x5c8>)
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Unless a FRAM error sent us here - store alerts value
   b5c4a:	2101      	movs	r1, #1
          sysStatus.lastConnection = Time.now();                       // Make sure we don't do this very often
   b5c4c:	6290      	str	r0, [r2, #40]	; 0x28
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Unless a FRAM error sent us here - store alerts value
   b5c4e:	482f      	ldr	r0, [pc, #188]	; (b5d0c <loop+0x60c>)
   b5c50:	f7fe faf4 	bl	b423c <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
          delay(100);                                                  // Time to write to FRAM
   b5c54:	2064      	movs	r0, #100	; 0x64
   b5c56:	f003 f935 	bl	b8ec4 <delay>
          System.reset();                                    // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   b5c5a:	f004 fb4c 	bl	ba2f6 <_ZN11SystemClass5resetEv>
          break;
   b5c5e:	e5b3      	b.n	b57c8 <loop+0xc8>
      if (Particle.connected() || !Cellular.isOff()) disconnectFromParticle();  // Disconnect cleanly from Particle and power down the modem
   b5c60:	4820      	ldr	r0, [pc, #128]	; (b5ce4 <loop+0x5e4>)
   b5c62:	f003 ffcd 	bl	b9c00 <_ZN5spark12NetworkClass5isOffEv>
   b5c66:	2800      	cmp	r0, #0
   b5c68:	d0e4      	beq.n	b5c34 <loop+0x534>
   b5c6a:	e7e5      	b.n	b5c38 <loop+0x538>
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5c6c:	4a16      	ldr	r2, [pc, #88]	; (b5cc8 <loop+0x5c8>)
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5c6e:	4827      	ldr	r0, [pc, #156]	; (b5d0c <loop+0x60c>)
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5c70:	2300      	movs	r3, #0
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5c72:	2101      	movs	r1, #1
          sysStatus.resetCount = 0;                                    // Reset so we don't do this too often
   b5c74:	6253      	str	r3, [r2, #36]	; 0x24
          fram.put(FRAM::sysStatusAddr,sysStatus);                  // Won't get back to the main loop
   b5c76:	f7fe fae1 	bl	b423c <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_.isra.0>
          delay (100);
   b5c7a:	2064      	movs	r0, #100	; 0x64
   b5c7c:	f003 f922 	bl	b8ec4 <delay>
          break;
   b5c80:	e5a2      	b.n	b57c8 <loop+0xc8>
      if (state != oldState) {
   b5c82:	4b10      	ldr	r3, [pc, #64]	; (b5cc4 <loop+0x5c4>)
   b5c84:	781b      	ldrb	r3, [r3, #0]
   b5c86:	2b08      	cmp	r3, #8
   b5c88:	d009      	beq.n	b5c9e <loop+0x59e>
   b5c8a:	f002 fd5d 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();                                          // When did we start the firmware update?
   b5c8e:	4b20      	ldr	r3, [pc, #128]	; (b5d10 <loop+0x610>)
        Log.info("In the firmware update state");
   b5c90:	4920      	ldr	r1, [pc, #128]	; (b5d14 <loop+0x614>)
        stateTime = millis();                                          // When did we start the firmware update?
   b5c92:	6018      	str	r0, [r3, #0]
        Log.info("In the firmware update state");
   b5c94:	480f      	ldr	r0, [pc, #60]	; (b5cd4 <loop+0x5d4>)
   b5c96:	f7fe fc99 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
        publishStateTransition();
   b5c9a:	f7fe fd95 	bl	b47c8 <_Z22publishStateTransitionv>
      if (!firmwareUpdateInProgress) {                                 // Done with the update
   b5c9e:	4b1e      	ldr	r3, [pc, #120]	; (b5d18 <loop+0x618>)
   b5ca0:	781b      	ldrb	r3, [r3, #0]
   b5ca2:	2b00      	cmp	r3, #0
   b5ca4:	d13c      	bne.n	b5d20 <loop+0x620>
          Log.info("firmware update completed");
   b5ca6:	491d      	ldr	r1, [pc, #116]	; (b5d1c <loop+0x61c>)
   b5ca8:	e5c4      	b.n	b5834 <loop+0x134>
   b5caa:	bf00      	nop
   b5cac:	000bcaa0 	.word	0x000bcaa0
   b5cb0:	00030010 	.word	0x00030010
   b5cb4:	2003e47c 	.word	0x2003e47c
   b5cb8:	2003e4a8 	.word	0x2003e4a8
   b5cbc:	2003e57c 	.word	0x2003e57c
   b5cc0:	000bbcdc 	.word	0x000bbcdc
   b5cc4:	2003e500 	.word	0x2003e500
   b5cc8:	2003e580 	.word	0x2003e580
   b5ccc:	2003e44f 	.word	0x2003e44f
   b5cd0:	000bc1fb 	.word	0x000bc1fb
   b5cd4:	2003e66c 	.word	0x2003e66c
   b5cd8:	2003e578 	.word	0x2003e578
   b5cdc:	00015f90 	.word	0x00015f90
   b5ce0:	2003e454 	.word	0x2003e454
   b5ce4:	2003e634 	.word	0x2003e634
   b5ce8:	000b40d1 	.word	0x000b40d1
   b5cec:	2003e2dc 	.word	0x2003e2dc
   b5cf0:	000bc222 	.word	0x000bc222
   b5cf4:	000bbcd7 	.word	0x000bbcd7
   b5cf8:	2003e504 	.word	0x2003e504
   b5cfc:	2003e528 	.word	0x2003e528
   b5d00:	000bc240 	.word	0x000bc240
   b5d04:	2003e44d 	.word	0x2003e44d
   b5d08:	000bc264 	.word	0x000bc264
   b5d0c:	2003e498 	.word	0x2003e498
   b5d10:	2003e458 	.word	0x2003e458
   b5d14:	000bc270 	.word	0x000bc270
   b5d18:	2003e495 	.word	0x2003e495
   b5d1c:	000bc28d 	.word	0x000bc28d
   b5d20:	f002 fd12 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - stateTime >= firmwareUpdateMaxTime.count()) {     // Ran out of time
   b5d24:	4b15      	ldr	r3, [pc, #84]	; (b5d7c <loop+0x67c>)
   b5d26:	681b      	ldr	r3, [r3, #0]
   b5d28:	1ac0      	subs	r0, r0, r3
   b5d2a:	4b15      	ldr	r3, [pc, #84]	; (b5d80 <loop+0x680>)
   b5d2c:	4298      	cmp	r0, r3
   b5d2e:	f67f ad4b 	bls.w	b57c8 <loop+0xc8>
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5d32:	4d14      	ldr	r5, [pc, #80]	; (b5d84 <loop+0x684>)
          Log.info("firmware update timed out");
   b5d34:	4914      	ldr	r1, [pc, #80]	; (b5d88 <loop+0x688>)
   b5d36:	4815      	ldr	r0, [pc, #84]	; (b5d8c <loop+0x68c>)
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5d38:	2615      	movs	r6, #21
          Log.info("firmware update timed out");
   b5d3a:	f7fe fc47 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
          sensor_data.alerts = 21;                                          // Record alert for timeout
   b5d3e:	632e      	str	r6, [r5, #48]	; 0x30
          snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",sensor_data.alerts, Time.now());
   b5d40:	f004 fca9 	bl	ba696 <_ZN9TimeClass3nowEv>
   b5d44:	4a12      	ldr	r2, [pc, #72]	; (b5d90 <loop+0x690>)
   b5d46:	9000      	str	r0, [sp, #0]
   b5d48:	4633      	mov	r3, r6
   b5d4a:	2140      	movs	r1, #64	; 0x40
   b5d4c:	a806      	add	r0, sp, #24
   b5d4e:	f003 f855 	bl	b8dfc <snprintf>
          PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   b5d52:	f001 fc57 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b5d56:	2300      	movs	r3, #0
   b5d58:	f88d 3000 	strb.w	r3, [sp]
   b5d5c:	4b0d      	ldr	r3, [pc, #52]	; (b5d94 <loop+0x694>)
   b5d5e:	490e      	ldr	r1, [pc, #56]	; (b5d98 <loop+0x698>)
   b5d60:	781b      	ldrb	r3, [r3, #0]
   b5d62:	aa06      	add	r2, sp, #24
   b5d64:	f7fe fa72 	bl	b424c <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
          sensor_data.updateAttempts++;                                    // Increment the update attempt counter
   b5d68:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   b5d6c:	3301      	adds	r3, #1
   b5d6e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   b5d72:	e583      	b.n	b587c <loop+0x17c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b5d74:	60df      	str	r7, [r3, #12]
                return *this;
   b5d76:	e670      	b.n	b5a5a <loop+0x35a>
                valid_ = false;
   b5d78:	752e      	strb	r6, [r5, #20]
                return *this;
   b5d7a:	e66e      	b.n	b5a5a <loop+0x35a>
   b5d7c:	2003e458 	.word	0x2003e458
   b5d80:	000927bf 	.word	0x000927bf
   b5d84:	2003e528 	.word	0x2003e528
   b5d88:	000bc2a7 	.word	0x000bc2a7
   b5d8c:	2003e66c 	.word	0x2003e66c
   b5d90:	000bbd02 	.word	0x000bbd02
   b5d94:	2003e44d 	.word	0x2003e44d
   b5d98:	000bbd24 	.word	0x000bbd24

000b5d9c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b5d9c:	6042      	str	r2, [r0, #4]
  _begun = false;
   b5d9e:	2200      	movs	r2, #0
  _addr = addr;
   b5da0:	7001      	strb	r1, [r0, #0]
  _begun = false;
   b5da2:	7202      	strb	r2, [r0, #8]
}
   b5da4:	4770      	bx	lr

000b5da6 <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   b5da6:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b5da8:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b5daa:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b5dac:	b153      	cbz	r3, b5dc4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b5dae:	7821      	ldrb	r1, [r4, #0]
   b5db0:	6860      	ldr	r0, [r4, #4]
   b5db2:	f003 fe1d 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   b5db6:	6860      	ldr	r0, [r4, #4]
   b5db8:	f003 fe3d 	bl	b9a36 <_ZN7TwoWire15endTransmissionEv>
   b5dbc:	fab0 f080 	clz	r0, r0
   b5dc0:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b5dc2:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b5dc4:	f000 f803 	bl	b5dce <_ZN18Adafruit_I2CDevice5beginEv>
   b5dc8:	2800      	cmp	r0, #0
   b5dca:	d1f0      	bne.n	b5dae <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b5dcc:	e7f9      	b.n	b5dc2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b5dce <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   b5dce:	b510      	push	{r4, lr}
   b5dd0:	4604      	mov	r4, r0
  _wire->begin();
   b5dd2:	6840      	ldr	r0, [r0, #4]
   b5dd4:	f003 fdda 	bl	b998c <_ZN7TwoWire5beginEv>
  _begun = true;
   b5dd8:	2301      	movs	r3, #1
   b5dda:	7223      	strb	r3, [r4, #8]
  return detected();
   b5ddc:	4620      	mov	r0, r4
}
   b5dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   b5de2:	f7ff bfe0 	b.w	b5da6 <_ZN18Adafruit_I2CDevice8detectedEv>

000b5de6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b5de6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5dea:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b5dee:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   b5df0:	1993      	adds	r3, r2, r6
   b5df2:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b5df4:	4604      	mov	r4, r0
   b5df6:	4688      	mov	r8, r1
   b5df8:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   b5dfa:	d902      	bls.n	b5e02 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b5dfc:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   b5dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b5e02:	7801      	ldrb	r1, [r0, #0]
   b5e04:	6840      	ldr	r0, [r0, #4]
   b5e06:	f003 fdf3 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5e0a:	b97e      	cbnz	r6, b5e2c <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   b5e0c:	6860      	ldr	r0, [r4, #4]
   b5e0e:	6803      	ldr	r3, [r0, #0]
   b5e10:	462a      	mov	r2, r5
   b5e12:	68db      	ldr	r3, [r3, #12]
   b5e14:	4641      	mov	r1, r8
   b5e16:	4798      	blx	r3
   b5e18:	4285      	cmp	r5, r0
   b5e1a:	d1ef      	bne.n	b5dfc <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   b5e1c:	6860      	ldr	r0, [r4, #4]
   b5e1e:	4639      	mov	r1, r7
   b5e20:	f003 fe05 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
   b5e24:	fab0 f080 	clz	r0, r0
   b5e28:	0940      	lsrs	r0, r0, #5
   b5e2a:	e7e8      	b.n	b5dfe <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5e2c:	f1b9 0f00 	cmp.w	r9, #0
   b5e30:	d0ec      	beq.n	b5e0c <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b5e32:	6860      	ldr	r0, [r4, #4]
   b5e34:	6803      	ldr	r3, [r0, #0]
   b5e36:	4632      	mov	r2, r6
   b5e38:	68db      	ldr	r3, [r3, #12]
   b5e3a:	4649      	mov	r1, r9
   b5e3c:	4798      	blx	r3
   b5e3e:	4286      	cmp	r6, r0
   b5e40:	d1dc      	bne.n	b5dfc <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   b5e42:	e7e3      	b.n	b5e0c <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000b5e44 <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   b5e44:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b5e46:	b570      	push	{r4, r5, r6, lr}
   b5e48:	4606      	mov	r6, r0
   b5e4a:	460c      	mov	r4, r1
   b5e4c:	4615      	mov	r5, r2
  if (len > 32) {
   b5e4e:	d80f      	bhi.n	b5e70 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   b5e50:	7801      	ldrb	r1, [r0, #0]
   b5e52:	6840      	ldr	r0, [r0, #4]
   b5e54:	f003 fdb7 	bl	b99c6 <_ZN7TwoWire11requestFromEhjh>
   b5e58:	42a8      	cmp	r0, r5
   b5e5a:	d109      	bne.n	b5e70 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   b5e5c:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   b5e5e:	42a5      	cmp	r5, r4
   b5e60:	d008      	beq.n	b5e74 <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   b5e62:	6870      	ldr	r0, [r6, #4]
   b5e64:	6803      	ldr	r3, [r0, #0]
   b5e66:	695b      	ldr	r3, [r3, #20]
   b5e68:	4798      	blx	r3
   b5e6a:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   b5e6e:	e7f6      	b.n	b5e5e <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   b5e70:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5e72:	bd70      	pop	{r4, r5, r6, pc}
   b5e74:	2001      	movs	r0, #1
   b5e76:	e7fc      	b.n	b5e72 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000b5e78 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5e78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e7a:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   b5e7c:	2300      	movs	r3, #0
   b5e7e:	e9cd 3300 	strd	r3, r3, [sp]
   b5e82:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5e86:	9e06      	ldr	r6, [sp, #24]
   b5e88:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   b5e8a:	f7ff ffac 	bl	b5de6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   b5e8e:	b140      	cbz	r0, b5ea2 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   b5e90:	2301      	movs	r3, #1
   b5e92:	4632      	mov	r2, r6
   b5e94:	4629      	mov	r1, r5
   b5e96:	4620      	mov	r0, r4
}
   b5e98:	b002      	add	sp, #8
   b5e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b5e9e:	f7ff bfd1 	b.w	b5e44 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5ea2:	b002      	add	sp, #8
   b5ea4:	bd70      	pop	{r4, r5, r6, pc}

000b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   b5ea6:	b510      	push	{r4, lr}
  _device = device;
   b5ea8:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   b5eaa:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   b5eac:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   b5eb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   b5eb4:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   b5eb6:	7202      	strb	r2, [r0, #8]
  _width = width;
   b5eb8:	7183      	strb	r3, [r0, #6]
}
   b5eba:	bd10      	pop	{r4, pc}

000b5ebc <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   b5ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   b5ebe:	8883      	ldrh	r3, [r0, #4]
   b5ec0:	f88d 300c 	strb.w	r3, [sp, #12]
   b5ec4:	0a1b      	lsrs	r3, r3, #8
   b5ec6:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   b5eca:	79c3      	ldrb	r3, [r0, #7]
   b5ecc:	9301      	str	r3, [sp, #4]
   b5ece:	ab03      	add	r3, sp, #12
   b5ed0:	9300      	str	r3, [sp, #0]
   b5ed2:	6800      	ldr	r0, [r0, #0]
   b5ed4:	2301      	movs	r3, #1
   b5ed6:	f7ff ff86 	bl	b5de6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   b5eda:	b005      	add	sp, #20
   b5edc:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ee0 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   b5ee0:	b4f0      	push	{r4, r5, r6, r7}
   b5ee2:	460c      	mov	r4, r1
  if (numbytes == 0) {
   b5ee4:	b902      	cbnz	r2, b5ee8 <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   b5ee6:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   b5ee8:	2a04      	cmp	r2, #4
   b5eea:	d813      	bhi.n	b5f14 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   b5eec:	f100 0509 	add.w	r5, r0, #9
   b5ef0:	1883      	adds	r3, r0, r2
   b5ef2:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   b5ef4:	4283      	cmp	r3, r0
   b5ef6:	d009      	beq.n	b5f0c <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   b5ef8:	7a07      	ldrb	r7, [r0, #8]
      _buffer[i] = value & 0xFF;
   b5efa:	b2e6      	uxtb	r6, r4
    if (_bitorder == LSBFIRST) {
   b5efc:	b927      	cbnz	r7, b5f08 <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   b5efe:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   b5f00:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   b5f02:	3501      	adds	r5, #1
   b5f04:	3b01      	subs	r3, #1
   b5f06:	e7f5      	b.n	b5ef4 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   b5f08:	721e      	strb	r6, [r3, #8]
   b5f0a:	e7f9      	b.n	b5f00 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   b5f0c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b5f0e:	4618      	mov	r0, r3
   b5f10:	f7ff bfd4 	b.w	b5ebc <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   b5f14:	2000      	movs	r0, #0
   b5f16:	bcf0      	pop	{r4, r5, r6, r7}
   b5f18:	4770      	bx	lr

000b5f1a <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b5f1a:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   b5f1c:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b5f1e:	460b      	mov	r3, r1
  _buffer[0] = _address;
   b5f20:	8881      	ldrh	r1, [r0, #4]
   b5f22:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   b5f26:	2100      	movs	r1, #0
   b5f28:	e9cd 2100 	strd	r2, r1, [sp]
   b5f2c:	2201      	movs	r2, #1
   b5f2e:	4621      	mov	r1, r4
   b5f30:	6800      	ldr	r0, [r0, #0]
   b5f32:	f7ff ffa1 	bl	b5e78 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   b5f36:	b002      	add	sp, #8
   b5f38:	bd10      	pop	{r4, pc}

000b5f3a <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   b5f3a:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   b5f3c:	f100 0509 	add.w	r5, r0, #9
   b5f40:	7982      	ldrb	r2, [r0, #6]
   b5f42:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   b5f44:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   b5f46:	f7ff ffe8 	bl	b5f1a <_ZN20Adafruit_I2CRegister4readEPhh>
   b5f4a:	b178      	cbz	r0, b5f6c <_ZN20Adafruit_I2CRegister4readEv+0x32>
   b5f4c:	79a2      	ldrb	r2, [r4, #6]
   b5f4e:	4629      	mov	r1, r5
   b5f50:	4422      	add	r2, r4
  uint32_t value = 0;
   b5f52:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   b5f54:	42a2      	cmp	r2, r4
   b5f56:	d00b      	beq.n	b5f70 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   b5f58:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   b5f5a:	7a20      	ldrb	r0, [r4, #8]
   b5f5c:	b920      	cbnz	r0, b5f68 <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   b5f5e:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   b5f60:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   b5f62:	3a01      	subs	r2, #1
   b5f64:	3101      	adds	r1, #1
   b5f66:	e7f5      	b.n	b5f54 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   b5f68:	7808      	ldrb	r0, [r1, #0]
   b5f6a:	e7f9      	b.n	b5f60 <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   b5f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5f70:	bd38      	pop	{r3, r4, r5, pc}

000b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   b5f72:	b510      	push	{r4, lr}
  _register = reg;
   b5f74:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b5f76:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b5f78:	7143      	strb	r3, [r0, #5]
}
   b5f7a:	bd10      	pop	{r4, pc}

000b5f7c <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b5f80:	6800      	ldr	r0, [r0, #0]
   b5f82:	f7ff ffda 	bl	b5f3a <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   b5f86:	7923      	ldrb	r3, [r4, #4]
   b5f88:	1c5a      	adds	r2, r3, #1
   b5f8a:	2301      	movs	r3, #1
   b5f8c:	4093      	lsls	r3, r2
  val >>= _shift;
   b5f8e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   b5f90:	3b01      	subs	r3, #1
  val >>= _shift;
   b5f92:	40d0      	lsrs	r0, r2
}
   b5f94:	4018      	ands	r0, r3
   b5f96:	bd10      	pop	{r4, pc}

000b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b5f98:	b570      	push	{r4, r5, r6, lr}
   b5f9a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b5f9c:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b5f9e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b5fa0:	f7ff ffcb 	bl	b5f3a <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   b5fa4:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b5fa6:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits+1)) - 1;
   b5fa8:	3301      	adds	r3, #1
   b5faa:	2201      	movs	r2, #1
   b5fac:	409a      	lsls	r2, r3
   b5fae:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b5fb0:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;      // remove the current data at that spot
   b5fb4:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b5fb8:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   b5fba:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b5fbc:	fa03 f101 	lsl.w	r1, r3, r1
  _register->write(val, _register->width());
   b5fc0:	4329      	orrs	r1, r5
   b5fc2:	7982      	ldrb	r2, [r0, #6]
   b5fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   b5fc8:	f7ff bf8a 	b.w	b5ee0 <_ZN20Adafruit_I2CRegister5writeEmh>

000b5fcc <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   b5fcc:	4770      	bx	lr

000b5fce <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   b5fce:	b508      	push	{r3, lr}
  return ALS_Data->read();
   b5fd0:	6840      	ldr	r0, [r0, #4]
   b5fd2:	f7ff ffb2 	bl	b5f3a <_ZN20Adafruit_I2CRegister4readEv>
}
   b5fd6:	b280      	uxth	r0, r0
   b5fd8:	bd08      	pop	{r3, pc}

000b5fda <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   b5fda:	69c0      	ldr	r0, [r0, #28]
   b5fdc:	f081 0101 	eor.w	r1, r1, #1
   b5fe0:	f7ff bfda 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5fe4 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   b5fe4:	6a00      	ldr	r0, [r0, #32]
   b5fe6:	f7ff bfd7 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5fea <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   b5fea:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5fec:	f7ff bfd4 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5ff0 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   b5ff0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5ff2:	f7ff bfd1 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5ff6 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   b5ff6:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   b5ff8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5ffa:	f7ff ffbf 	bl	b5f7c <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b5ffe:	b2c0      	uxtb	r0, r0
   b6000:	bd08      	pop	{r3, pc}

000b6002 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   b6002:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6004:	f7ff bfc8 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b6008 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   b6008:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   b600a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b600c:	f7ff ffb6 	bl	b5f7c <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b6010:	b2c0      	uxtb	r0, r0
   b6012:	bd08      	pop	{r3, pc}

000b6014 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   b6014:	b510      	push	{r4, lr}
   b6016:	ed2d 8b02 	vpush	{d8}
   b601a:	4604      	mov	r4, r0
   b601c:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   b6020:	f7ff fff2 	bl	b6008 <_ZN17Adafruit_VEML77007getGainEv>
   b6024:	2802      	cmp	r0, #2
   b6026:	d018      	beq.n	b605a <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   b6028:	2803      	cmp	r0, #3
   b602a:	d013      	beq.n	b6054 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   b602c:	2801      	cmp	r0, #1
   b602e:	d103      	bne.n	b6038 <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   b6030:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   b6034:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   b6038:	4620      	mov	r0, r4
   b603a:	f7ff ffdc 	bl	b5ff6 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   b603e:	3801      	subs	r0, #1
   b6040:	280b      	cmp	r0, #11
   b6042:	d814      	bhi.n	b606e <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   b6044:	e8df f000 	tbb	[pc, r0]
   b6048:	131e1b18 	.word	0x131e1b18
   b604c:	11131313 	.word	0x11131313
   b6050:	0c131313 	.word	0x0c131313
    value *= 4;
   b6054:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   b6058:	e7ec      	b.n	b6034 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   b605a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b605e:	e7e9      	b.n	b6034 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   b6060:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   b6064:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   b6068:	e001      	b.n	b606e <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   b606a:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   b606e:	eeb0 0a48 	vmov.f32	s0, s16
   b6072:	ecbd 8b02 	vpop	{d8}
   b6076:	bd10      	pop	{r4, pc}
    value /= 2.0;
   b6078:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b607c:	e7f2      	b.n	b6064 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   b607e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   b6082:	e7ef      	b.n	b6064 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   b6084:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   b6088:	e7ec      	b.n	b6064 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
   b608a:	0000      	movs	r0, r0
   b608c:	0000      	movs	r0, r0
	...

000b6090 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   b6090:	b510      	push	{r4, lr}
   b6092:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   b6094:	6840      	ldr	r0, [r0, #4]
   b6096:	f7ff ff50 	bl	b5f3a <_ZN20Adafruit_I2CRegister4readEv>
   b609a:	ee07 0a90 	vmov	s15, r0
   b609e:	4620      	mov	r0, r4
   b60a0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b60a4:	f7ff ffb6 	bl	b6014 <_ZN17Adafruit_VEML77009normalizeEf>
   b60a8:	ee10 0a10 	vmov	r0, s0
   b60ac:	f004 ff82 	bl	bafb4 <__aeabi_f2d>
   b60b0:	a305      	add	r3, pc, #20	; (adr r3, b60c8 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   b60b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60b6:	f004 ffd5 	bl	bb064 <__aeabi_dmul>
   b60ba:	f005 facb 	bl	bb654 <__aeabi_d2f>
}
   b60be:	ee00 0a10 	vmov	s0, r0
   b60c2:	bd10      	pop	{r4, pc}
   b60c4:	f3af 8000 	nop.w
   b60c8:	487fcb92 	.word	0x487fcb92
   b60cc:	3fad7dbf 	.word	0x3fad7dbf

000b60d0 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   b60d0:	b510      	push	{r4, lr}
   b60d2:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   b60d4:	6880      	ldr	r0, [r0, #8]
   b60d6:	f7ff ff30 	bl	b5f3a <_ZN20Adafruit_I2CRegister4readEv>
   b60da:	ee07 0a90 	vmov	s15, r0
   b60de:	4620      	mov	r0, r4
   b60e0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b60e4:	f7ff ff96 	bl	b6014 <_ZN17Adafruit_VEML77009normalizeEf>
   b60e8:	ee10 0a10 	vmov	r0, s0
   b60ec:	f004 ff62 	bl	bafb4 <__aeabi_f2d>
   b60f0:	a305      	add	r3, pc, #20	; (adr r3, b6108 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   b60f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60f6:	f004 ffb5 	bl	bb064 <__aeabi_dmul>
   b60fa:	f005 faab 	bl	bb654 <__aeabi_d2f>
}
   b60fe:	ee00 0a10 	vmov	s0, r0
   b6102:	bd10      	pop	{r4, pc}
   b6104:	f3af 8000 	nop.w
   b6108:	487fcb92 	.word	0x487fcb92
   b610c:	3fad7dbf 	.word	0x3fad7dbf

000b6110 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   b6110:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b6112:	f7ff bf41 	b.w	b5f98 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b6116 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   b6116:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6118:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b611a:	200c      	movs	r0, #12
{
   b611c:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b611e:	f7fd ffba 	bl	b4096 <_Znwj>
   b6122:	4605      	mov	r5, r0
   b6124:	b118      	cbz	r0, b612e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   b6126:	9a03      	ldr	r2, [sp, #12]
   b6128:	2110      	movs	r1, #16
   b612a:	f7ff fe37 	bl	b5d9c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b612e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   b6130:	4628      	mov	r0, r5
   b6132:	f7ff fe4c 	bl	b5dce <_ZN18Adafruit_I2CDevice5beginEv>
   b6136:	4605      	mov	r5, r0
   b6138:	2800      	cmp	r0, #0
   b613a:	f000 80d2 	beq.w	b62e2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   b613e:	2010      	movs	r0, #16
   b6140:	f7fd ffa9 	bl	b4096 <_Znwj>
   b6144:	4606      	mov	r6, r0
   b6146:	b138      	cbz	r0, b6158 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   b6148:	2301      	movs	r3, #1
   b614a:	2200      	movs	r2, #0
   b614c:	e9cd 2300 	strd	r2, r3, [sp]
   b6150:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6152:	2302      	movs	r3, #2
   b6154:	f7ff fea7 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b6158:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   b615a:	2010      	movs	r0, #16
   b615c:	f7fd ff9b 	bl	b4096 <_Znwj>
   b6160:	4606      	mov	r6, r0
   b6162:	b138      	cbz	r0, b6174 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   b6164:	2300      	movs	r3, #0
   b6166:	2201      	movs	r2, #1
   b6168:	e9cd 3200 	strd	r3, r2, [sp]
   b616c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b616e:	2302      	movs	r3, #2
   b6170:	f7ff fe99 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b6174:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   b6176:	2010      	movs	r0, #16
   b6178:	f7fd ff8d 	bl	b4096 <_Znwj>
   b617c:	4606      	mov	r6, r0
   b617e:	b140      	cbz	r0, b6192 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   b6180:	2300      	movs	r3, #0
   b6182:	2201      	movs	r2, #1
   b6184:	e9cd 3200 	strd	r3, r2, [sp]
   b6188:	2302      	movs	r3, #2
   b618a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b618c:	461a      	mov	r2, r3
   b618e:	f7ff fe8a 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b6192:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   b6194:	2010      	movs	r0, #16
   b6196:	f7fd ff7e 	bl	b4096 <_Znwj>
   b619a:	4606      	mov	r6, r0
   b619c:	b148      	cbz	r0, b61b2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   b619e:	2300      	movs	r3, #0
   b61a0:	f04f 0e01 	mov.w	lr, #1
   b61a4:	e9cd 3e00 	strd	r3, lr, [sp]
   b61a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b61aa:	2302      	movs	r3, #2
   b61ac:	2203      	movs	r2, #3
   b61ae:	f7ff fe7a 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b61b2:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   b61b4:	2010      	movs	r0, #16
   b61b6:	f7fd ff6e 	bl	b4096 <_Znwj>
   b61ba:	4606      	mov	r6, r0
   b61bc:	b148      	cbz	r0, b61d2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   b61be:	2300      	movs	r3, #0
   b61c0:	f04f 0c01 	mov.w	ip, #1
   b61c4:	e9cd 3c00 	strd	r3, ip, [sp]
   b61c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b61ca:	2302      	movs	r3, #2
   b61cc:	2204      	movs	r2, #4
   b61ce:	f7ff fe6a 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b61d2:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   b61d4:	2010      	movs	r0, #16
   b61d6:	f7fd ff5e 	bl	b4096 <_Znwj>
   b61da:	4606      	mov	r6, r0
   b61dc:	b140      	cbz	r0, b61f0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   b61de:	2300      	movs	r3, #0
   b61e0:	2101      	movs	r1, #1
   b61e2:	e9cd 3100 	strd	r3, r1, [sp]
   b61e6:	2205      	movs	r2, #5
   b61e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b61ea:	2302      	movs	r3, #2
   b61ec:	f7ff fe5b 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b61f0:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   b61f2:	2010      	movs	r0, #16
   b61f4:	f7fd ff4f 	bl	b4096 <_Znwj>
   b61f8:	4606      	mov	r6, r0
   b61fa:	b140      	cbz	r0, b620e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   b61fc:	2300      	movs	r3, #0
   b61fe:	2201      	movs	r2, #1
   b6200:	e9cd 3200 	strd	r3, r2, [sp]
   b6204:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6206:	2302      	movs	r3, #2
   b6208:	2206      	movs	r2, #6
   b620a:	f7ff fe4c 	bl	b5ea6 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b620e:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   b6210:	2008      	movs	r0, #8
   b6212:	f7fd ff40 	bl	b4096 <_Znwj>
   b6216:	4606      	mov	r6, r0
   b6218:	b120      	cbz	r0, b6224 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   b621a:	6821      	ldr	r1, [r4, #0]
   b621c:	2300      	movs	r3, #0
   b621e:	2201      	movs	r2, #1
   b6220:	f7ff fea7 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6224:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   b6226:	2008      	movs	r0, #8
   b6228:	f7fd ff35 	bl	b4096 <_Znwj>
   b622c:	4606      	mov	r6, r0
   b622e:	b120      	cbz	r0, b623a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   b6230:	2301      	movs	r3, #1
   b6232:	6821      	ldr	r1, [r4, #0]
   b6234:	461a      	mov	r2, r3
   b6236:	f7ff fe9c 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b623a:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   b623c:	2008      	movs	r0, #8
   b623e:	f7fd ff2a 	bl	b4096 <_Znwj>
   b6242:	4606      	mov	r6, r0
   b6244:	b120      	cbz	r0, b6250 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   b6246:	6821      	ldr	r1, [r4, #0]
   b6248:	2304      	movs	r3, #4
   b624a:	2202      	movs	r2, #2
   b624c:	f7ff fe91 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6250:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   b6252:	2008      	movs	r0, #8
   b6254:	f7fd ff1f 	bl	b4096 <_Znwj>
   b6258:	4606      	mov	r6, r0
   b625a:	b120      	cbz	r0, b6266 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   b625c:	6821      	ldr	r1, [r4, #0]
   b625e:	2306      	movs	r3, #6
   b6260:	2204      	movs	r2, #4
   b6262:	f7ff fe86 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6266:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   b6268:	2008      	movs	r0, #8
   b626a:	f7fd ff14 	bl	b4096 <_Znwj>
   b626e:	4606      	mov	r6, r0
   b6270:	b120      	cbz	r0, b627c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   b6272:	6821      	ldr	r1, [r4, #0]
   b6274:	230b      	movs	r3, #11
   b6276:	2202      	movs	r2, #2
   b6278:	f7ff fe7b 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b627c:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   b627e:	2008      	movs	r0, #8
   b6280:	f7fd ff09 	bl	b4096 <_Znwj>
   b6284:	4606      	mov	r6, r0
   b6286:	b120      	cbz	r0, b6292 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   b6288:	6961      	ldr	r1, [r4, #20]
   b628a:	2300      	movs	r3, #0
   b628c:	2201      	movs	r2, #1
   b628e:	f7ff fe70 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b6292:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b6294:	2008      	movs	r0, #8
   b6296:	f7fd fefe 	bl	b4096 <_Znwj>
   b629a:	4606      	mov	r6, r0
   b629c:	b120      	cbz	r0, b62a8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   b629e:	6961      	ldr	r1, [r4, #20]
   b62a0:	2301      	movs	r3, #1
   b62a2:	2202      	movs	r2, #2
   b62a4:	f7ff fe65 	bl	b5f72 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   b62a8:	2100      	movs	r1, #0
   b62aa:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b62ac:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   b62ae:	f7ff fe94 	bl	b5fda <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   b62b2:	2100      	movs	r1, #0
   b62b4:	4620      	mov	r0, r4
   b62b6:	f7ff fe95 	bl	b5fe4 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   b62ba:	2100      	movs	r1, #0
   b62bc:	4620      	mov	r0, r4
   b62be:	f7ff fe94 	bl	b5fea <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   b62c2:	2100      	movs	r1, #0
   b62c4:	4620      	mov	r0, r4
   b62c6:	f7ff fe9c 	bl	b6002 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   b62ca:	2100      	movs	r1, #0
   b62cc:	4620      	mov	r0, r4
   b62ce:	f7ff fe8f 	bl	b5ff0 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   b62d2:	2100      	movs	r1, #0
   b62d4:	4620      	mov	r0, r4
   b62d6:	f7ff ff1b 	bl	b6110 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   b62da:	2101      	movs	r1, #1
   b62dc:	4620      	mov	r0, r4
   b62de:	f7ff fe7c 	bl	b5fda <_ZN17Adafruit_VEML77006enableEb>
}
   b62e2:	4628      	mov	r0, r5
   b62e4:	b004      	add	sp, #16
   b62e6:	bd70      	pop	{r4, r5, r6, pc}

000b62e8 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b62e8:	4770      	bx	lr

000b62ea <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b62ea:	b510      	push	{r4, lr}
}
   b62ec:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b62ee:	4604      	mov	r4, r0
}
   b62f0:	f7fd fed5 	bl	b409e <_ZdlPvj>
   b62f4:	4620      	mov	r0, r4
   b62f6:	bd10      	pop	{r4, pc}

000b62f8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b62f8:	6803      	ldr	r3, [r0, #0]
   b62fa:	b2c9      	uxtb	r1, r1
   b62fc:	689b      	ldr	r3, [r3, #8]
   b62fe:	4718      	bx	r3

000b6300 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6300:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6302:	4d03      	ldr	r5, [pc, #12]	; (b6310 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6304:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6308:	e9c0 5100 	strd	r5, r1, [r0]
}
   b630c:	bd30      	pop	{r4, r5, pc}
   b630e:	bf00      	nop
   b6310:	000bc3b0 	.word	0x000bc3b0

000b6314 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6314:	6840      	ldr	r0, [r0, #4]
   b6316:	f003 bb39 	b.w	b998c <_ZN7TwoWire5beginEv>

000b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b631a:	b510      	push	{r4, lr}
   b631c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b631e:	6800      	ldr	r0, [r0, #0]
   b6320:	f003 fb95 	bl	b9a4e <_ZN7TwoWire6unlockEv>
   b6324:	4620      	mov	r0, r4
   b6326:	bd10      	pop	{r4, pc}

000b6328 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b6328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b632c:	b08a      	sub	sp, #40	; 0x28
   b632e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b6330:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6332:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b6334:	f003 fb82 	bl	b9a3c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b6338:	221e      	movs	r2, #30
   b633a:	2100      	movs	r1, #0
   b633c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b633e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b6340:	f005 fa4e 	bl	bb7e0 <memset>
		size_t framAddr = 0;
   b6344:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b6346:	b1ef      	cbz	r7, b6384 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b6348:	6823      	ldr	r3, [r4, #0]
   b634a:	2f1e      	cmp	r7, #30
   b634c:	46b8      	mov	r8, r7
   b634e:	bf28      	it	cs
   b6350:	f04f 081e 	movcs.w	r8, #30
   b6354:	68dd      	ldr	r5, [r3, #12]
   b6356:	aa02      	add	r2, sp, #8
   b6358:	4643      	mov	r3, r8
   b635a:	4631      	mov	r1, r6
   b635c:	4620      	mov	r0, r4
   b635e:	47a8      	blx	r5
			if (!result) {
   b6360:	4605      	mov	r5, r0
   b6362:	b958      	cbnz	r0, b637c <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b6364:	480a      	ldr	r0, [pc, #40]	; (b6390 <_ZN6MB85RC5eraseEv+0x68>)
   b6366:	490b      	ldr	r1, [pc, #44]	; (b6394 <_ZN6MB85RC5eraseEv+0x6c>)
   b6368:	4632      	mov	r2, r6
   b636a:	f7fe f92f 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b636e:	a801      	add	r0, sp, #4
   b6370:	f7ff ffd3 	bl	b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b6374:	4628      	mov	r0, r5
   b6376:	b00a      	add	sp, #40	; 0x28
   b6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b637c:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b6380:	4446      	add	r6, r8
		while(totalLen > 0) {
   b6382:	e7e0      	b.n	b6346 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b6384:	a801      	add	r0, sp, #4
   b6386:	f7ff ffc8 	bl	b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b638a:	2501      	movs	r5, #1
   b638c:	e7f2      	b.n	b6374 <_ZN6MB85RC5eraseEv+0x4c>
   b638e:	bf00      	nop
   b6390:	2003e66c 	.word	0x2003e66c
   b6394:	000bc37c 	.word	0x000bc37c

000b6398 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b639c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b639e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b63a0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b63a2:	460d      	mov	r5, r1
   b63a4:	4616      	mov	r6, r2
   b63a6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b63a8:	f003 fb48 	bl	b9a3c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b63ac:	b1a7      	cbz	r7, b63d8 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b63ae:	68e1      	ldr	r1, [r4, #12]
   b63b0:	6860      	ldr	r0, [r4, #4]
   b63b2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b63b6:	f003 fb1f 	bl	b99f8 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b63ba:	0a29      	lsrs	r1, r5, #8
   b63bc:	6860      	ldr	r0, [r4, #4]
   b63be:	f7ff ff9b 	bl	b62f8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b63c2:	4629      	mov	r1, r5
   b63c4:	6860      	ldr	r0, [r4, #4]
   b63c6:	f7ff ff97 	bl	b62f8 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b63ca:	6860      	ldr	r0, [r4, #4]
   b63cc:	2100      	movs	r1, #0
   b63ce:	f003 fb2e 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b63d2:	b148      	cbz	r0, b63e8 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b63d4:	2400      	movs	r4, #0
   b63d6:	e000      	b.n	b63da <_ZN6MB85RC8readDataEjPhj+0x42>
   b63d8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b63da:	a801      	add	r0, sp, #4
   b63dc:	f7ff ff9d 	bl	b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b63e0:	4620      	mov	r0, r4
   b63e2:	b003      	add	sp, #12
   b63e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b63e8:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b63ea:	7b21      	ldrb	r1, [r4, #12]
   b63ec:	6860      	ldr	r0, [r4, #4]
   b63ee:	46b8      	mov	r8, r7
   b63f0:	bf28      	it	cs
   b63f2:	f04f 0820 	movcs.w	r8, #32
   b63f6:	2301      	movs	r3, #1
   b63f8:	4642      	mov	r2, r8
   b63fa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b63fe:	f003 fae2 	bl	b99c6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6402:	f004 fbdd 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6406:	6803      	ldr	r3, [r0, #0]
   b6408:	691b      	ldr	r3, [r3, #16]
   b640a:	4798      	blx	r3
   b640c:	4540      	cmp	r0, r8
   b640e:	dbe1      	blt.n	b63d4 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6410:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6414:	f004 fbd4 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6418:	6803      	ldr	r3, [r0, #0]
   b641a:	695b      	ldr	r3, [r3, #20]
   b641c:	4798      	blx	r3
   b641e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6422:	454e      	cmp	r6, r9
   b6424:	d1f6      	bne.n	b6414 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6426:	4445      	add	r5, r8
				dataLen--;
   b6428:	eba7 0708 	sub.w	r7, r7, r8
   b642c:	e7be      	b.n	b63ac <_ZN6MB85RC8readDataEjPhj+0x14>

000b642e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b642e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6432:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6434:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6436:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6438:	460e      	mov	r6, r1
   b643a:	4690      	mov	r8, r2
   b643c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b643e:	f003 fafd 	bl	b9a3c <_ZN7TwoWire4lockEv>
   b6442:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6446:	f1b9 0f00 	cmp.w	r9, #0
   b644a:	d02a      	beq.n	b64a2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b644c:	b34d      	cbz	r5, b64a2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b644e:	68e1      	ldr	r1, [r4, #12]
   b6450:	6860      	ldr	r0, [r4, #4]
   b6452:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6456:	f003 facf 	bl	b99f8 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b645a:	0a31      	lsrs	r1, r6, #8
   b645c:	6860      	ldr	r0, [r4, #4]
   b645e:	f7ff ff4b 	bl	b62f8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6462:	6860      	ldr	r0, [r4, #4]
   b6464:	4631      	mov	r1, r6
   b6466:	f7ff ff47 	bl	b62f8 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b646a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b646e:	4647      	mov	r7, r8
   b6470:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6474:	6860      	ldr	r0, [r4, #4]
   b6476:	f817 1b01 	ldrb.w	r1, [r7], #1
   b647a:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b647c:	3d01      	subs	r5, #1
				wire.write(*data);
   b647e:	689b      	ldr	r3, [r3, #8]
   b6480:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6482:	4555      	cmp	r5, sl
   b6484:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6488:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b648a:	d001      	beq.n	b6490 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b648c:	2d00      	cmp	r5, #0
   b648e:	d1f1      	bne.n	b6474 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6490:	6860      	ldr	r0, [r4, #4]
   b6492:	2101      	movs	r1, #1
   b6494:	f003 facb 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6498:	2800      	cmp	r0, #0
   b649a:	d0d7      	beq.n	b644c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b649c:	f04f 0900 	mov.w	r9, #0
   b64a0:	e7d1      	b.n	b6446 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b64a2:	a801      	add	r0, sp, #4
   b64a4:	f7ff ff39 	bl	b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b64a8:	4648      	mov	r0, r9
   b64aa:	b003      	add	sp, #12
   b64ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b64b0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b64b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b64b4:	b08b      	sub	sp, #44	; 0x2c
   b64b6:	460e      	mov	r6, r1
   b64b8:	4615      	mov	r5, r2
   b64ba:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b64bc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b64be:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b64c0:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b64c2:	f003 fabb 	bl	b9a3c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b64c6:	42ae      	cmp	r6, r5
   b64c8:	d229      	bcs.n	b651e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b64ca:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b64cc:	4425      	add	r5, r4
			while(numBytes > 0) {
   b64ce:	b18c      	cbz	r4, b64f4 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b64d0:	2c1e      	cmp	r4, #30
   b64d2:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b64d4:	f8d8 3000 	ldr.w	r3, [r8]
   b64d8:	bf28      	it	cs
   b64da:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b64dc:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b64de:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b64e2:	aa02      	add	r2, sp, #8
   b64e4:	463b      	mov	r3, r7
   b64e6:	4631      	mov	r1, r6
   b64e8:	4640      	mov	r0, r8
				framAddrTo -= count;
   b64ea:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b64ec:	47c8      	blx	r9
				if (!result) {
   b64ee:	b948      	cbnz	r0, b6504 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b64f0:	2400      	movs	r4, #0
   b64f2:	e000      	b.n	b64f6 <_ZN6MB85RC8moveDataEjjj+0x46>
   b64f4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b64f6:	a801      	add	r0, sp, #4
   b64f8:	f7ff ff0f 	bl	b631a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b64fc:	4620      	mov	r0, r4
   b64fe:	b00b      	add	sp, #44	; 0x2c
   b6500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6504:	f8d8 3000 	ldr.w	r3, [r8]
   b6508:	aa02      	add	r2, sp, #8
   b650a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b650e:	4629      	mov	r1, r5
   b6510:	463b      	mov	r3, r7
   b6512:	4640      	mov	r0, r8
   b6514:	47c8      	blx	r9
				if (!result) {
   b6516:	2800      	cmp	r0, #0
   b6518:	d0ea      	beq.n	b64f0 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b651a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b651c:	e7d7      	b.n	b64ce <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b651e:	d9e9      	bls.n	b64f4 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6520:	2c00      	cmp	r4, #0
   b6522:	d0e7      	beq.n	b64f4 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6524:	f8d8 3000 	ldr.w	r3, [r8]
   b6528:	2c1e      	cmp	r4, #30
   b652a:	4627      	mov	r7, r4
   b652c:	bf28      	it	cs
   b652e:	271e      	movcs	r7, #30
   b6530:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6534:	aa02      	add	r2, sp, #8
   b6536:	463b      	mov	r3, r7
   b6538:	4631      	mov	r1, r6
   b653a:	4640      	mov	r0, r8
   b653c:	47c8      	blx	r9
				if (!result) {
   b653e:	2800      	cmp	r0, #0
   b6540:	d0d6      	beq.n	b64f0 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6542:	f8d8 3000 	ldr.w	r3, [r8]
   b6546:	aa02      	add	r2, sp, #8
   b6548:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b654c:	4629      	mov	r1, r5
   b654e:	463b      	mov	r3, r7
   b6550:	4640      	mov	r0, r8
   b6552:	47c8      	blx	r9
				if (!result) {
   b6554:	2800      	cmp	r0, #0
   b6556:	d0cb      	beq.n	b64f0 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6558:	443e      	add	r6, r7
				framAddrTo += count;
   b655a:	443d      	add	r5, r7
				numBytes -= count;
   b655c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b655e:	e7df      	b.n	b6520 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6560 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   b6560:	2040      	movs	r0, #64	; 0x40
   b6562:	4770      	bx	lr

000b6564 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   b6564:	2000      	movs	r0, #0
   b6566:	4770      	bx	lr

000b6568 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   b6568:	2080      	movs	r0, #128	; 0x80
   b656a:	4770      	bx	lr

000b656c <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   b656c:	20ff      	movs	r0, #255	; 0xff
   b656e:	4770      	bx	lr

000b6570 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   b6570:	4770      	bx	lr

000b6572 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   b6572:	4770      	bx	lr

000b6574 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   b6574:	4770      	bx	lr

000b6576 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   b6576:	4770      	bx	lr

000b6578 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   b6578:	b510      	push	{r4, lr}
}
   b657a:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   b657c:	4604      	mov	r4, r0
}
   b657e:	f7fd fd8e 	bl	b409e <_ZdlPvj>
   b6582:	4620      	mov	r0, r4
   b6584:	bd10      	pop	{r4, pc}

000b6586 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   b6586:	b510      	push	{r4, lr}
}
   b6588:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   b658a:	4604      	mov	r4, r0
}
   b658c:	f7fd fd87 	bl	b409e <_ZdlPvj>
   b6590:	4620      	mov	r0, r4
   b6592:	bd10      	pop	{r4, pc}

000b6594 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   b6594:	b510      	push	{r4, lr}
}
   b6596:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   b6598:	4604      	mov	r4, r0
}
   b659a:	f7fd fd80 	bl	b409e <_ZdlPvj>
   b659e:	4620      	mov	r0, r4
   b65a0:	bd10      	pop	{r4, pc}

000b65a2 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   b65a2:	b510      	push	{r4, lr}
}
   b65a4:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   b65a6:	4604      	mov	r4, r0
}
   b65a8:	f7fd fd79 	bl	b409e <_ZdlPvj>
   b65ac:	4620      	mov	r0, r4
   b65ae:	bd10      	pop	{r4, pc}

000b65b0 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   b65b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   b65b4:	6803      	ldr	r3, [r0, #0]
   b65b6:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   b65b8:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   b65ba:	4798      	blx	r3
   b65bc:	2210      	movs	r2, #16
   b65be:	4601      	mov	r1, r0
   b65c0:	4668      	mov	r0, sp
   b65c2:	f005 f90d 	bl	bb7e0 <memset>
	size_t len = length();
   b65c6:	6823      	ldr	r3, [r4, #0]
   b65c8:	4620      	mov	r0, r4
   b65ca:	689b      	ldr	r3, [r3, #8]
   b65cc:	4798      	blx	r3
	size_t offset = 0;
   b65ce:	2500      	movs	r5, #0
	size_t len = length();
   b65d0:	4607      	mov	r7, r0
	bool bResult = false;
   b65d2:	4628      	mov	r0, r5
	while(offset < len) {
   b65d4:	42bd      	cmp	r5, r7
   b65d6:	d20e      	bcs.n	b65f6 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   b65d8:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   b65da:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   b65dc:	2e10      	cmp	r6, #16
   b65de:	bf28      	it	cs
   b65e0:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   b65e2:	f8d3 8018 	ldr.w	r8, [r3, #24]
   b65e6:	466a      	mov	r2, sp
   b65e8:	4633      	mov	r3, r6
   b65ea:	4629      	mov	r1, r5
   b65ec:	4620      	mov	r0, r4
   b65ee:	47c0      	blx	r8
		if (!bResult) {
   b65f0:	b108      	cbz	r0, b65f6 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   b65f2:	4435      	add	r5, r6
	while(offset < len) {
   b65f4:	e7ee      	b.n	b65d4 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   b65f6:	b004      	add	sp, #16
   b65f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b65fc <_ZN7TwoWire5writeEj.isra.0>:
   b65fc:	6803      	ldr	r3, [r0, #0]
   b65fe:	b2c9      	uxtb	r1, r1
   b6600:	689b      	ldr	r3, [r3, #8]
   b6602:	4718      	bx	r3

000b6604 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   b6604:	f44f 7380 	mov.w	r3, #256	; 0x100
   b6608:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   b660a:	f240 1301 	movw	r3, #257	; 0x101
   b660e:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   b6610:	2300      	movs	r3, #0
   b6612:	8203      	strh	r3, [r0, #16]
}
   b6614:	4770      	bx	lr
	...

000b6618 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   b6618:	4a06      	ldr	r2, [pc, #24]	; (b6634 <_ZN12MCP79410TimeC1Ev+0x1c>)
   b661a:	6002      	str	r2, [r0, #0]
   b661c:	b508      	push	{r3, lr}
   b661e:	4a06      	ldr	r2, [pc, #24]	; (b6638 <_ZN12MCP79410TimeC1Ev+0x20>)
   b6620:	6042      	str	r2, [r0, #4]
   b6622:	f240 7204 	movw	r2, #1796	; 0x704
   b6626:	8102      	strh	r2, [r0, #8]
   b6628:	2200      	movs	r2, #0
   b662a:	7442      	strb	r2, [r0, #17]
	clear();
   b662c:	f7ff ffea 	bl	b6604 <_ZN12MCP79410Time5clearEv>
}
   b6630:	bd08      	pop	{r3, pc}
   b6632:	bf00      	nop
   b6634:	000bc490 	.word	0x000bc490
   b6638:	03020100 	.word	0x03020100

000b663c <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b663c:	0903      	lsrs	r3, r0, #4
}
   b663e:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b6640:	f000 000f 	and.w	r0, r0, #15
}
   b6644:	fb02 0003 	mla	r0, r2, r3, r0
   b6648:	4770      	bx	lr

000b664a <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   b664a:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   b664c:	7a80      	ldrb	r0, [r0, #10]
   b664e:	f7ff fff5 	bl	b663c <_ZN12MCP79410Time8bcdToIntEh>
}
   b6652:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   b6656:	bd08      	pop	{r3, pc}

000b6658 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   b6658:	7ac0      	ldrb	r0, [r0, #11]
   b665a:	f000 001f 	and.w	r0, r0, #31
   b665e:	f7ff bfed 	b.w	b663c <_ZN12MCP79410Time8bcdToIntEh>

000b6662 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   b6662:	7b00      	ldrb	r0, [r0, #12]
   b6664:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   b6668:	f7ff bfe8 	b.w	b663c <_ZN12MCP79410Time8bcdToIntEh>

000b666c <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   b666c:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   b666e:	7b81      	ldrb	r1, [r0, #14]
   b6670:	064a      	lsls	r2, r1, #25
   b6672:	d50d      	bpl.n	b6690 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   b6674:	f001 001f 	and.w	r0, r1, #31
   b6678:	f7ff ffe0 	bl	b663c <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   b667c:	068b      	lsls	r3, r1, #26
   b667e:	d503      	bpl.n	b6688 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   b6680:	280c      	cmp	r0, #12
   b6682:	d000      	beq.n	b6686 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   b6684:	300c      	adds	r0, #12
}
   b6686:	bd08      	pop	{r3, pc}
				return 0;
   b6688:	280c      	cmp	r0, #12
   b668a:	bf08      	it	eq
   b668c:	2000      	moveq	r0, #0
   b668e:	e7fa      	b.n	b6686 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   b6690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   b6694:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   b6698:	f7ff bfd0 	b.w	b663c <_ZN12MCP79410Time8bcdToIntEh>

000b669c <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   b669c:	7bc0      	ldrb	r0, [r0, #15]
   b669e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b66a2:	f7ff bfcb 	b.w	b663c <_ZN12MCP79410Time8bcdToIntEh>

000b66a6 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   b66a6:	7c00      	ldrb	r0, [r0, #16]
   b66a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b66ac:	f7ff bfc6 	b.w	b663c <_ZN12MCP79410Time8bcdToIntEh>

000b66b0 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   b66b0:	b510      	push	{r4, lr}
   b66b2:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   b66b4:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   b66b6:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   b66b8:	2100      	movs	r1, #0
   b66ba:	a801      	add	r0, sp, #4
   b66bc:	f005 f890 	bl	bb7e0 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   b66c0:	4620      	mov	r0, r4
   b66c2:	f7ff ffc2 	bl	b664a <_ZNK12MCP79410Time7getYearEv>
   b66c6:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   b66ca:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   b66cc:	4620      	mov	r0, r4
   b66ce:	f7ff ffc3 	bl	b6658 <_ZNK12MCP79410Time8getMonthEv>
   b66d2:	3801      	subs	r0, #1
   b66d4:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   b66d6:	4620      	mov	r0, r4
   b66d8:	f7ff ffc3 	bl	b6662 <_ZNK12MCP79410Time13getDayOfMonthEv>
   b66dc:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   b66de:	4620      	mov	r0, r4
   b66e0:	f7ff ffc4 	bl	b666c <_ZNK12MCP79410Time7getHourEv>
   b66e4:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   b66e6:	4620      	mov	r0, r4
   b66e8:	f7ff ffd8 	bl	b669c <_ZNK12MCP79410Time9getMinuteEv>
   b66ec:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   b66ee:	4620      	mov	r0, r4
   b66f0:	f7ff ffd9 	bl	b66a6 <_ZNK12MCP79410Time9getSecondEv>
   b66f4:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   b66f6:	a801      	add	r0, sp, #4
   b66f8:	f002 fbd0 	bl	b8e9c <mktime>
}
   b66fc:	b00a      	add	sp, #40	; 0x28
   b66fe:	bd10      	pop	{r4, pc}

000b6700 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   b6700:	220a      	movs	r2, #10
   b6702:	fb90 f1f2 	sdiv	r1, r0, r2
   b6706:	fb91 f3f2 	sdiv	r3, r1, r2
   b670a:	fb02 1313 	mls	r3, r2, r3, r1
   b670e:	011b      	lsls	r3, r3, #4
   b6710:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   b6712:	fb02 0011 	mls	r0, r2, r1, r0
   b6716:	4318      	orrs	r0, r3
}
   b6718:	b2c0      	uxtb	r0, r0
   b671a:	4770      	bx	lr

000b671c <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   b671c:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   b671e:	b510      	push	{r4, lr}
   b6720:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   b6722:	fb91 f0f3 	sdiv	r0, r1, r3
   b6726:	fb00 1013 	mls	r0, r0, r3, r1
   b672a:	f7ff ffe9 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
   b672e:	72a0      	strb	r0, [r4, #10]
}
   b6730:	bd10      	pop	{r4, pc}

000b6732 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   b6732:	b510      	push	{r4, lr}
   b6734:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   b6736:	4608      	mov	r0, r1
   b6738:	f7ff ffe2 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
   b673c:	72e0      	strb	r0, [r4, #11]
}
   b673e:	bd10      	pop	{r4, pc}

000b6740 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   b6740:	b510      	push	{r4, lr}
   b6742:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   b6744:	4608      	mov	r0, r1
   b6746:	f7ff ffdb 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   b674a:	7b23      	ldrb	r3, [r4, #12]
   b674c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   b6750:	4318      	orrs	r0, r3
   b6752:	7320      	strb	r0, [r4, #12]
}
   b6754:	bd10      	pop	{r4, pc}

000b6756 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   b6756:	b510      	push	{r4, lr}
   b6758:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   b675a:	1c48      	adds	r0, r1, #1
   b675c:	f7ff ffd0 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   b6760:	7b63      	ldrb	r3, [r4, #13]
   b6762:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   b6766:	4318      	orrs	r0, r3
   b6768:	7360      	strb	r0, [r4, #13]
}
   b676a:	bd10      	pop	{r4, pc}

000b676c <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   b676c:	b510      	push	{r4, lr}
   b676e:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   b6770:	4608      	mov	r0, r1
   b6772:	f7ff ffc5 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
   b6776:	73a0      	strb	r0, [r4, #14]
}
   b6778:	bd10      	pop	{r4, pc}

000b677a <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   b677a:	b510      	push	{r4, lr}
   b677c:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   b677e:	4608      	mov	r0, r1
   b6780:	f7ff ffbe 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
   b6784:	73e0      	strb	r0, [r4, #15]
}
   b6786:	bd10      	pop	{r4, pc}

000b6788 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   b6788:	b510      	push	{r4, lr}
   b678a:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   b678c:	4608      	mov	r0, r1
   b678e:	f7ff ffb7 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   b6792:	7c23      	ldrb	r3, [r4, #16]
   b6794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   b6798:	4318      	orrs	r0, r3
   b679a:	7420      	strb	r0, [r4, #16]
}
   b679c:	bd10      	pop	{r4, pc}

000b679e <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   b679e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67a0:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   b67a2:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   b67a4:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   b67a8:	f004 ffd4 	bl	bb754 <gmtime>
   b67ac:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   b67ae:	6941      	ldr	r1, [r0, #20]
   b67b0:	4620      	mov	r0, r4
   b67b2:	f7ff ffb3 	bl	b671c <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   b67b6:	6929      	ldr	r1, [r5, #16]
   b67b8:	4620      	mov	r0, r4
   b67ba:	3101      	adds	r1, #1
   b67bc:	f7ff ffb9 	bl	b6732 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   b67c0:	68e9      	ldr	r1, [r5, #12]
   b67c2:	4620      	mov	r0, r4
   b67c4:	f7ff ffbc 	bl	b6740 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   b67c8:	69a9      	ldr	r1, [r5, #24]
   b67ca:	4620      	mov	r0, r4
   b67cc:	f7ff ffc3 	bl	b6756 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   b67d0:	68a9      	ldr	r1, [r5, #8]
   b67d2:	4620      	mov	r0, r4
   b67d4:	f7ff ffca 	bl	b676c <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   b67d8:	6869      	ldr	r1, [r5, #4]
   b67da:	4620      	mov	r0, r4
   b67dc:	f7ff ffcd 	bl	b677a <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   b67e0:	6829      	ldr	r1, [r5, #0]
   b67e2:	293b      	cmp	r1, #59	; 0x3b
   b67e4:	bfa8      	it	ge
   b67e6:	213b      	movge	r1, #59	; 0x3b
   b67e8:	4620      	mov	r0, r4
   b67ea:	f7ff ffcd 	bl	b6788 <_ZN12MCP79410Time9setSecondEi>
}
   b67ee:	b003      	add	sp, #12
   b67f0:	bd30      	pop	{r4, r5, pc}
	...

000b67f4 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b67f4:	4a05      	ldr	r2, [pc, #20]	; (b680c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b67f6:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b67f8:	e9c0 2100 	strd	r2, r1, [r0]
   b67fc:	4a04      	ldr	r2, [pc, #16]	; (b6810 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   b67fe:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b6800:	4a04      	ldr	r2, [pc, #16]	; (b6814 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   b6802:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b6804:	4a04      	ldr	r2, [pc, #16]	; (b6818 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b6806:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b6808:	6142      	str	r2, [r0, #20]
}
   b680a:	4770      	bx	lr
   b680c:	000bc4c4 	.word	0x000bc4c4
   b6810:	03010000 	.word	0x03010000
   b6814:	000bc46c 	.word	0x000bc46c
   b6818:	000bc4a0 	.word	0x000bc4a0

000b681c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   b681c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6820:	4604      	mov	r4, r0
   b6822:	460f      	mov	r7, r1
   b6824:	4690      	mov	r8, r2
   b6826:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b6828:	2600      	movs	r6, #0

	while(offset < bufLen) {
   b682a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b682c:	429e      	cmp	r6, r3
   b682e:	d231      	bcs.n	b6894 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   b6830:	6860      	ldr	r0, [r4, #4]
   b6832:	4639      	mov	r1, r7
   b6834:	f003 f8dc 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6838:	6860      	ldr	r0, [r4, #4]
   b683a:	eb08 0106 	add.w	r1, r8, r6
   b683e:	f7ff fedd 	bl	b65fc <_ZN7TwoWire5writeEj.isra.0>
		stat = wire.endTransmission(false);
   b6842:	6860      	ldr	r0, [r4, #4]
   b6844:	2100      	movs	r1, #0
   b6846:	f003 f8f2 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b684a:	4605      	mov	r5, r0
   b684c:	b9d0      	cbnz	r0, b6884 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   b684e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b6850:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   b6852:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b6854:	2a20      	cmp	r2, #32
   b6856:	f04f 0301 	mov.w	r3, #1
   b685a:	bf28      	it	cs
   b685c:	2220      	movcs	r2, #32
   b685e:	4639      	mov	r1, r7
   b6860:	f003 f8b1 	bl	b99c6 <_ZN7TwoWire11requestFromEhjh>
   b6864:	eb09 0b06 	add.w	fp, r9, r6
   b6868:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   b686a:	eb0b 0a00 	add.w	sl, fp, r0
   b686e:	45da      	cmp	sl, fp
   b6870:	d006      	beq.n	b6880 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   b6872:	6860      	ldr	r0, [r4, #4]
   b6874:	6803      	ldr	r3, [r0, #0]
   b6876:	695b      	ldr	r3, [r3, #20]
   b6878:	4798      	blx	r3
   b687a:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   b687e:	e7f6      	b.n	b686e <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   b6880:	442e      	add	r6, r5
	while(offset < bufLen) {
   b6882:	e7d2      	b.n	b682a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   b6884:	4602      	mov	r2, r0
   b6886:	4904      	ldr	r1, [pc, #16]	; (b6898 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   b6888:	4804      	ldr	r0, [pc, #16]	; (b689c <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   b688a:	f7fd fe9f 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   b688e:	4628      	mov	r0, r5
   b6890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6894:	2500      	movs	r5, #0
	return stat;
   b6896:	e7fa      	b.n	b688e <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   b6898:	000bc3c4 	.word	0x000bc3c4
   b689c:	2003e614 	.word	0x2003e614

000b68a0 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b68a4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68a8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b68aa:	6803      	ldr	r3, [r0, #0]
   b68ac:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68ae:	4605      	mov	r5, r0
   b68b0:	460c      	mov	r4, r1
   b68b2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b68b4:	4798      	blx	r3
   b68b6:	4580      	cmp	r8, r0
   b68b8:	d80d      	bhi.n	b68d6 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b68ba:	3420      	adds	r4, #32
   b68bc:	6868      	ldr	r0, [r5, #4]
   b68be:	9600      	str	r6, [sp, #0]
   b68c0:	463b      	mov	r3, r7
   b68c2:	b2e2      	uxtb	r2, r4
   b68c4:	216f      	movs	r1, #111	; 0x6f
   b68c6:	f7ff ffa9 	bl	b681c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b68ca:	fab0 f080 	clz	r0, r0
   b68ce:	0940      	lsrs	r0, r0, #5
}
   b68d0:	b002      	add	sp, #8
   b68d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b68d6:	2000      	movs	r0, #0
   b68d8:	e7fa      	b.n	b68d0 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000b68da <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b68de:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68e2:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b68e4:	6803      	ldr	r3, [r0, #0]
   b68e6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b68e8:	4604      	mov	r4, r0
   b68ea:	460d      	mov	r5, r1
   b68ec:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b68ee:	4798      	blx	r3
   b68f0:	4580      	cmp	r8, r0
   b68f2:	d80c      	bhi.n	b690e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   b68f4:	6860      	ldr	r0, [r4, #4]
   b68f6:	9600      	str	r6, [sp, #0]
   b68f8:	463b      	mov	r3, r7
   b68fa:	b2ea      	uxtb	r2, r5
   b68fc:	2157      	movs	r1, #87	; 0x57
   b68fe:	f7ff ff8d 	bl	b681c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b6902:	fab0 f080 	clz	r0, r0
   b6906:	0940      	lsrs	r0, r0, #5
}
   b6908:	b002      	add	sp, #8
   b690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b690e:	2000      	movs	r0, #0
   b6910:	e7fa      	b.n	b6908 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000b6912 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>:
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b6912:	2b01      	cmp	r3, #1
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   b6914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6916:	4614      	mov	r4, r2
   b6918:	461e      	mov	r6, r3
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b691a:	d824      	bhi.n	b6966 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x54>
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   b691c:	2b00      	cmp	r3, #0
   b691e:	bf0c      	ite	eq
   b6920:	2307      	moveq	r3, #7
   b6922:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   b6924:	9300      	str	r3, [sp, #0]
   b6926:	460a      	mov	r2, r1
   b6928:	ab02      	add	r3, sp, #8
   b692a:	216f      	movs	r1, #111	; 0x6f
   b692c:	f7ff ff76 	bl	b681c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6930:	4605      	mov	r5, r0
   b6932:	b9a8      	cbnz	r0, b6960 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawSecond = buf[0];
   b6934:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6938:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   b693a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b693e:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   b6940:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b6944:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   b6946:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b694a:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   b694c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b6950:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   b6952:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6956:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   b6958:	b9f6      	cbnz	r6, b6998 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x86>
				time.rawYear = buf[6];
   b695a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b695e:	72a3      	strb	r3, [r4, #10]
}
   b6960:	4628      	mov	r0, r5
   b6962:	b004      	add	sp, #16
   b6964:	bd70      	pop	{r4, r5, r6, pc}
	if (timeMode == TIME_MODE_POWER) {
   b6966:	2b02      	cmp	r3, #2
   b6968:	d11c      	bne.n	b69a4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x92>
		stat = deviceRead(REG_I2C_ADDR, addr, buf, 4);
   b696a:	2304      	movs	r3, #4
   b696c:	9300      	str	r3, [sp, #0]
   b696e:	460a      	mov	r2, r1
   b6970:	ab02      	add	r3, sp, #8
   b6972:	216f      	movs	r1, #111	; 0x6f
   b6974:	f7ff ff52 	bl	b681c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6978:	4605      	mov	r5, r0
   b697a:	2800      	cmp	r0, #0
   b697c:	d1f0      	bne.n	b6960 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawMinute = buf[0];
   b697e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6982:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[1];
   b6984:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b6988:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfMonth = buf[2];
   b698a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b698e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[3];
   b6990:	f89d 300b 	ldrb.w	r3, [sp, #11]
			time.rawSecond = 0;
   b6994:	7420      	strb	r0, [r4, #16]
			time.rawMonth = buf[3];
   b6996:	72e3      	strb	r3, [r4, #11]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
   b6998:	f003 fe9a 	bl	ba6d0 <_ZN9TimeClass4yearEv>
   b699c:	f7ff feb0 	bl	b6700 <_ZN12MCP79410Time8intToBcdEi>
   b69a0:	72a0      	strb	r0, [r4, #10]
   b69a2:	e7dd      	b.n	b6960 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
	int stat = -1;
   b69a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return stat;
   b69a8:	e7da      	b.n	b6960 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>

000b69aa <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b69aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b69ac:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b69ae:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b69b0:	9300      	str	r3, [sp, #0]
   b69b2:	216f      	movs	r1, #111	; 0x6f
   b69b4:	ab03      	add	r3, sp, #12
   b69b6:	f7ff ff31 	bl	b681c <_ZNK8MCP7941010deviceReadEhhPhj>
   b69ba:	b920      	cbnz	r0, b69c6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   b69bc:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b69c0:	b005      	add	sp, #20
   b69c2:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   b69c6:	2000      	movs	r0, #0
   b69c8:	e7fa      	b.n	b69c0 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000b69ca <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   b69ca:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   b69cc:	2103      	movs	r1, #3
   b69ce:	f7ff ffec 	bl	b69aa <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   b69d2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b69d6:	bd08      	pop	{r3, pc}

000b69d8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b69d8:	b538      	push	{r3, r4, r5, lr}
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b69da:	2300      	movs	r3, #0
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b69dc:	460c      	mov	r4, r1
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b69de:	460a      	mov	r2, r1
   b69e0:	4619      	mov	r1, r3
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b69e2:	4605      	mov	r5, r0
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b69e4:	f7ff ff95 	bl	b6912 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>
	if (stat == 0) {
   b69e8:	b930      	cbnz	r0, b69f8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b69ea:	7aa3      	ldrb	r3, [r4, #10]
   b69ec:	b123      	cbz	r3, b69f8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   b69ee:	4628      	mov	r0, r5
}
   b69f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b69f4:	f7ff bfe9 	b.w	b69ca <_ZNK8MCP7941020getOscillatorRunningEv>
}
   b69f8:	2000      	movs	r0, #0
   b69fa:	bd38      	pop	{r3, r4, r5, pc}

000b69fc <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   b69fc:	b510      	push	{r4, lr}
   b69fe:	b086      	sub	sp, #24
   b6a00:	4604      	mov	r4, r0
	MCP79410Time time;
   b6a02:	a801      	add	r0, sp, #4
   b6a04:	f7ff fe08 	bl	b6618 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   b6a08:	a901      	add	r1, sp, #4
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	f7ff ffe4 	bl	b69d8 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   b6a10:	b120      	cbz	r0, b6a1c <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   b6a12:	a801      	add	r0, sp, #4
   b6a14:	f7ff fe4c 	bl	b66b0 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   b6a18:	b006      	add	sp, #24
   b6a1a:	bd10      	pop	{r4, pc}
		return 0;
   b6a1c:	2000      	movs	r0, #0
   b6a1e:	4601      	mov	r1, r0
   b6a20:	e7fa      	b.n	b6a18 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
	...

000b6a24 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   b6a24:	b570      	push	{r4, r5, r6, lr}
   b6a26:	4604      	mov	r4, r0
   b6a28:	b086      	sub	sp, #24
	wire.begin();
   b6a2a:	6840      	ldr	r0, [r0, #4]
   b6a2c:	f002 ffae 	bl	b998c <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   b6a30:	f003 fe14 	bl	ba65c <_ZN9TimeClass7isValidEv>
   b6a34:	b9e8      	cbnz	r0, b6a72 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   b6a36:	7ae3      	ldrb	r3, [r4, #11]
   b6a38:	079b      	lsls	r3, r3, #30
   b6a3a:	d51a      	bpl.n	b6a72 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	f7ff ffdd 	bl	b69fc <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   b6a42:	ea50 0301 	orrs.w	r3, r0, r1
			time_t rtcTime = getRTCTime();
   b6a46:	4606      	mov	r6, r0
   b6a48:	460d      	mov	r5, r1
			if (rtcTime != 0) {
   b6a4a:	d012      	beq.n	b6a72 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   b6a4c:	f003 fd0b 	bl	ba466 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   b6a50:	4b0a      	ldr	r3, [pc, #40]	; (b6a7c <_ZN8MCP794105setupEv+0x58>)
   b6a52:	490b      	ldr	r1, [pc, #44]	; (b6a80 <_ZN8MCP794105setupEv+0x5c>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	9300      	str	r3, [sp, #0]
   b6a58:	4632      	mov	r2, r6
   b6a5a:	462b      	mov	r3, r5
   b6a5c:	a802      	add	r0, sp, #8
   b6a5e:	f003 fdbb 	bl	ba5d8 <_ZN9TimeClass6formatExPKc>
   b6a62:	4808      	ldr	r0, [pc, #32]	; (b6a84 <_ZN8MCP794105setupEv+0x60>)
   b6a64:	9a02      	ldr	r2, [sp, #8]
   b6a66:	4908      	ldr	r1, [pc, #32]	; (b6a88 <_ZN8MCP794105setupEv+0x64>)
   b6a68:	f7fd fdb0 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
   b6a6c:	a802      	add	r0, sp, #8
   b6a6e:	f003 fa87 	bl	b9f80 <_ZN6StringD1Ev>
	setupDone = true;
   b6a72:	2301      	movs	r3, #1
   b6a74:	7223      	strb	r3, [r4, #8]
}
   b6a76:	b006      	add	sp, #24
   b6a78:	bd70      	pop	{r4, r5, r6, pc}
   b6a7a:	bf00      	nop
   b6a7c:	2003e37c 	.word	0x2003e37c
   b6a80:	2003e698 	.word	0x2003e698
   b6a84:	2003e614 	.word	0x2003e614
   b6a88:	000bc3de 	.word	0x000bc3de

000b6a8c <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b6a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a90:	4606      	mov	r6, r0
   b6a92:	4688      	mov	r8, r1
   b6a94:	4691      	mov	r9, r2
   b6a96:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b6a98:	2500      	movs	r5, #0

	while(offset < bufLen) {
   b6a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6a9c:	429d      	cmp	r5, r3
   b6a9e:	d229      	bcs.n	b6af4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   b6aa0:	6870      	ldr	r0, [r6, #4]
   b6aa2:	4641      	mov	r1, r8
   b6aa4:	f002 ffa4 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6aa8:	6870      	ldr	r0, [r6, #4]
   b6aaa:	eb09 0105 	add.w	r1, r9, r5
   b6aae:	f7ff fda5 	bl	b65fc <_ZN7TwoWire5writeEj.isra.0>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   b6ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6ab4:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   b6ab6:	2f1f      	cmp	r7, #31
   b6ab8:	bf28      	it	cs
   b6aba:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   b6abc:	eb0a 0405 	add.w	r4, sl, r5
   b6ac0:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   b6ac4:	6870      	ldr	r0, [r6, #4]
   b6ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6aca:	6802      	ldr	r2, [r0, #0]
   b6acc:	6892      	ldr	r2, [r2, #8]
   b6ace:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   b6ad0:	45a3      	cmp	fp, r4
   b6ad2:	d1f7      	bne.n	b6ac4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   b6ad4:	6870      	ldr	r0, [r6, #4]
   b6ad6:	2101      	movs	r1, #1
   b6ad8:	f002 ffa9 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b6adc:	4604      	mov	r4, r0
   b6ade:	b138      	cbz	r0, b6af0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   b6ae0:	4602      	mov	r2, r0
   b6ae2:	4905      	ldr	r1, [pc, #20]	; (b6af8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   b6ae4:	4805      	ldr	r0, [pc, #20]	; (b6afc <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   b6ae6:	f7fd fd71 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   b6aea:	4620      	mov	r0, r4
   b6aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   b6af0:	443d      	add	r5, r7
	while(offset < bufLen) {
   b6af2:	e7d2      	b.n	b6a9a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   b6af4:	2400      	movs	r4, #0
	return stat;
   b6af6:	e7f8      	b.n	b6aea <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   b6af8:	000bc3f3 	.word	0x000bc3f3
   b6afc:	2003e614 	.word	0x2003e614

000b6b00 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b6b04:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6b08:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b6b0a:	6803      	ldr	r3, [r0, #0]
   b6b0c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6b0e:	4605      	mov	r5, r0
   b6b10:	460c      	mov	r4, r1
   b6b12:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b6b14:	4798      	blx	r3
   b6b16:	4580      	cmp	r8, r0
   b6b18:	d80d      	bhi.n	b6b36 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b6b1a:	3420      	adds	r4, #32
   b6b1c:	6868      	ldr	r0, [r5, #4]
   b6b1e:	9600      	str	r6, [sp, #0]
   b6b20:	463b      	mov	r3, r7
   b6b22:	b2e2      	uxtb	r2, r4
   b6b24:	216f      	movs	r1, #111	; 0x6f
   b6b26:	f7ff ffb1 	bl	b6a8c <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   b6b2a:	fab0 f080 	clz	r0, r0
   b6b2e:	0940      	lsrs	r0, r0, #5
}
   b6b30:	b002      	add	sp, #8
   b6b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b6b36:	2000      	movs	r0, #0
   b6b38:	e7fa      	b.n	b6b30 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000b6b3a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   b6b3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   b6b3c:	7c13      	ldrb	r3, [r2, #16]
   b6b3e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   b6b42:	7bd3      	ldrb	r3, [r2, #15]
   b6b44:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   b6b48:	7b93      	ldrb	r3, [r2, #14]
   b6b4a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   b6b4e:	7b53      	ldrb	r3, [r2, #13]
   b6b50:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   b6b54:	7b13      	ldrb	r3, [r2, #12]
   b6b56:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   b6b5a:	7ad3      	ldrb	r3, [r2, #11]
   b6b5c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   b6b60:	7a93      	ldrb	r3, [r2, #10]
   b6b62:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   b6b66:	2307      	movs	r3, #7
   b6b68:	9300      	str	r3, [sp, #0]
   b6b6a:	460a      	mov	r2, r1
   b6b6c:	ab02      	add	r3, sp, #8
   b6b6e:	216f      	movs	r1, #111	; 0x6f
   b6b70:	f7ff ff8c 	bl	b6a8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6b74:	b005      	add	sp, #20
   b6b76:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b7a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   b6b7a:	b510      	push	{r4, lr}
   b6b7c:	b088      	sub	sp, #32
   b6b7e:	4604      	mov	r4, r0
	MCP79410Time time;
   b6b80:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   b6b82:	e9cd 3200 	strd	r3, r2, [sp]
	MCP79410Time time;
   b6b86:	f7ff fd47 	bl	b6618 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   b6b8a:	e9dd 3200 	ldrd	r3, r2, [sp]
   b6b8e:	a803      	add	r0, sp, #12
   b6b90:	f7ff fe05 	bl	b679e <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b6b94:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   b6b98:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b6b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b6b9e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   b6ba2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   b6ba6:	b16a      	cbz	r2, b6bc4 <_ZN8MCP7941010setRTCTimeEx+0x4a>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   b6ba8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   b6bac:	aa03      	add	r2, sp, #12
   b6bae:	2100      	movs	r1, #0
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	f88d 3019 	strb.w	r3, [sp, #25]
   b6bb6:	f7ff ffc0 	bl	b6b3a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   b6bba:	fab0 f080 	clz	r0, r0
   b6bbe:	0940      	lsrs	r0, r0, #5
   b6bc0:	b008      	add	sp, #32
   b6bc2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   b6bc4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   b6bc8:	e7f0      	b.n	b6bac <_ZN8MCP7941010setRTCTimeEx+0x32>
	...

000b6bcc <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   b6bcc:	b530      	push	{r4, r5, lr}
   b6bce:	b089      	sub	sp, #36	; 0x24
   b6bd0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   b6bd2:	f003 fd43 	bl	ba65c <_ZN9TimeClass7isValidEv>
   b6bd6:	4604      	mov	r4, r0
   b6bd8:	b1e8      	cbz	r0, b6c16 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   b6bda:	f003 fd5c 	bl	ba696 <_ZN9TimeClass3nowEv>
   b6bde:	17c3      	asrs	r3, r0, #31
		bResult = setRTCTime(now);
   b6be0:	e9cd 3002 	strd	r3, r0, [sp, #8]
		time_t now = Time.now();
   b6be4:	4602      	mov	r2, r0
		bResult = setRTCTime(now);
   b6be6:	4628      	mov	r0, r5
   b6be8:	f7ff ffc7 	bl	b6b7a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b6bec:	490c      	ldr	r1, [pc, #48]	; (b6c20 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   b6bee:	6809      	ldr	r1, [r1, #0]
   b6bf0:	9100      	str	r1, [sp, #0]
   b6bf2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b6bf6:	490b      	ldr	r1, [pc, #44]	; (b6c24 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
		bResult = setRTCTime(now);
   b6bf8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b6bfa:	a804      	add	r0, sp, #16
   b6bfc:	f003 fcec 	bl	ba5d8 <_ZN9TimeClass6formatExPKc>
   b6c00:	4809      	ldr	r0, [pc, #36]	; (b6c28 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b6c02:	9a04      	ldr	r2, [sp, #16]
   b6c04:	4909      	ldr	r1, [pc, #36]	; (b6c2c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   b6c06:	f7fd fce1 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
   b6c0a:	a804      	add	r0, sp, #16
   b6c0c:	f003 f9b8 	bl	b9f80 <_ZN6StringD1Ev>
}
   b6c10:	4620      	mov	r0, r4
   b6c12:	b009      	add	sp, #36	; 0x24
   b6c14:	bd30      	pop	{r4, r5, pc}
		log.info("cloud time not valid");
   b6c16:	4906      	ldr	r1, [pc, #24]	; (b6c30 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   b6c18:	4803      	ldr	r0, [pc, #12]	; (b6c28 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b6c1a:	f7fd fcd7 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
   b6c1e:	e7f7      	b.n	b6c10 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   b6c20:	2003e37c 	.word	0x2003e37c
   b6c24:	2003e698 	.word	0x2003e698
   b6c28:	2003e614 	.word	0x2003e614
   b6c2c:	000bc40e 	.word	0x000bc40e
   b6c30:	000bc424 	.word	0x000bc424

000b6c34 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   b6c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   b6c36:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   b6c38:	4604      	mov	r4, r0
	if (!timeSet) {
   b6c3a:	b99d      	cbnz	r5, b6c64 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   b6c3c:	f003 fd0e 	bl	ba65c <_ZN9TimeClass7isValidEv>
   b6c40:	b180      	cbz	r0, b6c64 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   b6c42:	2200      	movs	r2, #0
   b6c44:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b6c46:	4669      	mov	r1, sp
   b6c48:	4628      	mov	r0, r5
        tm = 0;
   b6c4a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b6c4e:	f002 f82d 	bl	b8cac <spark_sync_time_last>
			if (lastSync != 0) {
   b6c52:	b138      	cbz	r0, b6c64 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   b6c54:	7ae3      	ldrb	r3, [r4, #11]
   b6c56:	07db      	lsls	r3, r3, #31
   b6c58:	d502      	bpl.n	b6c60 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   b6c5a:	4620      	mov	r0, r4
   b6c5c:	f7ff ffb6 	bl	b6bcc <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   b6c60:	2301      	movs	r3, #1
   b6c62:	7263      	strb	r3, [r4, #9]
}
   b6c64:	b003      	add	sp, #12
   b6c66:	bd30      	pop	{r4, r5, pc}

000b6c68 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   b6c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b6c6a:	2301      	movs	r3, #1
	buf[0] = value;
   b6c6c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b6c70:	9300      	str	r3, [sp, #0]
   b6c72:	460a      	mov	r2, r1
   b6c74:	ab03      	add	r3, sp, #12
   b6c76:	216f      	movs	r1, #111	; 0x6f
   b6c78:	f7ff ff08 	bl	b6a8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6c7c:	b005      	add	sp, #20
   b6c7e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c82 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   b6c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c84:	4617      	mov	r7, r2
   b6c86:	4604      	mov	r4, r0
   b6c88:	460d      	mov	r5, r1
   b6c8a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   b6c8c:	f7ff fe8d 	bl	b69aa <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   b6c90:	4038      	ands	r0, r7
	return deviceWriteRegisterByte(addr, value);
   b6c92:	ea40 0206 	orr.w	r2, r0, r6
   b6c96:	4629      	mov	r1, r5
   b6c98:	4620      	mov	r0, r4
}
   b6c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   b6c9e:	f7ff bfe3 	b.w	b6c68 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000b6ca2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   b6ca2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   b6ca4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   b6ca6:	d80d      	bhi.n	b6cc4 <_ZN8MCP7941010clearAlarmEi+0x22>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   b6ca8:	2900      	cmp	r1, #0
   b6caa:	bf0c      	ite	eq
   b6cac:	2210      	moveq	r2, #16
   b6cae:	2220      	movne	r2, #32
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   b6cb0:	2300      	movs	r3, #0
   b6cb2:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   b6cb6:	2107      	movs	r1, #7
   b6cb8:	f7ff ffe3 	bl	b6c82 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   b6cbc:	fab0 f080 	clz	r0, r0
   b6cc0:	0940      	lsrs	r0, r0, #5
}
   b6cc2:	bd08      	pop	{r3, pc}
		return false;
   b6cc4:	2000      	movs	r0, #0
   b6cc6:	e7fc      	b.n	b6cc2 <_ZN8MCP7941010clearAlarmEi+0x20>

000b6cc8 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   b6cc8:	b538      	push	{r3, r4, r5, lr}
   b6cca:	4604      	mov	r4, r0
   b6ccc:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b6cce:	6860      	ldr	r0, [r4, #4]
   b6cd0:	2157      	movs	r1, #87	; 0x57
   b6cd2:	f002 fe8d 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   b6cd6:	6860      	ldr	r0, [r4, #4]
   b6cd8:	2101      	movs	r1, #1
   b6cda:	f002 fea8 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b6cde:	b108      	cbz	r0, b6ce4 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   b6ce0:	3d01      	subs	r5, #1
   b6ce2:	d1f4      	bne.n	b6cce <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b6ce4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ce8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b6ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cec:	4604      	mov	r4, r0
   b6cee:	460f      	mov	r7, r1
   b6cf0:	4616      	mov	r6, r2
   b6cf2:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   b6cf6:	45b0      	cmp	r8, r6
   b6cf8:	d020      	beq.n	b6d3c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b6cfa:	6860      	ldr	r0, [r4, #4]
   b6cfc:	2157      	movs	r1, #87	; 0x57
   b6cfe:	f002 fe77 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6d02:	4639      	mov	r1, r7
   b6d04:	6860      	ldr	r0, [r4, #4]
   b6d06:	f7ff fc79 	bl	b65fc <_ZN7TwoWire5writeEj.isra.0>
			wire.write(buf[ii + offset]);
   b6d0a:	6860      	ldr	r0, [r4, #4]
   b6d0c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b6d10:	6803      	ldr	r3, [r0, #0]
   b6d12:	689b      	ldr	r3, [r3, #8]
   b6d14:	4798      	blx	r3
		stat = wire.endTransmission(true);
   b6d16:	6860      	ldr	r0, [r4, #4]
   b6d18:	2101      	movs	r1, #1
   b6d1a:	f002 fe88 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b6d1e:	3701      	adds	r7, #1
   b6d20:	4605      	mov	r5, r0
   b6d22:	b138      	cbz	r0, b6d34 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   b6d24:	4602      	mov	r2, r0
   b6d26:	4906      	ldr	r1, [pc, #24]	; (b6d40 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   b6d28:	4806      	ldr	r0, [pc, #24]	; (b6d44 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   b6d2a:	f7fd fc4f 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
}
   b6d2e:	4628      	mov	r0, r5
   b6d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   b6d34:	4620      	mov	r0, r4
   b6d36:	f7ff ffc7 	bl	b6cc8 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   b6d3a:	e7dc      	b.n	b6cf6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   b6d3c:	2500      	movs	r5, #0
	return stat;
   b6d3e:	e7f6      	b.n	b6d2e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   b6d40:	000bc439 	.word	0x000bc439
   b6d44:	2003e614 	.word	0x2003e614

000b6d48 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   b6d4a:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6d4c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b6d4e:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6d50:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   b6d52:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b6d54:	4604      	mov	r4, r0
   b6d56:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   b6d58:	4798      	blx	r3
   b6d5a:	4287      	cmp	r7, r0
   b6d5c:	d80a      	bhi.n	b6d74 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   b6d5e:	9a01      	ldr	r2, [sp, #4]
   b6d60:	6860      	ldr	r0, [r4, #4]
   b6d62:	4633      	mov	r3, r6
   b6d64:	b2e9      	uxtb	r1, r5
   b6d66:	f7ff ffbf 	bl	b6ce8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   b6d6a:	fab0 f080 	clz	r0, r0
   b6d6e:	0940      	lsrs	r0, r0, #5
}
   b6d70:	b003      	add	sp, #12
   b6d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   b6d74:	2000      	movs	r0, #0
   b6d76:	e7fb      	b.n	b6d70 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000b6d78 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b6d78:	4b01      	ldr	r3, [pc, #4]	; (b6d80 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b6d7a:	4a02      	ldr	r2, [pc, #8]	; (b6d84 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b6d7c:	601a      	str	r2, [r3, #0]
}
   b6d7e:	4770      	bx	lr
   b6d80:	2003e614 	.word	0x2003e614
   b6d84:	000bc45a 	.word	0x000bc45a

000b6d88 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6d88:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6d8a:	2301      	movs	r3, #1
   b6d8c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6d8e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6d90:	4604      	mov	r4, r0
        if (th->func) {
   b6d92:	b143      	cbz	r3, b6da6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6d94:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d96:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6d98:	2301      	movs	r3, #1
   b6d9a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6d9c:	2000      	movs	r0, #0
    }
   b6d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6da2:	f001 bc99 	b.w	b86d8 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6da6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6da8:	2800      	cmp	r0, #0
   b6daa:	d0f5      	beq.n	b6d98 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6dac:	6883      	ldr	r3, [r0, #8]
   b6dae:	b90b      	cbnz	r3, b6db4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6db0:	f003 ff98 	bl	bace4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6db4:	68c3      	ldr	r3, [r0, #12]
   b6db6:	e7ee      	b.n	b6d96 <_ZN6Thread3runEPv+0xe>

000b6db8 <_GLOBAL__sub_I_pubqLogger>:
   b6db8:	4b01      	ldr	r3, [pc, #4]	; (b6dc0 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b6dba:	4a02      	ldr	r2, [pc, #8]	; (b6dc4 <_GLOBAL__sub_I_pubqLogger+0xc>)
   b6dbc:	601a      	str	r2, [r3, #0]
   b6dbe:	4770      	bx	lr
   b6dc0:	2003e618 	.word	0x2003e618
   b6dc4:	000bc4cc 	.word	0x000bc4cc

000b6dc8 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6dc8:	4770      	bx	lr

000b6dca <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b6dca:	b538      	push	{r3, r4, r5, lr}
   b6dcc:	4605      	mov	r5, r0
   b6dce:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b6dd0:	f003 fef6 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6dd4:	7829      	ldrb	r1, [r5, #0]
   b6dd6:	f002 fe0b 	bl	b99f0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b6dda:	f003 fef1 	bl	babc0 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b6dde:	6803      	ldr	r3, [r0, #0]
   b6de0:	0a21      	lsrs	r1, r4, #8
   b6de2:	689b      	ldr	r3, [r3, #8]
   b6de4:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b6de6:	f003 feeb 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6dea:	6803      	ldr	r3, [r0, #0]
   b6dec:	b2e1      	uxtb	r1, r4
   b6dee:	689b      	ldr	r3, [r3, #8]
   b6df0:	4798      	blx	r3
  Wire.endTransmission();  
   b6df2:	f003 fee5 	bl	babc0 <_Z19__fetch_global_Wirev>
}
   b6df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b6dfa:	f002 be1c 	b.w	b9a36 <_ZN7TwoWire15endTransmissionEv>

000b6dfe <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b6dfe:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b6e00:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b6e04:	f7ff ffe1 	bl	b6dca <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b6e08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b6e0c:	200a      	movs	r0, #10
   b6e0e:	f002 b859 	b.w	b8ec4 <delay>

000b6e12 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b6e12:	b538      	push	{r3, r4, r5, lr}
   b6e14:	4604      	mov	r4, r0
   b6e16:	460d      	mov	r5, r1
  Wire.begin();
   b6e18:	f003 fed2 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6e1c:	f002 fdb6 	bl	b998c <_ZN7TwoWire5beginEv>
  reset();
   b6e20:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b6e22:	7025      	strb	r5, [r4, #0]
  reset();
   b6e24:	f7ff ffeb 	bl	b6dfe <_ZN14Adafruit_SHT315resetEv>
}
   b6e28:	2001      	movs	r0, #1
   b6e2a:	bd38      	pop	{r3, r4, r5, pc}

000b6e2c <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b6e2c:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b6e2e:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6e30:	4291      	cmp	r1, r2
   b6e32:	d00e      	beq.n	b6e52 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b6e34:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6e38:	4058      	eors	r0, r3
   b6e3a:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b6e3c:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6e40:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b6e44:	bf18      	it	ne
   b6e46:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b6e4a:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b6e4c:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b6e4e:	d1f5      	bne.n	b6e3c <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6e50:	e7ee      	b.n	b6e30 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b6e52:	4770      	bx	lr
   b6e54:	0000      	movs	r0, r0
	...

000b6e58 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b6e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b6e5a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b6e5e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b6e60:	f7ff ffb3 	bl	b6dca <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b6e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6e68:	f002 f82c 	bl	b8ec4 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b6e6c:	f003 fea8 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6e70:	7829      	ldrb	r1, [r5, #0]
   b6e72:	2206      	movs	r2, #6
   b6e74:	f002 fdb9 	bl	b99ea <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b6e78:	f003 fea2 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6e7c:	6803      	ldr	r3, [r0, #0]
   b6e7e:	691b      	ldr	r3, [r3, #16]
   b6e80:	4798      	blx	r3
   b6e82:	2806      	cmp	r0, #6
   b6e84:	4604      	mov	r4, r0
   b6e86:	d002      	beq.n	b6e8e <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b6e88:	2000      	movs	r0, #0
}
   b6e8a:	b002      	add	sp, #8
   b6e8c:	bd70      	pop	{r4, r5, r6, pc}
   b6e8e:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b6e90:	f003 fe96 	bl	babc0 <_Z19__fetch_global_Wirev>
   b6e94:	6803      	ldr	r3, [r0, #0]
   b6e96:	695b      	ldr	r3, [r3, #20]
   b6e98:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b6e9a:	3c01      	subs	r4, #1
   b6e9c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b6ea0:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b6ea4:	4669      	mov	r1, sp
   b6ea6:	d1f3      	bne.n	b6e90 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b6ea8:	2202      	movs	r2, #2
   b6eaa:	4628      	mov	r0, r5
   b6eac:	f7ff ffbe 	bl	b6e2c <_ZN14Adafruit_SHT314crc8EPKhi>
   b6eb0:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b6eb4:	4284      	cmp	r4, r0
   b6eb6:	d1e7      	bne.n	b6e88 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6eb8:	2202      	movs	r2, #2
   b6eba:	f10d 0103 	add.w	r1, sp, #3
   b6ebe:	4628      	mov	r0, r5
   b6ec0:	f7ff ffb4 	bl	b6e2c <_ZN14Adafruit_SHT314crc8EPKhi>
   b6ec4:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6ec8:	4284      	cmp	r4, r0
   b6eca:	d1dd      	bne.n	b6e88 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b6ecc:	f8bd 0000 	ldrh.w	r0, [sp]
   b6ed0:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b6ed4:	ba40      	rev16	r0, r0
   b6ed6:	b280      	uxth	r0, r0
   b6ed8:	f004 f84a 	bl	baf70 <__aeabi_ui2d>
  stemp *= 175;
   b6edc:	a316      	add	r3, pc, #88	; (adr r3, b6f38 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b6ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ee2:	f004 f8bf 	bl	bb064 <__aeabi_dmul>
  stemp /= 0xffff;
   b6ee6:	a310      	add	r3, pc, #64	; (adr r3, b6f28 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6eec:	f004 f9e4 	bl	bb2b8 <__aeabi_ddiv>
  stemp = -45 + stemp;
   b6ef0:	4b0f      	ldr	r3, [pc, #60]	; (b6f30 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b6ef2:	2200      	movs	r2, #0
   b6ef4:	f003 fefe 	bl	bacf4 <__aeabi_dsub>
  temp = stemp;
   b6ef8:	f004 fbac 	bl	bb654 <__aeabi_d2f>
   b6efc:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b6efe:	ba60      	rev16	r0, r4
   b6f00:	b280      	uxth	r0, r0
   b6f02:	f004 f835 	bl	baf70 <__aeabi_ui2d>
  shum *= 100;
   b6f06:	4b0b      	ldr	r3, [pc, #44]	; (b6f34 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b6f08:	2200      	movs	r2, #0
   b6f0a:	f004 f8ab 	bl	bb064 <__aeabi_dmul>
  shum /= 0xFFFF;
   b6f0e:	a306      	add	r3, pc, #24	; (adr r3, b6f28 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6f10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f14:	f004 f9d0 	bl	bb2b8 <__aeabi_ddiv>
  humidity = shum;
   b6f18:	f004 fb9c 	bl	bb654 <__aeabi_d2f>
   b6f1c:	6068      	str	r0, [r5, #4]
  return true;
   b6f1e:	2001      	movs	r0, #1
   b6f20:	e7b3      	b.n	b6e8a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b6f22:	bf00      	nop
   b6f24:	f3af 8000 	nop.w
   b6f28:	00000000 	.word	0x00000000
   b6f2c:	40efffe0 	.word	0x40efffe0
   b6f30:	40468000 	.word	0x40468000
   b6f34:	40590000 	.word	0x40590000
   b6f38:	00000000 	.word	0x00000000
   b6f3c:	4065e000 	.word	0x4065e000

000b6f40 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6f40:	b510      	push	{r4, lr}
   b6f42:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6f44:	f7ff ff88 	bl	b6e58 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6f48:	b110      	cbz	r0, b6f50 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b6f4a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b6f4e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6f50:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6f58 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b6f54:	e7fb      	b.n	b6f4e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b6f56:	bf00      	nop
   b6f58:	7fc00000 	.word	0x7fc00000

000b6f5c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b6f5c:	b510      	push	{r4, lr}
   b6f5e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6f60:	f7ff ff7a 	bl	b6e58 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6f64:	b110      	cbz	r0, b6f6c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b6f66:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b6f6a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6f74 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b6f70:	e7fb      	b.n	b6f6a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b6f72:	bf00      	nop
   b6f74:	7fc00000 	.word	0x7fc00000

000b6f78 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6f78:	2a01      	cmp	r2, #1
   b6f7a:	d102      	bne.n	b6f82 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6f7c:	6001      	str	r1, [r0, #0]
      }
   b6f7e:	2000      	movs	r0, #0
   b6f80:	4770      	bx	lr
	  switch (__op)
   b6f82:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6f84:	bf04      	itt	eq
   b6f86:	680b      	ldreq	r3, [r1, #0]
   b6f88:	6003      	streq	r3, [r0, #0]
	      break;
   b6f8a:	e7f8      	b.n	b6f7e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6f8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b6f8c:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6f8e:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6f90:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b6f92:	b135      	cbz	r5, b6fa2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b6f94:	4628      	mov	r0, r5
   b6f96:	f7fd fa6a 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6f9a:	2110      	movs	r1, #16
   b6f9c:	4628      	mov	r0, r5
   b6f9e:	f7fd f87e 	bl	b409e <_ZdlPvj>
   b6fa2:	4620      	mov	r0, r4
   b6fa4:	2114      	movs	r1, #20
      }
   b6fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b6faa:	f7fd b878 	b.w	b409e <_ZdlPvj>

000b6fae <_ZN6Thread7disposeEv>:
    void dispose()
   b6fae:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6fb0:	6803      	ldr	r3, [r0, #0]
   b6fb2:	4604      	mov	r4, r0
        if (!isValid())
   b6fb4:	b1ab      	cbz	r3, b6fe2 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b6fb6:	6858      	ldr	r0, [r3, #4]
   b6fb8:	f001 fb16 	bl	b85e8 <os_thread_is_current>
   b6fbc:	b988      	cbnz	r0, b6fe2 <_ZN6Thread7disposeEv+0x34>
   b6fbe:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b6fc0:	7c5a      	ldrb	r2, [r3, #17]
   b6fc2:	b912      	cbnz	r2, b6fca <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b6fc4:	6858      	ldr	r0, [r3, #4]
   b6fc6:	f001 fb1f 	bl	b8608 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b6fca:	6823      	ldr	r3, [r4, #0]
   b6fcc:	6858      	ldr	r0, [r3, #4]
   b6fce:	f001 fb23 	bl	b8618 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b6fd2:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b6fd4:	2300      	movs	r3, #0
   b6fd6:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b6fd8:	b118      	cbz	r0, b6fe2 <_ZN6Thread7disposeEv+0x34>
    }
   b6fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6fde:	f7ff bfd5 	b.w	b6f8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6fe2:	bd10      	pop	{r4, pc}

000b6fe4 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b6fe4:	4a05      	ldr	r2, [pc, #20]	; (b6ffc <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b6fe6:	6002      	str	r2, [r0, #0]
   b6fe8:	2200      	movs	r2, #0
   b6fea:	6042      	str	r2, [r0, #4]
   b6fec:	7302      	strb	r2, [r0, #12]
   b6fee:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b6ff2:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b6ff6:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b6ffa:	4770      	bx	lr
   b6ffc:	000bc4f4 	.word	0x000bc4f4

000b7000 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7000:	b510      	push	{r4, lr}
    if (!_instance) {
   b7002:	4c07      	ldr	r4, [pc, #28]	; (b7020 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7004:	6823      	ldr	r3, [r4, #0]
   b7006:	b943      	cbnz	r3, b701a <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7008:	f240 4064 	movw	r0, #1124	; 0x464
   b700c:	f7fd f843 	bl	b4096 <_Znwj>
   b7010:	4603      	mov	r3, r0
   b7012:	b108      	cbz	r0, b7018 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7014:	f7ff ffe6 	bl	b6fe4 <_ZN19BackgroundPublishRKC1Ev>
   b7018:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b701a:	6820      	ldr	r0, [r4, #0]
   b701c:	bd10      	pop	{r4, pc}
   b701e:	bf00      	nop
   b7020:	2003e61c 	.word	0x2003e61c

000b7024 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7024:	b538      	push	{r3, r4, r5, lr}
   b7026:	4604      	mov	r4, r0
    if(thread)
   b7028:	6840      	ldr	r0, [r0, #4]
   b702a:	b190      	cbz	r0, b7052 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b702c:	2302      	movs	r3, #2
   b702e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7030:	f7ff ffbd 	bl	b6fae <_ZN6Thread7disposeEv>
        delete thread;
   b7034:	6865      	ldr	r5, [r4, #4]
   b7036:	b155      	cbz	r5, b704e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7038:	4628      	mov	r0, r5
   b703a:	f7ff ffb8 	bl	b6fae <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b703e:	6828      	ldr	r0, [r5, #0]
   b7040:	b108      	cbz	r0, b7046 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7042:	f7ff ffa3 	bl	b6f8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7046:	2104      	movs	r1, #4
   b7048:	4628      	mov	r0, r5
   b704a:	f7fd f828 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b704e:	2300      	movs	r3, #0
   b7050:	6063      	str	r3, [r4, #4]
    }
}
   b7052:	bd38      	pop	{r3, r4, r5, pc}

000b7054 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7054:	b510      	push	{r4, lr}
   b7056:	4b05      	ldr	r3, [pc, #20]	; (b706c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7058:	6003      	str	r3, [r0, #0]
   b705a:	4604      	mov	r4, r0
    stop();
   b705c:	f7ff ffe2 	bl	b7024 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7060:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7064:	f7fd fa03 	bl	b446e <_ZNSt14_Function_baseD1Ev>
}
   b7068:	4620      	mov	r0, r4
   b706a:	bd10      	pop	{r4, pc}
   b706c:	000bc4f4 	.word	0x000bc4f4

000b7070 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7070:	b510      	push	{r4, lr}
   b7072:	4604      	mov	r4, r0
}
   b7074:	f7ff ffee 	bl	b7054 <_ZN19BackgroundPublishRKD1Ev>
   b7078:	4620      	mov	r0, r4
   b707a:	f240 4164 	movw	r1, #1124	; 0x464
   b707e:	f7fd f80e 	bl	b409e <_ZdlPvj>
   b7082:	4620      	mov	r0, r4
   b7084:	bd10      	pop	{r4, pc}

000b7086 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b7086:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7088:	4604      	mov	r4, r0
   b708a:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b708c:	f100 060d 	add.w	r6, r0, #13
   b7090:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7094:	7b23      	ldrb	r3, [r4, #12]
   b7096:	b91b      	cbnz	r3, b70a0 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b7098:	2001      	movs	r0, #1
   b709a:	f001 ff13 	bl	b8ec4 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b709e:	e7f9      	b.n	b7094 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b70a0:	7b23      	ldrb	r3, [r4, #12]
   b70a2:	2b02      	cmp	r3, #2
   b70a4:	d064      	beq.n	b7170 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b70a6:	68a0      	ldr	r0, [r4, #8]
   b70a8:	f001 faee 	bl	b8688 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b70ac:	68a0      	ldr	r0, [r4, #8]
   b70ae:	f001 faf3 	bl	b8698 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b70b2:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b70b6:	f88d 3000 	strb.w	r3, [sp]
   b70ba:	463a      	mov	r2, r7
   b70bc:	233c      	movs	r3, #60	; 0x3c
   b70be:	4631      	mov	r1, r6
   b70c0:	a806      	add	r0, sp, #24
   b70c2:	f002 f9bd 	bl	b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b70c6:	9d06      	ldr	r5, [sp, #24]
   b70c8:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b70ca:	b933      	cbnz	r3, b70da <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b70cc:	7b23      	ldrb	r3, [r4, #12]
   b70ce:	2b02      	cmp	r3, #2
   b70d0:	d003      	beq.n	b70da <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b70d2:	2001      	movs	r0, #1
   b70d4:	f001 fef6 	bl	b8ec4 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b70d8:	e7f5      	b.n	b70c6 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b70da:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b70de:	b31b      	cbz	r3, b7128 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b70e0:	2000      	movs	r0, #0
   b70e2:	f001 fd4b 	bl	b8b7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b70e6:	b120      	cbz	r0, b70f2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b70e8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b70ea:	b913      	cbnz	r3, b70f2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b70ec:	f001 fd9e 	bl	b8c2c <spark_process>
    }
   b70f0:	e7fa      	b.n	b70e8 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b70f2:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b70f4:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b70f8:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b70fa:	1e59      	subs	r1, r3, #1
   b70fc:	424b      	negs	r3, r1
   b70fe:	414b      	adcs	r3, r1
   b7100:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7104:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7108:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b710c:	b90b      	cbnz	r3, b7112 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b710e:	f003 fde9 	bl	bace4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7112:	ab05      	add	r3, sp, #20
   b7114:	9300      	str	r3, [sp, #0]
   b7116:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b711a:	ab04      	add	r3, sp, #16
   b711c:	aa03      	add	r2, sp, #12
   b711e:	f10d 010b 	add.w	r1, sp, #11
   b7122:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7126:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7128:	68a0      	ldr	r0, [r4, #8]
   b712a:	f001 faad 	bl	b8688 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b712e:	7b23      	ldrb	r3, [r4, #12]
   b7130:	2b02      	cmp	r3, #2
   b7132:	d017      	beq.n	b7164 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7134:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7138:	2500      	movs	r5, #0
   b713a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b713e:	b143      	cbz	r3, b7152 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7140:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7144:	2203      	movs	r2, #3
   b7146:	4608      	mov	r0, r1
   b7148:	4798      	blx	r3
	    _M_manager = nullptr;
   b714a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b714e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7152:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7154:	68a0      	ldr	r0, [r4, #8]
   b7156:	7323      	strb	r3, [r4, #12]
   b7158:	f001 fa9e 	bl	b8698 <os_mutex_unlock>
   b715c:	a807      	add	r0, sp, #28
   b715e:	f7fd fc66 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7162:	e797      	b.n	b7094 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7164:	68a0      	ldr	r0, [r4, #8]
   b7166:	f001 fa97 	bl	b8698 <os_mutex_unlock>
   b716a:	a807      	add	r0, sp, #28
   b716c:	f7fd fc5f 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7170:	b009      	add	sp, #36	; 0x24
   b7172:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7174 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7174:	6800      	ldr	r0, [r0, #0]
   b7176:	f7ff bf86 	b.w	b7086 <_ZN19BackgroundPublishRK8thread_fEv>
	...

000b717c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b717c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7180:	4606      	mov	r6, r0
   b7182:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7184:	2014      	movs	r0, #20
   b7186:	4926      	ldr	r1, [pc, #152]	; (b7220 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7188:	4617      	mov	r7, r2
   b718a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b718c:	f003 fda0 	bl	bacd0 <_ZnwjRKSt9nothrow_t>
   b7190:	4604      	mov	r4, r0
   b7192:	b130      	cbz	r0, b71a2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b7194:	2000      	movs	r0, #0
            exited(false) {
   b7196:	e9c4 0000 	strd	r0, r0, [r4]
   b719a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b719e:	7420      	strb	r0, [r4, #16]
   b71a0:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b71a2:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b71a4:	2c00      	cmp	r4, #0
   b71a6:	d031      	beq.n	b720c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b71a8:	491d      	ldr	r1, [pc, #116]	; (b7220 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b71aa:	2010      	movs	r0, #16
   b71ac:	f003 fd90 	bl	bacd0 <_ZnwjRKSt9nothrow_t>
   b71b0:	4605      	mov	r5, r0
   b71b2:	b168      	cbz	r0, b71d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b71b4:	2300      	movs	r3, #0
   b71b6:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b71b8:	4601      	mov	r1, r0
   b71ba:	4638      	mov	r0, r7
   b71bc:	f7fd fee0 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71c0:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b71c2:	68aa      	ldr	r2, [r5, #8]
   b71c4:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b71c6:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b71c8:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71ca:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b71cc:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b71ce:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b71d0:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b71d2:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b71d4:	b137      	cbz	r7, b71e4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b71d6:	4638      	mov	r0, r7
   b71d8:	f7fd f949 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b71dc:	2110      	movs	r1, #16
   b71de:	4638      	mov	r0, r7
   b71e0:	f7fc ff5d 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b71e4:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b71e6:	6803      	ldr	r3, [r0, #0]
   b71e8:	b183      	cbz	r3, b720c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b71ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b71ec:	464a      	mov	r2, r9
   b71ee:	e9cd 0300 	strd	r0, r3, [sp]
   b71f2:	4641      	mov	r1, r8
   b71f4:	4b0b      	ldr	r3, [pc, #44]	; (b7224 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b71f6:	3004      	adds	r0, #4
   b71f8:	f001 f9ee 	bl	b85d8 <os_thread_create>
   b71fc:	b930      	cbnz	r0, b720c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b71fe:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7200:	7c1b      	ldrb	r3, [r3, #16]
   b7202:	b94b      	cbnz	r3, b7218 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7204:	2001      	movs	r0, #1
   b7206:	f001 fa8f 	bl	b8728 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b720a:	e7f8      	b.n	b71fe <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b720c:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b720e:	2300      	movs	r3, #0
   b7210:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7212:	b108      	cbz	r0, b7218 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7214:	f7ff feba 	bl	b6f8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7218:	4630      	mov	r0, r6
   b721a:	b003      	add	sp, #12
   b721c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7220:	000bcaa0 	.word	0x000bcaa0
   b7224:	000b6d89 	.word	0x000b6d89

000b7228 <_ZN19BackgroundPublishRK5startEv>:
{
   b7228:	b530      	push	{r4, r5, lr}
    if(!thread)
   b722a:	6843      	ldr	r3, [r0, #4]
{
   b722c:	b087      	sub	sp, #28
   b722e:	4604      	mov	r4, r0
    if(!thread)
   b7230:	b9c3      	cbnz	r3, b7264 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7232:	3008      	adds	r0, #8
   b7234:	f001 fa20 	bl	b8678 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7238:	4b0b      	ldr	r3, [pc, #44]	; (b7268 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b723a:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b723c:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b723e:	4b0b      	ldr	r3, [pc, #44]	; (b726c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7240:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7242:	9304      	str	r3, [sp, #16]
   b7244:	f7fc ff27 	bl	b4096 <_Znwj>
   b7248:	4605      	mov	r5, r0
   b724a:	b138      	cbz	r0, b725c <_ZN19BackgroundPublishRK5startEv+0x34>
   b724c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7250:	9300      	str	r3, [sp, #0]
   b7252:	4907      	ldr	r1, [pc, #28]	; (b7270 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7254:	2302      	movs	r3, #2
   b7256:	aa02      	add	r2, sp, #8
   b7258:	f7ff ff90 	bl	b717c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b725c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b725e:	a802      	add	r0, sp, #8
   b7260:	f7fd f905 	bl	b446e <_ZNSt14_Function_baseD1Ev>
}
   b7264:	b007      	add	sp, #28
   b7266:	bd30      	pop	{r4, r5, pc}
   b7268:	000b7175 	.word	0x000b7175
   b726c:	000b6f79 	.word	0x000b6f79
   b7270:	000bc4d5 	.word	0x000bc4d5

000b7274 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7278:	4604      	mov	r4, r0
   b727a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b727c:	6880      	ldr	r0, [r0, #8]
   b727e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7280:	4698      	mov	r8, r3
   b7282:	460d      	mov	r5, r1
   b7284:	4616      	mov	r6, r2
   b7286:	f001 f9ff 	bl	b8688 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b728a:	6863      	ldr	r3, [r4, #4]
   b728c:	b11b      	cbz	r3, b7296 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b728e:	7b23      	ldrb	r3, [r4, #12]
   b7290:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7294:	b133      	cbz	r3, b72a4 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7296:	68a0      	ldr	r0, [r4, #8]
   b7298:	f001 f9fe 	bl	b8698 <os_mutex_unlock>
    {
        return false;
   b729c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b729e:	b005      	add	sp, #20
   b72a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b72a4:	68a0      	ldr	r0, [r4, #8]
   b72a6:	f001 f9f7 	bl	b8698 <os_mutex_unlock>
    if(!name)
   b72aa:	2d00      	cmp	r5, #0
   b72ac:	d03d      	beq.n	b732a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b72ae:	2240      	movs	r2, #64	; 0x40
   b72b0:	4629      	mov	r1, r5
   b72b2:	f104 000d 	add.w	r0, r4, #13
   b72b6:	f004 fb00 	bl	bb8ba <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b72ba:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b72be:	b38e      	cbz	r6, b7324 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b72c0:	f240 4201 	movw	r2, #1025	; 0x401
   b72c4:	4631      	mov	r1, r6
   b72c6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b72ca:	f004 faf6 	bl	bb8ba <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b72ce:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b72d2:	2300      	movs	r3, #0
   b72d4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b72d6:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b72d8:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b72dc:	b13b      	cbz	r3, b72ee <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b72de:	2202      	movs	r2, #2
   b72e0:	4639      	mov	r1, r7
   b72e2:	4668      	mov	r0, sp
   b72e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b72e6:	68fb      	ldr	r3, [r7, #12]
   b72e8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b72ea:	68bb      	ldr	r3, [r7, #8]
   b72ec:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b72ee:	4629      	mov	r1, r5
   b72f0:	4668      	mov	r0, sp
   b72f2:	f7fd fe45 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b72f6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b72f8:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b72fc:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7300:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7302:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7304:	4668      	mov	r0, sp
   b7306:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b730a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b730e:	9203      	str	r2, [sp, #12]
   b7310:	f7fd f8ad 	bl	b446e <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7316:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b731a:	2001      	movs	r0, #1
    event_flags = flags;
   b731c:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7320:	7320      	strb	r0, [r4, #12]
    return true;
   b7322:	e7bc      	b.n	b729e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7324:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7328:	e7d3      	b.n	b72d2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b732a:	4628      	mov	r0, r5
   b732c:	e7b7      	b.n	b729e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b732e <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b732e:	6803      	ldr	r3, [r0, #0]
   b7330:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b7332:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b7336:	2101      	movs	r1, #1
   b7338:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b733c:	4770      	bx	lr

000b733e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b733e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b7340:	6842      	ldr	r2, [r0, #4]
   b7342:	4603      	mov	r3, r0
   b7344:	1054      	asrs	r4, r2, #1
   b7346:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b734a:	07d2      	lsls	r2, r2, #31
   b734c:	bf48      	it	mi
   b734e:	590a      	ldrmi	r2, [r1, r4]
   b7350:	681b      	ldr	r3, [r3, #0]
      }
   b7352:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7356:	bf48      	it	mi
   b7358:	58d3      	ldrmi	r3, [r2, r3]
   b735a:	4718      	bx	r3

000b735c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b735c:	2a01      	cmp	r2, #1
   b735e:	d102      	bne.n	b7366 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7360:	6001      	str	r1, [r0, #0]
      }
   b7362:	2000      	movs	r0, #0
   b7364:	4770      	bx	lr
	  switch (__op)
   b7366:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7368:	bf04      	itt	eq
   b736a:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b736e:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b7372:	e7f6      	b.n	b7362 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b7374 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b7374:	2a01      	cmp	r2, #1
   b7376:	d102      	bne.n	b737e <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7378:	6001      	str	r1, [r0, #0]
      }
   b737a:	2000      	movs	r0, #0
   b737c:	4770      	bx	lr
	  switch (__op)
   b737e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7380:	bf04      	itt	eq
   b7382:	680b      	ldreq	r3, [r1, #0]
   b7384:	6003      	streq	r3, [r0, #0]
	      break;
   b7386:	e7f8      	b.n	b737a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b7388 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b7388:	b510      	push	{r4, lr}
   b738a:	4604      	mov	r4, r0
   b738c:	b08a      	sub	sp, #40	; 0x28
   b738e:	4608      	mov	r0, r1
    attr.flags = 0;
   b7390:	f04f 0c20 	mov.w	ip, #32
   b7394:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7396:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b739a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b739e:	460b      	mov	r3, r1
   b73a0:	aa02      	add	r2, sp, #8
   b73a2:	6821      	ldr	r1, [r4, #0]
   b73a4:	f001 fba8 	bl	b8af8 <log_message_v>
}
   b73a8:	b00a      	add	sp, #40	; 0x28
   b73aa:	bd10      	pop	{r4, pc}

000b73ac <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b73ac:	b40e      	push	{r1, r2, r3}
   b73ae:	b503      	push	{r0, r1, lr}
   b73b0:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b73b2:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b73b4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b73b8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b73ba:	f7ff ffe5 	bl	b7388 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b73be:	b002      	add	sp, #8
   b73c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b73c4:	b003      	add	sp, #12
   b73c6:	4770      	bx	lr

000b73c8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b73c8:	b40e      	push	{r1, r2, r3}
   b73ca:	b503      	push	{r0, r1, lr}
   b73cc:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b73ce:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b73d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b73d4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b73d6:	f7ff ffd7 	bl	b7388 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b73da:	b002      	add	sp, #8
   b73dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b73e0:	b003      	add	sp, #12
   b73e2:	4770      	bx	lr

000b73e4 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b73e4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b73e6:	f001 b967 	b.w	b86b8 <os_mutex_recursive_lock>

000b73ea <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b73ea:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b73ee:	4601      	mov	r1, r0
    if (stateHandler) {
   b73f0:	b11b      	cbz	r3, b73fa <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b73f2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b73f6:	30c0      	adds	r0, #192	; 0xc0
   b73f8:	4718      	bx	r3
}
   b73fa:	4770      	bx	lr

000b73fc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b73fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b73fe:	4d12      	ldr	r5, [pc, #72]	; (b7448 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7400:	4608      	mov	r0, r1
        eventData = "";
   b7402:	2a00      	cmp	r2, #0
   b7404:	bf18      	it	ne
   b7406:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7408:	460e      	mov	r6, r1
   b740a:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b740c:	f004 fa4d 	bl	bb8aa <strlen>
   b7410:	2840      	cmp	r0, #64	; 0x40
   b7412:	d816      	bhi.n	b7442 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b7414:	4628      	mov	r0, r5
   b7416:	f004 fa48 	bl	bb8aa <strlen>
   b741a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b741e:	d810      	bhi.n	b7442 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b7420:	3043      	adds	r0, #67	; 0x43
   b7422:	f7fc fe3a 	bl	b409a <_Znaj>
    if (event) {
   b7426:	4604      	mov	r4, r0
   b7428:	b148      	cbz	r0, b743e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b742a:	4631      	mov	r1, r6
        event->flags = flags;
   b742c:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b7430:	f004 fa16 	bl	bb860 <strcpy>
        strcpy(event->eventData, eventData);
   b7434:	4629      	mov	r1, r5
   b7436:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b743a:	f004 fa11 	bl	bb860 <strcpy>
}
   b743e:	4620      	mov	r0, r4
   b7440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b7442:	2400      	movs	r4, #0
   b7444:	e7fb      	b.n	b743e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b7446:	bf00      	nop
   b7448:	000bcac0 	.word	0x000bcac0

000b744c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b744c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b744e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7450:	460a      	mov	r2, r1
   b7452:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7454:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7456:	1d01      	adds	r1, r0, #4
   b7458:	a808      	add	r0, sp, #32
   b745a:	f000 fe41 	bl	b80e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b745e:	9808      	ldr	r0, [sp, #32]
   b7460:	2100      	movs	r1, #0
   b7462:	f004 fae3 	bl	bba2c <open>
   b7466:	4605      	mov	r5, r0
   b7468:	a808      	add	r0, sp, #32
   b746a:	f002 fd89 	bl	b9f80 <_ZN6StringD1Ev>
    if (fd) {
   b746e:	2d00      	cmp	r5, #0
   b7470:	d060      	beq.n	b7534 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b7472:	a908      	add	r1, sp, #32
   b7474:	4628      	mov	r0, r5
   b7476:	f004 fac7 	bl	bba08 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b747a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b747c:	492e      	ldr	r1, [pc, #184]	; (b7538 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b747e:	482f      	ldr	r0, [pc, #188]	; (b753c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7480:	4632      	mov	r2, r6
   b7482:	f7ff ff93 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b7486:	2200      	movs	r2, #0
   b7488:	4611      	mov	r1, r2
   b748a:	4628      	mov	r0, r5
   b748c:	f004 fac4 	bl	bba18 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b7490:	2208      	movs	r2, #8
   b7492:	a906      	add	r1, sp, #24
   b7494:	4628      	mov	r0, r5
   b7496:	f004 fadd 	bl	bba54 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b749a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b749c:	2f4a      	cmp	r7, #74	; 0x4a
   b749e:	dd39      	ble.n	b7514 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b74a0:	4b27      	ldr	r3, [pc, #156]	; (b7540 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b74a2:	9a06      	ldr	r2, [sp, #24]
   b74a4:	429a      	cmp	r2, r3
   b74a6:	d135      	bne.n	b7514 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b74a8:	4b26      	ldr	r3, [pc, #152]	; (b7544 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b74aa:	9a07      	ldr	r2, [sp, #28]
   b74ac:	429a      	cmp	r2, r3
   b74ae:	d131      	bne.n	b7514 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b74b0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b74b4:	4610      	mov	r0, r2
   b74b6:	9205      	str	r2, [sp, #20]
   b74b8:	f7fc fdef 	bl	b409a <_Znaj>
            if (result) {
   b74bc:	4604      	mov	r4, r0
   b74be:	b1c0      	cbz	r0, b74f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b74c0:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b74c2:	4601      	mov	r1, r0
   b74c4:	9a05      	ldr	r2, [sp, #20]
   b74c6:	4628      	mov	r0, r5
   b74c8:	f004 fac4 	bl	bba54 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b74cc:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b74d0:	b9ab      	cbnz	r3, b74fe <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b74d2:	1c63      	adds	r3, r4, #1
   b74d4:	4618      	mov	r0, r3
   b74d6:	9305      	str	r3, [sp, #20]
   b74d8:	f004 f9e7 	bl	bb8aa <strlen>
   b74dc:	283f      	cmp	r0, #63	; 0x3f
   b74de:	9b05      	ldr	r3, [sp, #20]
   b74e0:	d80d      	bhi.n	b74fe <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b74e2:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b74e6:	9200      	str	r2, [sp, #0]
   b74e8:	4917      	ldr	r1, [pc, #92]	; (b7548 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b74ea:	4814      	ldr	r0, [pc, #80]	; (b753c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b74ec:	4632      	mov	r2, r6
   b74ee:	f7ff ff5d 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b74f2:	4628      	mov	r0, r5
   b74f4:	f004 fa80 	bl	bb9f8 <close>
}
   b74f8:	4620      	mov	r0, r4
   b74fa:	b01f      	add	sp, #124	; 0x7c
   b74fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b74fe:	4913      	ldr	r1, [pc, #76]	; (b754c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b7500:	480e      	ldr	r0, [pc, #56]	; (b753c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7502:	4632      	mov	r2, r6
   b7504:	f7ff ff52 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b7508:	2143      	movs	r1, #67	; 0x43
   b750a:	4620      	mov	r0, r4
   b750c:	f7fc fdc7 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b7510:	2400      	movs	r4, #0
   b7512:	e7ee      	b.n	b74f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b7514:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b7518:	9302      	str	r3, [sp, #8]
   b751a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b751e:	9301      	str	r3, [sp, #4]
   b7520:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7524:	9300      	str	r3, [sp, #0]
   b7526:	490a      	ldr	r1, [pc, #40]	; (b7550 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b7528:	9b06      	ldr	r3, [sp, #24]
   b752a:	4804      	ldr	r0, [pc, #16]	; (b753c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b752c:	4632      	mov	r2, r6
   b752e:	f7ff ff3d 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
   b7532:	e7ed      	b.n	b7510 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b7534:	462c      	mov	r4, r5
    return result;
   b7536:	e7df      	b.n	b74f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b7538:	000bc4fc 	.word	0x000bc4fc
   b753c:	2003e620 	.word	0x2003e620
   b7540:	31b67663 	.word	0x31b67663
   b7544:	00410801 	.word	0x00410801
   b7548:	000bc510 	.word	0x000bc510
   b754c:	000bc532 	.word	0x000bc532
   b7550:	000bc560 	.word	0x000bc560

000b7554 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b7554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7558:	4680      	mov	r8, r0
   b755a:	4b28      	ldr	r3, [pc, #160]	; (b75fc <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b755c:	f848 3b04 	str.w	r3, [r8], #4
   b7560:	4604      	mov	r4, r0
   b7562:	4640      	mov	r0, r8
   b7564:	f000 fcd4 	bl	b7f10 <_ZN14SequentialFileC1Ev>
   b7568:	2202      	movs	r2, #2
   b756a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b756c:	2500      	movs	r5, #0
   b756e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7572:	2308      	movs	r3, #8
   b7574:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b7576:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b757a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b757e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b7582:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7586:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7588:	2020      	movs	r0, #32
   b758a:	f7fc fd84 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b758e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b7590:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7592:	3e01      	subs	r6, #1
   b7594:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7596:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b759a:	4607      	mov	r7, r0
   b759c:	f44f 7000 	mov.w	r0, #512	; 0x200
   b75a0:	f7fc fd79 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b75a4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b75a8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b75ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b75b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b75b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b75b8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b75bc:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b75c0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b75c4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b75c8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b75cc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b75d0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b75d4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b75d8:	4909      	ldr	r1, [pc, #36]	; (b7600 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b75da:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b75de:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b75e2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b75e6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b75ea:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b75ee:	4640      	mov	r0, r8
   b75f0:	f000 fcd4 	bl	b7f9c <_ZN14SequentialFile11withDirPathEPKc>
}
   b75f4:	4620      	mov	r0, r4
   b75f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b75fa:	bf00      	nop
   b75fc:	000bc770 	.word	0x000bc770
   b7600:	000bc5a5 	.word	0x000bc5a5

000b7604 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b7604:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7606:	4d06      	ldr	r5, [pc, #24]	; (b7620 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b7608:	682b      	ldr	r3, [r5, #0]
   b760a:	b93b      	cbnz	r3, b761c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b760c:	20d0      	movs	r0, #208	; 0xd0
   b760e:	f7fc fd42 	bl	b4096 <_Znwj>
   b7612:	4604      	mov	r4, r0
   b7614:	b108      	cbz	r0, b761a <_ZN17PublishQueuePosix8instanceEv+0x16>
   b7616:	f7ff ff9d 	bl	b7554 <_ZN17PublishQueuePosixC1Ev>
   b761a:	602c      	str	r4, [r5, #0]
}
   b761c:	6828      	ldr	r0, [r5, #0]
   b761e:	bd38      	pop	{r3, r4, r5, pc}
   b7620:	2003e624 	.word	0x2003e624

000b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7624:	6942      	ldr	r2, [r0, #20]
   b7626:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7628:	1a9b      	subs	r3, r3, r2
   b762a:	109b      	asrs	r3, r3, #2
   b762c:	1e5a      	subs	r2, r3, #1
   b762e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b7632:	1a5b      	subs	r3, r3, r1
   b7634:	109b      	asrs	r3, r3, #2
   b7636:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b763a:	6902      	ldr	r2, [r0, #16]
   b763c:	6880      	ldr	r0, [r0, #8]
   b763e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7640:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7644:	4770      	bx	lr

000b7646 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b7646:	b538      	push	{r3, r4, r5, lr}
   b7648:	4605      	mov	r5, r0
   b764a:	f7ff fecb 	bl	b73e4 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b764e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b7652:	f7ff ffe7 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b7656:	4604      	mov	r4, r0
   b7658:	b950      	cbnz	r0, b7670 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b765a:	1d28      	adds	r0, r5, #4
   b765c:	f000 ff94 	bl	b8588 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b7660:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b7664:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b7666:	b11b      	cbz	r3, b7670 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b7668:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b766c:	b903      	cbnz	r3, b7670 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b766e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b7670:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b7672:	f001 f829 	bl	b86c8 <os_mutex_recursive_unlock>
}
   b7676:	4620      	mov	r0, r4
   b7678:	bd38      	pop	{r3, r4, r5, pc}

000b767a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b767a:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b767c:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b767e:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b7680:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7682:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b7684:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b7686:	d002      	beq.n	b768e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b7688:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b768a:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b768c:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b768e:	68c0      	ldr	r0, [r0, #12]
   b7690:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7694:	f7fc fd03 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b7698:	6963      	ldr	r3, [r4, #20]
   b769a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b769c:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b769e:	685b      	ldr	r3, [r3, #4]
   b76a0:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b76a2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b76a6:	6122      	str	r2, [r4, #16]
   b76a8:	e7ef      	b.n	b768a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b76ac <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b76ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76b0:	b085      	sub	sp, #20
   b76b2:	4604      	mov	r4, r0
   b76b4:	f7ff fe96 	bl	b73e4 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b76b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7760 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b76bc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b7764 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b76c0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b7768 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b76c4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b76c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b76cc:	4293      	cmp	r3, r2
   b76ce:	d105      	bne.n	b76dc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b76d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b76d2:	b005      	add	sp, #20
   b76d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76d8:	f000 bff6 	b.w	b86c8 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b76dc:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b76e0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b76e4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b76e6:	f7ff ffc8 	bl	b767a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b76ea:	4640      	mov	r0, r8
   b76ec:	f000 fef0 	bl	b84d0 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b76f0:	2300      	movs	r3, #0
   b76f2:	4602      	mov	r2, r0
   b76f4:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b76f6:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b76f8:	4668      	mov	r0, sp
   b76fa:	f000 fcf1 	bl	b80e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b76fe:	9800      	ldr	r0, [sp, #0]
   b7700:	f240 2102 	movw	r1, #514	; 0x202
   b7704:	f004 f992 	bl	bba2c <open>
   b7708:	4605      	mov	r5, r0
   b770a:	4668      	mov	r0, sp
   b770c:	f002 fc38 	bl	b9f80 <_ZN6StringD1Ev>
            if (fd) {
   b7710:	b1c5      	cbz	r5, b7744 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b7712:	2208      	movs	r2, #8
   b7714:	4669      	mov	r1, sp
   b7716:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b7718:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b771c:	f004 f9ac 	bl	bba78 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b7720:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b7724:	f004 f8c1 	bl	bb8aa <strlen>
   b7728:	4639      	mov	r1, r7
   b772a:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b772e:	4628      	mov	r0, r5
   b7730:	f004 f9a2 	bl	bba78 <write>
                close(fd);
   b7734:	4628      	mov	r0, r5
   b7736:	f004 f95f 	bl	bb9f8 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b773a:	4808      	ldr	r0, [pc, #32]	; (b775c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b773c:	4632      	mov	r2, r6
   b773e:	4659      	mov	r1, fp
   b7740:	f7ff fe34 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b7744:	4631      	mov	r1, r6
   b7746:	4640      	mov	r0, r8
   b7748:	f000 ff04 	bl	b8554 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b774c:	2f00      	cmp	r7, #0
   b774e:	d0b9      	beq.n	b76c4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b7750:	2143      	movs	r1, #67	; 0x43
   b7752:	4638      	mov	r0, r7
   b7754:	f7fc fca3 	bl	b409e <_ZdlPvj>
   b7758:	e7b2      	b.n	b76c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b775a:	bf00      	nop
   b775c:	2003e620 	.word	0x2003e620
   b7760:	31b67663 	.word	0x31b67663
   b7764:	00410801 	.word	0x00410801
   b7768:	000bc5b3 	.word	0x000bc5b3

000b776c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7770:	4604      	mov	r4, r0
   b7772:	f7ff fe37 	bl	b73e4 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b7776:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b777a:	f7ff ff53 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b777e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7780:	4298      	cmp	r0, r3
   b7782:	d902      	bls.n	b778a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b7784:	4620      	mov	r0, r4
   b7786:	f7ff ff91 	bl	b76ac <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b778a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b77d0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b778e:	4f0f      	ldr	r7, [pc, #60]	; (b77cc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b7790:	1d26      	adds	r6, r4, #4
   b7792:	4630      	mov	r0, r6
   b7794:	f000 fef8 	bl	b8588 <_ZNK14SequentialFile11getQueueLenEv>
   b7798:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b779a:	4298      	cmp	r0, r3
   b779c:	dc04      	bgt.n	b77a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b779e:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b77a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b77a4:	f000 bf90 	b.w	b86c8 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b77a8:	2101      	movs	r1, #1
   b77aa:	4630      	mov	r0, r6
   b77ac:	f000 fe9c 	bl	b84e8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b77b0:	4605      	mov	r5, r0
   b77b2:	2800      	cmp	r0, #0
   b77b4:	d0ed      	beq.n	b7792 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b77b6:	4601      	mov	r1, r0
   b77b8:	2200      	movs	r2, #0
   b77ba:	4630      	mov	r0, r6
   b77bc:	f000 fccc 	bl	b8158 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b77c0:	462a      	mov	r2, r5
   b77c2:	4641      	mov	r1, r8
   b77c4:	4638      	mov	r0, r7
   b77c6:	f7fc ff01 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
   b77ca:	e7e2      	b.n	b7792 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b77cc:	2003e620 	.word	0x2003e620
   b77d0:	000bc5d0 	.word	0x000bc5d0

000b77d4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b77d4:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b77d6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b77da:	430b      	orrs	r3, r1
   b77dc:	d005      	beq.n	b77ea <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b77de:	3840      	subs	r0, #64	; 0x40
   b77e0:	ea50 0301 	orrs.w	r3, r0, r1
   b77e4:	d10b      	bne.n	b77fe <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b77e6:	2a09      	cmp	r2, #9
   b77e8:	d109      	bne.n	b77fe <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b77ea:	4905      	ldr	r1, [pc, #20]	; (b7800 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b77ec:	4805      	ldr	r0, [pc, #20]	; (b7804 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b77ee:	f7ff fddd 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b77f2:	f7ff ff07 	bl	b7604 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b77f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b77fa:	f7ff bf57 	b.w	b76ac <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	000bc5e3 	.word	0x000bc5e3
   b7804:	2003e620 	.word	0x2003e620

000b7808 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b7808:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b780a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b780c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b780e:	b183      	cbz	r3, b7832 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b7810:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7812:	6945      	ldr	r5, [r0, #20]
   b7814:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b7816:	42ae      	cmp	r6, r5
   b7818:	d906      	bls.n	b7828 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b781a:	f855 0b04 	ldr.w	r0, [r5], #4
   b781e:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7822:	f7fc fc3c 	bl	b409e <_ZdlPvj>
   b7826:	e7f6      	b.n	b7816 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b7828:	6861      	ldr	r1, [r4, #4]
   b782a:	6820      	ldr	r0, [r4, #0]
   b782c:	0089      	lsls	r1, r1, #2
   b782e:	f7fc fc36 	bl	b409e <_ZdlPvj>
    }
   b7832:	4620      	mov	r0, r4
   b7834:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b7838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b783a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b783e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b7840:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7842:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b7844:	b90a      	cbnz	r2, b784a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b7846:	07d9      	lsls	r1, r3, #31
   b7848:	d505      	bpl.n	b7856 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b784a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b784e:	4b0a      	ldr	r3, [pc, #40]	; (b7878 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b7850:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7852:	4b0a      	ldr	r3, [pc, #40]	; (b787c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b7854:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7856:	4621      	mov	r1, r4
   b7858:	4668      	mov	r0, sp
   b785a:	f7fd fb91 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b785e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7860:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7862:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7864:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7866:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7868:	4668      	mov	r0, sp
   b786a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b786c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b786e:	9203      	str	r2, [sp, #12]
   b7870:	f7fc fdfd 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	}
   b7874:	b004      	add	sp, #16
   b7876:	bd10      	pop	{r4, pc}
   b7878:	000b733f 	.word	0x000b733f
   b787c:	000b735d 	.word	0x000b735d

000b7880 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b7880:	b570      	push	{r4, r5, r6, lr}
   b7882:	b086      	sub	sp, #24
   b7884:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7886:	f001 f9e1 	bl	b8c4c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b788a:	b948      	cbnz	r0, b78a0 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b788c:	4b48      	ldr	r3, [pc, #288]	; (b79b0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b788e:	a902      	add	r1, sp, #8
   b7890:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b7894:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7898:	f7ff ffce 	bl	b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b789c:	b006      	add	sp, #24
   b789e:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b78a0:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b78a4:	b11d      	cbz	r5, b78ae <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b78a6:	2301      	movs	r3, #1
   b78a8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b78ac:	e7f6      	b.n	b789c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b78ae:	f000 ff4b 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b78b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b78b6:	1ac0      	subs	r0, r0, r3
   b78b8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b78bc:	4298      	cmp	r0, r3
   b78be:	d208      	bcs.n	b78d2 <_ZN17PublishQueuePosix9stateWaitEv+0x52>
        canSleep = (getNumEvents() == 0);
   b78c0:	4620      	mov	r0, r4
   b78c2:	f7ff fec0 	bl	b7646 <_ZN17PublishQueuePosix12getNumEventsEv>
   b78c6:	fab0 f080 	clz	r0, r0
   b78ca:	0940      	lsrs	r0, r0, #5
   b78cc:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        return;
   b78d0:	e7e4      	b.n	b789c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b78d2:	1d26      	adds	r6, r4, #4
   b78d4:	4629      	mov	r1, r5
   b78d6:	4630      	mov	r0, r6
   b78d8:	f000 fe06 	bl	b84e8 <_ZN14SequentialFile16getFileFromQueueEb>
   b78dc:	4601      	mov	r1, r0
   b78de:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b78e2:	2800      	cmp	r0, #0
   b78e4:	d052      	beq.n	b798c <_ZN17PublishQueuePosix9stateWaitEv+0x10c>
        curEvent = readQueueFile(curFileNum);
   b78e6:	4620      	mov	r0, r4
   b78e8:	f7ff fdb0 	bl	b744c <_ZN17PublishQueuePosix13readQueueFileEi>
   b78ec:	4605      	mov	r5, r0
   b78ee:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b78f2:	2800      	cmp	r0, #0
   b78f4:	d035      	beq.n	b7962 <_ZN17PublishQueuePosix9stateWaitEv+0xe2>
   b78f6:	f000 ff27 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b78fa:	ae02      	add	r6, sp, #8
   b78fc:	2500      	movs	r5, #0
   b78fe:	4b2d      	ldr	r3, [pc, #180]	; (b79b4 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
        stateTime = millis();
   b7900:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b7904:	4631      	mov	r1, r6
   b7906:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b790a:	9302      	str	r3, [sp, #8]
   b790c:	9503      	str	r5, [sp, #12]
   b790e:	f7ff ff93 	bl	b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7912:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b7916:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b791a:	9200      	str	r2, [sp, #0]
   b791c:	4926      	ldr	r1, [pc, #152]	; (b79b8 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
   b791e:	4a27      	ldr	r2, [pc, #156]	; (b79bc <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
        publishComplete = false;
   b7920:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7924:	42a8      	cmp	r0, r5
   b7926:	bf08      	it	eq
   b7928:	460a      	moveq	r2, r1
   b792a:	3301      	adds	r3, #1
   b792c:	4924      	ldr	r1, [pc, #144]	; (b79c0 <_ZN17PublishQueuePosix9stateWaitEv+0x140>)
   b792e:	4825      	ldr	r0, [pc, #148]	; (b79c4 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
        canSleep = false;
   b7930:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b7934:	f7ff fd3a 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b7938:	f7ff fb62 	bl	b7000 <_ZN19BackgroundPublishRK8instanceEv>
   b793c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b7940:	4b21      	ldr	r3, [pc, #132]	; (b79c8 <_ZN17PublishQueuePosix9stateWaitEv+0x148>)
   b7942:	9305      	str	r3, [sp, #20]
   b7944:	e9cd 6500 	strd	r6, r5, [sp]
   b7948:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b794a:	4b20      	ldr	r3, [pc, #128]	; (b79cc <_ZN17PublishQueuePosix9stateWaitEv+0x14c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b794c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b794e:	9304      	str	r3, [sp, #16]
   b7950:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7954:	3242      	adds	r2, #66	; 0x42
   b7956:	f7ff fc8d 	bl	b7274 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b795a:	4630      	mov	r0, r6
   b795c:	f7fc fd87 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b7960:	e79c      	b.n	b789c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b7962:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b7966:	491a      	ldr	r1, [pc, #104]	; (b79d0 <_ZN17PublishQueuePosix9stateWaitEv+0x150>)
   b7968:	4816      	ldr	r0, [pc, #88]	; (b79c4 <_ZN17PublishQueuePosix9stateWaitEv+0x144>)
   b796a:	f7fc fe2f 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b796e:	2101      	movs	r1, #1
   b7970:	4630      	mov	r0, r6
   b7972:	f000 fdb9 	bl	b84e8 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b7976:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b797a:	462a      	mov	r2, r5
   b797c:	4630      	mov	r0, r6
   b797e:	f000 fbeb 	bl	b8158 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b7982:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7986:	2b00      	cmp	r3, #0
   b7988:	d1b5      	bne.n	b78f6 <_ZN17PublishQueuePosix9stateWaitEv+0x76>
   b798a:	e78c      	b.n	b78a6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b798c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b7990:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7994:	429a      	cmp	r2, r3
   b7996:	d007      	beq.n	b79a8 <_ZN17PublishQueuePosix9stateWaitEv+0x128>
            curEvent = ramQueue.front();
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b799e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b79a2:	f7ff fe6a 	bl	b767a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b79a6:	e7ec      	b.n	b7982 <_ZN17PublishQueuePosix9stateWaitEv+0x102>
            curEvent = NULL;
   b79a8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b79ac:	e77b      	b.n	b78a6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b79ae:	bf00      	nop
   b79b0:	000b79d5 	.word	0x000b79d5
   b79b4:	000b7d4d 	.word	0x000b7d4d
   b79b8:	000bc612 	.word	0x000bc612
   b79bc:	000bc86a 	.word	0x000bc86a
   b79c0:	000bc633 	.word	0x000bc633
   b79c4:	2003e620 	.word	0x2003e620
   b79c8:	000b732f 	.word	0x000b732f
   b79cc:	000b7375 	.word	0x000b7375
   b79d0:	000bc616 	.word	0x000bc616

000b79d4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b79d4:	b513      	push	{r0, r1, r4, lr}
    canSleep = (pausePublishing || getNumEvents() == 0);
   b79d6:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
void PublishQueuePosix::stateConnectWait() {
   b79da:	4604      	mov	r4, r0
    canSleep = (pausePublishing || getNumEvents() == 0);
   b79dc:	b923      	cbnz	r3, b79e8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x14>
   b79de:	f7ff fe32 	bl	b7646 <_ZN17PublishQueuePosix12getNumEventsEv>
   b79e2:	fab0 f380 	clz	r3, r0
   b79e6:	095b      	lsrs	r3, r3, #5
   b79e8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b79ec:	f001 f92e 	bl	b8c4c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b79f0:	b180      	cbz	r0, b7a14 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x40>
   b79f2:	f000 fea9 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b79f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b79fa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b79fe:	4b06      	ldr	r3, [pc, #24]	; (b7a18 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x44>)
        stateTime = millis();
   b7a00:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b7a04:	9300      	str	r3, [sp, #0]
   b7a06:	4669      	mov	r1, sp
   b7a08:	2300      	movs	r3, #0
   b7a0a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7a0e:	9301      	str	r3, [sp, #4]
   b7a10:	f7ff ff12 	bl	b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b7a14:	b002      	add	sp, #8
   b7a16:	bd10      	pop	{r4, pc}
   b7a18:	000b7881 	.word	0x000b7881

000b7a1c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b7a1c:	b570      	push	{r4, r5, r6, lr}
   b7a1e:	4605      	mov	r5, r0
   b7a20:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b7a22:	2000      	movs	r0, #0
   b7a24:	f001 f8ba 	bl	b8b9c <system_thread_get_state>
   b7a28:	2801      	cmp	r0, #1
   b7a2a:	d005      	beq.n	b7a38 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b7a2c:	493e      	ldr	r1, [pc, #248]	; (b7b28 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b7a2e:	483f      	ldr	r0, [pc, #252]	; (b7b2c <_ZN17PublishQueuePosix5setupEv+0x110>)
   b7a30:	f7ff fcca 	bl	b73c8 <_ZNK5spark6Logger5errorEPKcz>
}
   b7a34:	b018      	add	sp, #96	; 0x60
   b7a36:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b7a38:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b7a3c:	f000 fe34 	bl	b86a8 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7a40:	4b3b      	ldr	r3, [pc, #236]	; (b7b30 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b7a42:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7a44:	4b3b      	ldr	r3, [pc, #236]	; (b7b34 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b7a46:	9307      	str	r3, [sp, #28]
        };
   b7a48:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b7a4a:	4b3b      	ldr	r3, [pc, #236]	; (b7b38 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b7a4c:	9306      	str	r3, [sp, #24]
   b7a4e:	a808      	add	r0, sp, #32
   b7a50:	f7fc ffba 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b7a54:	a908      	add	r1, sp, #32
   b7a56:	a80c      	add	r0, sp, #48	; 0x30
   b7a58:	f7fc ffb6 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b7a5c:	a90c      	add	r1, sp, #48	; 0x30
   b7a5e:	a810      	add	r0, sp, #64	; 0x40
   b7a60:	f7fc ffb2 	bl	b49c8 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b7a64:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a66:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b7a68:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a6a:	f7fc fb14 	bl	b4096 <_Znwj>
   b7a6e:	4604      	mov	r4, r0
   b7a70:	b160      	cbz	r0, b7a8c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b7a72:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7a74:	4601      	mov	r1, r0
   b7a76:	a810      	add	r0, sp, #64	; 0x40
   b7a78:	f7fd fa82 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b7a7e:	68a2      	ldr	r2, [r4, #8]
   b7a80:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b7a82:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a84:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b7a88:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a8a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b7a8c:	4b2b      	ldr	r3, [pc, #172]	; (b7b3c <_ZN17PublishQueuePosix5setupEv+0x120>)
   b7a8e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b7a90:	4b2b      	ldr	r3, [pc, #172]	; (b7b40 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b7a92:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b7a94:	4b2b      	ldr	r3, [pc, #172]	; (b7b44 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a96:	9414      	str	r4, [sp, #80]	; 0x50
   b7a98:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b7a9a:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b7a9c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b7aa0:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b7aa2:	f7fc faf8 	bl	b4096 <_Znwj>
   b7aa6:	4604      	mov	r4, r0
   b7aa8:	b1d8      	cbz	r0, b7ae2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b7aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b7aac:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b7aae:	b133      	cbz	r3, b7abe <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7ab0:	2202      	movs	r2, #2
   b7ab2:	a914      	add	r1, sp, #80	; 0x50
   b7ab4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ab8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7aba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b7abc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b7abe:	4b22      	ldr	r3, [pc, #136]	; (b7b48 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b7ac0:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7ac2:	4a22      	ldr	r2, [pc, #136]	; (b7b4c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b7ac4:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b7ac6:	ab01      	add	r3, sp, #4
   b7ac8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b7acc:	2100      	movs	r1, #0
   b7ace:	f001 f83d 	bl	b8b4c <system_subscribe_event>
        if (r) {
   b7ad2:	b130      	cbz	r0, b7ae2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	f7fc fcca 	bl	b446e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b7ada:	2110      	movs	r1, #16
   b7adc:	4620      	mov	r0, r4
   b7ade:	f7fc fade 	bl	b409e <_ZdlPvj>
   b7ae2:	a814      	add	r0, sp, #80	; 0x50
   b7ae4:	f7fc fcc3 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b7ae8:	a810      	add	r0, sp, #64	; 0x40
   b7aea:	f7fc fcc0 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b7aee:	a80c      	add	r0, sp, #48	; 0x30
   b7af0:	f7fc fcbd 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b7af4:	a808      	add	r0, sp, #32
   b7af6:	f7fc fcba 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b7afa:	a804      	add	r0, sp, #16
   b7afc:	f7fc fcb7 	bl	b446e <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b7b00:	f7ff fa7e 	bl	b7000 <_ZN19BackgroundPublishRK8instanceEv>
   b7b04:	f7ff fb90 	bl	b7228 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b7b08:	1d28      	adds	r0, r5, #4
   b7b0a:	f000 fc69 	bl	b83e0 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b7b0e:	4628      	mov	r0, r5
   b7b10:	f7ff fe2c 	bl	b776c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b7b14:	4b0e      	ldr	r3, [pc, #56]	; (b7b50 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b7b16:	9314      	str	r3, [sp, #80]	; 0x50
   b7b18:	a914      	add	r1, sp, #80	; 0x50
   b7b1a:	2300      	movs	r3, #0
   b7b1c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b7b20:	9315      	str	r3, [sp, #84]	; 0x54
   b7b22:	f7ff fe89 	bl	b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b7b26:	e785      	b.n	b7a34 <_ZN17PublishQueuePosix5setupEv+0x18>
   b7b28:	000bc652 	.word	0x000bc652
   b7b2c:	2003e620 	.word	0x2003e620
   b7b30:	000b77d5 	.word	0x000b77d5
   b7b34:	000b41fd 	.word	0x000b41fd
   b7b38:	000b41e9 	.word	0x000b41e9
   b7b3c:	000b41c3 	.word	0x000b41c3
   b7b40:	000b49e7 	.word	0x000b49e7
   b7b44:	000c0002 	.word	0x000c0002
   b7b48:	000b4481 	.word	0x000b4481
   b7b4c:	000b40e9 	.word	0x000b40e9
   b7b50:	000b79d5 	.word	0x000b79d5

000b7b54 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b7b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7b58:	4606      	mov	r6, r0
   b7b5a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7b5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7b5e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7b60:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b7b62:	1a47      	subs	r7, r0, r1
   b7b64:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b7b68:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7b6a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b7b6e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b7b70:	d927      	bls.n	b7bc2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b7b72:	1b5d      	subs	r5, r3, r5
   b7b74:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7b76:	6832      	ldr	r2, [r6, #0]
   b7b78:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b7b7a:	b10c      	cbz	r4, b7b80 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b7b7c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b7b80:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b7b82:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b7b84:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b7b86:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b7b88:	eba3 0201 	sub.w	r2, r3, r1
   b7b8c:	d913      	bls.n	b7bb6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b7b8e:	4299      	cmp	r1, r3
   b7b90:	d002      	beq.n	b7b98 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7b92:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7b94:	f003 fe0a 	bl	bb7ac <memmove>
	_M_node = __new_node;
   b7b98:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b7b9a:	6823      	ldr	r3, [r4, #0]
   b7b9c:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7b9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7ba2:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b7ba4:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b7ba6:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b7ba8:	59e3      	ldr	r3, [r4, r7]
   b7baa:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7bac:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b7bb0:	6233      	str	r3, [r6, #32]
    }
   b7bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b7bb6:	4299      	cmp	r1, r3
   b7bb8:	d0ee      	beq.n	b7b98 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b7bba:	1d38      	adds	r0, r7, #4
   b7bbc:	1a80      	subs	r0, r0, r2
   b7bbe:	4420      	add	r0, r4
   b7bc0:	e7e8      	b.n	b7b94 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b7bc2:	f103 0802 	add.w	r8, r3, #2
   b7bc6:	454b      	cmp	r3, r9
   b7bc8:	bf2c      	ite	cs
   b7bca:	4498      	addcs	r8, r3
   b7bcc:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b7bce:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b7bd2:	d301      	bcc.n	b7bd8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b7bd4:	f003 f880 	bl	bacd8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7bd8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b7bdc:	f7fc fa5b 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b7be0:	eba8 0505 	sub.w	r5, r8, r5
   b7be4:	086d      	lsrs	r5, r5, #1
   b7be6:	4682      	mov	sl, r0
   b7be8:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b7bea:	b10c      	cbz	r4, b7bf0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b7bec:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b7bf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b7bf2:	6971      	ldr	r1, [r6, #20]
   b7bf4:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b7bf6:	442c      	add	r4, r5
	  if (_Num)
   b7bf8:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b7bfa:	4454      	add	r4, sl
   b7bfc:	d003      	beq.n	b7c06 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b7bfe:	1a52      	subs	r2, r2, r1
   b7c00:	4620      	mov	r0, r4
   b7c02:	f003 fdd3 	bl	bb7ac <memmove>
	::operator delete(__p
   b7c06:	6871      	ldr	r1, [r6, #4]
   b7c08:	6830      	ldr	r0, [r6, #0]
   b7c0a:	0089      	lsls	r1, r1, #2
   b7c0c:	f7fc fa47 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b7c10:	e9c6 a800 	strd	sl, r8, [r6]
   b7c14:	e7c0      	b.n	b7b98 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b7c18 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b7c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c1a:	b085      	sub	sp, #20
   b7c1c:	4604      	mov	r4, r0
   b7c1e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b7c22:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b7c26:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b7c28:	460f      	mov	r7, r1
   b7c2a:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b7c2c:	f7ff fbe6 	bl	b73fc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b7c30:	4605      	mov	r5, r0
   b7c32:	2800      	cmp	r0, #0
   b7c34:	d03c      	beq.n	b7cb0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b7c36:	4b3f      	ldr	r3, [pc, #252]	; (b7d34 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b7c38:	493f      	ldr	r1, [pc, #252]	; (b7d38 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b7c3a:	4840      	ldr	r0, [pc, #256]	; (b7d3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b7c3c:	2e00      	cmp	r6, #0
   b7c3e:	bf18      	it	ne
   b7c40:	4633      	movne	r3, r6
   b7c42:	463a      	mov	r2, r7
   b7c44:	f7ff fbb2 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
   b7c48:	4620      	mov	r0, r4
   b7c4a:	f7ff fbcb 	bl	b73e4 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b7c4e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b7c52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b7c56:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b7c58:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b7c5a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b7c5e:	d029      	beq.n	b7cb4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c60:	b103      	cbz	r3, b7c64 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b7c62:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b7c64:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b7c68:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b7c6a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b7c6c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b7c70:	4628      	mov	r0, r5
   b7c72:	f000 fc89 	bl	b8588 <_ZNK14SequentialFile11getQueueLenEv>
   b7c76:	9003      	str	r0, [sp, #12]
   b7c78:	4630      	mov	r0, r6
   b7c7a:	f7ff fcd3 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7c7e:	9002      	str	r0, [sp, #8]
   b7c80:	f000 ffe4 	bl	b8c4c <spark_cloud_flag_connected>
   b7c84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b7c88:	9000      	str	r0, [sp, #0]
   b7c8a:	492d      	ldr	r1, [pc, #180]	; (b7d40 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b7c8c:	482b      	ldr	r0, [pc, #172]	; (b7d3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b7c8e:	f7ff fb8d 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b7c92:	4628      	mov	r0, r5
   b7c94:	f000 fc78 	bl	b8588 <_ZNK14SequentialFile11getQueueLenEv>
   b7c98:	2800      	cmp	r0, #0
   b7c9a:	d03b      	beq.n	b7d14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b7c9c:	4620      	mov	r0, r4
   b7c9e:	f7ff fd05 	bl	b76ac <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b7ca2:	4620      	mov	r0, r4
   b7ca4:	f7ff fd62 	bl	b776c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b7ca8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b7caa:	f000 fd0d 	bl	b86c8 <os_mutex_recursive_unlock>
    return true;
   b7cae:	2001      	movs	r0, #1
}
   b7cb0:	b005      	add	sp, #20
   b7cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b7cb4:	4630      	mov	r0, r6
   b7cb6:	f7ff fcb5 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7cba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b7cbe:	4298      	cmp	r0, r3
   b7cc0:	d102      	bne.n	b7cc8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b7cc2:	4820      	ldr	r0, [pc, #128]	; (b7d44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b7cc4:	f003 f80b 	bl	bacde <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b7cc8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b7ccc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b7cce:	1a9a      	subs	r2, r3, r2
   b7cd0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b7cd2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b7cd6:	2b01      	cmp	r3, #1
   b7cd8:	d804      	bhi.n	b7ce4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b7cda:	2200      	movs	r2, #0
   b7cdc:	2101      	movs	r1, #1
   b7cde:	4630      	mov	r0, r6
   b7ce0:	f7ff ff38 	bl	b7b54 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7ce4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b7ce8:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b7cec:	f7fc f9d3 	bl	b4096 <_Znwj>
   b7cf0:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b7cf2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7cf6:	b103      	cbz	r3, b7cfa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b7cf8:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b7cfa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b7cfe:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7d00:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b7d04:	685b      	ldr	r3, [r3, #4]
   b7d06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7d0a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7d0e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b7d12:	e7aa      	b.n	b7c6a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b7d14:	4630      	mov	r0, r6
   b7d16:	f7ff fc85 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7d1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7d1c:	4298      	cmp	r0, r3
   b7d1e:	d8bd      	bhi.n	b7c9c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b7d20:	f000 ff94 	bl	b8c4c <spark_cloud_flag_connected>
   b7d24:	2800      	cmp	r0, #0
   b7d26:	d0b9      	beq.n	b7c9c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b7d28:	4907      	ldr	r1, [pc, #28]	; (b7d48 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b7d2a:	4804      	ldr	r0, [pc, #16]	; (b7d3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b7d2c:	f7ff fb3e 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
   b7d30:	e7b7      	b.n	b7ca2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b7d32:	bf00      	nop
   b7d34:	000bcac0 	.word	0x000bcac0
   b7d38:	000bc675 	.word	0x000bc675
   b7d3c:	2003e620 	.word	0x2003e620
   b7d40:	000bc6cd 	.word	0x000bc6cd
   b7d44:	000bc69d 	.word	0x000bc69d
   b7d48:	000bc6f9 	.word	0x000bc6f9

000b7d4c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b7d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b7d4e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b7d52:	4604      	mov	r4, r0
    if (!publishComplete) {
   b7d54:	2b00      	cmp	r3, #0
   b7d56:	d041      	beq.n	b7ddc <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b7d58:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b7d5c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b7d60:	2b00      	cmp	r3, #0
   b7d62:	d03d      	beq.n	b7de0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b7d64:	4950      	ldr	r1, [pc, #320]	; (b7ea8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b7d66:	4851      	ldr	r0, [pc, #324]	; (b7eac <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7d68:	f7ff fb20 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b7d6c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7d70:	b1d3      	cbz	r3, b7da8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b7d72:	1d26      	adds	r6, r4, #4
   b7d74:	2100      	movs	r1, #0
   b7d76:	4630      	mov	r0, r6
   b7d78:	f000 fbb6 	bl	b84e8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b7d7c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7d80:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b7d82:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b7d84:	d10d      	bne.n	b7da2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b7d86:	2101      	movs	r1, #1
   b7d88:	4630      	mov	r0, r6
   b7d8a:	f000 fbad 	bl	b84e8 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b7d8e:	2200      	movs	r2, #0
   b7d90:	4629      	mov	r1, r5
   b7d92:	4630      	mov	r0, r6
   b7d94:	f000 f9e0 	bl	b8158 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b7d98:	4945      	ldr	r1, [pc, #276]	; (b7eb0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b7d9a:	4844      	ldr	r0, [pc, #272]	; (b7eac <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7d9c:	462a      	mov	r2, r5
   b7d9e:	f7ff fb05 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b7da2:	2300      	movs	r3, #0
   b7da4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b7da8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b7dac:	b110      	cbz	r0, b7db4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b7dae:	2143      	movs	r1, #67	; 0x43
   b7db0:	f7fc f975 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b7db4:	2300      	movs	r3, #0
   b7db6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b7dba:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b7dbe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b7dc2:	4b3c      	ldr	r3, [pc, #240]	; (b7eb4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b7dc4:	9300      	str	r3, [sp, #0]
   b7dc6:	4669      	mov	r1, sp
   b7dc8:	2300      	movs	r3, #0
   b7dca:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b7dce:	9301      	str	r3, [sp, #4]
   b7dd0:	f7ff fd32 	bl	b7838 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b7dd4:	f000 fcb8 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b7dd8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b7ddc:	b002      	add	sp, #8
   b7dde:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b7de0:	4935      	ldr	r1, [pc, #212]	; (b7eb8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b7de2:	4832      	ldr	r0, [pc, #200]	; (b7eac <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7de4:	f7ff fae2 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b7de8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b7dec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b7df0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7df4:	b14b      	cbz	r3, b7e0a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b7df6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b7dfa:	b110      	cbz	r0, b7e02 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b7dfc:	2143      	movs	r1, #67	; 0x43
   b7dfe:	f7fc f94e 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b7e02:	2300      	movs	r3, #0
   b7e04:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b7e08:	e7db      	b.n	b7dc2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b7e0a:	4620      	mov	r0, r4
   b7e0c:	f7ff faea 	bl	b73e4 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b7e10:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b7e14:	4293      	cmp	r3, r2
   b7e16:	d013      	beq.n	b7e40 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b7e18:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7e1c:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b7e20:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b7e24:	3b04      	subs	r3, #4
   b7e26:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b7e2a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b7e2c:	f000 fc4c 	bl	b86c8 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b7e30:	4922      	ldr	r1, [pc, #136]	; (b7ebc <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b7e32:	481e      	ldr	r0, [pc, #120]	; (b7eac <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b7e34:	f7ff faba 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b7e38:	4620      	mov	r0, r4
   b7e3a:	f7ff fc37 	bl	b76ac <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b7e3e:	e7c0      	b.n	b7dc2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b7e40:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b7e44:	4628      	mov	r0, r5
   b7e46:	f7ff fbed 	bl	b7624 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7e4a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b7e4e:	4298      	cmp	r0, r3
   b7e50:	d102      	bne.n	b7e58 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b7e52:	481b      	ldr	r0, [pc, #108]	; (b7ec0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b7e54:	f002 ff43 	bl	bacde <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b7e58:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b7e5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b7e5e:	429a      	cmp	r2, r3
   b7e60:	d104      	bne.n	b7e6c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b7e62:	2201      	movs	r2, #1
   b7e64:	4611      	mov	r1, r2
   b7e66:	4628      	mov	r0, r5
   b7e68:	f7ff fe74 	bl	b7b54 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7e6c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b7e70:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b7e74:	f7fc f90f 	bl	b4096 <_Znwj>
   b7e78:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b7e7c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b7e80:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b7e82:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b7e86:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b7e8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7e8e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7e92:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b7e96:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b7e9a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7e9e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7ea2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b7ea6:	e7c0      	b.n	b7e2a <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b7ea8:	000bc70c 	.word	0x000bc70c
   b7eac:	2003e620 	.word	0x2003e620
   b7eb0:	000bc71f 	.word	0x000bc71f
   b7eb4:	000b7881 	.word	0x000b7881
   b7eb8:	000bc72f 	.word	0x000bc72f
   b7ebc:	000bc741 	.word	0x000bc741
   b7ec0:	000bc69d 	.word	0x000bc69d

000b7ec4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   b7ec4:	4b01      	ldr	r3, [pc, #4]	; (b7ecc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b7ec6:	4a02      	ldr	r2, [pc, #8]	; (b7ed0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b7ec8:	601a      	str	r2, [r3, #0]
}
   b7eca:	4770      	bx	lr
   b7ecc:	2003e620 	.word	0x2003e620
   b7ed0:	000bc4cc 	.word	0x000bc4cc

000b7ed4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b7ed4:	b510      	push	{r4, lr}
   b7ed6:	4b07      	ldr	r3, [pc, #28]	; (b7ef4 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b7ed8:	4604      	mov	r4, r0
   b7eda:	f840 3bc0 	str.w	r3, [r0], #192
   b7ede:	f7fc fac6 	bl	b446e <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b7ee2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b7ee6:	f7ff fc8f 	bl	b7808 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b7eea:	1d20      	adds	r0, r4, #4
   b7eec:	f000 f9b8 	bl	b8260 <_ZN14SequentialFileD1Ev>
}
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	bd10      	pop	{r4, pc}
   b7ef4:	000bc770 	.word	0x000bc770

000b7ef8 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b7ef8:	b510      	push	{r4, lr}
   b7efa:	4604      	mov	r4, r0
}
   b7efc:	f7ff ffea 	bl	b7ed4 <_ZN17PublishQueuePosixD1Ev>
   b7f00:	4620      	mov	r0, r4
   b7f02:	21d0      	movs	r1, #208	; 0xd0
   b7f04:	f7fc f8cb 	bl	b409e <_ZdlPvj>
   b7f08:	4620      	mov	r0, r4
   b7f0a:	bd10      	pop	{r4, pc}

000b7f0c <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b7f0c:	2001      	movs	r0, #1
   b7f0e:	4770      	bx	lr

000b7f10 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b7f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f12:	4d1f      	ldr	r5, [pc, #124]	; (b7f90 <_ZN14SequentialFileC1Ev+0x80>)
   b7f14:	4b1f      	ldr	r3, [pc, #124]	; (b7f94 <_ZN14SequentialFileC1Ev+0x84>)
   b7f16:	4604      	mov	r4, r0
   b7f18:	4629      	mov	r1, r5
   b7f1a:	f840 3b04 	str.w	r3, [r0], #4
   b7f1e:	f002 f87a 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f22:	491d      	ldr	r1, [pc, #116]	; (b7f98 <_ZN14SequentialFileC1Ev+0x88>)
   b7f24:	f104 0014 	add.w	r0, r4, #20
   b7f28:	f002 f875 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f2c:	4629      	mov	r1, r5
   b7f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7f32:	f002 f870 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f36:	2300      	movs	r3, #0
   b7f38:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b7f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b7f40:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b7f44:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b7f48:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b7f4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7f50:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7f52:	2308      	movs	r3, #8
   b7f54:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7f56:	2020      	movs	r0, #32
   b7f58:	f7fc f89d 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7f5c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b7f5e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7f60:	3d01      	subs	r5, #1
   b7f62:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7f64:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b7f68:	4606      	mov	r6, r0
   b7f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
   b7f6e:	f7fc f892 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7f72:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b7f76:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b7f7a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b7f7e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b7f80:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7f82:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b7f84:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7f86:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b7f88:	6667      	str	r7, [r4, #100]	; 0x64

}
   b7f8a:	4620      	mov	r0, r4
   b7f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7f8e:	bf00      	nop
   b7f90:	000bcac0 	.word	0x000bcac0
   b7f94:	000bc878 	.word	0x000bc878
   b7f98:	000bc77c 	.word	0x000bc77c

000b7f9c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b7f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b7f9e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b7fa0:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b7fa2:	4628      	mov	r0, r5
   b7fa4:	f002 f88a 	bl	ba0bc <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b7fa8:	490e      	ldr	r1, [pc, #56]	; (b7fe4 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b7faa:	4668      	mov	r0, sp
   b7fac:	f002 f833 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b7fb0:	4669      	mov	r1, sp
   b7fb2:	4628      	mov	r0, r5
   b7fb4:	f002 f902 	bl	ba1bc <_ZNK6String8endsWithERKS_>
   b7fb8:	4606      	mov	r6, r0
   b7fba:	4668      	mov	r0, sp
   b7fbc:	f001 ffe0 	bl	b9f80 <_ZN6StringD1Ev>
   b7fc0:	b16e      	cbz	r6, b7fde <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b7fc2:	68e3      	ldr	r3, [r4, #12]
   b7fc4:	2200      	movs	r2, #0
   b7fc6:	3b01      	subs	r3, #1
   b7fc8:	4629      	mov	r1, r5
   b7fca:	4668      	mov	r0, sp
   b7fcc:	f002 f90c 	bl	ba1e8 <_ZNK6String9substringEjj>
   b7fd0:	4669      	mov	r1, sp
   b7fd2:	4628      	mov	r0, r5
   b7fd4:	f002 f86a 	bl	ba0ac <_ZN6StringaSEOS_>
   b7fd8:	4668      	mov	r0, sp
   b7fda:	f001 ffd1 	bl	b9f80 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b7fde:	4620      	mov	r0, r4
   b7fe0:	b004      	add	sp, #16
   b7fe2:	bd70      	pop	{r4, r5, r6, pc}
   b7fe4:	000bc014 	.word	0x000bc014

000b7fe8 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b7fe8:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b7fea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b7fec:	4604      	mov	r4, r0
    if (!queueMutex) {
   b7fee:	b913      	cbnz	r3, b7ff6 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b7ff0:	303c      	adds	r0, #60	; 0x3c
   b7ff2:	f000 fb41 	bl	b8678 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b7ff6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b7ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b7ffc:	f000 bb44 	b.w	b8688 <os_mutex_lock>

000b8000 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b8000:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8002:	f000 bb49 	b.w	b8698 <os_mutex_unlock>
	...

000b8008 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b8008:	b510      	push	{r4, lr}
   b800a:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b800c:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b800e:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b8010:	f000 fcc2 	bl	b8998 <stat>
    if (result == 0) {
   b8014:	b9d0      	cbnz	r0, b804c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b8016:	9b01      	ldr	r3, [sp, #4]
   b8018:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b801a:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b801c:	d506      	bpl.n	b802c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b801e:	4915      	ldr	r1, [pc, #84]	; (b8074 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b8020:	4815      	ldr	r0, [pc, #84]	; (b8078 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b8022:	f7fc fad3 	bl	b45cc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b8026:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b8028:	b016      	add	sp, #88	; 0x58
   b802a:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b802c:	4812      	ldr	r0, [pc, #72]	; (b8078 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b802e:	4913      	ldr	r1, [pc, #76]	; (b807c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b8030:	f7ff f9ca 	bl	b73c8 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b8034:	4620      	mov	r0, r4
   b8036:	f003 fd17 	bl	bba68 <unlink>
    result = mkdir(path, 0777);
   b803a:	f240 11ff 	movw	r1, #511	; 0x1ff
   b803e:	4620      	mov	r0, r4
   b8040:	f000 fcb2 	bl	b89a8 <mkdir>
    if (result == 0) {
   b8044:	b980      	cbnz	r0, b8068 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b8046:	490e      	ldr	r1, [pc, #56]	; (b8080 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b8048:	4622      	mov	r2, r4
   b804a:	e7e9      	b.n	b8020 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b804c:	f000 fef6 	bl	b8e3c <__errno>
   b8050:	6803      	ldr	r3, [r0, #0]
   b8052:	2b02      	cmp	r3, #2
   b8054:	d0f1      	beq.n	b803a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b8056:	f000 fef1 	bl	b8e3c <__errno>
   b805a:	490a      	ldr	r1, [pc, #40]	; (b8084 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b805c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b805e:	4806      	ldr	r0, [pc, #24]	; (b8078 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b8060:	f7ff f9b2 	bl	b73c8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b8064:	2000      	movs	r0, #0
   b8066:	e7df      	b.n	b8028 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b8068:	f000 fee8 	bl	b8e3c <__errno>
   b806c:	4906      	ldr	r1, [pc, #24]	; (b8088 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b806e:	6802      	ldr	r2, [r0, #0]
   b8070:	e7f5      	b.n	b805e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b8072:	bf00      	nop
   b8074:	000bc78c 	.word	0x000bc78c
   b8078:	2003e628 	.word	0x2003e628
   b807c:	000bc7a9 	.word	0x000bc7a9
   b8080:	000bc7da 	.word	0x000bc7da
   b8084:	000bc7c6 	.word	0x000bc7c6
   b8088:	000bc7e9 	.word	0x000bc7e9

000b808c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b808c:	b538      	push	{r3, r4, r5, lr}
   b808e:	4615      	mov	r5, r2
   b8090:	4604      	mov	r4, r0
    String result = name;
   b8092:	f001 ffc0 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b8096:	b14d      	cbz	r5, b80ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b8098:	782b      	ldrb	r3, [r5, #0]
   b809a:	b13b      	cbz	r3, b80ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b809c:	4904      	ldr	r1, [pc, #16]	; (b80b0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b809e:	4620      	mov	r0, r4
   b80a0:	f002 f848 	bl	ba134 <_ZN6String6concatEPKc>
   b80a4:	4629      	mov	r1, r5
   b80a6:	4620      	mov	r0, r4
   b80a8:	f002 f844 	bl	ba134 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b80ac:	4620      	mov	r0, r4
   b80ae:	bd38      	pop	{r3, r4, r5, pc}
   b80b0:	000bca14 	.word	0x000bca14

000b80b4 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b80b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b80b6:	4605      	mov	r5, r0
   b80b8:	460e      	mov	r6, r1
   b80ba:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b80bc:	6949      	ldr	r1, [r1, #20]
   b80be:	4668      	mov	r0, sp
   b80c0:	f002 f8b2 	bl	ba228 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b80c4:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b80c6:	b904      	cbnz	r4, b80ca <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b80c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b80ca:	4622      	mov	r2, r4
   b80cc:	4628      	mov	r0, r5
   b80ce:	f7ff ffdd 	bl	b808c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b80d2:	4668      	mov	r0, sp
   b80d4:	f001 ff54 	bl	b9f80 <_ZN6StringD1Ev>
}
   b80d8:	4628      	mov	r0, r5
   b80da:	b004      	add	sp, #16
   b80dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b80e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b80e0:	b570      	push	{r4, r5, r6, lr}
   b80e2:	460c      	mov	r4, r1
   b80e4:	b08e      	sub	sp, #56	; 0x38
    String result;
   b80e6:	491a      	ldr	r1, [pc, #104]	; (b8150 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b80e8:	e9cd 3200 	strd	r3, r2, [sp]
   b80ec:	4605      	mov	r5, r0
    String result;
   b80ee:	f001 ff92 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b80f2:	68e0      	ldr	r0, [r4, #12]
   b80f4:	69e1      	ldr	r1, [r4, #28]
   b80f6:	4401      	add	r1, r0
   b80f8:	3104      	adds	r1, #4
   b80fa:	4628      	mov	r0, r5
   b80fc:	f001 ff5e 	bl	b9fbc <_ZN6String7reserveEj>
	StringSumHelper(const String &s) : String(s) {}
   b8100:	1d21      	adds	r1, r4, #4
   b8102:	a806      	add	r0, sp, #24
   b8104:	f001 ffc7 	bl	ba096 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b8108:	4912      	ldr	r1, [pc, #72]	; (b8154 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b810a:	a802      	add	r0, sp, #8
   b810c:	f001 ff83 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b8110:	a902      	add	r1, sp, #8
   b8112:	a806      	add	r0, sp, #24
   b8114:	f002 f81f 	bl	ba156 <_ZplRK15StringSumHelperRK6String>
   b8118:	e9dd 3200 	ldrd	r3, r2, [sp]
   b811c:	4606      	mov	r6, r0
   b811e:	4621      	mov	r1, r4
   b8120:	a80a      	add	r0, sp, #40	; 0x28
   b8122:	f7ff ffc7 	bl	b80b4 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b8126:	a90a      	add	r1, sp, #40	; 0x28
   b8128:	4630      	mov	r0, r6
   b812a:	f002 f814 	bl	ba156 <_ZplRK15StringSumHelperRK6String>
   b812e:	4601      	mov	r1, r0
   b8130:	4628      	mov	r0, r5
   b8132:	f001 ffa1 	bl	ba078 <_ZN6StringaSERKS_>
   b8136:	a80a      	add	r0, sp, #40	; 0x28
   b8138:	f001 ff22 	bl	b9f80 <_ZN6StringD1Ev>
   b813c:	a802      	add	r0, sp, #8
   b813e:	f001 ff1f 	bl	b9f80 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b8142:	a806      	add	r0, sp, #24
   b8144:	f001 ff1c 	bl	b9f80 <_ZN6StringD1Ev>
}
   b8148:	4628      	mov	r0, r5
   b814a:	b00e      	add	sp, #56	; 0x38
   b814c:	bd70      	pop	{r4, r5, r6, pc}
   b814e:	bf00      	nop
   b8150:	000bcac0 	.word	0x000bcac0
   b8154:	000bc014 	.word	0x000bc014

000b8158 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b8158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b815c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b815e:	b08e      	sub	sp, #56	; 0x38
   b8160:	4605      	mov	r5, r0
   b8162:	460f      	mov	r7, r1
    if (allExtensions) {
   b8164:	2a00      	cmp	r2, #0
   b8166:	d04a      	beq.n	b81fe <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b8168:	6840      	ldr	r0, [r0, #4]
   b816a:	f000 fc2d 	bl	b89c8 <opendir>
        if (dir) {
   b816e:	4606      	mov	r6, r0
   b8170:	2800      	cmp	r0, #0
   b8172:	d054      	beq.n	b821e <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b8174:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b822c <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b8178:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b8228 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b817c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b8224 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b8180:	4630      	mov	r0, r6
   b8182:	f000 fc29 	bl	b89d8 <readdir>
                if (!ent) {
   b8186:	2800      	cmp	r0, #0
   b8188:	d033      	beq.n	b81f2 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b818a:	7a82      	ldrb	r2, [r0, #10]
   b818c:	2a08      	cmp	r2, #8
   b818e:	d1f7      	bne.n	b8180 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b8190:	f100 040b 	add.w	r4, r0, #11
   b8194:	6969      	ldr	r1, [r5, #20]
   b8196:	aa01      	add	r2, sp, #4
   b8198:	4620      	mov	r0, r4
   b819a:	f000 fe27 	bl	b8dec <sscanf>
   b819e:	2801      	cmp	r0, #1
   b81a0:	d1ee      	bne.n	b8180 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b81a2:	9b01      	ldr	r3, [sp, #4]
   b81a4:	42bb      	cmp	r3, r7
   b81a6:	d1eb      	bne.n	b8180 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b81a8:	1d29      	adds	r1, r5, #4
   b81aa:	a80a      	add	r0, sp, #40	; 0x28
   b81ac:	f001 ff73 	bl	ba096 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b81b0:	4651      	mov	r1, sl
   b81b2:	a806      	add	r0, sp, #24
   b81b4:	f001 ff2f 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b81b8:	a906      	add	r1, sp, #24
   b81ba:	a80a      	add	r0, sp, #40	; 0x28
   b81bc:	f001 ffcb 	bl	ba156 <_ZplRK15StringSumHelperRK6String>
   b81c0:	4621      	mov	r1, r4
   b81c2:	f001 ffd4 	bl	ba16e <_ZplRK15StringSumHelperPKc>
   b81c6:	4601      	mov	r1, r0
   b81c8:	a802      	add	r0, sp, #8
   b81ca:	f001 ff64 	bl	ba096 <_ZN6StringC1ERKS_>
   b81ce:	a806      	add	r0, sp, #24
   b81d0:	f001 fed6 	bl	b9f80 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b81d4:	a80a      	add	r0, sp, #40	; 0x28
   b81d6:	f001 fed3 	bl	b9f80 <_ZN6StringD1Ev>
                        unlink(path);
   b81da:	9802      	ldr	r0, [sp, #8]
   b81dc:	f003 fc44 	bl	bba68 <unlink>
                        _log.trace("removed %s", path.c_str());
   b81e0:	4640      	mov	r0, r8
   b81e2:	9a02      	ldr	r2, [sp, #8]
   b81e4:	4649      	mov	r1, r9
   b81e6:	f7ff f8e1 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b81ea:	a802      	add	r0, sp, #8
   b81ec:	f001 fec8 	bl	b9f80 <_ZN6StringD1Ev>
                    continue;
   b81f0:	e7c6      	b.n	b8180 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b81f2:	4630      	mov	r0, r6
}
   b81f4:	b00e      	add	sp, #56	; 0x38
   b81f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b81fa:	f000 bbf5 	b.w	b89e8 <closedir>
        String path = getPathForFileNum(fileNum); 
   b81fe:	460a      	mov	r2, r1
   b8200:	4601      	mov	r1, r0
   b8202:	a80a      	add	r0, sp, #40	; 0x28
   b8204:	f7ff ff6c 	bl	b80e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b8208:	980a      	ldr	r0, [sp, #40]	; 0x28
   b820a:	f003 fc2d 	bl	bba68 <unlink>
        _log.trace("removed %s", path.c_str());
   b820e:	4805      	ldr	r0, [pc, #20]	; (b8224 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b8210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8212:	4905      	ldr	r1, [pc, #20]	; (b8228 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b8214:	f7ff f8ca 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b8218:	a80a      	add	r0, sp, #40	; 0x28
   b821a:	f001 feb1 	bl	b9f80 <_ZN6StringD1Ev>
}
   b821e:	b00e      	add	sp, #56	; 0x38
   b8220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8224:	2003e628 	.word	0x2003e628
   b8228:	000bc781 	.word	0x000bc781
   b822c:	000bc014 	.word	0x000bc014

000b8230 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8230:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8232:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8234:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b8236:	b183      	cbz	r3, b825a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8238:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b823a:	6945      	ldr	r5, [r0, #20]
   b823c:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b823e:	42ae      	cmp	r6, r5
   b8240:	d906      	bls.n	b8250 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b8242:	f855 0b04 	ldr.w	r0, [r5], #4
   b8246:	f44f 7100 	mov.w	r1, #512	; 0x200
   b824a:	f7fb ff28 	bl	b409e <_ZdlPvj>
   b824e:	e7f6      	b.n	b823e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b8250:	6861      	ldr	r1, [r4, #4]
   b8252:	6820      	ldr	r0, [r4, #0]
   b8254:	0089      	lsls	r1, r1, #2
   b8256:	f7fb ff22 	bl	b409e <_ZdlPvj>
    }
   b825a:	4620      	mov	r0, r4
   b825c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8260 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   b8260:	b510      	push	{r4, lr}
   b8262:	4b09      	ldr	r3, [pc, #36]	; (b8288 <_ZN14SequentialFileD1Ev+0x28>)
   b8264:	4604      	mov	r4, r0
   b8266:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b826a:	f7ff ffe1 	bl	b8230 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   b826e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8272:	f001 fe85 	bl	b9f80 <_ZN6StringD1Ev>
   b8276:	f104 0014 	add.w	r0, r4, #20
   b827a:	f001 fe81 	bl	b9f80 <_ZN6StringD1Ev>
   b827e:	1d20      	adds	r0, r4, #4
   b8280:	f001 fe7e 	bl	b9f80 <_ZN6StringD1Ev>
}
   b8284:	4620      	mov	r0, r4
   b8286:	bd10      	pop	{r4, pc}
   b8288:	000bc878 	.word	0x000bc878

000b828c <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   b828c:	b510      	push	{r4, lr}
   b828e:	4604      	mov	r4, r0
}
   b8290:	f7ff ffe6 	bl	b8260 <_ZN14SequentialFileD1Ev>
   b8294:	4620      	mov	r0, r4
   b8296:	2168      	movs	r1, #104	; 0x68
   b8298:	f7fb ff01 	bl	b409e <_ZdlPvj>
   b829c:	4620      	mov	r0, r4
   b829e:	bd10      	pop	{r4, pc}

000b82a0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b82a0:	68c3      	ldr	r3, [r0, #12]
   b82a2:	68ca      	ldr	r2, [r1, #12]
   b82a4:	1a9b      	subs	r3, r3, r2
   b82a6:	109b      	asrs	r3, r3, #2
   b82a8:	1e5a      	subs	r2, r3, #1
   b82aa:	e9d0 3000 	ldrd	r3, r0, [r0]
   b82ae:	1a1b      	subs	r3, r3, r0
   b82b0:	109b      	asrs	r3, r3, #2
   b82b2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b82b6:	6888      	ldr	r0, [r1, #8]
   b82b8:	680a      	ldr	r2, [r1, #0]
   b82ba:	1a80      	subs	r0, r0, r2
      }
   b82bc:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b82c0:	4770      	bx	lr
	...

000b82c4 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   b82c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b82c8:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b82ca:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b82cc:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b82ce:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   b82d0:	4604      	mov	r4, r0
   b82d2:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   b82d4:	d007      	beq.n	b82e6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b82d6:	b10b      	cbz	r3, b82dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   b82d8:	680a      	ldr	r2, [r1, #0]
   b82da:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b82dc:	69a3      	ldr	r3, [r4, #24]
   b82de:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b82e0:	61a3      	str	r3, [r4, #24]
      }
   b82e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b82e6:	f100 0108 	add.w	r1, r0, #8
   b82ea:	3018      	adds	r0, #24
   b82ec:	f7ff ffd8 	bl	b82a0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   b82f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b82f4:	4298      	cmp	r0, r3
   b82f6:	d102      	bne.n	b82fe <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   b82f8:	4838      	ldr	r0, [pc, #224]	; (b83dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   b82fa:	f002 fcf0 	bl	bacde <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b82fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b8300:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8302:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8304:	1a11      	subs	r1, r2, r0
   b8306:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b830a:	2901      	cmp	r1, #1
   b830c:	d825      	bhi.n	b835a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b830e:	6961      	ldr	r1, [r4, #20]
   b8310:	eba2 0801 	sub.w	r8, r2, r1
   b8314:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8318:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b831a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   b831e:	d936      	bls.n	b838e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   b8320:	1b5d      	subs	r5, r3, r5
   b8322:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8324:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   b8328:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b832a:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   b832c:	eba3 0201 	sub.w	r2, r3, r1
   b8330:	d926      	bls.n	b8380 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   b8332:	428b      	cmp	r3, r1
   b8334:	d002      	beq.n	b833c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8336:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8338:	f003 fa38 	bl	bb7ac <memmove>
	_M_node = __new_node;
   b833c:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   b833e:	682b      	ldr	r3, [r5, #0]
   b8340:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8342:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8346:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8348:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   b834c:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b834e:	f855 3008 	ldr.w	r3, [r5, r8]
   b8352:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8354:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8358:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b835a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b835e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8360:	f7fb fe99 	bl	b4096 <_Znwj>
   b8364:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8366:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8368:	b10b      	cbz	r3, b836e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   b836a:	683a      	ldr	r2, [r7, #0]
   b836c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b836e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8370:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8372:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   b8374:	685b      	ldr	r3, [r3, #4]
   b8376:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8378:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b837c:	6222      	str	r2, [r4, #32]
   b837e:	e7af      	b.n	b82e0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   b8380:	428b      	cmp	r3, r1
   b8382:	d0db      	beq.n	b833c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8384:	f108 0004 	add.w	r0, r8, #4
   b8388:	1a80      	subs	r0, r0, r2
   b838a:	4428      	add	r0, r5
   b838c:	e7d4      	b.n	b8338 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b838e:	f103 0902 	add.w	r9, r3, #2
   b8392:	2b01      	cmp	r3, #1
   b8394:	bf2c      	ite	cs
   b8396:	4499      	addcs	r9, r3
   b8398:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   b839c:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   b83a0:	d301      	bcc.n	b83a6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   b83a2:	f002 fc99 	bl	bacd8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b83a6:	ea4f 0089 	mov.w	r0, r9, lsl #2
   b83aa:	f7fb fe74 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b83ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b83b0:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b83b2:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   b83b6:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b83b8:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   b83ba:	4291      	cmp	r1, r2
   b83bc:	4682      	mov	sl, r0
   b83be:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   b83c2:	d003      	beq.n	b83cc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b83c4:	1a52      	subs	r2, r2, r1
   b83c6:	4628      	mov	r0, r5
   b83c8:	f003 f9f0 	bl	bb7ac <memmove>
	::operator delete(__p
   b83cc:	6861      	ldr	r1, [r4, #4]
   b83ce:	6820      	ldr	r0, [r4, #0]
   b83d0:	0089      	lsls	r1, r1, #2
   b83d2:	f7fb fe64 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b83d6:	e9c4 a900 	strd	sl, r9, [r4]
   b83da:	e7af      	b.n	b833c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   b83dc:	000bc69d 	.word	0x000bc69d

000b83e0 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   b83e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   b83e4:	68c3      	ldr	r3, [r0, #12]
   b83e6:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   b83e8:	b086      	sub	sp, #24
   b83ea:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   b83ec:	d808      	bhi.n	b8400 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   b83ee:	4934      	ldr	r1, [pc, #208]	; (b84c0 <_ZN14SequentialFile7scanDirEv+0xe0>)
   b83f0:	4834      	ldr	r0, [pc, #208]	; (b84c4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b83f2:	f7fe ffe9 	bl	b73c8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b83f6:	2600      	movs	r6, #0
}
   b83f8:	4630      	mov	r0, r6
   b83fa:	b006      	add	sp, #24
   b83fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   b8400:	6840      	ldr	r0, [r0, #4]
   b8402:	f7ff fe01 	bl	b8008 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   b8406:	4606      	mov	r6, r0
   b8408:	2800      	cmp	r0, #0
   b840a:	d0f4      	beq.n	b83f6 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   b840c:	6963      	ldr	r3, [r4, #20]
   b840e:	6862      	ldr	r2, [r4, #4]
   b8410:	492d      	ldr	r1, [pc, #180]	; (b84c8 <_ZN14SequentialFile7scanDirEv+0xe8>)
   b8412:	482c      	ldr	r0, [pc, #176]	; (b84c4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   b8414:	f7fe ffca 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   b8418:	6860      	ldr	r0, [r4, #4]
   b841a:	f000 fad5 	bl	b89c8 <opendir>
    if (!dir) {
   b841e:	4607      	mov	r7, r0
   b8420:	2800      	cmp	r0, #0
   b8422:	d0e8      	beq.n	b83f6 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   b8424:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b8426:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b84cc <_ZN14SequentialFile7scanDirEv+0xec>
   b842a:	f8df 8098 	ldr.w	r8, [pc, #152]	; b84c4 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   b842e:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   b8430:	4638      	mov	r0, r7
   b8432:	f000 fad1 	bl	b89d8 <readdir>
        if (!ent) {
   b8436:	4605      	mov	r5, r0
   b8438:	2800      	cmp	r0, #0
   b843a:	d039      	beq.n	b84b0 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   b843c:	7a83      	ldrb	r3, [r0, #10]
   b843e:	2b08      	cmp	r3, #8
   b8440:	d1f6      	bne.n	b8430 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   b8442:	350b      	adds	r5, #11
   b8444:	6961      	ldr	r1, [r4, #20]
   b8446:	aa01      	add	r2, sp, #4
   b8448:	4628      	mov	r0, r5
   b844a:	f000 fccf 	bl	b8dec <sscanf>
   b844e:	2801      	cmp	r0, #1
   b8450:	d1ee      	bne.n	b8430 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   b8452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8454:	b17b      	cbz	r3, b8476 <_ZN14SequentialFile7scanDirEv+0x96>
   b8456:	4629      	mov	r1, r5
   b8458:	a802      	add	r0, sp, #8
   b845a:	f001 fddc 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
   b845e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   b8462:	a802      	add	r0, sp, #8
   b8464:	f001 feaa 	bl	ba1bc <_ZNK6String8endsWithERKS_>
   b8468:	4682      	mov	sl, r0
   b846a:	a802      	add	r0, sp, #8
   b846c:	f001 fd88 	bl	b9f80 <_ZN6StringD1Ev>
   b8470:	f1ba 0f00 	cmp.w	sl, #0
   b8474:	d0dc      	beq.n	b8430 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   b8476:	6823      	ldr	r3, [r4, #0]
   b8478:	4629      	mov	r1, r5
   b847a:	689b      	ldr	r3, [r3, #8]
   b847c:	4620      	mov	r0, r4
   b847e:	4798      	blx	r3
   b8480:	2800      	cmp	r0, #0
   b8482:	d0d5      	beq.n	b8430 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   b8484:	9a01      	ldr	r2, [sp, #4]
   b8486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b8488:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   b848a:	bfb8      	it	lt
   b848c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   b848e:	462b      	mov	r3, r5
   b8490:	4649      	mov	r1, r9
   b8492:	4640      	mov	r0, r8
   b8494:	f7fe ff8a 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   b8498:	4620      	mov	r0, r4
   b849a:	f7ff fda5 	bl	b7fe8 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   b849e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b84a2:	a901      	add	r1, sp, #4
   b84a4:	f7ff ff0e 	bl	b82c4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   b84a8:	4620      	mov	r0, r4
   b84aa:	f7ff fda9 	bl	b8000 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   b84ae:	e7bf      	b.n	b8430 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   b84b0:	4638      	mov	r0, r7
   b84b2:	f000 fa99 	bl	b89e8 <closedir>
    scanDirCompleted = true;
   b84b6:	2301      	movs	r3, #1
   b84b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   b84bc:	e79c      	b.n	b83f8 <_ZN14SequentialFile7scanDirEv+0x18>
   b84be:	bf00      	nop
   b84c0:	000bc7ff 	.word	0x000bc7ff
   b84c4:	2003e628 	.word	0x2003e628
   b84c8:	000bc814 	.word	0x000bc814
   b84cc:	000bc830 	.word	0x000bc830

000b84d0 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   b84d0:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   b84d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   b84d6:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b84d8:	b90b      	cbnz	r3, b84de <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   b84da:	f7ff ff81 	bl	b83e0 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   b84de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b84e0:	3001      	adds	r0, #1
   b84e2:	63a0      	str	r0, [r4, #56]	; 0x38
}
   b84e4:	bd10      	pop	{r4, pc}
	...

000b84e8 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   b84e8:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   b84ea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   b84ee:	4604      	mov	r4, r0
   b84f0:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   b84f2:	b90b      	cbnz	r3, b84f8 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   b84f4:	f7ff ff74 	bl	b83e0 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   b84f8:	4620      	mov	r0, r4
   b84fa:	f7ff fd75 	bl	b7fe8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   b84fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   b8500:	6da2      	ldr	r2, [r4, #88]	; 0x58
   b8502:	429a      	cmp	r2, r3
   b8504:	d020      	beq.n	b8548 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   b8506:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   b850a:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   b850c:	b126      	cbz	r6, b8518 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   b850e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8510:	4293      	cmp	r3, r2
   b8512:	d00c      	beq.n	b852e <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   b8514:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b8516:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   b8518:	4620      	mov	r0, r4
   b851a:	f7ff fd71 	bl	b8000 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   b851e:	b125      	cbz	r5, b852a <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   b8520:	490a      	ldr	r1, [pc, #40]	; (b854c <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   b8522:	480b      	ldr	r0, [pc, #44]	; (b8550 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   b8524:	462a      	mov	r2, r5
   b8526:	f7fe ff41 	bl	b73ac <_ZNK5spark6Logger5traceEPKcz>
}
   b852a:	4628      	mov	r0, r5
   b852c:	bd70      	pop	{r4, r5, r6, pc}
   b852e:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8532:	f7fb fdb4 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b8536:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8538:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b853a:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b853c:	685b      	ldr	r3, [r3, #4]
   b853e:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8540:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8544:	6522      	str	r2, [r4, #80]	; 0x50
   b8546:	e7e6      	b.n	b8516 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   b8548:	2500      	movs	r5, #0
   b854a:	e7e5      	b.n	b8518 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   b854c:	000bc846 	.word	0x000bc846
   b8550:	2003e628 	.word	0x2003e628

000b8554 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   b8554:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   b8556:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   b855a:	9101      	str	r1, [sp, #4]
   b855c:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   b855e:	b90b      	cbnz	r3, b8564 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   b8560:	f7ff ff3e 	bl	b83e0 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   b8564:	9b01      	ldr	r3, [sp, #4]
   b8566:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b8568:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   b856a:	bfb8      	it	lt
   b856c:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   b856e:	4620      	mov	r0, r4
   b8570:	f7ff fd3a 	bl	b7fe8 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   b8574:	a901      	add	r1, sp, #4
   b8576:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b857a:	f7ff fea3 	bl	b82c4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   b857e:	4620      	mov	r0, r4
   b8580:	f7ff fd3e 	bl	b8000 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b8584:	b002      	add	sp, #8
   b8586:	bd10      	pop	{r4, pc}

000b8588 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   b8588:	b538      	push	{r3, r4, r5, lr}
   b858a:	4604      	mov	r4, r0
    queueMutexLock();
   b858c:	f7ff fd2c 	bl	b7fe8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8590:	f104 0148 	add.w	r1, r4, #72	; 0x48
   b8594:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8598:	f7ff fe82 	bl	b82a0 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   b859c:	4605      	mov	r5, r0
    queueMutexUnlock();
   b859e:	4620      	mov	r0, r4
   b85a0:	f7ff fd2e 	bl	b8000 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   b85a4:	4628      	mov	r0, r5
   b85a6:	bd38      	pop	{r3, r4, r5, pc}

000b85a8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   b85a8:	4b01      	ldr	r3, [pc, #4]	; (b85b0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   b85aa:	4a02      	ldr	r2, [pc, #8]	; (b85b4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   b85ac:	601a      	str	r2, [r3, #0]
}
   b85ae:	4770      	bx	lr
   b85b0:	2003e628 	.word	0x2003e628
   b85b4:	000bc863 	.word	0x000bc863

000b85b8 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
   b85b8:	4b01      	ldr	r3, [pc, #4]	; (b85c0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b85ba:	4a02      	ldr	r2, [pc, #8]	; (b85c4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b85bc:	601a      	str	r2, [r3, #0]
// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
        instance->systemEvent(event, param);
    }
}
   b85be:	4770      	bx	lr
   b85c0:	2003e62c 	.word	0x2003e62c
   b85c4:	000bc884 	.word	0x000bc884

000b85c8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <cellular_signal+0xc>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b85d0:	9301      	str	r3, [sp, #4]
   b85d2:	bd08      	pop	{r3, pc}
   b85d4:	00030274 	.word	0x00030274

000b85d8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <os_thread_create+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	685b      	ldr	r3, [r3, #4]
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	00030248 	.word	0x00030248

000b85e8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <os_thread_is_current+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	689b      	ldr	r3, [r3, #8]
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	00030248 	.word	0x00030248

000b85f8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <os_thread_yield+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	68db      	ldr	r3, [r3, #12]
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	00030248 	.word	0x00030248

000b8608 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <os_thread_join+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	691b      	ldr	r3, [r3, #16]
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	00030248 	.word	0x00030248

000b8618 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b02      	ldr	r3, [pc, #8]	; (b8624 <os_thread_cleanup+0xc>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	695b      	ldr	r3, [r3, #20]
   b8620:	9301      	str	r3, [sp, #4]
   b8622:	bd08      	pop	{r3, pc}
   b8624:	00030248 	.word	0x00030248

000b8628 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b8628:	b508      	push	{r3, lr}
   b862a:	4b02      	ldr	r3, [pc, #8]	; (b8634 <os_thread_scheduling+0xc>)
   b862c:	681b      	ldr	r3, [r3, #0]
   b862e:	69db      	ldr	r3, [r3, #28]
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	bd08      	pop	{r3, pc}
   b8634:	00030248 	.word	0x00030248

000b8638 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b8638:	b508      	push	{r3, lr}
   b863a:	4b02      	ldr	r3, [pc, #8]	; (b8644 <os_timer_create+0xc>)
   b863c:	681b      	ldr	r3, [r3, #0]
   b863e:	6a1b      	ldr	r3, [r3, #32]
   b8640:	9301      	str	r3, [sp, #4]
   b8642:	bd08      	pop	{r3, pc}
   b8644:	00030248 	.word	0x00030248

000b8648 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b8648:	b508      	push	{r3, lr}
   b864a:	4b02      	ldr	r3, [pc, #8]	; (b8654 <os_timer_destroy+0xc>)
   b864c:	681b      	ldr	r3, [r3, #0]
   b864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8650:	9301      	str	r3, [sp, #4]
   b8652:	bd08      	pop	{r3, pc}
   b8654:	00030248 	.word	0x00030248

000b8658 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b8658:	b508      	push	{r3, lr}
   b865a:	4b02      	ldr	r3, [pc, #8]	; (b8664 <os_timer_get_id+0xc>)
   b865c:	681b      	ldr	r3, [r3, #0]
   b865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8660:	9301      	str	r3, [sp, #4]
   b8662:	bd08      	pop	{r3, pc}
   b8664:	00030248 	.word	0x00030248

000b8668 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b8668:	b508      	push	{r3, lr}
   b866a:	4b02      	ldr	r3, [pc, #8]	; (b8674 <os_timer_change+0xc>)
   b866c:	681b      	ldr	r3, [r3, #0]
   b866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8670:	9301      	str	r3, [sp, #4]
   b8672:	bd08      	pop	{r3, pc}
   b8674:	00030248 	.word	0x00030248

000b8678 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b8678:	b508      	push	{r3, lr}
   b867a:	4b02      	ldr	r3, [pc, #8]	; (b8684 <os_mutex_create+0xc>)
   b867c:	681b      	ldr	r3, [r3, #0]
   b867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8680:	9301      	str	r3, [sp, #4]
   b8682:	bd08      	pop	{r3, pc}
   b8684:	00030248 	.word	0x00030248

000b8688 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b8688:	b508      	push	{r3, lr}
   b868a:	4b02      	ldr	r3, [pc, #8]	; (b8694 <os_mutex_lock+0xc>)
   b868c:	681b      	ldr	r3, [r3, #0]
   b868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8690:	9301      	str	r3, [sp, #4]
   b8692:	bd08      	pop	{r3, pc}
   b8694:	00030248 	.word	0x00030248

000b8698 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b8698:	b508      	push	{r3, lr}
   b869a:	4b02      	ldr	r3, [pc, #8]	; (b86a4 <os_mutex_unlock+0xc>)
   b869c:	681b      	ldr	r3, [r3, #0]
   b869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b86a0:	9301      	str	r3, [sp, #4]
   b86a2:	bd08      	pop	{r3, pc}
   b86a4:	00030248 	.word	0x00030248

000b86a8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b86a8:	b508      	push	{r3, lr}
   b86aa:	4b02      	ldr	r3, [pc, #8]	; (b86b4 <os_mutex_recursive_create+0xc>)
   b86ac:	681b      	ldr	r3, [r3, #0]
   b86ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b86b0:	9301      	str	r3, [sp, #4]
   b86b2:	bd08      	pop	{r3, pc}
   b86b4:	00030248 	.word	0x00030248

000b86b8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b86b8:	b508      	push	{r3, lr}
   b86ba:	4b02      	ldr	r3, [pc, #8]	; (b86c4 <os_mutex_recursive_lock+0xc>)
   b86bc:	681b      	ldr	r3, [r3, #0]
   b86be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b86c0:	9301      	str	r3, [sp, #4]
   b86c2:	bd08      	pop	{r3, pc}
   b86c4:	00030248 	.word	0x00030248

000b86c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b86c8:	b508      	push	{r3, lr}
   b86ca:	4b02      	ldr	r3, [pc, #8]	; (b86d4 <os_mutex_recursive_unlock+0xc>)
   b86cc:	681b      	ldr	r3, [r3, #0]
   b86ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b86d0:	9301      	str	r3, [sp, #4]
   b86d2:	bd08      	pop	{r3, pc}
   b86d4:	00030248 	.word	0x00030248

000b86d8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b86d8:	b508      	push	{r3, lr}
   b86da:	4b02      	ldr	r3, [pc, #8]	; (b86e4 <os_thread_exit+0xc>)
   b86dc:	681b      	ldr	r3, [r3, #0]
   b86de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b86e0:	9301      	str	r3, [sp, #4]
   b86e2:	bd08      	pop	{r3, pc}
   b86e4:	00030248 	.word	0x00030248

000b86e8 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b86e8:	b508      	push	{r3, lr}
   b86ea:	4b02      	ldr	r3, [pc, #8]	; (b86f4 <os_timer_set_id+0xc>)
   b86ec:	681b      	ldr	r3, [r3, #0]
   b86ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b86f0:	9301      	str	r3, [sp, #4]
   b86f2:	bd08      	pop	{r3, pc}
   b86f4:	00030248 	.word	0x00030248

000b86f8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b86f8:	b508      	push	{r3, lr}
   b86fa:	4b02      	ldr	r3, [pc, #8]	; (b8704 <HAL_Feature_Set+0xc>)
   b86fc:	681b      	ldr	r3, [r3, #0]
   b86fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8700:	9301      	str	r3, [sp, #4]
   b8702:	bd08      	pop	{r3, pc}
   b8704:	00030234 	.word	0x00030234

000b8708 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   b8708:	b508      	push	{r3, lr}
   b870a:	4b02      	ldr	r3, [pc, #8]	; (b8714 <HAL_Core_Get_Last_Reset_Info+0xc>)
   b870c:	681b      	ldr	r3, [r3, #0]
   b870e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8710:	9301      	str	r3, [sp, #4]
   b8712:	bd08      	pop	{r3, pc}
   b8714:	00030234 	.word	0x00030234

000b8718 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8718:	b508      	push	{r3, lr}
   b871a:	4b02      	ldr	r3, [pc, #8]	; (b8724 <HAL_RNG_GetRandomNumber+0xc>)
   b871c:	681b      	ldr	r3, [r3, #0]
   b871e:	685b      	ldr	r3, [r3, #4]
   b8720:	9301      	str	r3, [sp, #4]
   b8722:	bd08      	pop	{r3, pc}
   b8724:	00030218 	.word	0x00030218

000b8728 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b8728:	b508      	push	{r3, lr}
   b872a:	4b02      	ldr	r3, [pc, #8]	; (b8734 <HAL_Delay_Milliseconds+0xc>)
   b872c:	681b      	ldr	r3, [r3, #0]
   b872e:	689b      	ldr	r3, [r3, #8]
   b8730:	9301      	str	r3, [sp, #4]
   b8732:	bd08      	pop	{r3, pc}
   b8734:	00030218 	.word	0x00030218

000b8738 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8738:	b508      	push	{r3, lr}
   b873a:	4b02      	ldr	r3, [pc, #8]	; (b8744 <HAL_Delay_Microseconds+0xc>)
   b873c:	681b      	ldr	r3, [r3, #0]
   b873e:	68db      	ldr	r3, [r3, #12]
   b8740:	9301      	str	r3, [sp, #4]
   b8742:	bd08      	pop	{r3, pc}
   b8744:	00030218 	.word	0x00030218

000b8748 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8748:	b508      	push	{r3, lr}
   b874a:	4b02      	ldr	r3, [pc, #8]	; (b8754 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b874c:	681b      	ldr	r3, [r3, #0]
   b874e:	695b      	ldr	r3, [r3, #20]
   b8750:	9301      	str	r3, [sp, #4]
   b8752:	bd08      	pop	{r3, pc}
   b8754:	00030218 	.word	0x00030218

000b8758 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8758:	b508      	push	{r3, lr}
   b875a:	4b02      	ldr	r3, [pc, #8]	; (b8764 <hal_rtc_time_is_valid+0xc>)
   b875c:	681b      	ldr	r3, [r3, #0]
   b875e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8760:	9301      	str	r3, [sp, #4]
   b8762:	bd08      	pop	{r3, pc}
   b8764:	00030218 	.word	0x00030218

000b8768 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8768:	b508      	push	{r3, lr}
   b876a:	4b02      	ldr	r3, [pc, #8]	; (b8774 <hal_timer_millis+0xc>)
   b876c:	681b      	ldr	r3, [r3, #0]
   b876e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8770:	9301      	str	r3, [sp, #4]
   b8772:	bd08      	pop	{r3, pc}
   b8774:	00030218 	.word	0x00030218

000b8778 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8778:	b508      	push	{r3, lr}
   b877a:	4b02      	ldr	r3, [pc, #8]	; (b8784 <hal_rtc_get_time+0xc>)
   b877c:	681b      	ldr	r3, [r3, #0]
   b877e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8780:	9301      	str	r3, [sp, #4]
   b8782:	bd08      	pop	{r3, pc}
   b8784:	00030218 	.word	0x00030218

000b8788 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8788:	b508      	push	{r3, lr}
   b878a:	4b02      	ldr	r3, [pc, #8]	; (b8794 <hal_rtc_set_time+0xc>)
   b878c:	681b      	ldr	r3, [r3, #0]
   b878e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8790:	9301      	str	r3, [sp, #4]
   b8792:	bd08      	pop	{r3, pc}
   b8794:	00030218 	.word	0x00030218

000b8798 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8798:	b508      	push	{r3, lr}
   b879a:	4b02      	ldr	r3, [pc, #8]	; (b87a4 <HAL_Pin_Map+0xc>)
   b879c:	681b      	ldr	r3, [r3, #0]
   b879e:	681b      	ldr	r3, [r3, #0]
   b87a0:	9301      	str	r3, [sp, #4]
   b87a2:	bd08      	pop	{r3, pc}
   b87a4:	0003022c 	.word	0x0003022c

000b87a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b87a8:	b508      	push	{r3, lr}
   b87aa:	4b02      	ldr	r3, [pc, #8]	; (b87b4 <HAL_Validate_Pin_Function+0xc>)
   b87ac:	681b      	ldr	r3, [r3, #0]
   b87ae:	685b      	ldr	r3, [r3, #4]
   b87b0:	9301      	str	r3, [sp, #4]
   b87b2:	bd08      	pop	{r3, pc}
   b87b4:	0003022c 	.word	0x0003022c

000b87b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4b02      	ldr	r3, [pc, #8]	; (b87c4 <HAL_Pin_Mode+0xc>)
   b87bc:	681b      	ldr	r3, [r3, #0]
   b87be:	689b      	ldr	r3, [r3, #8]
   b87c0:	9301      	str	r3, [sp, #4]
   b87c2:	bd08      	pop	{r3, pc}
   b87c4:	0003022c 	.word	0x0003022c

000b87c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b87c8:	b508      	push	{r3, lr}
   b87ca:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <HAL_Get_Pin_Mode+0xc>)
   b87cc:	681b      	ldr	r3, [r3, #0]
   b87ce:	68db      	ldr	r3, [r3, #12]
   b87d0:	9301      	str	r3, [sp, #4]
   b87d2:	bd08      	pop	{r3, pc}
   b87d4:	0003022c 	.word	0x0003022c

000b87d8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b87d8:	b508      	push	{r3, lr}
   b87da:	4b02      	ldr	r3, [pc, #8]	; (b87e4 <HAL_GPIO_Read+0xc>)
   b87dc:	681b      	ldr	r3, [r3, #0]
   b87de:	695b      	ldr	r3, [r3, #20]
   b87e0:	9301      	str	r3, [sp, #4]
   b87e2:	bd08      	pop	{r3, pc}
   b87e4:	0003022c 	.word	0x0003022c

000b87e8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b87e8:	b508      	push	{r3, lr}
   b87ea:	4b02      	ldr	r3, [pc, #8]	; (b87f4 <HAL_Interrupts_Attach+0xc>)
   b87ec:	681b      	ldr	r3, [r3, #0]
   b87ee:	699b      	ldr	r3, [r3, #24]
   b87f0:	9301      	str	r3, [sp, #4]
   b87f2:	bd08      	pop	{r3, pc}
   b87f4:	0003022c 	.word	0x0003022c

000b87f8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <HAL_Interrupts_Detach+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	69db      	ldr	r3, [r3, #28]
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	0003022c 	.word	0x0003022c

000b8808 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <hal_adc_read+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	0003022c 	.word	0x0003022c

000b8818 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <hal_i2c_begin+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	68db      	ldr	r3, [r3, #12]
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	00030228 	.word	0x00030228

000b8828 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <hal_i2c_begin_transmission+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	699b      	ldr	r3, [r3, #24]
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	00030228 	.word	0x00030228

000b8838 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <hal_i2c_end_transmission+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	69db      	ldr	r3, [r3, #28]
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	00030228 	.word	0x00030228

000b8848 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <hal_i2c_write+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	6a1b      	ldr	r3, [r3, #32]
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	00030228 	.word	0x00030228

000b8858 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <hal_i2c_available+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	00030228 	.word	0x00030228

000b8868 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <hal_i2c_read+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	00030228 	.word	0x00030228

000b8878 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <hal_i2c_peek+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	00030228 	.word	0x00030228

000b8888 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <hal_i2c_flush+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	00030228 	.word	0x00030228

000b8898 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <hal_i2c_is_enabled+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	00030228 	.word	0x00030228

000b88a8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b02      	ldr	r3, [pc, #8]	; (b88b4 <hal_i2c_init+0xc>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88b0:	9301      	str	r3, [sp, #4]
   b88b2:	bd08      	pop	{r3, pc}
   b88b4:	00030228 	.word	0x00030228

000b88b8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b88b8:	b508      	push	{r3, lr}
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <hal_i2c_lock+0xc>)
   b88bc:	681b      	ldr	r3, [r3, #0]
   b88be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b88c0:	9301      	str	r3, [sp, #4]
   b88c2:	bd08      	pop	{r3, pc}
   b88c4:	00030228 	.word	0x00030228

000b88c8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b02      	ldr	r3, [pc, #8]	; (b88d4 <hal_i2c_unlock+0xc>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b88d0:	9301      	str	r3, [sp, #4]
   b88d2:	bd08      	pop	{r3, pc}
   b88d4:	00030228 	.word	0x00030228

000b88d8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b88d8:	b508      	push	{r3, lr}
   b88da:	4b02      	ldr	r3, [pc, #8]	; (b88e4 <hal_i2c_request_ex+0xc>)
   b88dc:	681b      	ldr	r3, [r3, #0]
   b88de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b88e0:	9301      	str	r3, [sp, #4]
   b88e2:	bd08      	pop	{r3, pc}
   b88e4:	00030228 	.word	0x00030228

000b88e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b88e8:	b508      	push	{r3, lr}
   b88ea:	4b02      	ldr	r3, [pc, #8]	; (b88f4 <inet_inet_ntop+0xc>)
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	695b      	ldr	r3, [r3, #20]
   b88f0:	9301      	str	r3, [sp, #4]
   b88f2:	bd08      	pop	{r3, pc}
   b88f4:	00030264 	.word	0x00030264

000b88f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b88f8:	b508      	push	{r3, lr}
   b88fa:	4b02      	ldr	r3, [pc, #8]	; (b8904 <netdb_freeaddrinfo+0xc>)
   b88fc:	681b      	ldr	r3, [r3, #0]
   b88fe:	689b      	ldr	r3, [r3, #8]
   b8900:	9301      	str	r3, [sp, #4]
   b8902:	bd08      	pop	{r3, pc}
   b8904:	00030268 	.word	0x00030268

000b8908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8908:	b508      	push	{r3, lr}
   b890a:	4b02      	ldr	r3, [pc, #8]	; (b8914 <netdb_getaddrinfo+0xc>)
   b890c:	681b      	ldr	r3, [r3, #0]
   b890e:	68db      	ldr	r3, [r3, #12]
   b8910:	9301      	str	r3, [sp, #4]
   b8912:	bd08      	pop	{r3, pc}
   b8914:	00030268 	.word	0x00030268

000b8918 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b02      	ldr	r3, [pc, #8]	; (b8924 <hal_spi_init+0xc>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	69db      	ldr	r3, [r3, #28]
   b8920:	9301      	str	r3, [sp, #4]
   b8922:	bd08      	pop	{r3, pc}
   b8924:	00030230 	.word	0x00030230

000b8928 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8928:	b508      	push	{r3, lr}
   b892a:	4b02      	ldr	r3, [pc, #8]	; (b8934 <hal_spi_is_enabled+0xc>)
   b892c:	681b      	ldr	r3, [r3, #0]
   b892e:	6a1b      	ldr	r3, [r3, #32]
   b8930:	9301      	str	r3, [sp, #4]
   b8932:	bd08      	pop	{r3, pc}
   b8934:	00030230 	.word	0x00030230

000b8938 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b8938:	b508      	push	{r3, lr}
   b893a:	4b02      	ldr	r3, [pc, #8]	; (b8944 <_open+0xc>)
   b893c:	681b      	ldr	r3, [r3, #0]
   b893e:	681b      	ldr	r3, [r3, #0]
   b8940:	9301      	str	r3, [sp, #4]
   b8942:	bd08      	pop	{r3, pc}
   b8944:	00030284 	.word	0x00030284

000b8948 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   b8948:	b508      	push	{r3, lr}
   b894a:	4b02      	ldr	r3, [pc, #8]	; (b8954 <_write+0xc>)
   b894c:	681b      	ldr	r3, [r3, #0]
   b894e:	685b      	ldr	r3, [r3, #4]
   b8950:	9301      	str	r3, [sp, #4]
   b8952:	bd08      	pop	{r3, pc}
   b8954:	00030284 	.word	0x00030284

000b8958 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   b8958:	b508      	push	{r3, lr}
   b895a:	4b02      	ldr	r3, [pc, #8]	; (b8964 <_read+0xc>)
   b895c:	681b      	ldr	r3, [r3, #0]
   b895e:	689b      	ldr	r3, [r3, #8]
   b8960:	9301      	str	r3, [sp, #4]
   b8962:	bd08      	pop	{r3, pc}
   b8964:	00030284 	.word	0x00030284

000b8968 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b02      	ldr	r3, [pc, #8]	; (b8974 <_close+0xc>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	68db      	ldr	r3, [r3, #12]
   b8970:	9301      	str	r3, [sp, #4]
   b8972:	bd08      	pop	{r3, pc}
   b8974:	00030284 	.word	0x00030284

000b8978 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   b8978:	b508      	push	{r3, lr}
   b897a:	4b02      	ldr	r3, [pc, #8]	; (b8984 <_fstat+0xc>)
   b897c:	681b      	ldr	r3, [r3, #0]
   b897e:	695b      	ldr	r3, [r3, #20]
   b8980:	9301      	str	r3, [sp, #4]
   b8982:	bd08      	pop	{r3, pc}
   b8984:	00030284 	.word	0x00030284

000b8988 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   b8988:	b508      	push	{r3, lr}
   b898a:	4b02      	ldr	r3, [pc, #8]	; (b8994 <_lseek+0xc>)
   b898c:	681b      	ldr	r3, [r3, #0]
   b898e:	6a1b      	ldr	r3, [r3, #32]
   b8990:	9301      	str	r3, [sp, #4]
   b8992:	bd08      	pop	{r3, pc}
   b8994:	00030284 	.word	0x00030284

000b8998 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   b8998:	b508      	push	{r3, lr}
   b899a:	4b02      	ldr	r3, [pc, #8]	; (b89a4 <stat+0xc>)
   b899c:	681b      	ldr	r3, [r3, #0]
   b899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89a0:	9301      	str	r3, [sp, #4]
   b89a2:	bd08      	pop	{r3, pc}
   b89a4:	00030284 	.word	0x00030284

000b89a8 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   b89a8:	b508      	push	{r3, lr}
   b89aa:	4b02      	ldr	r3, [pc, #8]	; (b89b4 <mkdir+0xc>)
   b89ac:	681b      	ldr	r3, [r3, #0]
   b89ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89b0:	9301      	str	r3, [sp, #4]
   b89b2:	bd08      	pop	{r3, pc}
   b89b4:	00030284 	.word	0x00030284

000b89b8 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <_unlink+0xc>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b89c0:	9301      	str	r3, [sp, #4]
   b89c2:	bd08      	pop	{r3, pc}
   b89c4:	00030284 	.word	0x00030284

000b89c8 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   b89c8:	b508      	push	{r3, lr}
   b89ca:	4b02      	ldr	r3, [pc, #8]	; (b89d4 <opendir+0xc>)
   b89cc:	681b      	ldr	r3, [r3, #0]
   b89ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b89d0:	9301      	str	r3, [sp, #4]
   b89d2:	bd08      	pop	{r3, pc}
   b89d4:	00030284 	.word	0x00030284

000b89d8 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   b89d8:	b508      	push	{r3, lr}
   b89da:	4b02      	ldr	r3, [pc, #8]	; (b89e4 <readdir+0xc>)
   b89dc:	681b      	ldr	r3, [r3, #0]
   b89de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b89e0:	9301      	str	r3, [sp, #4]
   b89e2:	bd08      	pop	{r3, pc}
   b89e4:	00030284 	.word	0x00030284

000b89e8 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   b89e8:	b508      	push	{r3, lr}
   b89ea:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <closedir+0xc>)
   b89ec:	681b      	ldr	r3, [r3, #0]
   b89ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b89f0:	9301      	str	r3, [sp, #4]
   b89f2:	bd08      	pop	{r3, pc}
   b89f4:	00030284 	.word	0x00030284

000b89f8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b89f8:	b508      	push	{r3, lr}
   b89fa:	4b02      	ldr	r3, [pc, #8]	; (b8a04 <hal_usart_write+0xc>)
   b89fc:	681b      	ldr	r3, [r3, #0]
   b89fe:	68db      	ldr	r3, [r3, #12]
   b8a00:	9301      	str	r3, [sp, #4]
   b8a02:	bd08      	pop	{r3, pc}
   b8a04:	0003023c 	.word	0x0003023c

000b8a08 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b02      	ldr	r3, [pc, #8]	; (b8a14 <hal_usart_available+0xc>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	691b      	ldr	r3, [r3, #16]
   b8a10:	9301      	str	r3, [sp, #4]
   b8a12:	bd08      	pop	{r3, pc}
   b8a14:	0003023c 	.word	0x0003023c

000b8a18 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8a18:	b508      	push	{r3, lr}
   b8a1a:	4b02      	ldr	r3, [pc, #8]	; (b8a24 <hal_usart_read+0xc>)
   b8a1c:	681b      	ldr	r3, [r3, #0]
   b8a1e:	695b      	ldr	r3, [r3, #20]
   b8a20:	9301      	str	r3, [sp, #4]
   b8a22:	bd08      	pop	{r3, pc}
   b8a24:	0003023c 	.word	0x0003023c

000b8a28 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b02      	ldr	r3, [pc, #8]	; (b8a34 <hal_usart_peek+0xc>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	699b      	ldr	r3, [r3, #24]
   b8a30:	9301      	str	r3, [sp, #4]
   b8a32:	bd08      	pop	{r3, pc}
   b8a34:	0003023c 	.word	0x0003023c

000b8a38 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8a38:	b508      	push	{r3, lr}
   b8a3a:	4b02      	ldr	r3, [pc, #8]	; (b8a44 <hal_usart_flush+0xc>)
   b8a3c:	681b      	ldr	r3, [r3, #0]
   b8a3e:	69db      	ldr	r3, [r3, #28]
   b8a40:	9301      	str	r3, [sp, #4]
   b8a42:	bd08      	pop	{r3, pc}
   b8a44:	0003023c 	.word	0x0003023c

000b8a48 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8a48:	b508      	push	{r3, lr}
   b8a4a:	4b02      	ldr	r3, [pc, #8]	; (b8a54 <hal_usart_is_enabled+0xc>)
   b8a4c:	681b      	ldr	r3, [r3, #0]
   b8a4e:	6a1b      	ldr	r3, [r3, #32]
   b8a50:	9301      	str	r3, [sp, #4]
   b8a52:	bd08      	pop	{r3, pc}
   b8a54:	0003023c 	.word	0x0003023c

000b8a58 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8a58:	b508      	push	{r3, lr}
   b8a5a:	4b02      	ldr	r3, [pc, #8]	; (b8a64 <hal_usart_available_data_for_write+0xc>)
   b8a5c:	681b      	ldr	r3, [r3, #0]
   b8a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8a60:	9301      	str	r3, [sp, #4]
   b8a62:	bd08      	pop	{r3, pc}
   b8a64:	0003023c 	.word	0x0003023c

000b8a68 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8a68:	b508      	push	{r3, lr}
   b8a6a:	4b02      	ldr	r3, [pc, #8]	; (b8a74 <hal_usart_init_ex+0xc>)
   b8a6c:	681b      	ldr	r3, [r3, #0]
   b8a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a70:	9301      	str	r3, [sp, #4]
   b8a72:	bd08      	pop	{r3, pc}
   b8a74:	0003023c 	.word	0x0003023c

000b8a78 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8a78:	b508      	push	{r3, lr}
   b8a7a:	4b02      	ldr	r3, [pc, #8]	; (b8a84 <HAL_USB_USART_Init+0xc>)
   b8a7c:	681b      	ldr	r3, [r3, #0]
   b8a7e:	681b      	ldr	r3, [r3, #0]
   b8a80:	9301      	str	r3, [sp, #4]
   b8a82:	bd08      	pop	{r3, pc}
   b8a84:	0003024c 	.word	0x0003024c

000b8a88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8a88:	b508      	push	{r3, lr}
   b8a8a:	4b02      	ldr	r3, [pc, #8]	; (b8a94 <HAL_USB_USART_Available_Data+0xc>)
   b8a8c:	681b      	ldr	r3, [r3, #0]
   b8a8e:	691b      	ldr	r3, [r3, #16]
   b8a90:	9301      	str	r3, [sp, #4]
   b8a92:	bd08      	pop	{r3, pc}
   b8a94:	0003024c 	.word	0x0003024c

000b8a98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8a98:	b508      	push	{r3, lr}
   b8a9a:	4b02      	ldr	r3, [pc, #8]	; (b8aa4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8a9c:	681b      	ldr	r3, [r3, #0]
   b8a9e:	695b      	ldr	r3, [r3, #20]
   b8aa0:	9301      	str	r3, [sp, #4]
   b8aa2:	bd08      	pop	{r3, pc}
   b8aa4:	0003024c 	.word	0x0003024c

000b8aa8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8aa8:	b508      	push	{r3, lr}
   b8aaa:	4b02      	ldr	r3, [pc, #8]	; (b8ab4 <HAL_USB_USART_Receive_Data+0xc>)
   b8aac:	681b      	ldr	r3, [r3, #0]
   b8aae:	699b      	ldr	r3, [r3, #24]
   b8ab0:	9301      	str	r3, [sp, #4]
   b8ab2:	bd08      	pop	{r3, pc}
   b8ab4:	0003024c 	.word	0x0003024c

000b8ab8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8ab8:	b508      	push	{r3, lr}
   b8aba:	4b02      	ldr	r3, [pc, #8]	; (b8ac4 <HAL_USB_USART_Send_Data+0xc>)
   b8abc:	681b      	ldr	r3, [r3, #0]
   b8abe:	69db      	ldr	r3, [r3, #28]
   b8ac0:	9301      	str	r3, [sp, #4]
   b8ac2:	bd08      	pop	{r3, pc}
   b8ac4:	0003024c 	.word	0x0003024c

000b8ac8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8ac8:	b508      	push	{r3, lr}
   b8aca:	4b02      	ldr	r3, [pc, #8]	; (b8ad4 <HAL_USB_USART_Flush_Data+0xc>)
   b8acc:	681b      	ldr	r3, [r3, #0]
   b8ace:	6a1b      	ldr	r3, [r3, #32]
   b8ad0:	9301      	str	r3, [sp, #4]
   b8ad2:	bd08      	pop	{r3, pc}
   b8ad4:	0003024c 	.word	0x0003024c

000b8ad8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8ad8:	b508      	push	{r3, lr}
   b8ada:	4b02      	ldr	r3, [pc, #8]	; (b8ae4 <panic_+0xc>)
   b8adc:	681b      	ldr	r3, [r3, #0]
   b8ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8ae0:	9301      	str	r3, [sp, #4]
   b8ae2:	bd08      	pop	{r3, pc}
   b8ae4:	00030260 	.word	0x00030260

000b8ae8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8ae8:	b508      	push	{r3, lr}
   b8aea:	4b02      	ldr	r3, [pc, #8]	; (b8af4 <log_message+0xc>)
   b8aec:	681b      	ldr	r3, [r3, #0]
   b8aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8af0:	9301      	str	r3, [sp, #4]
   b8af2:	bd08      	pop	{r3, pc}
   b8af4:	00030260 	.word	0x00030260

000b8af8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8af8:	b508      	push	{r3, lr}
   b8afa:	4b02      	ldr	r3, [pc, #8]	; (b8b04 <log_message_v+0xc>)
   b8afc:	681b      	ldr	r3, [r3, #0]
   b8afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8b00:	9301      	str	r3, [sp, #4]
   b8b02:	bd08      	pop	{r3, pc}
   b8b04:	00030260 	.word	0x00030260

000b8b08 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8b08:	b508      	push	{r3, lr}
   b8b0a:	4b03      	ldr	r3, [pc, #12]	; (b8b18 <diag_get_source+0x10>)
   b8b0c:	681b      	ldr	r3, [r3, #0]
   b8b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8b12:	9301      	str	r3, [sp, #4]
   b8b14:	bd08      	pop	{r3, pc}
   b8b16:	0000      	.short	0x0000
   b8b18:	00030260 	.word	0x00030260

000b8b1c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8b1c:	b508      	push	{r3, lr}
   b8b1e:	4b02      	ldr	r3, [pc, #8]	; (b8b28 <system_mode+0xc>)
   b8b20:	681b      	ldr	r3, [r3, #0]
   b8b22:	681b      	ldr	r3, [r3, #0]
   b8b24:	9301      	str	r3, [sp, #4]
   b8b26:	bd08      	pop	{r3, pc}
   b8b28:	00030220 	.word	0x00030220

000b8b2c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8b2c:	b508      	push	{r3, lr}
   b8b2e:	4b02      	ldr	r3, [pc, #8]	; (b8b38 <set_system_mode+0xc>)
   b8b30:	681b      	ldr	r3, [r3, #0]
   b8b32:	685b      	ldr	r3, [r3, #4]
   b8b34:	9301      	str	r3, [sp, #4]
   b8b36:	bd08      	pop	{r3, pc}
   b8b38:	00030220 	.word	0x00030220

000b8b3c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8b3c:	b508      	push	{r3, lr}
   b8b3e:	4b02      	ldr	r3, [pc, #8]	; (b8b48 <system_delay_ms+0xc>)
   b8b40:	681b      	ldr	r3, [r3, #0]
   b8b42:	695b      	ldr	r3, [r3, #20]
   b8b44:	9301      	str	r3, [sp, #4]
   b8b46:	bd08      	pop	{r3, pc}
   b8b48:	00030220 	.word	0x00030220

000b8b4c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8b4c:	b508      	push	{r3, lr}
   b8b4e:	4b02      	ldr	r3, [pc, #8]	; (b8b58 <system_subscribe_event+0xc>)
   b8b50:	681b      	ldr	r3, [r3, #0]
   b8b52:	6a1b      	ldr	r3, [r3, #32]
   b8b54:	9301      	str	r3, [sp, #4]
   b8b56:	bd08      	pop	{r3, pc}
   b8b58:	00030220 	.word	0x00030220

000b8b5c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8b5c:	b508      	push	{r3, lr}
   b8b5e:	4b02      	ldr	r3, [pc, #8]	; (b8b68 <system_thread_set_state+0xc>)
   b8b60:	681b      	ldr	r3, [r3, #0]
   b8b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b64:	9301      	str	r3, [sp, #4]
   b8b66:	bd08      	pop	{r3, pc}
   b8b68:	00030220 	.word	0x00030220

000b8b6c <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b8b6c:	b508      	push	{r3, lr}
   b8b6e:	4b02      	ldr	r3, [pc, #8]	; (b8b78 <system_set_flag+0xc>)
   b8b70:	681b      	ldr	r3, [r3, #0]
   b8b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8b74:	9301      	str	r3, [sp, #4]
   b8b76:	bd08      	pop	{r3, pc}
   b8b78:	00030220 	.word	0x00030220

000b8b7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b8b7c:	b508      	push	{r3, lr}
   b8b7e:	4b02      	ldr	r3, [pc, #8]	; (b8b88 <application_thread_current+0xc>)
   b8b80:	681b      	ldr	r3, [r3, #0]
   b8b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8b84:	9301      	str	r3, [sp, #4]
   b8b86:	bd08      	pop	{r3, pc}
   b8b88:	00030220 	.word	0x00030220

000b8b8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b8b8c:	b508      	push	{r3, lr}
   b8b8e:	4b02      	ldr	r3, [pc, #8]	; (b8b98 <application_thread_invoke+0xc>)
   b8b90:	681b      	ldr	r3, [r3, #0]
   b8b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8b94:	9301      	str	r3, [sp, #4]
   b8b96:	bd08      	pop	{r3, pc}
   b8b98:	00030220 	.word	0x00030220

000b8b9c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8b9c:	b508      	push	{r3, lr}
   b8b9e:	4b02      	ldr	r3, [pc, #8]	; (b8ba8 <system_thread_get_state+0xc>)
   b8ba0:	681b      	ldr	r3, [r3, #0]
   b8ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8ba4:	9301      	str	r3, [sp, #4]
   b8ba6:	bd08      	pop	{r3, pc}
   b8ba8:	00030220 	.word	0x00030220

000b8bac <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b8bac:	b508      	push	{r3, lr}
   b8bae:	4b02      	ldr	r3, [pc, #8]	; (b8bb8 <system_notify_time_changed+0xc>)
   b8bb0:	681b      	ldr	r3, [r3, #0]
   b8bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8bb4:	9301      	str	r3, [sp, #4]
   b8bb6:	bd08      	pop	{r3, pc}
   b8bb8:	00030220 	.word	0x00030220

000b8bbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8bbc:	b508      	push	{r3, lr}
   b8bbe:	4b03      	ldr	r3, [pc, #12]	; (b8bcc <system_ctrl_set_app_request_handler+0x10>)
   b8bc0:	681b      	ldr	r3, [r3, #0]
   b8bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8bc6:	9301      	str	r3, [sp, #4]
   b8bc8:	bd08      	pop	{r3, pc}
   b8bca:	0000      	.short	0x0000
   b8bcc:	00030220 	.word	0x00030220

000b8bd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b03      	ldr	r3, [pc, #12]	; (b8be0 <system_ctrl_set_result+0x10>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8bda:	9301      	str	r3, [sp, #4]
   b8bdc:	bd08      	pop	{r3, pc}
   b8bde:	0000      	.short	0x0000
   b8be0:	00030220 	.word	0x00030220

000b8be4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8be4:	b508      	push	{r3, lr}
   b8be6:	4b03      	ldr	r3, [pc, #12]	; (b8bf4 <system_sleep_ext+0x10>)
   b8be8:	681b      	ldr	r3, [r3, #0]
   b8bea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8bee:	9301      	str	r3, [sp, #4]
   b8bf0:	bd08      	pop	{r3, pc}
   b8bf2:	0000      	.short	0x0000
   b8bf4:	00030220 	.word	0x00030220

000b8bf8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8bf8:	b508      	push	{r3, lr}
   b8bfa:	4b03      	ldr	r3, [pc, #12]	; (b8c08 <system_reset+0x10>)
   b8bfc:	681b      	ldr	r3, [r3, #0]
   b8bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8c02:	9301      	str	r3, [sp, #4]
   b8c04:	bd08      	pop	{r3, pc}
   b8c06:	0000      	.short	0x0000
   b8c08:	00030220 	.word	0x00030220

000b8c0c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b8c0c:	b508      	push	{r3, lr}
   b8c0e:	4b02      	ldr	r3, [pc, #8]	; (b8c18 <spark_variable+0xc>)
   b8c10:	681b      	ldr	r3, [r3, #0]
   b8c12:	681b      	ldr	r3, [r3, #0]
   b8c14:	9301      	str	r3, [sp, #4]
   b8c16:	bd08      	pop	{r3, pc}
   b8c18:	00030244 	.word	0x00030244

000b8c1c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b8c1c:	b508      	push	{r3, lr}
   b8c1e:	4b02      	ldr	r3, [pc, #8]	; (b8c28 <spark_function+0xc>)
   b8c20:	681b      	ldr	r3, [r3, #0]
   b8c22:	685b      	ldr	r3, [r3, #4]
   b8c24:	9301      	str	r3, [sp, #4]
   b8c26:	bd08      	pop	{r3, pc}
   b8c28:	00030244 	.word	0x00030244

000b8c2c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8c2c:	b508      	push	{r3, lr}
   b8c2e:	4b02      	ldr	r3, [pc, #8]	; (b8c38 <spark_process+0xc>)
   b8c30:	681b      	ldr	r3, [r3, #0]
   b8c32:	689b      	ldr	r3, [r3, #8]
   b8c34:	9301      	str	r3, [sp, #4]
   b8c36:	bd08      	pop	{r3, pc}
   b8c38:	00030244 	.word	0x00030244

000b8c3c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b8c3c:	b508      	push	{r3, lr}
   b8c3e:	4b02      	ldr	r3, [pc, #8]	; (b8c48 <spark_cloud_flag_connect+0xc>)
   b8c40:	681b      	ldr	r3, [r3, #0]
   b8c42:	68db      	ldr	r3, [r3, #12]
   b8c44:	9301      	str	r3, [sp, #4]
   b8c46:	bd08      	pop	{r3, pc}
   b8c48:	00030244 	.word	0x00030244

000b8c4c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8c4c:	b508      	push	{r3, lr}
   b8c4e:	4b02      	ldr	r3, [pc, #8]	; (b8c58 <spark_cloud_flag_connected+0xc>)
   b8c50:	681b      	ldr	r3, [r3, #0]
   b8c52:	695b      	ldr	r3, [r3, #20]
   b8c54:	9301      	str	r3, [sp, #4]
   b8c56:	bd08      	pop	{r3, pc}
   b8c58:	00030244 	.word	0x00030244

000b8c5c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8c5c:	b508      	push	{r3, lr}
   b8c5e:	4b02      	ldr	r3, [pc, #8]	; (b8c68 <spark_deviceID+0xc>)
   b8c60:	681b      	ldr	r3, [r3, #0]
   b8c62:	69db      	ldr	r3, [r3, #28]
   b8c64:	9301      	str	r3, [sp, #4]
   b8c66:	bd08      	pop	{r3, pc}
   b8c68:	00030244 	.word	0x00030244

000b8c6c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b8c6c:	b508      	push	{r3, lr}
   b8c6e:	4b02      	ldr	r3, [pc, #8]	; (b8c78 <spark_send_event+0xc>)
   b8c70:	681b      	ldr	r3, [r3, #0]
   b8c72:	6a1b      	ldr	r3, [r3, #32]
   b8c74:	9301      	str	r3, [sp, #4]
   b8c76:	bd08      	pop	{r3, pc}
   b8c78:	00030244 	.word	0x00030244

000b8c7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b8c7c:	b508      	push	{r3, lr}
   b8c7e:	4b02      	ldr	r3, [pc, #8]	; (b8c88 <spark_subscribe+0xc>)
   b8c80:	681b      	ldr	r3, [r3, #0]
   b8c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8c84:	9301      	str	r3, [sp, #4]
   b8c86:	bd08      	pop	{r3, pc}
   b8c88:	00030244 	.word	0x00030244

000b8c8c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b8c8c:	b508      	push	{r3, lr}
   b8c8e:	4b02      	ldr	r3, [pc, #8]	; (b8c98 <spark_sync_time+0xc>)
   b8c90:	681b      	ldr	r3, [r3, #0]
   b8c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c94:	9301      	str	r3, [sp, #4]
   b8c96:	bd08      	pop	{r3, pc}
   b8c98:	00030244 	.word	0x00030244

000b8c9c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8c9c:	b508      	push	{r3, lr}
   b8c9e:	4b02      	ldr	r3, [pc, #8]	; (b8ca8 <spark_sync_time_pending+0xc>)
   b8ca0:	681b      	ldr	r3, [r3, #0]
   b8ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8ca4:	9301      	str	r3, [sp, #4]
   b8ca6:	bd08      	pop	{r3, pc}
   b8ca8:	00030244 	.word	0x00030244

000b8cac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8cac:	b508      	push	{r3, lr}
   b8cae:	4b02      	ldr	r3, [pc, #8]	; (b8cb8 <spark_sync_time_last+0xc>)
   b8cb0:	681b      	ldr	r3, [r3, #0]
   b8cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8cb4:	9301      	str	r3, [sp, #4]
   b8cb6:	bd08      	pop	{r3, pc}
   b8cb8:	00030244 	.word	0x00030244

000b8cbc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b8cbc:	b508      	push	{r3, lr}
   b8cbe:	4b02      	ldr	r3, [pc, #8]	; (b8cc8 <spark_set_connection_property+0xc>)
   b8cc0:	681b      	ldr	r3, [r3, #0]
   b8cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8cc4:	9301      	str	r3, [sp, #4]
   b8cc6:	bd08      	pop	{r3, pc}
   b8cc8:	00030244 	.word	0x00030244

000b8ccc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8ccc:	b508      	push	{r3, lr}
   b8cce:	4b02      	ldr	r3, [pc, #8]	; (b8cd8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8cd0:	681b      	ldr	r3, [r3, #0]
   b8cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8cd4:	9301      	str	r3, [sp, #4]
   b8cd6:	bd08      	pop	{r3, pc}
   b8cd8:	00030244 	.word	0x00030244

000b8cdc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b8cdc:	b508      	push	{r3, lr}
   b8cde:	4b02      	ldr	r3, [pc, #8]	; (b8ce8 <spark_cloud_disconnect+0xc>)
   b8ce0:	681b      	ldr	r3, [r3, #0]
   b8ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ce4:	9301      	str	r3, [sp, #4]
   b8ce6:	bd08      	pop	{r3, pc}
   b8ce8:	00030244 	.word	0x00030244

000b8cec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8cec:	b508      	push	{r3, lr}
   b8cee:	4b02      	ldr	r3, [pc, #8]	; (b8cf8 <network_connect+0xc>)
   b8cf0:	681b      	ldr	r3, [r3, #0]
   b8cf2:	685b      	ldr	r3, [r3, #4]
   b8cf4:	9301      	str	r3, [sp, #4]
   b8cf6:	bd08      	pop	{r3, pc}
   b8cf8:	00030240 	.word	0x00030240

000b8cfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8cfc:	b508      	push	{r3, lr}
   b8cfe:	4b02      	ldr	r3, [pc, #8]	; (b8d08 <network_connecting+0xc>)
   b8d00:	681b      	ldr	r3, [r3, #0]
   b8d02:	689b      	ldr	r3, [r3, #8]
   b8d04:	9301      	str	r3, [sp, #4]
   b8d06:	bd08      	pop	{r3, pc}
   b8d08:	00030240 	.word	0x00030240

000b8d0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8d0c:	b508      	push	{r3, lr}
   b8d0e:	4b02      	ldr	r3, [pc, #8]	; (b8d18 <network_disconnect+0xc>)
   b8d10:	681b      	ldr	r3, [r3, #0]
   b8d12:	68db      	ldr	r3, [r3, #12]
   b8d14:	9301      	str	r3, [sp, #4]
   b8d16:	bd08      	pop	{r3, pc}
   b8d18:	00030240 	.word	0x00030240

000b8d1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8d1c:	b508      	push	{r3, lr}
   b8d1e:	4b02      	ldr	r3, [pc, #8]	; (b8d28 <network_ready+0xc>)
   b8d20:	681b      	ldr	r3, [r3, #0]
   b8d22:	691b      	ldr	r3, [r3, #16]
   b8d24:	9301      	str	r3, [sp, #4]
   b8d26:	bd08      	pop	{r3, pc}
   b8d28:	00030240 	.word	0x00030240

000b8d2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8d2c:	b508      	push	{r3, lr}
   b8d2e:	4b02      	ldr	r3, [pc, #8]	; (b8d38 <network_on+0xc>)
   b8d30:	681b      	ldr	r3, [r3, #0]
   b8d32:	695b      	ldr	r3, [r3, #20]
   b8d34:	9301      	str	r3, [sp, #4]
   b8d36:	bd08      	pop	{r3, pc}
   b8d38:	00030240 	.word	0x00030240

000b8d3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8d3c:	b508      	push	{r3, lr}
   b8d3e:	4b02      	ldr	r3, [pc, #8]	; (b8d48 <network_off+0xc>)
   b8d40:	681b      	ldr	r3, [r3, #0]
   b8d42:	699b      	ldr	r3, [r3, #24]
   b8d44:	9301      	str	r3, [sp, #4]
   b8d46:	bd08      	pop	{r3, pc}
   b8d48:	00030240 	.word	0x00030240

000b8d4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8d4c:	b508      	push	{r3, lr}
   b8d4e:	4b02      	ldr	r3, [pc, #8]	; (b8d58 <network_listen+0xc>)
   b8d50:	681b      	ldr	r3, [r3, #0]
   b8d52:	69db      	ldr	r3, [r3, #28]
   b8d54:	9301      	str	r3, [sp, #4]
   b8d56:	bd08      	pop	{r3, pc}
   b8d58:	00030240 	.word	0x00030240

000b8d5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8d5c:	b508      	push	{r3, lr}
   b8d5e:	4b02      	ldr	r3, [pc, #8]	; (b8d68 <network_listening+0xc>)
   b8d60:	681b      	ldr	r3, [r3, #0]
   b8d62:	6a1b      	ldr	r3, [r3, #32]
   b8d64:	9301      	str	r3, [sp, #4]
   b8d66:	bd08      	pop	{r3, pc}
   b8d68:	00030240 	.word	0x00030240

000b8d6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8d6c:	b508      	push	{r3, lr}
   b8d6e:	4b02      	ldr	r3, [pc, #8]	; (b8d78 <network_set_listen_timeout+0xc>)
   b8d70:	681b      	ldr	r3, [r3, #0]
   b8d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8d74:	9301      	str	r3, [sp, #4]
   b8d76:	bd08      	pop	{r3, pc}
   b8d78:	00030240 	.word	0x00030240

000b8d7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8d7c:	b508      	push	{r3, lr}
   b8d7e:	4b02      	ldr	r3, [pc, #8]	; (b8d88 <network_get_listen_timeout+0xc>)
   b8d80:	681b      	ldr	r3, [r3, #0]
   b8d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8d84:	9301      	str	r3, [sp, #4]
   b8d86:	bd08      	pop	{r3, pc}
   b8d88:	00030240 	.word	0x00030240

000b8d8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8d8c:	b508      	push	{r3, lr}
   b8d8e:	4b02      	ldr	r3, [pc, #8]	; (b8d98 <network_is_on+0xc>)
   b8d90:	681b      	ldr	r3, [r3, #0]
   b8d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8d94:	9301      	str	r3, [sp, #4]
   b8d96:	bd08      	pop	{r3, pc}
   b8d98:	00030240 	.word	0x00030240

000b8d9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8d9c:	b508      	push	{r3, lr}
   b8d9e:	4b02      	ldr	r3, [pc, #8]	; (b8da8 <network_is_off+0xc>)
   b8da0:	681b      	ldr	r3, [r3, #0]
   b8da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8da4:	9301      	str	r3, [sp, #4]
   b8da6:	bd08      	pop	{r3, pc}
   b8da8:	00030240 	.word	0x00030240

000b8dac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8dac:	b508      	push	{r3, lr}
   b8dae:	4b02      	ldr	r3, [pc, #8]	; (b8db8 <malloc+0xc>)
   b8db0:	681b      	ldr	r3, [r3, #0]
   b8db2:	681b      	ldr	r3, [r3, #0]
   b8db4:	9301      	str	r3, [sp, #4]
   b8db6:	bd08      	pop	{r3, pc}
   b8db8:	0003021c 	.word	0x0003021c

000b8dbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8dbc:	b508      	push	{r3, lr}
   b8dbe:	4b02      	ldr	r3, [pc, #8]	; (b8dc8 <free+0xc>)
   b8dc0:	681b      	ldr	r3, [r3, #0]
   b8dc2:	685b      	ldr	r3, [r3, #4]
   b8dc4:	9301      	str	r3, [sp, #4]
   b8dc6:	bd08      	pop	{r3, pc}
   b8dc8:	0003021c 	.word	0x0003021c

000b8dcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8dcc:	b508      	push	{r3, lr}
   b8dce:	4b02      	ldr	r3, [pc, #8]	; (b8dd8 <realloc+0xc>)
   b8dd0:	681b      	ldr	r3, [r3, #0]
   b8dd2:	689b      	ldr	r3, [r3, #8]
   b8dd4:	9301      	str	r3, [sp, #4]
   b8dd6:	bd08      	pop	{r3, pc}
   b8dd8:	0003021c 	.word	0x0003021c

000b8ddc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8ddc:	b508      	push	{r3, lr}
   b8dde:	4b02      	ldr	r3, [pc, #8]	; (b8de8 <siprintf+0xc>)
   b8de0:	681b      	ldr	r3, [r3, #0]
   b8de2:	691b      	ldr	r3, [r3, #16]
   b8de4:	9301      	str	r3, [sp, #4]
   b8de6:	bd08      	pop	{r3, pc}
   b8de8:	0003021c 	.word	0x0003021c

000b8dec <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8dec:	b508      	push	{r3, lr}
   b8dee:	4b02      	ldr	r3, [pc, #8]	; (b8df8 <sscanf+0xc>)
   b8df0:	681b      	ldr	r3, [r3, #0]
   b8df2:	695b      	ldr	r3, [r3, #20]
   b8df4:	9301      	str	r3, [sp, #4]
   b8df6:	bd08      	pop	{r3, pc}
   b8df8:	0003021c 	.word	0x0003021c

000b8dfc <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8dfc:	b508      	push	{r3, lr}
   b8dfe:	4b02      	ldr	r3, [pc, #8]	; (b8e08 <snprintf+0xc>)
   b8e00:	681b      	ldr	r3, [r3, #0]
   b8e02:	69db      	ldr	r3, [r3, #28]
   b8e04:	9301      	str	r3, [sp, #4]
   b8e06:	bd08      	pop	{r3, pc}
   b8e08:	0003021c 	.word	0x0003021c

000b8e0c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8e0c:	b508      	push	{r3, lr}
   b8e0e:	4b02      	ldr	r3, [pc, #8]	; (b8e18 <vsnprintf+0xc>)
   b8e10:	681b      	ldr	r3, [r3, #0]
   b8e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8e14:	9301      	str	r3, [sp, #4]
   b8e16:	bd08      	pop	{r3, pc}
   b8e18:	0003021c 	.word	0x0003021c

000b8e1c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8e1c:	b508      	push	{r3, lr}
   b8e1e:	4b02      	ldr	r3, [pc, #8]	; (b8e28 <abort+0xc>)
   b8e20:	681b      	ldr	r3, [r3, #0]
   b8e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8e24:	9301      	str	r3, [sp, #4]
   b8e26:	bd08      	pop	{r3, pc}
   b8e28:	0003021c 	.word	0x0003021c

000b8e2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8e2c:	b508      	push	{r3, lr}
   b8e2e:	4b02      	ldr	r3, [pc, #8]	; (b8e38 <_malloc_r+0xc>)
   b8e30:	681b      	ldr	r3, [r3, #0]
   b8e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e34:	9301      	str	r3, [sp, #4]
   b8e36:	bd08      	pop	{r3, pc}
   b8e38:	0003021c 	.word	0x0003021c

000b8e3c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8e3c:	b508      	push	{r3, lr}
   b8e3e:	4b02      	ldr	r3, [pc, #8]	; (b8e48 <__errno+0xc>)
   b8e40:	681b      	ldr	r3, [r3, #0]
   b8e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8e44:	9301      	str	r3, [sp, #4]
   b8e46:	bd08      	pop	{r3, pc}
   b8e48:	0003021c 	.word	0x0003021c

000b8e4c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8e4c:	b508      	push	{r3, lr}
   b8e4e:	4b02      	ldr	r3, [pc, #8]	; (b8e58 <__assert_func+0xc>)
   b8e50:	681b      	ldr	r3, [r3, #0]
   b8e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8e54:	9301      	str	r3, [sp, #4]
   b8e56:	bd08      	pop	{r3, pc}
   b8e58:	0003021c 	.word	0x0003021c

000b8e5c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8e5c:	b508      	push	{r3, lr}
   b8e5e:	4b02      	ldr	r3, [pc, #8]	; (b8e68 <newlib_impure_ptr_callback+0xc>)
   b8e60:	681b      	ldr	r3, [r3, #0]
   b8e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8e64:	9301      	str	r3, [sp, #4]
   b8e66:	bd08      	pop	{r3, pc}
   b8e68:	0003021c 	.word	0x0003021c

000b8e6c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8e6c:	b508      	push	{r3, lr}
   b8e6e:	4b02      	ldr	r3, [pc, #8]	; (b8e78 <strftime+0xc>)
   b8e70:	681b      	ldr	r3, [r3, #0]
   b8e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8e74:	9301      	str	r3, [sp, #4]
   b8e76:	bd08      	pop	{r3, pc}
   b8e78:	0003021c 	.word	0x0003021c

000b8e7c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8e7c:	b508      	push	{r3, lr}
   b8e7e:	4b02      	ldr	r3, [pc, #8]	; (b8e88 <localtime_r+0xc>)
   b8e80:	681b      	ldr	r3, [r3, #0]
   b8e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8e84:	9301      	str	r3, [sp, #4]
   b8e86:	bd08      	pop	{r3, pc}
   b8e88:	0003021c 	.word	0x0003021c

000b8e8c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8e8c:	b508      	push	{r3, lr}
   b8e8e:	4b02      	ldr	r3, [pc, #8]	; (b8e98 <gmtime_r+0xc>)
   b8e90:	681b      	ldr	r3, [r3, #0]
   b8e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8e94:	9301      	str	r3, [sp, #4]
   b8e96:	bd08      	pop	{r3, pc}
   b8e98:	0003021c 	.word	0x0003021c

000b8e9c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8e9c:	b508      	push	{r3, lr}
   b8e9e:	4b02      	ldr	r3, [pc, #8]	; (b8ea8 <mktime+0xc>)
   b8ea0:	681b      	ldr	r3, [r3, #0]
   b8ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8ea4:	9301      	str	r3, [sp, #4]
   b8ea6:	bd08      	pop	{r3, pc}
   b8ea8:	0003021c 	.word	0x0003021c

000b8eac <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b8eac:	428a      	cmp	r2, r1
{
   b8eae:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b8eb0:	d007      	beq.n	b8ec2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b8eb2:	1a44      	subs	r4, r0, r1
   b8eb4:	9802      	ldr	r0, [sp, #8]
   b8eb6:	1ac0      	subs	r0, r0, r3
   b8eb8:	4344      	muls	r4, r0
   b8eba:	1a50      	subs	r0, r2, r1
   b8ebc:	fb94 f0f0 	sdiv	r0, r4, r0
   b8ec0:	4418      	add	r0, r3
}
   b8ec2:	bd10      	pop	{r4, pc}

000b8ec4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8ec4:	2100      	movs	r1, #0
   b8ec6:	f7ff be39 	b.w	b8b3c <system_delay_ms>

000b8eca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8eca:	b510      	push	{r4, lr}
      if (_M_empty())
   b8ecc:	6883      	ldr	r3, [r0, #8]
   b8ece:	4604      	mov	r4, r0
   b8ed0:	b90b      	cbnz	r3, b8ed6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8ed2:	f001 ff07 	bl	bace4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8ed6:	68c3      	ldr	r3, [r0, #12]
   b8ed8:	4798      	blx	r3
      if (_M_manager)
   b8eda:	68a3      	ldr	r3, [r4, #8]
   b8edc:	b11b      	cbz	r3, b8ee6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8ede:	2203      	movs	r2, #3
   b8ee0:	4621      	mov	r1, r4
   b8ee2:	4620      	mov	r0, r4
   b8ee4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8ee6:	4620      	mov	r0, r4
   b8ee8:	2110      	movs	r1, #16
}
   b8eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8eee:	f7fb b8d6 	b.w	b409e <_ZdlPvj>
	...

000b8ef4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8ef4:	4802      	ldr	r0, [pc, #8]	; (b8f00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8ef6:	2300      	movs	r3, #0
   b8ef8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8efa:	f7ff bbd5 	b.w	b86a8 <os_mutex_recursive_create>
   b8efe:	bf00      	nop
   b8f00:	2003e630 	.word	0x2003e630

000b8f04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8f04:	2200      	movs	r2, #0
   b8f06:	6840      	ldr	r0, [r0, #4]
   b8f08:	4611      	mov	r1, r2
   b8f0a:	f7ff bf07 	b.w	b8d1c <network_ready>

000b8f0e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8f0e:	2200      	movs	r2, #0
   b8f10:	6840      	ldr	r0, [r0, #4]
   b8f12:	4611      	mov	r1, r2
   b8f14:	f7ff bf22 	b.w	b8d5c <network_listening>

000b8f18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8f18:	2200      	movs	r2, #0
   b8f1a:	6840      	ldr	r0, [r0, #4]
   b8f1c:	4611      	mov	r1, r2
   b8f1e:	f7ff bf2d 	b.w	b8d7c <network_get_listen_timeout>

000b8f22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8f22:	6840      	ldr	r0, [r0, #4]
   b8f24:	2200      	movs	r2, #0
   b8f26:	f7ff bf21 	b.w	b8d6c <network_set_listen_timeout>

000b8f2a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8f2a:	6840      	ldr	r0, [r0, #4]
   b8f2c:	2200      	movs	r2, #0
   b8f2e:	f081 0101 	eor.w	r1, r1, #1
   b8f32:	f7ff bf0b 	b.w	b8d4c <network_listen>

000b8f36 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8f36:	2300      	movs	r3, #0
   b8f38:	6840      	ldr	r0, [r0, #4]
   b8f3a:	461a      	mov	r2, r3
   b8f3c:	4619      	mov	r1, r3
   b8f3e:	f7ff befd 	b.w	b8d3c <network_off>

000b8f42 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8f42:	2200      	movs	r2, #0
   b8f44:	6840      	ldr	r0, [r0, #4]
   b8f46:	4611      	mov	r1, r2
   b8f48:	f7ff bed8 	b.w	b8cfc <network_connecting>

000b8f4c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8f4c:	6840      	ldr	r0, [r0, #4]
   b8f4e:	2200      	movs	r2, #0
   b8f50:	2102      	movs	r1, #2
   b8f52:	f7ff bedb 	b.w	b8d0c <network_disconnect>

000b8f56 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8f56:	2300      	movs	r3, #0
   b8f58:	6840      	ldr	r0, [r0, #4]
   b8f5a:	461a      	mov	r2, r3
   b8f5c:	f7ff bec6 	b.w	b8cec <network_connect>

000b8f60 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8f60:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8f62:	4b13      	ldr	r3, [pc, #76]	; (b8fb0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8f64:	6003      	str	r3, [r0, #0]
   b8f66:	2518      	movs	r5, #24
   b8f68:	3330      	adds	r3, #48	; 0x30
   b8f6a:	b086      	sub	sp, #24
   b8f6c:	460e      	mov	r6, r1
   b8f6e:	6043      	str	r3, [r0, #4]
   b8f70:	462a      	mov	r2, r5
   b8f72:	2100      	movs	r1, #0
   b8f74:	4604      	mov	r4, r0
   b8f76:	3008      	adds	r0, #8
   b8f78:	f002 fc32 	bl	bb7e0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8f7c:	2200      	movs	r2, #0
   b8f7e:	6870      	ldr	r0, [r6, #4]
   b8f80:	4611      	mov	r1, r2
   b8f82:	f7ff fecb 	bl	b8d1c <network_ready>
   b8f86:	b178      	cbz	r0, b8fa8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8f88:	2100      	movs	r1, #0
   b8f8a:	462a      	mov	r2, r5
   b8f8c:	4668      	mov	r0, sp
   b8f8e:	f002 fc27 	bl	bb7e0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8f92:	4669      	mov	r1, sp
   b8f94:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8f96:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8f9a:	f7ff fb15 	bl	b85c8 <cellular_signal>
   b8f9e:	b918      	cbnz	r0, b8fa8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8fa0:	4669      	mov	r1, sp
   b8fa2:	4620      	mov	r0, r4
   b8fa4:	f000 f8b8 	bl	b9118 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8fa8:	4620      	mov	r0, r4
   b8faa:	b006      	add	sp, #24
   b8fac:	bd70      	pop	{r4, r5, r6, pc}
   b8fae:	bf00      	nop
   b8fb0:	000bc8d4 	.word	0x000bc8d4

000b8fb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8fb4:	4b08      	ldr	r3, [pc, #32]	; (b8fd8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8fb6:	b510      	push	{r4, lr}
   b8fb8:	2428      	movs	r4, #40	; 0x28
   b8fba:	4622      	mov	r2, r4
   b8fbc:	4618      	mov	r0, r3
   b8fbe:	2100      	movs	r1, #0
   b8fc0:	f002 fc0e 	bl	bb7e0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8fc4:	4b05      	ldr	r3, [pc, #20]	; (b8fdc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8fc6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8fcc:	6042      	str	r2, [r0, #4]
   b8fce:	2204      	movs	r2, #4
   b8fd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8fd2:	4a03      	ldr	r2, [pc, #12]	; (b8fe0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8fd4:	601a      	str	r2, [r3, #0]
   b8fd6:	bd10      	pop	{r4, pc}
   b8fd8:	2003e63c 	.word	0x2003e63c
   b8fdc:	2003e634 	.word	0x2003e634
   b8fe0:	000bc898 	.word	0x000bc898

000b8fe4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8fe4:	4770      	bx	lr

000b8fe6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8fe6:	7b00      	ldrb	r0, [r0, #12]
   b8fe8:	4770      	bx	lr

000b8fea <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8fea:	7b03      	ldrb	r3, [r0, #12]
   b8fec:	b14b      	cbz	r3, b9002 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8fee:	6903      	ldr	r3, [r0, #16]
   b8ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8ff4:	d005      	beq.n	b9002 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8ff6:	6980      	ldr	r0, [r0, #24]
   b8ff8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8ffc:	bf18      	it	ne
   b8ffe:	2001      	movne	r0, #1
   b9000:	4770      	bx	lr
   b9002:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b9004:	4770      	bx	lr

000b9006 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b9006:	6803      	ldr	r3, [r0, #0]
   b9008:	6a1b      	ldr	r3, [r3, #32]
   b900a:	4718      	bx	r3

000b900c <_ZNK14CellularSignal7printToER5Print>:
{
   b900c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b900e:	6803      	ldr	r3, [r0, #0]
{
   b9010:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b9012:	691b      	ldr	r3, [r3, #16]
{
   b9014:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b9016:	4798      	blx	r3
   b9018:	2102      	movs	r1, #2
   b901a:	4628      	mov	r0, r5
   b901c:	f000 ff90 	bl	b9f40 <_ZN5Print5printEfi>
    n += p.print(',');
   b9020:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b9022:	4604      	mov	r4, r0
    n += p.print(',');
   b9024:	4628      	mov	r0, r5
   b9026:	f000 fea1 	bl	b9d6c <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b902a:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b902c:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b902e:	699b      	ldr	r3, [r3, #24]
   b9030:	4630      	mov	r0, r6
   b9032:	4798      	blx	r3
   b9034:	2102      	movs	r1, #2
   b9036:	4628      	mov	r0, r5
   b9038:	f000 ff82 	bl	b9f40 <_ZN5Print5printEfi>
}
   b903c:	4420      	add	r0, r4
   b903e:	bd70      	pop	{r4, r5, r6, pc}

000b9040 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b9040:	f1a0 0004 	sub.w	r0, r0, #4
   b9044:	f7ff bfe2 	b.w	b900c <_ZNK14CellularSignal7printToER5Print>

000b9048 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b9048:	b510      	push	{r4, lr}
   b904a:	2120      	movs	r1, #32
   b904c:	4604      	mov	r4, r0
   b904e:	f7fb f826 	bl	b409e <_ZdlPvj>
   b9052:	4620      	mov	r0, r4
   b9054:	bd10      	pop	{r4, pc}
	...

000b9058 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b9058:	7b03      	ldrb	r3, [r0, #12]
   b905a:	b17b      	cbz	r3, b907c <_ZNK14CellularSignal11getStrengthEv+0x24>
   b905c:	6943      	ldr	r3, [r0, #20]
   b905e:	2b00      	cmp	r3, #0
   b9060:	db0c      	blt.n	b907c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b9062:	ee07 3a90 	vmov	s15, r3
   b9066:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9084 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b906a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b906e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9072:	eddf 7a05 	vldr	s15, [pc, #20]	; b9088 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b9076:	ee20 0a27 	vmul.f32	s0, s0, s15
   b907a:	4770      	bx	lr
    return -1.0f;
   b907c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9080:	4770      	bx	lr
   b9082:	bf00      	nop
   b9084:	477fff00 	.word	0x477fff00
   b9088:	42c80000 	.word	0x42c80000

000b908c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b908c:	7b03      	ldrb	r3, [r0, #12]
   b908e:	b163      	cbz	r3, b90aa <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b9090:	6903      	ldr	r3, [r0, #16]
   b9092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9096:	d008      	beq.n	b90aa <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b9098:	ee07 3a90 	vmov	s15, r3
   b909c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b90b0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b90a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b90a4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b90a8:	4770      	bx	lr
    return 0.0f;
   b90aa:	ed9f 0a02 	vldr	s0, [pc, #8]	; b90b4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b90ae:	4770      	bx	lr
   b90b0:	42c80000 	.word	0x42c80000
   b90b4:	00000000 	.word	0x00000000

000b90b8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b90b8:	7b03      	ldrb	r3, [r0, #12]
   b90ba:	b17b      	cbz	r3, b90dc <_ZNK14CellularSignal10getQualityEv+0x24>
   b90bc:	69c3      	ldr	r3, [r0, #28]
   b90be:	2b00      	cmp	r3, #0
   b90c0:	db0c      	blt.n	b90dc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b90c2:	ee07 3a90 	vmov	s15, r3
   b90c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b90e4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b90ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b90ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b90d2:	eddf 7a05 	vldr	s15, [pc, #20]	; b90e8 <_ZNK14CellularSignal10getQualityEv+0x30>
   b90d6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b90da:	4770      	bx	lr
    return -1.0f;
   b90dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b90e0:	4770      	bx	lr
   b90e2:	bf00      	nop
   b90e4:	477fff00 	.word	0x477fff00
   b90e8:	42c80000 	.word	0x42c80000

000b90ec <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b90ec:	7b03      	ldrb	r3, [r0, #12]
   b90ee:	b163      	cbz	r3, b910a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b90f0:	6983      	ldr	r3, [r0, #24]
   b90f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b90f6:	d008      	beq.n	b910a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b90f8:	ee07 3a90 	vmov	s15, r3
   b90fc:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9110 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b9100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9104:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9108:	4770      	bx	lr
    return 0.0f;
   b910a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9114 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b910e:	4770      	bx	lr
   b9110:	42c80000 	.word	0x42c80000
   b9114:	00000000 	.word	0x00000000

000b9118 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b9118:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b911a:	460d      	mov	r5, r1
   b911c:	f100 0408 	add.w	r4, r0, #8
   b9120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9124:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9128:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b912c:	2001      	movs	r0, #1
   b912e:	bd30      	pop	{r4, r5, pc}

000b9130 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9130:	4770      	bx	lr

000b9132 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b9132:	2000      	movs	r0, #0
   b9134:	4770      	bx	lr

000b9136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9136:	b510      	push	{r4, lr}
   b9138:	2110      	movs	r1, #16
   b913a:	4604      	mov	r4, r0
   b913c:	f7fa ffaf 	bl	b409e <_ZdlPvj>
   b9140:	4620      	mov	r0, r4
   b9142:	bd10      	pop	{r4, pc}

000b9144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b9144:	b508      	push	{r3, lr}
      { delete this; }
   b9146:	f7ff fff6 	bl	b9136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b914a:	bd08      	pop	{r3, pc}

000b914c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b914c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b914e:	2200      	movs	r2, #0
   b9150:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b9154:	6002      	str	r2, [r0, #0]
   b9156:	8084      	strh	r4, [r0, #4]
   b9158:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b915a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b915c:	680c      	ldr	r4, [r1, #0]
   b915e:	8085      	strh	r5, [r0, #4]
   b9160:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9162:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b9164:	bd30      	pop	{r4, r5, pc}

000b9166 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b9166:	b510      	push	{r4, lr}
   b9168:	4604      	mov	r4, r0
    free((void*)msg_);
   b916a:	6800      	ldr	r0, [r0, #0]
   b916c:	f7ff fe26 	bl	b8dbc <free>
}
   b9170:	4620      	mov	r0, r4
   b9172:	bd10      	pop	{r4, pc}

000b9174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9174:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9176:	68c4      	ldr	r4, [r0, #12]
   b9178:	b1f4      	cbz	r4, b91b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b917a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b917c:	2b02      	cmp	r3, #2
   b917e:	d103      	bne.n	b9188 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9180:	f104 000c 	add.w	r0, r4, #12
   b9184:	f7ff ffef 	bl	b9166 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9188:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b918a:	b135      	cbz	r5, b919a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b918c:	4628      	mov	r0, r5
   b918e:	f7fb f96e 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b9192:	2110      	movs	r1, #16
   b9194:	4628      	mov	r0, r5
   b9196:	f7fa ff82 	bl	b409e <_ZdlPvj>
   b919a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b919c:	b135      	cbz	r5, b91ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b919e:	4628      	mov	r0, r5
   b91a0:	f7fb f965 	bl	b446e <_ZNSt14_Function_baseD1Ev>
   b91a4:	2110      	movs	r1, #16
   b91a6:	4628      	mov	r0, r5
   b91a8:	f7fa ff79 	bl	b409e <_ZdlPvj>
   b91ac:	4620      	mov	r0, r4
   b91ae:	2114      	movs	r1, #20
   b91b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b91b4:	f7fa bf73 	b.w	b409e <_ZdlPvj>
   b91b8:	bd38      	pop	{r3, r4, r5, pc}

000b91ba <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b91ba:	b510      	push	{r4, lr}
   b91bc:	b088      	sub	sp, #32
   b91be:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b91c0:	4668      	mov	r0, sp
   b91c2:	f000 ff28 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b91c6:	4669      	mov	r1, sp
   b91c8:	a804      	add	r0, sp, #16
   b91ca:	f000 ff64 	bl	ba096 <_ZN6StringC1ERKS_>
   b91ce:	a804      	add	r0, sp, #16
   b91d0:	47a0      	blx	r4
   b91d2:	4604      	mov	r4, r0
   b91d4:	a804      	add	r0, sp, #16
   b91d6:	f000 fed3 	bl	b9f80 <_ZN6StringD1Ev>
    String p(param);
   b91da:	4668      	mov	r0, sp
   b91dc:	f000 fed0 	bl	b9f80 <_ZN6StringD1Ev>
}
   b91e0:	4620      	mov	r0, r4
   b91e2:	b008      	add	sp, #32
   b91e4:	bd10      	pop	{r4, pc}

000b91e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b91e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b91e8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b91ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b91ee:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b91f0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b91f2:	461a      	mov	r2, r3
   b91f4:	4669      	mov	r1, sp
   b91f6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b91f8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b91fc:	f8ad 4000 	strh.w	r4, [sp]
   b9200:	f7ff fd0c 	bl	b8c1c <spark_function>
}
   b9204:	b004      	add	sp, #16
   b9206:	bd10      	pop	{r4, pc}

000b9208 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b920a:	230c      	movs	r3, #12
   b920c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b9210:	6803      	ldr	r3, [r0, #0]
   b9212:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b9216:	7a03      	ldrb	r3, [r0, #8]
   b9218:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b921c:	6843      	ldr	r3, [r0, #4]
   b921e:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b9220:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b9222:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b9224:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9228:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b922a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b922e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9232:	f7ff fd53 	bl	b8cdc <spark_cloud_disconnect>
}
   b9236:	b005      	add	sp, #20
   b9238:	f85d fb04 	ldr.w	pc, [sp], #4

000b923c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b923c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b923e:	220c      	movs	r2, #12
   b9240:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b9244:	6802      	ldr	r2, [r0, #0]
   b9246:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b924a:	7a02      	ldrb	r2, [r0, #8]
   b924c:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b9250:	6842      	ldr	r2, [r0, #4]
   b9252:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b9254:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b9256:	7a42      	ldrb	r2, [r0, #9]
   b9258:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b925c:	4619      	mov	r1, r3
   b925e:	aa01      	add	r2, sp, #4
   b9260:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b9262:	f8ad 300d 	strh.w	r3, [sp, #13]
   b9266:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b926a:	f7ff fd27 	bl	b8cbc <spark_set_connection_property>
}
   b926e:	b005      	add	sp, #20
   b9270:	f85d fb04 	ldr.w	pc, [sp], #4

000b9274 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9274:	680b      	ldr	r3, [r1, #0]
   b9276:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9278:	684b      	ldr	r3, [r1, #4]
   b927a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b927c:	b113      	cbz	r3, b9284 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b927e:	685a      	ldr	r2, [r3, #4]
   b9280:	3201      	adds	r2, #1
   b9282:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9284:	4770      	bx	lr

000b9286 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b9286:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9288:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b928a:	4668      	mov	r0, sp
   b928c:	460d      	mov	r5, r1
   b928e:	f7ff fff1 	bl	b9274 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9292:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9294:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9296:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b9298:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b929a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b929c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b929e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b92a0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b92a2:	f7fb fbc4 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b92a6:	b135      	cbz	r5, b92b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b92a8:	1d28      	adds	r0, r5, #4
   b92aa:	f7fb fbc0 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92ae:	2108      	movs	r1, #8
   b92b0:	4628      	mov	r0, r5
   b92b2:	f7fa fef4 	bl	b409e <_ZdlPvj>
        return p;
    }
   b92b6:	4620      	mov	r0, r4
   b92b8:	b003      	add	sp, #12
   b92ba:	bd30      	pop	{r4, r5, pc}

000b92bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b92bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b92be:	b510      	push	{r4, lr}
      if (_M_empty())
   b92c0:	b90a      	cbnz	r2, b92c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b92c2:	f001 fd0f 	bl	bace4 <_ZSt25__throw_bad_function_callv>
    }
   b92c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b92ca:	68c3      	ldr	r3, [r0, #12]
   b92cc:	4718      	bx	r3

000b92ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b92ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b92d0:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b92d2:	f100 0110 	add.w	r1, r0, #16
   b92d6:	f7ff fff1 	bl	b92bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b92da:	bd08      	pop	{r3, pc}

000b92dc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b92dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b92de:	b510      	push	{r4, lr}
      if (_M_empty())
   b92e0:	b90a      	cbnz	r2, b92e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b92e2:	f001 fcff 	bl	bace4 <_ZSt25__throw_bad_function_callv>
    }
   b92e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b92ea:	68c3      	ldr	r3, [r0, #12]
   b92ec:	4718      	bx	r3

000b92ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b92ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b92f0:	6800      	ldr	r0, [r0, #0]
   b92f2:	f100 0110 	add.w	r1, r0, #16
   b92f6:	f7ff fff1 	bl	b92dc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b92fa:	bd08      	pop	{r3, pc}

000b92fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b92fc:	b538      	push	{r3, r4, r5, lr}
   b92fe:	2300      	movs	r3, #0
   b9300:	4604      	mov	r4, r0
   b9302:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9304:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9306:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9308:	f7fa fec5 	bl	b4096 <_Znwj>
   b930c:	b128      	cbz	r0, b931a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b930e:	2301      	movs	r3, #1
   b9310:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9314:	4b02      	ldr	r3, [pc, #8]	; (b9320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9316:	6003      	str	r3, [r0, #0]
   b9318:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b931a:	6020      	str	r0, [r4, #0]
	}
   b931c:	4620      	mov	r0, r4
   b931e:	bd38      	pop	{r3, r4, r5, pc}
   b9320:	000bc910 	.word	0x000bc910

000b9324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9324:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9326:	2300      	movs	r3, #0
   b9328:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b932a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b932c:	4604      	mov	r4, r0
   b932e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9330:	b12b      	cbz	r3, b933e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9332:	2202      	movs	r2, #2
   b9334:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9336:	68eb      	ldr	r3, [r5, #12]
   b9338:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b933a:	68ab      	ldr	r3, [r5, #8]
   b933c:	60a3      	str	r3, [r4, #8]
    }
   b933e:	4620      	mov	r0, r4
   b9340:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b9344:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9346:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9348:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b934a:	4668      	mov	r0, sp
   b934c:	f7ff fefe 	bl	b914c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9350:	f04f 0302 	mov.w	r3, #2
   b9354:	e8d4 2f4f 	ldrexb	r2, [r4]
   b9358:	2a00      	cmp	r2, #0
   b935a:	d103      	bne.n	b9364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b935c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b9360:	2900      	cmp	r1, #0
   b9362:	d1f7      	bne.n	b9354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b9364:	d125      	bne.n	b93b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b9366:	f104 050c 	add.w	r5, r4, #12
   b936a:	4669      	mov	r1, sp
   b936c:	4628      	mov	r0, r5
   b936e:	f7ff feed 	bl	b914c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b9372:	f3bf 8f5b 	dmb	ish
   b9376:	2301      	movs	r3, #1
   b9378:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b937a:	2000      	movs	r0, #0
   b937c:	f104 0308 	add.w	r3, r4, #8
   b9380:	f3bf 8f5b 	dmb	ish
   b9384:	e853 6f00 	ldrex	r6, [r3]
   b9388:	e843 0200 	strex	r2, r0, [r3]
   b938c:	2a00      	cmp	r2, #0
   b938e:	d1f9      	bne.n	b9384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b9390:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9394:	b16e      	cbz	r6, b93b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b9396:	f7ff fbf1 	bl	b8b7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b939a:	b178      	cbz	r0, b93bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b939c:	4629      	mov	r1, r5
   b939e:	4630      	mov	r0, r6
   b93a0:	f7ff ff8c 	bl	b92bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b93a4:	4630      	mov	r0, r6
   b93a6:	f7fb f862 	bl	b446e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b93aa:	2110      	movs	r1, #16
   b93ac:	4630      	mov	r0, r6
   b93ae:	f7fa fe76 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b93b2:	4668      	mov	r0, sp
   b93b4:	f7ff fed7 	bl	b9166 <_ZN8particle5ErrorD1Ev>
    }
   b93b8:	b009      	add	sp, #36	; 0x24
   b93ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b93bc:	4631      	mov	r1, r6
   b93be:	a802      	add	r0, sp, #8
   b93c0:	f7ff ffb0 	bl	b9324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b93c4:	68e0      	ldr	r0, [r4, #12]
   b93c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b93ca:	b108      	cbz	r0, b93d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b93cc:	f002 fa50 	bl	bb870 <strdup>
        type_(type) {
   b93d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b93d2:	2010      	movs	r0, #16
   b93d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b93d8:	f7fa fe5d 	bl	b4096 <_Znwj>
   b93dc:	4605      	mov	r5, r0
   b93de:	b1e8      	cbz	r0, b941c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b93e0:	2700      	movs	r7, #0
   b93e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b93e4:	2018      	movs	r0, #24
   b93e6:	f7fa fe56 	bl	b4096 <_Znwj>
   b93ea:	4604      	mov	r4, r0
   b93ec:	b188      	cbz	r0, b9412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b93ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b93f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b93f2:	a802      	add	r0, sp, #8
   b93f4:	f7fb fdc4 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b93fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b93fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9400:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9402:	a906      	add	r1, sp, #24
   b9404:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9406:	60e3      	str	r3, [r4, #12]
   b9408:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b940c:	9205      	str	r2, [sp, #20]
   b940e:	f7ff fe9d 	bl	b914c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b9412:	4b08      	ldr	r3, [pc, #32]	; (b9434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b9414:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9416:	4b08      	ldr	r3, [pc, #32]	; (b9438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9418:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b941a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b941c:	a806      	add	r0, sp, #24
   b941e:	f7ff fea2 	bl	b9166 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9422:	a802      	add	r0, sp, #8
   b9424:	f7fb f823 	bl	b446e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9428:	2200      	movs	r2, #0
   b942a:	4629      	mov	r1, r5
   b942c:	4803      	ldr	r0, [pc, #12]	; (b943c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b942e:	f7ff fbad 	bl	b8b8c <application_thread_invoke>
   b9432:	e7b7      	b.n	b93a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9434:	000b92cf 	.word	0x000b92cf
   b9438:	000b9551 	.word	0x000b9551
   b943c:	000b8ecb 	.word	0x000b8ecb

000b9440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b9440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9444:	b08b      	sub	sp, #44	; 0x2c
   b9446:	4605      	mov	r5, r0
   b9448:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b944c:	460f      	mov	r7, r1
   b944e:	4690      	mov	r8, r2
   b9450:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9452:	f7ff fbfb 	bl	b8c4c <spark_cloud_flag_connected>
   b9456:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b9458:	4683      	mov	fp, r0
   b945a:	bb38      	cbnz	r0, b94ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b945c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b9460:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9462:	a905      	add	r1, sp, #20
   b9464:	4630      	mov	r0, r6
   b9466:	f8ad 3018 	strh.w	r3, [sp, #24]
   b946a:	f7ff fe6f 	bl	b914c <_ZN8particle5ErrorC1EOS0_>
   b946e:	2014      	movs	r0, #20
   b9470:	f7fa fe11 	bl	b4096 <_Znwj>
   b9474:	4604      	mov	r4, r0
   b9476:	b148      	cbz	r0, b948c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9478:	2302      	movs	r3, #2
   b947a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b947c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b947e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9482:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b9484:	4631      	mov	r1, r6
   b9486:	300c      	adds	r0, #12
   b9488:	f7ff fe60 	bl	b914c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b948c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b948e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9490:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b9494:	f7ff ff32 	bl	b92fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9498:	4630      	mov	r0, r6
   b949a:	f7ff fe64 	bl	b9166 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b949e:	a805      	add	r0, sp, #20
   b94a0:	f7ff fe61 	bl	b9166 <_ZN8particle5ErrorD1Ev>
}
   b94a4:	4628      	mov	r0, r5
   b94a6:	b00b      	add	sp, #44	; 0x2c
   b94a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b94ac:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b94ae:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b94b0:	2014      	movs	r0, #20
   b94b2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b94b6:	9307      	str	r3, [sp, #28]
   b94b8:	f7fa fded 	bl	b4096 <_Znwj>
   b94bc:	4601      	mov	r1, r0
   b94be:	b118      	cbz	r0, b94c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b94c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b94c4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b94c6:	7044      	strb	r4, [r0, #1]
   b94c8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b94ca:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b94cc:	f7ff ff16 	bl	b92fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b94d0:	4b1e      	ldr	r3, [pc, #120]	; (b954c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b94d2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b94d4:	2008      	movs	r0, #8
   b94d6:	f7fa fdde 	bl	b4096 <_Znwj>
   b94da:	4604      	mov	r4, r0
   b94dc:	b110      	cbz	r0, b94e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b94de:	a903      	add	r1, sp, #12
   b94e0:	f7ff fec8 	bl	b9274 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b94e4:	9600      	str	r6, [sp, #0]
   b94e6:	fa5f f38a 	uxtb.w	r3, sl
   b94ea:	464a      	mov	r2, r9
   b94ec:	4641      	mov	r1, r8
   b94ee:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b94f0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b94f2:	f7ff fbbb 	bl	b8c6c <spark_send_event>
   b94f6:	b9b8      	cbnz	r0, b9528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b94f8:	9b03      	ldr	r3, [sp, #12]
   b94fa:	785b      	ldrb	r3, [r3, #1]
   b94fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b9500:	b993      	cbnz	r3, b9528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b9502:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9506:	a905      	add	r1, sp, #20
   b9508:	a803      	add	r0, sp, #12
   b950a:	9205      	str	r2, [sp, #20]
   b950c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9510:	f7ff ff18 	bl	b9344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9514:	a805      	add	r0, sp, #20
   b9516:	f7ff fe26 	bl	b9166 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b951a:	a805      	add	r0, sp, #20
   b951c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b951e:	f7ff feb2 	bl	b9286 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b9522:	a806      	add	r0, sp, #24
   b9524:	f7fb fa83 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9528:	a903      	add	r1, sp, #12
   b952a:	a805      	add	r0, sp, #20
   b952c:	f7ff fea2 	bl	b9274 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9530:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9532:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9534:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9536:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9538:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b953a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b953c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b953e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b9540:	f7fb fa75 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9544:	a804      	add	r0, sp, #16
   b9546:	f7fb fa72 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b954a:	e7ab      	b.n	b94a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b954c:	000b95cd 	.word	0x000b95cd

000b9550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b9550:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9554:	4605      	mov	r5, r0
	switch (__op)
   b9556:	d103      	bne.n	b9560 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9558:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b955a:	6003      	str	r3, [r0, #0]
      }
   b955c:	2000      	movs	r0, #0
   b955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b9560:	2a02      	cmp	r2, #2
   b9562:	d010      	beq.n	b9586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b9564:	2a03      	cmp	r2, #3
   b9566:	d1f9      	bne.n	b955c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9568:	6804      	ldr	r4, [r0, #0]
   b956a:	2c00      	cmp	r4, #0
   b956c:	d0f6      	beq.n	b955c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b956e:	f104 0010 	add.w	r0, r4, #16
   b9572:	f7ff fdf8 	bl	b9166 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9576:	4620      	mov	r0, r4
   b9578:	f7fa ff79 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b957c:	2118      	movs	r1, #24
   b957e:	4620      	mov	r0, r4
   b9580:	f7fa fd8d 	bl	b409e <_ZdlPvj>
   b9584:	e7ea      	b.n	b955c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9586:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b9588:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b958a:	f7fa fd84 	bl	b4096 <_Znwj>
   b958e:	4604      	mov	r4, r0
   b9590:	b150      	cbz	r0, b95a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b9592:	4631      	mov	r1, r6
   b9594:	f7ff fec6 	bl	b9324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9598:	6930      	ldr	r0, [r6, #16]
   b959a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b959e:	b108      	cbz	r0, b95a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b95a0:	f002 f966 	bl	bb870 <strdup>
        type_(type) {
   b95a4:	6120      	str	r0, [r4, #16]
   b95a6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b95a8:	602c      	str	r4, [r5, #0]
	}
   b95aa:	e7d7      	b.n	b955c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b95ac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b95ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b95ae:	2300      	movs	r3, #0
   b95b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b95b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b95b4:	4604      	mov	r4, r0
   b95b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b95b8:	b12b      	cbz	r3, b95c6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b95ba:	2202      	movs	r2, #2
   b95bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b95be:	68eb      	ldr	r3, [r5, #12]
   b95c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b95c2:	68ab      	ldr	r3, [r5, #8]
   b95c4:	60a3      	str	r3, [r4, #8]
    }
   b95c6:	4620      	mov	r0, r4
   b95c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b95cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b95cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b95ce:	b089      	sub	sp, #36	; 0x24
   b95d0:	4604      	mov	r4, r0
   b95d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b95d4:	a801      	add	r0, sp, #4
   b95d6:	4611      	mov	r1, r2
   b95d8:	f7ff fe55 	bl	b9286 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b95dc:	b1a4      	cbz	r4, b9608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b95de:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b95e0:	b11d      	cbz	r5, b95ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b95e2:	4628      	mov	r0, r5
   b95e4:	f002 f944 	bl	bb870 <strdup>
   b95e8:	4605      	mov	r5, r0
   b95ea:	a801      	add	r0, sp, #4
   b95ec:	a903      	add	r1, sp, #12
        type_(type) {
   b95ee:	9503      	str	r5, [sp, #12]
   b95f0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b95f4:	f7ff fea6 	bl	b9344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b95f8:	a803      	add	r0, sp, #12
   b95fa:	f7ff fdb4 	bl	b9166 <_ZN8particle5ErrorD1Ev>
   b95fe:	a802      	add	r0, sp, #8
   b9600:	f7fb fa15 	bl	b4a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9604:	b009      	add	sp, #36	; 0x24
   b9606:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b9608:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b960a:	2301      	movs	r3, #1
   b960c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9610:	2a00      	cmp	r2, #0
   b9612:	d103      	bne.n	b961c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9614:	e8c5 3f41 	strexb	r1, r3, [r5]
   b9618:	2900      	cmp	r1, #0
   b961a:	d1f7      	bne.n	b960c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b961c:	d1ef      	bne.n	b95fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b961e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b9620:	f3bf 8f5b 	dmb	ish
   b9624:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9626:	1d2b      	adds	r3, r5, #4
   b9628:	f3bf 8f5b 	dmb	ish
   b962c:	e853 6f00 	ldrex	r6, [r3]
   b9630:	e843 4200 	strex	r2, r4, [r3]
   b9634:	2a00      	cmp	r2, #0
   b9636:	d1f9      	bne.n	b962c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b9638:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b963c:	2e00      	cmp	r6, #0
   b963e:	d0de      	beq.n	b95fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b9640:	4620      	mov	r0, r4
   b9642:	f7ff fa9b 	bl	b8b7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9646:	4607      	mov	r7, r0
   b9648:	b160      	cbz	r0, b9664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b964a:	f105 010c 	add.w	r1, r5, #12
   b964e:	4630      	mov	r0, r6
   b9650:	f7ff fe44 	bl	b92dc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b9654:	4630      	mov	r0, r6
   b9656:	f7fa ff0a 	bl	b446e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b965a:	2110      	movs	r1, #16
   b965c:	4630      	mov	r0, r6
   b965e:	f7fa fd1e 	bl	b409e <_ZdlPvj>
   b9662:	e7cc      	b.n	b95fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9664:	4631      	mov	r1, r6
   b9666:	a803      	add	r0, sp, #12
   b9668:	f7ff ffa0 	bl	b95ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b966c:	7b2b      	ldrb	r3, [r5, #12]
   b966e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9672:	2010      	movs	r0, #16
   b9674:	f7fa fd0f 	bl	b4096 <_Znwj>
   b9678:	4605      	mov	r5, r0
   b967a:	b1d0      	cbz	r0, b96b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b967c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b967e:	2014      	movs	r0, #20
   b9680:	f7fa fd09 	bl	b4096 <_Znwj>
   b9684:	4604      	mov	r4, r0
   b9686:	b178      	cbz	r0, b96a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b9688:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b968a:	4601      	mov	r1, r0
   b968c:	a803      	add	r0, sp, #12
   b968e:	f7fb fc77 	bl	b4f80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9692:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9694:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9696:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9698:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b969a:	9205      	str	r2, [sp, #20]
   b969c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b969e:	60e3      	str	r3, [r4, #12]
   b96a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b96a4:	9206      	str	r2, [sp, #24]
   b96a6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b96a8:	4b06      	ldr	r3, [pc, #24]	; (b96c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b96aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b96ac:	4b06      	ldr	r3, [pc, #24]	; (b96c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b96ae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b96b0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b96b2:	a803      	add	r0, sp, #12
   b96b4:	f7fa fedb 	bl	b446e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b96b8:	2200      	movs	r2, #0
   b96ba:	4629      	mov	r1, r5
   b96bc:	4803      	ldr	r0, [pc, #12]	; (b96cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b96be:	f7ff fa65 	bl	b8b8c <application_thread_invoke>
   b96c2:	e7c7      	b.n	b9654 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b96c4:	000b92ef 	.word	0x000b92ef
   b96c8:	000b96d1 	.word	0x000b96d1
   b96cc:	000b8ecb 	.word	0x000b8ecb

000b96d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b96d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b96d2:	b570      	push	{r4, r5, r6, lr}
   b96d4:	4604      	mov	r4, r0
	switch (__op)
   b96d6:	d103      	bne.n	b96e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b96d8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b96da:	6003      	str	r3, [r0, #0]
      }
   b96dc:	2000      	movs	r0, #0
   b96de:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b96e0:	2a02      	cmp	r2, #2
   b96e2:	d00c      	beq.n	b96fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b96e4:	2a03      	cmp	r2, #3
   b96e6:	d1f9      	bne.n	b96dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b96e8:	6804      	ldr	r4, [r0, #0]
   b96ea:	2c00      	cmp	r4, #0
   b96ec:	d0f6      	beq.n	b96dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b96ee:	4620      	mov	r0, r4
   b96f0:	f7fa febd 	bl	b446e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b96f4:	2114      	movs	r1, #20
   b96f6:	4620      	mov	r0, r4
   b96f8:	f7fa fcd1 	bl	b409e <_ZdlPvj>
   b96fc:	e7ee      	b.n	b96dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b96fe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9700:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9702:	f7fa fcc8 	bl	b4096 <_Znwj>
   b9706:	4605      	mov	r5, r0
   b9708:	b120      	cbz	r0, b9714 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b970a:	4631      	mov	r1, r6
   b970c:	f7ff ff4e 	bl	b95ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9710:	7c33      	ldrb	r3, [r6, #16]
   b9712:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9714:	6025      	str	r5, [r4, #0]
	}
   b9716:	e7e1      	b.n	b96dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b9718 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9718:	2200      	movs	r2, #0
   b971a:	6840      	ldr	r0, [r0, #4]
   b971c:	4611      	mov	r1, r2
   b971e:	f7ff bb1d 	b.w	b8d5c <network_listening>

000b9722 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9722:	2200      	movs	r2, #0
   b9724:	6840      	ldr	r0, [r0, #4]
   b9726:	4611      	mov	r1, r2
   b9728:	f7ff bb28 	b.w	b8d7c <network_get_listen_timeout>

000b972c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b972c:	6840      	ldr	r0, [r0, #4]
   b972e:	2200      	movs	r2, #0
   b9730:	f7ff bb1c 	b.w	b8d6c <network_set_listen_timeout>

000b9734 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9734:	6840      	ldr	r0, [r0, #4]
   b9736:	2200      	movs	r2, #0
   b9738:	f081 0101 	eor.w	r1, r1, #1
   b973c:	f7ff bb06 	b.w	b8d4c <network_listen>

000b9740 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9740:	2300      	movs	r3, #0
   b9742:	6840      	ldr	r0, [r0, #4]
   b9744:	461a      	mov	r2, r3
   b9746:	4619      	mov	r1, r3
   b9748:	f7ff baf8 	b.w	b8d3c <network_off>

000b974c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b974c:	2300      	movs	r3, #0
   b974e:	6840      	ldr	r0, [r0, #4]
   b9750:	461a      	mov	r2, r3
   b9752:	4619      	mov	r1, r3
   b9754:	f7ff baea 	b.w	b8d2c <network_on>

000b9758 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9758:	2200      	movs	r2, #0
   b975a:	6840      	ldr	r0, [r0, #4]
   b975c:	4611      	mov	r1, r2
   b975e:	f7ff badd 	b.w	b8d1c <network_ready>

000b9762 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9762:	2200      	movs	r2, #0
   b9764:	6840      	ldr	r0, [r0, #4]
   b9766:	4611      	mov	r1, r2
   b9768:	f7ff bac8 	b.w	b8cfc <network_connecting>

000b976c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b976c:	6840      	ldr	r0, [r0, #4]
   b976e:	2200      	movs	r2, #0
   b9770:	2102      	movs	r1, #2
   b9772:	f7ff bacb 	b.w	b8d0c <network_disconnect>

000b9776 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9776:	2300      	movs	r3, #0
   b9778:	6840      	ldr	r0, [r0, #4]
   b977a:	461a      	mov	r2, r3
   b977c:	f7ff bab6 	b.w	b8cec <network_connect>

000b9780 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b9780:	4b02      	ldr	r3, [pc, #8]	; (b978c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9782:	2203      	movs	r2, #3
   b9784:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9786:	4a02      	ldr	r2, [pc, #8]	; (b9790 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9788:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b978a:	4770      	bx	lr
   b978c:	2003e664 	.word	0x2003e664
   b9790:	000bc92c 	.word	0x000bc92c

000b9794 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b9794:	6800      	ldr	r0, [r0, #0]
   b9796:	f000 b951 	b.w	b9a3c <_ZN7TwoWire4lockEv>

000b979a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b979a:	b510      	push	{r4, lr}
   b979c:	4604      	mov	r4, r0
      lock_(_lock) {
   b979e:	6001      	str	r1, [r0, #0]
   b97a0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b97a2:	b10a      	cbz	r2, b97a8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b97a4:	f7ff fff6 	bl	b9794 <_ZN9FuelGauge4lockEv>
}
   b97a8:	4620      	mov	r0, r4
   b97aa:	bd10      	pop	{r4, pc}

000b97ac <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b97ac:	b513      	push	{r0, r1, r4, lr}
   b97ae:	4604      	mov	r4, r0
   b97b0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b97b2:	f001 fa29 	bl	bac08 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b97b6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b97b8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b97ba:	4620      	mov	r0, r4
   b97bc:	f7ff ffed 	bl	b979a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b97c0:	4620      	mov	r0, r4
   b97c2:	b002      	add	sp, #8
   b97c4:	bd10      	pop	{r4, pc}

000b97c6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b97c6:	6800      	ldr	r0, [r0, #0]
   b97c8:	f000 b941 	b.w	b9a4e <_ZN7TwoWire6unlockEv>

000b97cc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b97cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b97d0:	4604      	mov	r4, r0
   b97d2:	460d      	mov	r5, r1
   b97d4:	4617      	mov	r7, r2
   b97d6:	461e      	mov	r6, r3
   b97d8:	f7ff ffdc 	bl	b9794 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b97dc:	2236      	movs	r2, #54	; 0x36
   b97de:	2300      	movs	r3, #0
   b97e0:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b97e4:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b97e6:	230a      	movs	r3, #10
   b97e8:	f04f 0801 	mov.w	r8, #1
   b97ec:	4669      	mov	r1, sp
   b97ee:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b97f2:	f000 f904 	bl	b99fe <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b97f6:	6820      	ldr	r0, [r4, #0]
   b97f8:	6803      	ldr	r3, [r0, #0]
   b97fa:	4629      	mov	r1, r5
   b97fc:	689b      	ldr	r3, [r3, #8]
   b97fe:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9800:	6820      	ldr	r0, [r4, #0]
   b9802:	4641      	mov	r1, r8
   b9804:	f000 f913 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
   b9808:	4605      	mov	r5, r0
   b980a:	b140      	cbz	r0, b981e <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b980c:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   b9810:	4620      	mov	r0, r4
   b9812:	f7ff ffd8 	bl	b97c6 <_ZN9FuelGauge6unlockEv>
}
   b9816:	4628      	mov	r0, r5
   b9818:	b004      	add	sp, #16
   b981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b981e:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b9820:	6820      	ldr	r0, [r4, #0]
   b9822:	9301      	str	r3, [sp, #4]
   b9824:	4669      	mov	r1, sp
   b9826:	f000 f8b7 	bl	b9998 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b982a:	2802      	cmp	r0, #2
   b982c:	d1ee      	bne.n	b980c <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b982e:	6820      	ldr	r0, [r4, #0]
   b9830:	6803      	ldr	r3, [r0, #0]
   b9832:	695b      	ldr	r3, [r3, #20]
   b9834:	4798      	blx	r3
   b9836:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b9838:	6820      	ldr	r0, [r4, #0]
   b983a:	6803      	ldr	r3, [r0, #0]
   b983c:	695b      	ldr	r3, [r3, #20]
   b983e:	4798      	blx	r3
   b9840:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b9842:	e7e5      	b.n	b9810 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b9844 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   b9844:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   b9846:	460a      	mov	r2, r1
   b9848:	210c      	movs	r1, #12
   b984a:	f7ff bfbf 	b.w	b97cc <_ZN9FuelGauge12readRegisterEhRhS0_>

000b984e <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b984e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9852:	4604      	mov	r4, r0
   b9854:	461d      	mov	r5, r3
   b9856:	460f      	mov	r7, r1
   b9858:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b985a:	f7ff ff9b 	bl	b9794 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b985e:	2236      	movs	r2, #54	; 0x36
   b9860:	2300      	movs	r3, #0
   b9862:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9866:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   b9868:	f04f 0801 	mov.w	r8, #1
   b986c:	230a      	movs	r3, #10
   b986e:	4669      	mov	r1, sp
   b9870:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9874:	f000 f8c3 	bl	b99fe <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b9878:	6820      	ldr	r0, [r4, #0]
   b987a:	6803      	ldr	r3, [r0, #0]
   b987c:	4639      	mov	r1, r7
   b987e:	689b      	ldr	r3, [r3, #8]
   b9880:	4798      	blx	r3
    i2c_.write(MSB);
   b9882:	6820      	ldr	r0, [r4, #0]
   b9884:	6803      	ldr	r3, [r0, #0]
   b9886:	4631      	mov	r1, r6
   b9888:	689b      	ldr	r3, [r3, #8]
   b988a:	4798      	blx	r3
    i2c_.write(LSB);
   b988c:	6820      	ldr	r0, [r4, #0]
   b988e:	6803      	ldr	r3, [r0, #0]
   b9890:	4629      	mov	r1, r5
   b9892:	689b      	ldr	r3, [r3, #8]
   b9894:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9896:	4641      	mov	r1, r8
   b9898:	6820      	ldr	r0, [r4, #0]
   b989a:	f000 f8c8 	bl	b9a2e <_ZN7TwoWire15endTransmissionEh>
   b989e:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b98a0:	4620      	mov	r0, r4
   b98a2:	bf0c      	ite	eq
   b98a4:	2500      	moveq	r5, #0
   b98a6:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b98aa:	f7ff ff8c 	bl	b97c6 <_ZN9FuelGauge6unlockEv>
}
   b98ae:	4628      	mov	r0, r5
   b98b0:	b004      	add	sp, #16
   b98b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b98b6 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b98b6:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b98b8:	2240      	movs	r2, #64	; 0x40
   b98ba:	2300      	movs	r3, #0
   b98bc:	2106      	movs	r1, #6
   b98be:	f7ff ffc6 	bl	b984e <_ZN9FuelGauge13writeRegisterEhhh>
}
   b98c2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b98c6:	bd08      	pop	{r3, pc}

000b98c8 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   b98c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98ca:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b98cc:	f7ff ff62 	bl	b9794 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   b98d0:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   b98d2:	f10d 0207 	add.w	r2, sp, #7
   b98d6:	f10d 0106 	add.w	r1, sp, #6
   b98da:	4628      	mov	r0, r5
    byte MSB = 0;
   b98dc:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b98e0:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   b98e4:	f7ff ffae 	bl	b9844 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   b98e8:	1e04      	subs	r4, r0, #0
   b98ea:	db0b      	blt.n	b9904 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   b98ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b98f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b98f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   b98f8:	210c      	movs	r1, #12
   b98fa:	4628      	mov	r0, r5
   b98fc:	f7ff ffa7 	bl	b984e <_ZN9FuelGauge13writeRegisterEhhh>
   b9900:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   b9904:	4628      	mov	r0, r5
   b9906:	f7ff ff5e 	bl	b97c6 <_ZN9FuelGauge6unlockEv>
}
   b990a:	4620      	mov	r0, r4
   b990c:	b003      	add	sp, #12
   b990e:	bd30      	pop	{r4, r5, pc}

000b9910 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9910:	4770      	bx	lr

000b9912 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9914:	4606      	mov	r6, r0
   b9916:	4615      	mov	r5, r2
   b9918:	460c      	mov	r4, r1
   b991a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b991c:	42bc      	cmp	r4, r7
   b991e:	d006      	beq.n	b992e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9920:	6833      	ldr	r3, [r6, #0]
   b9922:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9926:	689b      	ldr	r3, [r3, #8]
   b9928:	4630      	mov	r0, r6
   b992a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b992c:	e7f6      	b.n	b991c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b992e:	4628      	mov	r0, r5
   b9930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9932 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9932:	7c00      	ldrb	r0, [r0, #16]
   b9934:	2200      	movs	r2, #0
   b9936:	f7fe bf87 	b.w	b8848 <hal_i2c_write>

000b993a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b993a:	7c00      	ldrb	r0, [r0, #16]
   b993c:	2100      	movs	r1, #0
   b993e:	f7fe bf8b 	b.w	b8858 <hal_i2c_available>

000b9942 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9942:	7c00      	ldrb	r0, [r0, #16]
   b9944:	2100      	movs	r1, #0
   b9946:	f7fe bf8f 	b.w	b8868 <hal_i2c_read>

000b994a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b994a:	7c00      	ldrb	r0, [r0, #16]
   b994c:	2100      	movs	r1, #0
   b994e:	f7fe bf93 	b.w	b8878 <hal_i2c_peek>

000b9952 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9952:	7c00      	ldrb	r0, [r0, #16]
   b9954:	2100      	movs	r1, #0
   b9956:	f7fe bf97 	b.w	b8888 <hal_i2c_flush>

000b995a <_ZN7TwoWireD0Ev>:
   b995a:	b510      	push	{r4, lr}
   b995c:	2114      	movs	r1, #20
   b995e:	4604      	mov	r4, r0
   b9960:	f7fa fb9d 	bl	b409e <_ZdlPvj>
   b9964:	4620      	mov	r0, r4
   b9966:	bd10      	pop	{r4, pc}

000b9968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9968:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b996a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b996e:	4604      	mov	r4, r0
   b9970:	4608      	mov	r0, r1
   b9972:	2100      	movs	r1, #0
   b9974:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9978:	4b03      	ldr	r3, [pc, #12]	; (b9988 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b997a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b997c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b997e:	4611      	mov	r1, r2
   b9980:	f7fe ff92 	bl	b88a8 <hal_i2c_init>
}
   b9984:	4620      	mov	r0, r4
   b9986:	bd10      	pop	{r4, pc}
   b9988:	000bc968 	.word	0x000bc968

000b998c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b998c:	2300      	movs	r3, #0
   b998e:	7c00      	ldrb	r0, [r0, #16]
   b9990:	461a      	mov	r2, r3
   b9992:	4619      	mov	r1, r3
   b9994:	f7fe bf40 	b.w	b8818 <hal_i2c_begin>

000b9998 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b999a:	2200      	movs	r2, #0
   b999c:	2314      	movs	r3, #20
   b999e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b99a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b99a6:	780b      	ldrb	r3, [r1, #0]
   b99a8:	f88d 3008 	strb.w	r3, [sp, #8]
   b99ac:	684b      	ldr	r3, [r1, #4]
   b99ae:	9303      	str	r3, [sp, #12]
   b99b0:	68cb      	ldr	r3, [r1, #12]
   b99b2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b99b4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b99b6:	7a0b      	ldrb	r3, [r1, #8]
   b99b8:	9305      	str	r3, [sp, #20]
   b99ba:	a901      	add	r1, sp, #4
   b99bc:	f7fe ff8c 	bl	b88d8 <hal_i2c_request_ex>
}
   b99c0:	b007      	add	sp, #28
   b99c2:	f85d fb04 	ldr.w	pc, [sp], #4

000b99c6 <_ZN7TwoWire11requestFromEhjh>:
{
   b99c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b99c8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b99ca:	f88d 1000 	strb.w	r1, [sp]
   b99ce:	f04f 0164 	mov.w	r1, #100	; 0x64
   b99d2:	9103      	str	r1, [sp, #12]
   b99d4:	bf18      	it	ne
   b99d6:	2301      	movne	r3, #1
   b99d8:	4669      	mov	r1, sp
    size_ = size;
   b99da:	9201      	str	r2, [sp, #4]
   b99dc:	f88d 3008 	strb.w	r3, [sp, #8]
   b99e0:	f7ff ffda 	bl	b9998 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b99e4:	b005      	add	sp, #20
   b99e6:	f85d fb04 	ldr.w	pc, [sp], #4

000b99ea <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b99ea:	2301      	movs	r3, #1
   b99ec:	f7ff bfeb 	b.w	b99c6 <_ZN7TwoWire11requestFromEhjh>

000b99f0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b99f0:	7c00      	ldrb	r0, [r0, #16]
   b99f2:	2200      	movs	r2, #0
   b99f4:	f7fe bf18 	b.w	b8828 <hal_i2c_begin_transmission>

000b99f8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b99f8:	b2c9      	uxtb	r1, r1
   b99fa:	f7ff bff9 	b.w	b99f0 <_ZN7TwoWire17beginTransmissionEh>

000b99fe <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b99fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9a00:	2300      	movs	r3, #0
   b9a02:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b9a06:	684a      	ldr	r2, [r1, #4]
   b9a08:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9a0a:	2314      	movs	r3, #20
    };
   b9a0c:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9a0e:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9a12:	780b      	ldrb	r3, [r1, #0]
    };
   b9a14:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9a16:	7a0a      	ldrb	r2, [r1, #8]
   b9a18:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9a1a:	7c00      	ldrb	r0, [r0, #16]
    };
   b9a1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9a20:	aa01      	add	r2, sp, #4
   b9a22:	4619      	mov	r1, r3
   b9a24:	f7fe ff00 	bl	b8828 <hal_i2c_begin_transmission>
}
   b9a28:	b007      	add	sp, #28
   b9a2a:	f85d fb04 	ldr.w	pc, [sp], #4

000b9a2e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9a2e:	7c00      	ldrb	r0, [r0, #16]
   b9a30:	2200      	movs	r2, #0
   b9a32:	f7fe bf01 	b.w	b8838 <hal_i2c_end_transmission>

000b9a36 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9a36:	2101      	movs	r1, #1
   b9a38:	f7ff bff9 	b.w	b9a2e <_ZN7TwoWire15endTransmissionEh>

000b9a3c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9a3c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b9a3e:	2100      	movs	r1, #0
   b9a40:	7c00      	ldrb	r0, [r0, #16]
   b9a42:	f7fe ff39 	bl	b88b8 <hal_i2c_lock>
}
   b9a46:	fab0 f080 	clz	r0, r0
   b9a4a:	0940      	lsrs	r0, r0, #5
   b9a4c:	bd08      	pop	{r3, pc}

000b9a4e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b9a4e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9a50:	2100      	movs	r1, #0
   b9a52:	7c00      	ldrb	r0, [r0, #16]
   b9a54:	f7fe ff38 	bl	b88c8 <hal_i2c_unlock>
}
   b9a58:	fab0 f080 	clz	r0, r0
   b9a5c:	0940      	lsrs	r0, r0, #5
   b9a5e:	bd08      	pop	{r3, pc}

000b9a60 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9a60:	4700      	bx	r0
	...

000b9a64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9a64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9a68:	2400      	movs	r4, #0
{
   b9a6a:	461d      	mov	r5, r3
   b9a6c:	460f      	mov	r7, r1
   b9a6e:	4690      	mov	r8, r2
   b9a70:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9a72:	f7fe fec1 	bl	b87f8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9a76:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9a78:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9a7c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9a80:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9a84:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9a88:	bfa2      	ittt	ge
   b9a8a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9a8e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9a92:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9a94:	4907      	ldr	r1, [pc, #28]	; (b9ab4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9a96:	9400      	str	r4, [sp, #0]
   b9a98:	4643      	mov	r3, r8
   b9a9a:	463a      	mov	r2, r7
   b9a9c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9a9e:	bfa8      	it	ge
   b9aa0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9aa4:	f7fe fea0 	bl	b87e8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9aa8:	fab0 f080 	clz	r0, r0
   b9aac:	0940      	lsrs	r0, r0, #5
   b9aae:	b004      	add	sp, #16
   b9ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ab4:	000b9a61 	.word	0x000b9a61

000b9ab8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9ab8:	4770      	bx	lr

000b9aba <_ZN9IPAddressD0Ev>:
   b9aba:	b510      	push	{r4, lr}
   b9abc:	2118      	movs	r1, #24
   b9abe:	4604      	mov	r4, r0
   b9ac0:	f7fa faed 	bl	b409e <_ZdlPvj>
   b9ac4:	4620      	mov	r0, r4
   b9ac6:	bd10      	pop	{r4, pc}

000b9ac8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9aca:	7d03      	ldrb	r3, [r0, #20]
   b9acc:	2b06      	cmp	r3, #6
{
   b9ace:	b08d      	sub	sp, #52	; 0x34
   b9ad0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9ad2:	f100 0704 	add.w	r7, r0, #4
   b9ad6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9ada:	d012      	beq.n	b9b02 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9adc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9ae4:	220a      	movs	r2, #10
   b9ae6:	4630      	mov	r0, r6
   b9ae8:	f000 f943 	bl	b9d72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9aec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9aee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9af0:	d019      	beq.n	b9b26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9af2:	2c00      	cmp	r4, #0
   b9af4:	d0f4      	beq.n	b9ae0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9af6:	212e      	movs	r1, #46	; 0x2e
   b9af8:	4630      	mov	r0, r6
   b9afa:	f000 f937 	bl	b9d6c <_ZN5Print5printEc>
   b9afe:	4404      	add	r4, r0
   b9b00:	e7ee      	b.n	b9ae0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9b02:	232f      	movs	r3, #47	; 0x2f
   b9b04:	466a      	mov	r2, sp
   b9b06:	4639      	mov	r1, r7
   b9b08:	200a      	movs	r0, #10
		buf[0] = 0;
   b9b0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9b0e:	f7fe feeb 	bl	b88e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9b12:	4668      	mov	r0, sp
   b9b14:	f001 fec9 	bl	bb8aa <strlen>
   b9b18:	6833      	ldr	r3, [r6, #0]
   b9b1a:	4602      	mov	r2, r0
   b9b1c:	68db      	ldr	r3, [r3, #12]
   b9b1e:	4669      	mov	r1, sp
   b9b20:	4630      	mov	r0, r6
   b9b22:	4798      	blx	r3
   b9b24:	4604      	mov	r4, r0
    }
    return n;
}
   b9b26:	4620      	mov	r0, r4
   b9b28:	b00d      	add	sp, #52	; 0x34
   b9b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9b2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9b2c:	b510      	push	{r4, lr}
   b9b2e:	4b05      	ldr	r3, [pc, #20]	; (b9b44 <_ZN9IPAddressC1Ev+0x18>)
   b9b30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9b32:	2211      	movs	r2, #17
   b9b34:	f840 3b04 	str.w	r3, [r0], #4
   b9b38:	2100      	movs	r1, #0
   b9b3a:	f001 fe51 	bl	bb7e0 <memset>
}
   b9b3e:	4620      	mov	r0, r4
   b9b40:	bd10      	pop	{r4, pc}
   b9b42:	bf00      	nop
   b9b44:	000bc990 	.word	0x000bc990

000b9b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9b48:	4603      	mov	r3, r0
   b9b4a:	4a07      	ldr	r2, [pc, #28]	; (b9b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9b4c:	b510      	push	{r4, lr}
   b9b4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9b52:	f101 0210 	add.w	r2, r1, #16
   b9b56:	f851 4b04 	ldr.w	r4, [r1], #4
   b9b5a:	f843 4b04 	str.w	r4, [r3], #4
   b9b5e:	4291      	cmp	r1, r2
   b9b60:	d1f9      	bne.n	b9b56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9b62:	780a      	ldrb	r2, [r1, #0]
   b9b64:	701a      	strb	r2, [r3, #0]
}
   b9b66:	bd10      	pop	{r4, pc}
   b9b68:	000bc990 	.word	0x000bc990

000b9b6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9b6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9b72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9b76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9b7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9b7e:	2304      	movs	r3, #4
   b9b80:	6041      	str	r1, [r0, #4]
   b9b82:	7503      	strb	r3, [r0, #20]
}
   b9b84:	bd10      	pop	{r4, pc}
	...

000b9b88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9b88:	b507      	push	{r0, r1, r2, lr}
   b9b8a:	4b06      	ldr	r3, [pc, #24]	; (b9ba4 <_ZN9IPAddressC1EPKh+0x1c>)
   b9b8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9b8e:	78cb      	ldrb	r3, [r1, #3]
   b9b90:	9300      	str	r3, [sp, #0]
   b9b92:	788b      	ldrb	r3, [r1, #2]
   b9b94:	784a      	ldrb	r2, [r1, #1]
   b9b96:	7809      	ldrb	r1, [r1, #0]
   b9b98:	f7ff ffe8 	bl	b9b6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9b9c:	b003      	add	sp, #12
   b9b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9ba2:	bf00      	nop
   b9ba4:	000bc990 	.word	0x000bc990

000b9ba8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9ba8:	4b01      	ldr	r3, [pc, #4]	; (b9bb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9baa:	4a02      	ldr	r2, [pc, #8]	; (b9bb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9bac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9bae:	4770      	bx	lr
   b9bb0:	2003e66c 	.word	0x2003e66c
   b9bb4:	000bc99c 	.word	0x000bc99c

000b9bb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9bb8:	2300      	movs	r3, #0
   b9bba:	6840      	ldr	r0, [r0, #4]
   b9bbc:	461a      	mov	r2, r3
   b9bbe:	f7ff b895 	b.w	b8cec <network_connect>

000b9bc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9bc2:	6840      	ldr	r0, [r0, #4]
   b9bc4:	2200      	movs	r2, #0
   b9bc6:	2102      	movs	r1, #2
   b9bc8:	f7ff b8a0 	b.w	b8d0c <network_disconnect>

000b9bcc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9bcc:	2200      	movs	r2, #0
   b9bce:	6840      	ldr	r0, [r0, #4]
   b9bd0:	4611      	mov	r1, r2
   b9bd2:	f7ff b893 	b.w	b8cfc <network_connecting>

000b9bd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9bd6:	2200      	movs	r2, #0
   b9bd8:	6840      	ldr	r0, [r0, #4]
   b9bda:	4611      	mov	r1, r2
   b9bdc:	f7ff b89e 	b.w	b8d1c <network_ready>

000b9be0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9be0:	2300      	movs	r3, #0
   b9be2:	6840      	ldr	r0, [r0, #4]
   b9be4:	461a      	mov	r2, r3
   b9be6:	4619      	mov	r1, r3
   b9be8:	f7ff b8a0 	b.w	b8d2c <network_on>

000b9bec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9bec:	2300      	movs	r3, #0
   b9bee:	6840      	ldr	r0, [r0, #4]
   b9bf0:	461a      	mov	r2, r3
   b9bf2:	4619      	mov	r1, r3
   b9bf4:	f7ff b8a2 	b.w	b8d3c <network_off>

000b9bf8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9bf8:	6840      	ldr	r0, [r0, #4]
   b9bfa:	2100      	movs	r1, #0
   b9bfc:	f7ff b8c6 	b.w	b8d8c <network_is_on>

000b9c00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9c00:	6840      	ldr	r0, [r0, #4]
   b9c02:	2100      	movs	r1, #0
   b9c04:	f7ff b8ca 	b.w	b8d9c <network_is_off>

000b9c08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9c08:	6840      	ldr	r0, [r0, #4]
   b9c0a:	2200      	movs	r2, #0
   b9c0c:	f081 0101 	eor.w	r1, r1, #1
   b9c10:	f7ff b89c 	b.w	b8d4c <network_listen>

000b9c14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9c14:	6840      	ldr	r0, [r0, #4]
   b9c16:	2200      	movs	r2, #0
   b9c18:	f7ff b8a8 	b.w	b8d6c <network_set_listen_timeout>

000b9c1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9c1c:	2200      	movs	r2, #0
   b9c1e:	6840      	ldr	r0, [r0, #4]
   b9c20:	4611      	mov	r1, r2
   b9c22:	f7ff b8ab 	b.w	b8d7c <network_get_listen_timeout>

000b9c26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9c26:	2200      	movs	r2, #0
   b9c28:	6840      	ldr	r0, [r0, #4]
   b9c2a:	4611      	mov	r1, r2
   b9c2c:	f7ff b896 	b.w	b8d5c <network_listening>

000b9c30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c34:	b095      	sub	sp, #84	; 0x54
   b9c36:	4614      	mov	r4, r2
   b9c38:	460d      	mov	r5, r1
   b9c3a:	4607      	mov	r7, r0
    IPAddress addr;
   b9c3c:	f7ff ff76 	bl	b9b2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9c40:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9c42:	221c      	movs	r2, #28
   b9c44:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9c46:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9c48:	f001 fdca 	bl	bb7e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9c4c:	2340      	movs	r3, #64	; 0x40
   b9c4e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9c50:	4620      	mov	r0, r4
   b9c52:	466b      	mov	r3, sp
   b9c54:	aa0c      	add	r2, sp, #48	; 0x30
   b9c56:	2100      	movs	r1, #0
   b9c58:	f7fe fe56 	bl	b8908 <netdb_getaddrinfo>
    if (!r) {
   b9c5c:	4604      	mov	r4, r0
   b9c5e:	2800      	cmp	r0, #0
   b9c60:	d14b      	bne.n	b9cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c62:	4602      	mov	r2, r0
   b9c64:	2101      	movs	r1, #1
   b9c66:	6868      	ldr	r0, [r5, #4]
   b9c68:	f7ff f858 	bl	b8d1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c70:	4622      	mov	r2, r4
   b9c72:	6868      	ldr	r0, [r5, #4]
   b9c74:	f7ff f852 	bl	b8d1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c7a:	4681      	mov	r9, r0
        bool ok = false;
   b9c7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c7e:	2e00      	cmp	r6, #0
   b9c80:	d03b      	beq.n	b9cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9c82:	2900      	cmp	r1, #0
   b9c84:	d139      	bne.n	b9cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9c86:	6873      	ldr	r3, [r6, #4]
   b9c88:	2b02      	cmp	r3, #2
   b9c8a:	d003      	beq.n	b9c94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9c8c:	2b0a      	cmp	r3, #10
   b9c8e:	d011      	beq.n	b9cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c90:	69f6      	ldr	r6, [r6, #28]
   b9c92:	e7f4      	b.n	b9c7e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9c94:	f1b8 0f00 	cmp.w	r8, #0
   b9c98:	d0fa      	beq.n	b9c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9c9a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9c9c:	a806      	add	r0, sp, #24
   b9c9e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9ca0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9ca2:	f7ff ff71 	bl	b9b88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9ca8:	1d3c      	adds	r4, r7, #4
   b9caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cac:	682b      	ldr	r3, [r5, #0]
   b9cae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9cb0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9cb2:	e7ed      	b.n	b9c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9cb4:	f1b9 0f00 	cmp.w	r9, #0
   b9cb8:	d0ea      	beq.n	b9c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9cba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9cbc:	2210      	movs	r2, #16
   b9cbe:	a801      	add	r0, sp, #4
   b9cc0:	f001 fd8e 	bl	bb7e0 <memset>
                    a.v = 6;
   b9cc4:	2306      	movs	r3, #6
   b9cc6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9cca:	ad01      	add	r5, sp, #4
   b9ccc:	f104 0308 	add.w	r3, r4, #8
   b9cd0:	3418      	adds	r4, #24
   b9cd2:	6818      	ldr	r0, [r3, #0]
   b9cd4:	6859      	ldr	r1, [r3, #4]
   b9cd6:	462a      	mov	r2, r5
   b9cd8:	c203      	stmia	r2!, {r0, r1}
   b9cda:	3308      	adds	r3, #8
   b9cdc:	42a3      	cmp	r3, r4
   b9cde:	4615      	mov	r5, r2
   b9ce0:	d1f7      	bne.n	b9cd2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9ce2:	a901      	add	r1, sp, #4
   b9ce4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9ce6:	ad07      	add	r5, sp, #28
   b9ce8:	f7ff ff2e 	bl	b9b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cee:	1d3c      	adds	r4, r7, #4
   b9cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cf2:	682b      	ldr	r3, [r5, #0]
   b9cf4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9cf6:	4649      	mov	r1, r9
   b9cf8:	e7ca      	b.n	b9c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9cfa:	9800      	ldr	r0, [sp, #0]
   b9cfc:	f7fe fdfc 	bl	b88f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9d00:	4638      	mov	r0, r7
   b9d02:	b015      	add	sp, #84	; 0x54
   b9d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9d08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9d08:	4b02      	ldr	r3, [pc, #8]	; (b9d14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9d0a:	4a03      	ldr	r2, [pc, #12]	; (b9d18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9d0c:	601a      	str	r2, [r3, #0]
   b9d0e:	2200      	movs	r2, #0
   b9d10:	605a      	str	r2, [r3, #4]

} // spark
   b9d12:	4770      	bx	lr
   b9d14:	2003e670 	.word	0x2003e670
   b9d18:	000bc9a8 	.word	0x000bc9a8

000b9d1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d1e:	4606      	mov	r6, r0
   b9d20:	460d      	mov	r5, r1
  size_t n = 0;
   b9d22:	188f      	adds	r7, r1, r2
   b9d24:	2400      	movs	r4, #0
  while (size--) {
   b9d26:	42bd      	cmp	r5, r7
   b9d28:	d00c      	beq.n	b9d44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9d2a:	6833      	ldr	r3, [r6, #0]
   b9d2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9d30:	689b      	ldr	r3, [r3, #8]
   b9d32:	4630      	mov	r0, r6
   b9d34:	4798      	blx	r3
     if (chunk>=0)
   b9d36:	1e03      	subs	r3, r0, #0
   b9d38:	db01      	blt.n	b9d3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9d3a:	441c      	add	r4, r3
  while (size--) {
   b9d3c:	e7f3      	b.n	b9d26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9d3e:	2c00      	cmp	r4, #0
   b9d40:	bf08      	it	eq
   b9d42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9d44:	4620      	mov	r0, r4
   b9d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9d48 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9d48:	b513      	push	{r0, r1, r4, lr}
   b9d4a:	4604      	mov	r4, r0
    }
   b9d4c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9d4e:	b159      	cbz	r1, b9d68 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9d50:	9101      	str	r1, [sp, #4]
   b9d52:	f001 fdaa 	bl	bb8aa <strlen>
   b9d56:	6823      	ldr	r3, [r4, #0]
   b9d58:	9901      	ldr	r1, [sp, #4]
   b9d5a:	68db      	ldr	r3, [r3, #12]
   b9d5c:	4602      	mov	r2, r0
   b9d5e:	4620      	mov	r0, r4
    }
   b9d60:	b002      	add	sp, #8
   b9d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9d66:	4718      	bx	r3
    }
   b9d68:	b002      	add	sp, #8
   b9d6a:	bd10      	pop	{r4, pc}

000b9d6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b9d6c:	6803      	ldr	r3, [r0, #0]
   b9d6e:	689b      	ldr	r3, [r3, #8]
   b9d70:	4718      	bx	r3

000b9d72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9d72:	b530      	push	{r4, r5, lr}
   b9d74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9d76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9d78:	2a01      	cmp	r2, #1
  *str = '\0';
   b9d7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9d7e:	bf98      	it	ls
   b9d80:	220a      	movls	r2, #10
   b9d82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9d84:	460d      	mov	r5, r1
   b9d86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9d8a:	fb01 5312 	mls	r3, r1, r2, r5
   b9d8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9d92:	2b09      	cmp	r3, #9
   b9d94:	bf94      	ite	ls
   b9d96:	3330      	addls	r3, #48	; 0x30
   b9d98:	3337      	addhi	r3, #55	; 0x37
   b9d9a:	b2db      	uxtb	r3, r3
  } while(n);
   b9d9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9d9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9da2:	d9ef      	bls.n	b9d84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9da4:	4621      	mov	r1, r4
   b9da6:	f7ff ffcf 	bl	b9d48 <_ZN5Print5writeEPKc>
}
   b9daa:	b00b      	add	sp, #44	; 0x2c
   b9dac:	bd30      	pop	{r4, r5, pc}
	...

000b9db0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b9db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9db4:	ec55 4b10 	vmov	r4, r5, d0
   b9db8:	4606      	mov	r6, r0
   b9dba:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b9dbc:	ee10 2a10 	vmov	r2, s0
   b9dc0:	ee10 0a10 	vmov	r0, s0
   b9dc4:	462b      	mov	r3, r5
   b9dc6:	4629      	mov	r1, r5
   b9dc8:	f001 fbe6 	bl	bb598 <__aeabi_dcmpun>
   b9dcc:	b140      	cbz	r0, b9de0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b9dce:	4953      	ldr	r1, [pc, #332]	; (b9f1c <_ZN5Print10printFloatEdh+0x16c>)
   b9dd0:	4630      	mov	r0, r6
   b9dd2:	f7ff ffb9 	bl	b9d48 <_ZN5Print5writeEPKc>
   b9dd6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9dd8:	4650      	mov	r0, sl
   b9dda:	b003      	add	sp, #12
   b9ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9de0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9de4:	4b4e      	ldr	r3, [pc, #312]	; (b9f20 <_ZN5Print10printFloatEdh+0x170>)
   b9de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9dea:	4620      	mov	r0, r4
   b9dec:	4649      	mov	r1, r9
   b9dee:	f001 fbd3 	bl	bb598 <__aeabi_dcmpun>
   b9df2:	b948      	cbnz	r0, b9e08 <_ZN5Print10printFloatEdh+0x58>
   b9df4:	4b4a      	ldr	r3, [pc, #296]	; (b9f20 <_ZN5Print10printFloatEdh+0x170>)
   b9df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9dfa:	4620      	mov	r0, r4
   b9dfc:	4649      	mov	r1, r9
   b9dfe:	f001 fbad 	bl	bb55c <__aeabi_dcmple>
   b9e02:	b908      	cbnz	r0, b9e08 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b9e04:	4947      	ldr	r1, [pc, #284]	; (b9f24 <_ZN5Print10printFloatEdh+0x174>)
   b9e06:	e7e3      	b.n	b9dd0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b9e08:	4b47      	ldr	r3, [pc, #284]	; (b9f28 <_ZN5Print10printFloatEdh+0x178>)
   b9e0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9e0e:	4620      	mov	r0, r4
   b9e10:	4629      	mov	r1, r5
   b9e12:	f001 fbb7 	bl	bb584 <__aeabi_dcmpgt>
   b9e16:	b108      	cbz	r0, b9e1c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b9e18:	4944      	ldr	r1, [pc, #272]	; (b9f2c <_ZN5Print10printFloatEdh+0x17c>)
   b9e1a:	e7d9      	b.n	b9dd0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b9e1c:	4b44      	ldr	r3, [pc, #272]	; (b9f30 <_ZN5Print10printFloatEdh+0x180>)
   b9e1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9e22:	4620      	mov	r0, r4
   b9e24:	4629      	mov	r1, r5
   b9e26:	f001 fb8f 	bl	bb548 <__aeabi_dcmplt>
   b9e2a:	2800      	cmp	r0, #0
   b9e2c:	d1f4      	bne.n	b9e18 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b9e2e:	2200      	movs	r2, #0
   b9e30:	2300      	movs	r3, #0
   b9e32:	4620      	mov	r0, r4
   b9e34:	4629      	mov	r1, r5
   b9e36:	f001 fb87 	bl	bb548 <__aeabi_dcmplt>
   b9e3a:	b1d0      	cbz	r0, b9e72 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b9e3c:	212d      	movs	r1, #45	; 0x2d
   b9e3e:	4630      	mov	r0, r6
   b9e40:	f7ff ff94 	bl	b9d6c <_ZN5Print5printEc>
     number = -number;
   b9e44:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b9e48:	4682      	mov	sl, r0
     number = -number;
   b9e4a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b9e4c:	4939      	ldr	r1, [pc, #228]	; (b9f34 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b9e4e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b9f3c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b9e52:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b9e56:	2000      	movs	r0, #0
    rounding /= 10.0;
   b9e58:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b9e5c:	fa5f f38b 	uxtb.w	r3, fp
   b9e60:	429f      	cmp	r7, r3
   b9e62:	d908      	bls.n	b9e76 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9e64:	4642      	mov	r2, r8
   b9e66:	464b      	mov	r3, r9
   b9e68:	f001 fa26 	bl	bb2b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9e6c:	f10b 0b01 	add.w	fp, fp, #1
   b9e70:	e7f4      	b.n	b9e5c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9e72:	4682      	mov	sl, r0
   b9e74:	e7ea      	b.n	b9e4c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9e76:	4622      	mov	r2, r4
   b9e78:	462b      	mov	r3, r5
   b9e7a:	f000 ff3d 	bl	bacf8 <__adddf3>
   b9e7e:	460d      	mov	r5, r1
   b9e80:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9e82:	f001 fbc7 	bl	bb614 <__aeabi_d2uiz>
   b9e86:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9e88:	f001 f872 	bl	baf70 <__aeabi_ui2d>
   b9e8c:	4602      	mov	r2, r0
   b9e8e:	460b      	mov	r3, r1
   b9e90:	4620      	mov	r0, r4
   b9e92:	4629      	mov	r1, r5
   b9e94:	f000 ff2e 	bl	bacf4 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b9e98:	220a      	movs	r2, #10
   b9e9a:	4604      	mov	r4, r0
   b9e9c:	460d      	mov	r5, r1
   b9e9e:	4630      	mov	r0, r6
   b9ea0:	4641      	mov	r1, r8
   b9ea2:	f7ff ff66 	bl	b9d72 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9ea6:	4482      	add	sl, r0
  if (digits > 0) {
   b9ea8:	2f00      	cmp	r7, #0
   b9eaa:	d095      	beq.n	b9dd8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9eac:	4922      	ldr	r1, [pc, #136]	; (b9f38 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b9eae:	f8df 908c 	ldr.w	r9, [pc, #140]	; b9f3c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9eb2:	4630      	mov	r0, r6
   b9eb4:	f7ff ff48 	bl	b9d48 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9eb8:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b9ebc:	4482      	add	sl, r0
  while (digits-- > 0)
   b9ebe:	2f00      	cmp	r7, #0
   b9ec0:	d08a      	beq.n	b9dd8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9ec2:	4642      	mov	r2, r8
   b9ec4:	464b      	mov	r3, r9
   b9ec6:	4620      	mov	r0, r4
   b9ec8:	4629      	mov	r1, r5
   b9eca:	f001 f8cb 	bl	bb064 <__aeabi_dmul>
   b9ece:	4604      	mov	r4, r0
   b9ed0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9ed2:	f001 fb77 	bl	bb5c4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9ed6:	f1b0 0b00 	subs.w	fp, r0, #0
   b9eda:	da1c      	bge.n	b9f16 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b9edc:	212d      	movs	r1, #45	; 0x2d
   b9ede:	4630      	mov	r0, r6
   b9ee0:	f7ff ff44 	bl	b9d6c <_ZN5Print5printEc>
            val = -n;
   b9ee4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9ee8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b9eea:	220a      	movs	r2, #10
   b9eec:	4630      	mov	r0, r6
   b9eee:	9301      	str	r3, [sp, #4]
   b9ef0:	f7ff ff3f 	bl	b9d72 <_ZN5Print11printNumberEmh>
   b9ef4:	9b01      	ldr	r3, [sp, #4]
   b9ef6:	4418      	add	r0, r3
    n += print(toPrint);
   b9ef8:	4482      	add	sl, r0
    remainder -= toPrint;
   b9efa:	4658      	mov	r0, fp
   b9efc:	f001 f848 	bl	baf90 <__aeabi_i2d>
   b9f00:	4602      	mov	r2, r0
   b9f02:	460b      	mov	r3, r1
   b9f04:	4620      	mov	r0, r4
   b9f06:	4629      	mov	r1, r5
   b9f08:	f000 fef4 	bl	bacf4 <__aeabi_dsub>
   b9f0c:	3f01      	subs	r7, #1
   b9f0e:	4604      	mov	r4, r0
   b9f10:	460d      	mov	r5, r1
   b9f12:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b9f14:	e7d3      	b.n	b9ebe <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b9f16:	4659      	mov	r1, fp
        size_t t = 0;
   b9f18:	2300      	movs	r3, #0
   b9f1a:	e7e6      	b.n	b9eea <_ZN5Print10printFloatEdh+0x13a>
   b9f1c:	000bc9dc 	.word	0x000bc9dc
   b9f20:	7fefffff 	.word	0x7fefffff
   b9f24:	000bc9e0 	.word	0x000bc9e0
   b9f28:	41efffff 	.word	0x41efffff
   b9f2c:	000bc9e4 	.word	0x000bc9e4
   b9f30:	c1efffff 	.word	0xc1efffff
   b9f34:	3fe00000 	.word	0x3fe00000
   b9f38:	000bca14 	.word	0x000bca14
   b9f3c:	40240000 	.word	0x40240000

000b9f40 <_ZN5Print5printEfi>:
{
   b9f40:	b538      	push	{r3, r4, r5, lr}
   b9f42:	4604      	mov	r4, r0
   b9f44:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b9f48:	b2cd      	uxtb	r5, r1
   b9f4a:	f001 f833 	bl	bafb4 <__aeabi_f2d>
   b9f4e:	ec41 0b10 	vmov	d0, r0, r1
   b9f52:	4629      	mov	r1, r5
   b9f54:	4620      	mov	r0, r4
}
   b9f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b9f5a:	f7ff bf29 	b.w	b9db0 <_ZN5Print10printFloatEdh>
	...

000b9f60 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9f60:	4b01      	ldr	r3, [pc, #4]	; (b9f68 <_GLOBAL__sub_I_RGB+0x8>)
   b9f62:	2200      	movs	r2, #0
   b9f64:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9f66:	4770      	bx	lr
   b9f68:	2003e678 	.word	0x2003e678

000b9f6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9f6c:	b510      	push	{r4, lr}
   b9f6e:	4604      	mov	r4, r0
   b9f70:	4608      	mov	r0, r1
{
    _spi = spi;
   b9f72:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9f74:	f7fe fcd0 	bl	b8918 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9f78:	2300      	movs	r3, #0
   b9f7a:	6063      	str	r3, [r4, #4]
}
   b9f7c:	4620      	mov	r0, r4
   b9f7e:	bd10      	pop	{r4, pc}

000b9f80 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9f80:	b510      	push	{r4, lr}
   b9f82:	4604      	mov	r4, r0
{
	free(buffer);
   b9f84:	6800      	ldr	r0, [r0, #0]
   b9f86:	f7fe ff19 	bl	b8dbc <free>
}
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	bd10      	pop	{r4, pc}

000b9f8e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9f8e:	b510      	push	{r4, lr}
   b9f90:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9f92:	6800      	ldr	r0, [r0, #0]
   b9f94:	b108      	cbz	r0, b9f9a <_ZN6String10invalidateEv+0xc>
   b9f96:	f7fe ff11 	bl	b8dbc <free>
	buffer = NULL;
   b9f9a:	2300      	movs	r3, #0
	capacity = len = 0;
   b9f9c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9fa0:	6023      	str	r3, [r4, #0]
}
   b9fa2:	bd10      	pop	{r4, pc}

000b9fa4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9fa4:	b538      	push	{r3, r4, r5, lr}
   b9fa6:	4604      	mov	r4, r0
   b9fa8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9faa:	6800      	ldr	r0, [r0, #0]
   b9fac:	3101      	adds	r1, #1
   b9fae:	f7fe ff0d 	bl	b8dcc <realloc>
	if (newbuffer) {
   b9fb2:	b110      	cbz	r0, b9fba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9fb4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9fb8:	2001      	movs	r0, #1
	}
	return 0;
}
   b9fba:	bd38      	pop	{r3, r4, r5, pc}

000b9fbc <_ZN6String7reserveEj>:
{
   b9fbc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9fbe:	6803      	ldr	r3, [r0, #0]
{
   b9fc0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9fc2:	b123      	cbz	r3, b9fce <_ZN6String7reserveEj+0x12>
   b9fc4:	6843      	ldr	r3, [r0, #4]
   b9fc6:	428b      	cmp	r3, r1
   b9fc8:	d301      	bcc.n	b9fce <_ZN6String7reserveEj+0x12>
   b9fca:	2001      	movs	r0, #1
}
   b9fcc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9fce:	4620      	mov	r0, r4
   b9fd0:	f7ff ffe8 	bl	b9fa4 <_ZN6String12changeBufferEj>
   b9fd4:	2800      	cmp	r0, #0
   b9fd6:	d0f9      	beq.n	b9fcc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9fd8:	68a3      	ldr	r3, [r4, #8]
   b9fda:	2b00      	cmp	r3, #0
   b9fdc:	d1f5      	bne.n	b9fca <_ZN6String7reserveEj+0xe>
   b9fde:	6822      	ldr	r2, [r4, #0]
   b9fe0:	7013      	strb	r3, [r2, #0]
   b9fe2:	e7f2      	b.n	b9fca <_ZN6String7reserveEj+0xe>

000b9fe4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fe6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9fe8:	4611      	mov	r1, r2
   b9fea:	9201      	str	r2, [sp, #4]
{
   b9fec:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9fee:	f7ff ffe5 	bl	b9fbc <_ZN6String7reserveEj>
   b9ff2:	9a01      	ldr	r2, [sp, #4]
   b9ff4:	b928      	cbnz	r0, ba002 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9ff6:	4620      	mov	r0, r4
   b9ff8:	f7ff ffc9 	bl	b9f8e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	b003      	add	sp, #12
   ba000:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba002:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba004:	4629      	mov	r1, r5
   ba006:	6820      	ldr	r0, [r4, #0]
   ba008:	f001 fbc2 	bl	bb790 <memcpy>
	buffer[len] = 0;
   ba00c:	6822      	ldr	r2, [r4, #0]
   ba00e:	68a3      	ldr	r3, [r4, #8]
   ba010:	2100      	movs	r1, #0
   ba012:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba014:	e7f2      	b.n	b9ffc <_ZN6String4copyEPKcj+0x18>

000ba016 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba016:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba018:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba01a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba01e:	4604      	mov	r4, r0
	len = 0;
   ba020:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba022:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba024:	b141      	cbz	r1, ba038 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba026:	4608      	mov	r0, r1
   ba028:	9101      	str	r1, [sp, #4]
   ba02a:	f001 fc3e 	bl	bb8aa <strlen>
   ba02e:	9901      	ldr	r1, [sp, #4]
   ba030:	4602      	mov	r2, r0
   ba032:	4620      	mov	r0, r4
   ba034:	f7ff ffd6 	bl	b9fe4 <_ZN6String4copyEPKcj>
}
   ba038:	4620      	mov	r0, r4
   ba03a:	b002      	add	sp, #8
   ba03c:	bd10      	pop	{r4, pc}

000ba03e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba03e:	b538      	push	{r3, r4, r5, lr}
   ba040:	4605      	mov	r5, r0
	if (buffer) {
   ba042:	6800      	ldr	r0, [r0, #0]
{
   ba044:	460c      	mov	r4, r1
	if (buffer) {
   ba046:	b168      	cbz	r0, ba064 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba048:	686a      	ldr	r2, [r5, #4]
   ba04a:	688b      	ldr	r3, [r1, #8]
   ba04c:	429a      	cmp	r2, r3
   ba04e:	d307      	bcc.n	ba060 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba050:	6809      	ldr	r1, [r1, #0]
   ba052:	f001 fc05 	bl	bb860 <strcpy>
			len = rhs.len;
   ba056:	68a3      	ldr	r3, [r4, #8]
   ba058:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba05a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba05c:	60a3      	str	r3, [r4, #8]
}
   ba05e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba060:	f7fe feac 	bl	b8dbc <free>
	buffer = rhs.buffer;
   ba064:	6823      	ldr	r3, [r4, #0]
   ba066:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba068:	6863      	ldr	r3, [r4, #4]
   ba06a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba06c:	68a3      	ldr	r3, [r4, #8]
   ba06e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba070:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba072:	e9c4 3300 	strd	r3, r3, [r4]
   ba076:	e7f1      	b.n	ba05c <_ZN6String4moveERS_+0x1e>

000ba078 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba078:	4288      	cmp	r0, r1
{
   ba07a:	b510      	push	{r4, lr}
   ba07c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba07e:	d005      	beq.n	ba08c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba080:	680b      	ldr	r3, [r1, #0]
   ba082:	b12b      	cbz	r3, ba090 <_ZN6StringaSERKS_+0x18>
   ba084:	688a      	ldr	r2, [r1, #8]
   ba086:	4619      	mov	r1, r3
   ba088:	f7ff ffac 	bl	b9fe4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba08c:	4620      	mov	r0, r4
   ba08e:	bd10      	pop	{r4, pc}
	else invalidate();
   ba090:	f7ff ff7d 	bl	b9f8e <_ZN6String10invalidateEv>
   ba094:	e7fa      	b.n	ba08c <_ZN6StringaSERKS_+0x14>

000ba096 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba096:	b510      	push	{r4, lr}
	buffer = NULL;
   ba098:	2300      	movs	r3, #0
String::String(const String &value)
   ba09a:	4604      	mov	r4, r0
	capacity = 0;
   ba09c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba0a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba0a2:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba0a4:	f7ff ffe8 	bl	ba078 <_ZN6StringaSERKS_>
}
   ba0a8:	4620      	mov	r0, r4
   ba0aa:	bd10      	pop	{r4, pc}

000ba0ac <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba0ac:	4288      	cmp	r0, r1
{
   ba0ae:	b510      	push	{r4, lr}
   ba0b0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba0b2:	d001      	beq.n	ba0b8 <_ZN6StringaSEOS_+0xc>
   ba0b4:	f7ff ffc3 	bl	ba03e <_ZN6String4moveERS_>
	return *this;
}
   ba0b8:	4620      	mov	r0, r4
   ba0ba:	bd10      	pop	{r4, pc}

000ba0bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba0bc:	b513      	push	{r0, r1, r4, lr}
   ba0be:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba0c0:	b159      	cbz	r1, ba0da <_ZN6StringaSEPKc+0x1e>
   ba0c2:	4608      	mov	r0, r1
   ba0c4:	9101      	str	r1, [sp, #4]
   ba0c6:	f001 fbf0 	bl	bb8aa <strlen>
   ba0ca:	9901      	ldr	r1, [sp, #4]
   ba0cc:	4602      	mov	r2, r0
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	f7ff ff88 	bl	b9fe4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba0d4:	4620      	mov	r0, r4
   ba0d6:	b002      	add	sp, #8
   ba0d8:	bd10      	pop	{r4, pc}
	else invalidate();
   ba0da:	f7ff ff58 	bl	b9f8e <_ZN6String10invalidateEv>
   ba0de:	e7f9      	b.n	ba0d4 <_ZN6StringaSEPKc+0x18>

000ba0e0 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba0e0:	b510      	push	{r4, lr}
   ba0e2:	4604      	mov	r4, r0
   ba0e4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba0e6:	2300      	movs	r3, #0
	capacity = 0;
   ba0e8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba0ec:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba0ee:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba0f0:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba0f2:	a901      	add	r1, sp, #4
   ba0f4:	f000 fc0a 	bl	ba90c <itoa>
	*this = buf;
   ba0f8:	a901      	add	r1, sp, #4
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	f7ff ffde 	bl	ba0bc <_ZN6StringaSEPKc>
}
   ba100:	4620      	mov	r0, r4
   ba102:	b00a      	add	sp, #40	; 0x28
   ba104:	bd10      	pop	{r4, pc}

000ba106 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba106:	b570      	push	{r4, r5, r6, lr}
   ba108:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba10a:	460e      	mov	r6, r1
   ba10c:	b909      	cbnz	r1, ba112 <_ZN6String6concatEPKcj+0xc>
   ba10e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba110:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba112:	b16a      	cbz	r2, ba130 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba114:	6884      	ldr	r4, [r0, #8]
   ba116:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba118:	4621      	mov	r1, r4
   ba11a:	f7ff ff4f 	bl	b9fbc <_ZN6String7reserveEj>
   ba11e:	2800      	cmp	r0, #0
   ba120:	d0f5      	beq.n	ba10e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba122:	6828      	ldr	r0, [r5, #0]
   ba124:	68ab      	ldr	r3, [r5, #8]
   ba126:	4631      	mov	r1, r6
   ba128:	4418      	add	r0, r3
   ba12a:	f001 fb99 	bl	bb860 <strcpy>
	len = newlen;
   ba12e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba130:	2001      	movs	r0, #1
   ba132:	e7ed      	b.n	ba110 <_ZN6String6concatEPKcj+0xa>

000ba134 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   ba134:	b513      	push	{r0, r1, r4, lr}
   ba136:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   ba138:	4608      	mov	r0, r1
	if (!cstr) return 0;
   ba13a:	b151      	cbz	r1, ba152 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   ba13c:	9101      	str	r1, [sp, #4]
   ba13e:	f001 fbb4 	bl	bb8aa <strlen>
   ba142:	9901      	ldr	r1, [sp, #4]
   ba144:	4602      	mov	r2, r0
   ba146:	4620      	mov	r0, r4
}
   ba148:	b002      	add	sp, #8
   ba14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   ba14e:	f7ff bfda 	b.w	ba106 <_ZN6String6concatEPKcj>
}
   ba152:	b002      	add	sp, #8
   ba154:	bd10      	pop	{r4, pc}

000ba156 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba156:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba158:	688a      	ldr	r2, [r1, #8]
   ba15a:	6809      	ldr	r1, [r1, #0]
{
   ba15c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba15e:	f7ff ffd2 	bl	ba106 <_ZN6String6concatEPKcj>
   ba162:	b910      	cbnz	r0, ba16a <_ZplRK15StringSumHelperRK6String+0x14>
   ba164:	4620      	mov	r0, r4
   ba166:	f7ff ff12 	bl	b9f8e <_ZN6String10invalidateEv>
	return a;
}
   ba16a:	4620      	mov	r0, r4
   ba16c:	bd10      	pop	{r4, pc}

000ba16e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba16e:	b513      	push	{r0, r1, r4, lr}
   ba170:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba172:	b929      	cbnz	r1, ba180 <_ZplRK15StringSumHelperPKc+0x12>
   ba174:	4620      	mov	r0, r4
   ba176:	f7ff ff0a 	bl	b9f8e <_ZN6String10invalidateEv>
	return a;
}
   ba17a:	4620      	mov	r0, r4
   ba17c:	b002      	add	sp, #8
   ba17e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba180:	4608      	mov	r0, r1
   ba182:	9101      	str	r1, [sp, #4]
   ba184:	f001 fb91 	bl	bb8aa <strlen>
   ba188:	9901      	ldr	r1, [sp, #4]
   ba18a:	4602      	mov	r2, r0
   ba18c:	4620      	mov	r0, r4
   ba18e:	f7ff ffba 	bl	ba106 <_ZN6String6concatEPKcj>
   ba192:	2800      	cmp	r0, #0
   ba194:	d0ee      	beq.n	ba174 <_ZplRK15StringSumHelperPKc+0x6>
   ba196:	e7f0      	b.n	ba17a <_ZplRK15StringSumHelperPKc+0xc>

000ba198 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   ba198:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba19a:	6882      	ldr	r2, [r0, #8]
   ba19c:	b93a      	cbnz	r2, ba1ae <_ZNK6String6equalsEPKc+0x16>
   ba19e:	b121      	cbz	r1, ba1aa <_ZNK6String6equalsEPKc+0x12>
   ba1a0:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba1a2:	fab0 f080 	clz	r0, r0
   ba1a6:	0940      	lsrs	r0, r0, #5
   ba1a8:	e000      	b.n	ba1ac <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba1aa:	2001      	movs	r0, #1
}
   ba1ac:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba1ae:	6800      	ldr	r0, [r0, #0]
   ba1b0:	b909      	cbnz	r1, ba1b6 <_ZNK6String6equalsEPKc+0x1e>
   ba1b2:	7800      	ldrb	r0, [r0, #0]
   ba1b4:	e7f5      	b.n	ba1a2 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba1b6:	f001 fb49 	bl	bb84c <strcmp>
   ba1ba:	e7f2      	b.n	ba1a2 <_ZNK6String6equalsEPKc+0xa>

000ba1bc <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   ba1bc:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   ba1be:	6883      	ldr	r3, [r0, #8]
   ba1c0:	688a      	ldr	r2, [r1, #8]
   ba1c2:	4293      	cmp	r3, r2
   ba1c4:	d30b      	bcc.n	ba1de <_ZNK6String8endsWithERKS_+0x22>
   ba1c6:	6800      	ldr	r0, [r0, #0]
   ba1c8:	b140      	cbz	r0, ba1dc <_ZNK6String8endsWithERKS_+0x20>
   ba1ca:	6809      	ldr	r1, [r1, #0]
   ba1cc:	b149      	cbz	r1, ba1e2 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   ba1ce:	1a9b      	subs	r3, r3, r2
   ba1d0:	4418      	add	r0, r3
   ba1d2:	f001 fb3b 	bl	bb84c <strcmp>
   ba1d6:	fab0 f080 	clz	r0, r0
   ba1da:	0940      	lsrs	r0, r0, #5
}
   ba1dc:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   ba1de:	2000      	movs	r0, #0
   ba1e0:	e7fc      	b.n	ba1dc <_ZNK6String8endsWithERKS_+0x20>
   ba1e2:	4608      	mov	r0, r1
   ba1e4:	e7fa      	b.n	ba1dc <_ZNK6String8endsWithERKS_+0x20>
	...

000ba1e8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba1ea:	429a      	cmp	r2, r3
{
   ba1ec:	460f      	mov	r7, r1
   ba1ee:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba1f0:	490c      	ldr	r1, [pc, #48]	; (ba224 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba1f2:	bf88      	it	hi
   ba1f4:	4613      	movhi	r3, r2
{
   ba1f6:	4614      	mov	r4, r2
   ba1f8:	4606      	mov	r6, r0
	if (left > right) {
   ba1fa:	bf84      	itt	hi
   ba1fc:	462c      	movhi	r4, r5
   ba1fe:	461d      	movhi	r5, r3
	String out;
   ba200:	f7ff ff09 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba204:	68bb      	ldr	r3, [r7, #8]
   ba206:	42a3      	cmp	r3, r4
   ba208:	d30a      	bcc.n	ba220 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba20a:	6839      	ldr	r1, [r7, #0]
   ba20c:	42ab      	cmp	r3, r5
   ba20e:	bf94      	ite	ls
   ba210:	ebc4 0203 	rsbls	r2, r4, r3
   ba214:	ebc4 0205 	rsbhi	r2, r4, r5
   ba218:	4421      	add	r1, r4
   ba21a:	4630      	mov	r0, r6
   ba21c:	f7ff fee2 	bl	b9fe4 <_ZN6String4copyEPKcj>
	return out;
}
   ba220:	4630      	mov	r0, r6
   ba222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba224:	000bcac0 	.word	0x000bcac0

000ba228 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   ba228:	b40e      	push	{r1, r2, r3}
   ba22a:	b570      	push	{r4, r5, r6, lr}
   ba22c:	b087      	sub	sp, #28
   ba22e:	ad0b      	add	r5, sp, #44	; 0x2c
   ba230:	4604      	mov	r4, r0
   ba232:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba236:	9201      	str	r2, [sp, #4]
   ba238:	462b      	mov	r3, r5
   ba23a:	2105      	movs	r1, #5
   ba23c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   ba23e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba240:	f7fe fde4 	bl	b8e0c <vsnprintf>
    va_end(marker);

    String result;
   ba244:	490b      	ldr	r1, [pc, #44]	; (ba274 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba246:	4606      	mov	r6, r0
    String result;
   ba248:	4620      	mov	r0, r4
   ba24a:	f7ff fee4 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   ba24e:	4631      	mov	r1, r6
   ba250:	4620      	mov	r0, r4
   ba252:	f7ff feb3 	bl	b9fbc <_ZN6String7reserveEj>
    if (result.buffer) {
   ba256:	6820      	ldr	r0, [r4, #0]
   ba258:	b130      	cbz	r0, ba268 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba25a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   ba25c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba25e:	462b      	mov	r3, r5
   ba260:	1c71      	adds	r1, r6, #1
   ba262:	f7fe fdd3 	bl	b8e0c <vsnprintf>
        va_end(marker);
        result.len = n;
   ba266:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   ba268:	4620      	mov	r0, r4
   ba26a:	b007      	add	sp, #28
   ba26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba270:	b003      	add	sp, #12
   ba272:	4770      	bx	lr
   ba274:	000bcac0 	.word	0x000bcac0

000ba278 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   ba278:	b510      	push	{r4, lr}
   ba27a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   ba27c:	6800      	ldr	r0, [r0, #0]
   ba27e:	b118      	cbz	r0, ba288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   ba280:	f7fe fd9c 	bl	b8dbc <free>
            wakeupSource_ = nullptr;
   ba284:	2300      	movs	r3, #0
   ba286:	6023      	str	r3, [r4, #0]
        }
    }
   ba288:	bd10      	pop	{r4, pc}

000ba28a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   ba28a:	b538      	push	{r3, r4, r5, lr}
   ba28c:	460c      	mov	r4, r1
   ba28e:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba290:	f7ff fff2 	bl	ba278 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   ba294:	b154      	cbz	r4, ba2ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   ba296:	8820      	ldrh	r0, [r4, #0]
   ba298:	f7fe fd88 	bl	b8dac <malloc>
   ba29c:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   ba29e:	b128      	cbz	r0, ba2ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   ba2a0:	8822      	ldrh	r2, [r4, #0]
   ba2a2:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   ba2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   ba2a8:	f001 ba72 	b.w	bb790 <memcpy>
    }
   ba2ac:	bd38      	pop	{r3, r4, r5, pc}

000ba2ae <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba2ae:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   ba2b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   ba2b4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   ba2b6:	f8d1 3006 	ldr.w	r3, [r1, #6]
   ba2ba:	f8c0 3006 	str.w	r3, [r0, #6]
   ba2be:	894b      	ldrh	r3, [r1, #10]
   ba2c0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba2c2:	460c      	mov	r4, r1
   ba2c4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba2c6:	f7ff ffd7 	bl	ba278 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   ba2ca:	6823      	ldr	r3, [r4, #0]
   ba2cc:	b113      	cbz	r3, ba2d4 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   ba2ce:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   ba2d0:	2300      	movs	r3, #0
   ba2d2:	6023      	str	r3, [r4, #0]
    }
   ba2d4:	bd38      	pop	{r3, r4, r5, pc}

000ba2d6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   ba2d6:	b507      	push	{r0, r1, r2, lr}
   ba2d8:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   ba2da:	2100      	movs	r1, #0
{
   ba2dc:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   ba2de:	9100      	str	r1, [sp, #0]
   ba2e0:	2001      	movs	r0, #1
   ba2e2:	218c      	movs	r1, #140	; 0x8c
   ba2e4:	f7fe fc88 	bl	b8bf8 <system_reset>
}
   ba2e8:	b003      	add	sp, #12
   ba2ea:	f85d fb04 	ldr.w	pc, [sp], #4

000ba2ee <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   ba2ee:	4601      	mov	r1, r0
    reset(0, flags);
   ba2f0:	2000      	movs	r0, #0
   ba2f2:	f7ff bff0 	b.w	ba2d6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000ba2f6 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   ba2f6:	2000      	movs	r0, #0
   ba2f8:	f7ff bff9 	b.w	ba2ee <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000ba2fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   ba2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba2fe:	4d2b      	ldr	r5, [pc, #172]	; (ba3ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   ba300:	7d0b      	ldrb	r3, [r1, #20]
   ba302:	4604      	mov	r4, r0
   ba304:	b08b      	sub	sp, #44	; 0x2c
   ba306:	4608      	mov	r0, r1
   ba308:	1daf      	adds	r7, r5, #6
   ba30a:	2b00      	cmp	r3, #0
   ba30c:	d036      	beq.n	ba37c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   ba30e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   ba310:	791b      	ldrb	r3, [r3, #4]
   ba312:	2b00      	cmp	r3, #0
   ba314:	d032      	beq.n	ba37c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   ba316:	4b26      	ldr	r3, [pc, #152]	; (ba3b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   ba318:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   ba31a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   ba31c:	a902      	add	r1, sp, #8
   ba31e:	3004      	adds	r0, #4
   ba320:	e9cd 2202 	strd	r2, r2, [sp, #8]
   ba324:	f7fe fc5e 	bl	b8be4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   ba328:	f8dd 300e 	ldr.w	r3, [sp, #14]
   ba32c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   ba330:	b200      	sxth	r0, r0
   ba332:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   ba336:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   ba33a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   ba33c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   ba33e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   ba340:	4628      	mov	r0, r5
   ba342:	f7ff ffa2 	bl	ba28a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   ba346:	a802      	add	r0, sp, #8
   ba348:	f7ff ff96 	bl	ba278 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   ba34c:	2300      	movs	r3, #0
   ba34e:	6023      	str	r3, [r4, #0]
   ba350:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   ba352:	71a3      	strb	r3, [r4, #6]
   ba354:	8123      	strh	r3, [r4, #8]
   ba356:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba35a:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   ba35c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   ba360:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   ba362:	f8d5 3006 	ldr.w	r3, [r5, #6]
   ba366:	f8c4 3006 	str.w	r3, [r4, #6]
   ba36a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   ba36c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   ba36e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   ba370:	4620      	mov	r0, r4
   ba372:	f7ff ff8a 	bl	ba28a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   ba376:	4620      	mov	r0, r4
   ba378:	b00b      	add	sp, #44	; 0x2c
   ba37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   ba37c:	2600      	movs	r6, #0
   ba37e:	2320      	movs	r3, #32
   ba380:	e9cd 3602 	strd	r3, r6, [sp, #8]
   ba384:	4b0b      	ldr	r3, [pc, #44]	; (ba3b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   ba386:	9300      	str	r3, [sp, #0]
   ba388:	aa02      	add	r2, sp, #8
   ba38a:	4633      	mov	r3, r6
   ba38c:	490a      	ldr	r1, [pc, #40]	; (ba3b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   ba38e:	2032      	movs	r0, #50	; 0x32
   ba390:	f7fe fbaa 	bl	b8ae8 <log_message>
            : wakeupSource_(nullptr),
   ba394:	4b06      	ldr	r3, [pc, #24]	; (ba3b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   ba396:	4805      	ldr	r0, [pc, #20]	; (ba3ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   ba398:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   ba39a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   ba39e:	a902      	add	r1, sp, #8
   ba3a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   ba3a4:	f7ff ff83 	bl	ba2ae <_ZN17SystemSleepResultaSEOS_.isra.0>
   ba3a8:	e7cd      	b.n	ba346 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   ba3aa:	bf00      	nop
   ba3ac:	2003e688 	.word	0x2003e688
   ba3b0:	ffff0000 	.word	0xffff0000
   ba3b4:	000bc9ef 	.word	0x000bc9ef
   ba3b8:	000bc9e8 	.word	0x000bc9e8

000ba3bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba3bc:	4b05      	ldr	r3, [pc, #20]	; (ba3d4 <_GLOBAL__sub_I_System+0x18>)
   ba3be:	2202      	movs	r2, #2
   ba3c0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   ba3c2:	4b05      	ldr	r3, [pc, #20]	; (ba3d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba3c4:	4a05      	ldr	r2, [pc, #20]	; (ba3dc <_GLOBAL__sub_I_System+0x20>)
   ba3c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba3c8:	2000      	movs	r0, #0
   ba3ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba3ce:	f7fe bbad 	b.w	b8b2c <set_system_mode>
   ba3d2:	bf00      	nop
   ba3d4:	2003e694 	.word	0x2003e694
   ba3d8:	2003e688 	.word	0x2003e688
   ba3dc:	ffff0000 	.word	0xffff0000

000ba3e0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba3e4:	4a15      	ldr	r2, [pc, #84]	; (ba43c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba3e6:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba448 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba3ea:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba3ee:	1980      	adds	r0, r0, r6
   ba3f0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba3f4:	4b12      	ldr	r3, [pc, #72]	; (ba440 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba3f6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba3fa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba3fe:	1986      	adds	r6, r0, r6
   ba400:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba404:	42bb      	cmp	r3, r7
   ba406:	bf08      	it	eq
   ba408:	42b2      	cmpeq	r2, r6
{
   ba40a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba40c:	d013      	beq.n	ba436 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba40e:	a903      	add	r1, sp, #12
   ba410:	4668      	mov	r0, sp
   ba412:	e9cd 6700 	strd	r6, r7, [sp]
   ba416:	f7fe fd31 	bl	b8e7c <localtime_r>
	calendar_time.tm_year += 1900;
   ba41a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba41c:	4d09      	ldr	r5, [pc, #36]	; (ba444 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba41e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba422:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba424:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba42a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba42c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba42e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba432:	6823      	ldr	r3, [r4, #0]
   ba434:	602b      	str	r3, [r5, #0]
    }
}
   ba436:	b00c      	add	sp, #48	; 0x30
   ba438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba43c:	2003e6d0 	.word	0x2003e6d0
   ba440:	2003e6c8 	.word	0x2003e6c8
   ba444:	2003e6a0 	.word	0x2003e6a0
   ba448:	2003e6d8 	.word	0x2003e6d8

000ba44c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   ba44c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba44e:	2000      	movs	r0, #0
   ba450:	f7fe fc24 	bl	b8c9c <spark_sync_time_pending>
   ba454:	b128      	cbz	r0, ba462 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba456:	f7fe fbf9 	bl	b8c4c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba45a:	f080 0001 	eor.w	r0, r0, #1
   ba45e:	b2c0      	uxtb	r0, r0
    }
   ba460:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba462:	2001      	movs	r0, #1
   ba464:	e7fc      	b.n	ba460 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000ba466 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   ba466:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba468:	4602      	mov	r2, r0
   ba46a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ba46c:	4668      	mov	r0, sp
    struct timeval tv = {
   ba46e:	2100      	movs	r1, #0
    };
   ba470:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   ba474:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ba478:	f7fe f986 	bl	b8788 <hal_rtc_set_time>
   ba47c:	4602      	mov	r2, r0
   ba47e:	b910      	cbnz	r0, ba486 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   ba480:	4601      	mov	r1, r0
   ba482:	f7fe fb93 	bl	b8bac <system_notify_time_changed>
    }
}
   ba486:	b005      	add	sp, #20
   ba488:	f85d fb04 	ldr.w	pc, [sp], #4

000ba48c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ba48c:	b530      	push	{r4, r5, lr}
   ba48e:	b093      	sub	sp, #76	; 0x4c
   ba490:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   ba494:	4b19      	ldr	r3, [pc, #100]	; (ba4fc <_ZN9TimeClass7timeStrEx+0x70>)
{
   ba496:	4604      	mov	r4, r0
    t += time_zone_cache;
   ba498:	e9d3 1000 	ldrd	r1, r0, [r3]
   ba49c:	9b01      	ldr	r3, [sp, #4]
   ba49e:	1852      	adds	r2, r2, r1
   ba4a0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   ba4a4:	4816      	ldr	r0, [pc, #88]	; (ba500 <_ZN9TimeClass7timeStrEx+0x74>)
   ba4a6:	e9d0 1000 	ldrd	r1, r0, [r0]
   ba4aa:	1852      	adds	r2, r2, r1
   ba4ac:	eb43 0300 	adc.w	r3, r3, r0
   ba4b0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ba4b4:	2224      	movs	r2, #36	; 0x24
   ba4b6:	eb0d 0002 	add.w	r0, sp, r2
   ba4ba:	2100      	movs	r1, #0
   ba4bc:	f001 f990 	bl	bb7e0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ba4c0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ba4c2:	a909      	add	r1, sp, #36	; 0x24
   ba4c4:	4668      	mov	r0, sp
   ba4c6:	f7fe fcd9 	bl	b8e7c <localtime_r>
    char ascstr[26] = {};
   ba4ca:	2216      	movs	r2, #22
   ba4cc:	4629      	mov	r1, r5
   ba4ce:	a803      	add	r0, sp, #12
   ba4d0:	9502      	str	r5, [sp, #8]
   ba4d2:	f001 f985 	bl	bb7e0 <memset>
    asctime_r(&calendar_time, ascstr);
   ba4d6:	a902      	add	r1, sp, #8
   ba4d8:	a809      	add	r0, sp, #36	; 0x24
   ba4da:	f001 f90b 	bl	bb6f4 <asctime_r>
    int len = strlen(ascstr);
   ba4de:	a802      	add	r0, sp, #8
   ba4e0:	f001 f9e3 	bl	bb8aa <strlen>
    ascstr[len-1] = 0; // remove final newline
   ba4e4:	ab12      	add	r3, sp, #72	; 0x48
   ba4e6:	4418      	add	r0, r3
    return String(ascstr);
   ba4e8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ba4ea:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	f7ff fd91 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba4f4:	4620      	mov	r0, r4
   ba4f6:	b013      	add	sp, #76	; 0x4c
   ba4f8:	bd30      	pop	{r4, r5, pc}
   ba4fa:	bf00      	nop
   ba4fc:	2003e6d0 	.word	0x2003e6d0
   ba500:	2003e6c8 	.word	0x2003e6c8

000ba504 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   ba504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba508:	b0a4      	sub	sp, #144	; 0x90
   ba50a:	4607      	mov	r7, r0
   ba50c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba50e:	a814      	add	r0, sp, #80	; 0x50
{
   ba510:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba512:	223f      	movs	r2, #63	; 0x3f
{
   ba514:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   ba516:	f001 f9d0 	bl	bb8ba <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   ba51a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   ba51c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   ba51e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   ba522:	f001 f9c2 	bl	bb8aa <strlen>
   ba526:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   ba528:	bb4c      	cbnz	r4, ba57e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   ba52a:	4929      	ldr	r1, [pc, #164]	; (ba5d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   ba52c:	a803      	add	r0, sp, #12
   ba52e:	f001 f997 	bl	bb860 <strcpy>
   ba532:	ac14      	add	r4, sp, #80	; 0x50
{
   ba534:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   ba536:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   ba53a:	45b1      	cmp	r9, r6
   ba53c:	d934      	bls.n	ba5a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   ba53e:	7823      	ldrb	r3, [r4, #0]
   ba540:	2b25      	cmp	r3, #37	; 0x25
   ba542:	f106 0a01 	add.w	sl, r6, #1
   ba546:	d117      	bne.n	ba578 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   ba548:	7863      	ldrb	r3, [r4, #1]
   ba54a:	2b7a      	cmp	r3, #122	; 0x7a
   ba54c:	d114      	bne.n	ba578 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   ba54e:	a803      	add	r0, sp, #12
   ba550:	f001 f9ab 	bl	bb8aa <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   ba554:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   ba556:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   ba558:	1830      	adds	r0, r6, r0
   ba55a:	4418      	add	r0, r3
   ba55c:	eba9 0206 	sub.w	r2, r9, r6
   ba560:	1ca1      	adds	r1, r4, #2
   ba562:	f001 f915 	bl	bb790 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   ba566:	462a      	mov	r2, r5
   ba568:	a903      	add	r1, sp, #12
   ba56a:	4620      	mov	r0, r4
   ba56c:	f001 f910 	bl	bb790 <memcpy>
            len = strlen(format_str);
   ba570:	a814      	add	r0, sp, #80	; 0x50
   ba572:	f001 f99a 	bl	bb8aa <strlen>
   ba576:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   ba578:	3401      	adds	r4, #1
   ba57a:	4656      	mov	r6, sl
   ba57c:	e7db      	b.n	ba536 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   ba57e:	233c      	movs	r3, #60	; 0x3c
   ba580:	fb94 f2f3 	sdiv	r2, r4, r3
   ba584:	2a00      	cmp	r2, #0
   ba586:	bfb8      	it	lt
   ba588:	4252      	neglt	r2, r2
   ba58a:	fbb2 f1f3 	udiv	r1, r2, r3
   ba58e:	fb03 2211 	mls	r2, r3, r1, r2
   ba592:	9200      	str	r2, [sp, #0]
   ba594:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   ba598:	4a0e      	ldr	r2, [pc, #56]	; (ba5d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   ba59a:	fb94 f3f3 	sdiv	r3, r4, r3
   ba59e:	2110      	movs	r1, #16
   ba5a0:	a803      	add	r0, sp, #12
   ba5a2:	f7fe fc2b 	bl	b8dfc <snprintf>
   ba5a6:	e7c4      	b.n	ba532 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   ba5a8:	2100      	movs	r1, #0
   ba5aa:	222e      	movs	r2, #46	; 0x2e
   ba5ac:	a808      	add	r0, sp, #32
   ba5ae:	9107      	str	r1, [sp, #28]
   ba5b0:	f001 f916 	bl	bb7e0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   ba5b4:	4643      	mov	r3, r8
   ba5b6:	aa14      	add	r2, sp, #80	; 0x50
   ba5b8:	2132      	movs	r1, #50	; 0x32
   ba5ba:	a807      	add	r0, sp, #28
   ba5bc:	f7fe fc56 	bl	b8e6c <strftime>
    return String(buf);
   ba5c0:	a907      	add	r1, sp, #28
   ba5c2:	4638      	mov	r0, r7
   ba5c4:	f7ff fd27 	bl	ba016 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba5c8:	4638      	mov	r0, r7
   ba5ca:	b024      	add	sp, #144	; 0x90
   ba5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba5d0:	000bca16 	.word	0x000bca16
   ba5d4:	000bca18 	.word	0x000bca18

000ba5d8 <_ZN9TimeClass6formatExPKc>:
{
   ba5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba5da:	b08d      	sub	sp, #52	; 0x34
   ba5dc:	e9cd 2300 	strd	r2, r3, [sp]
   ba5e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   ba5e2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   ba5e4:	b915      	cbnz	r5, ba5ec <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   ba5e6:	4b19      	ldr	r3, [pc, #100]	; (ba64c <_ZN9TimeClass6formatExPKc+0x74>)
   ba5e8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   ba5ea:	b12d      	cbz	r5, ba5f8 <_ZN9TimeClass6formatExPKc+0x20>
   ba5ec:	4b18      	ldr	r3, [pc, #96]	; (ba650 <_ZN9TimeClass6formatExPKc+0x78>)
   ba5ee:	4628      	mov	r0, r5
   ba5f0:	6819      	ldr	r1, [r3, #0]
   ba5f2:	f001 f92b 	bl	bb84c <strcmp>
   ba5f6:	b938      	cbnz	r0, ba608 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   ba5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
   ba5fc:	4620      	mov	r0, r4
   ba5fe:	f7ff ff45 	bl	ba48c <_ZN9TimeClass7timeStrEx>
}
   ba602:	4620      	mov	r0, r4
   ba604:	b00d      	add	sp, #52	; 0x34
   ba606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   ba608:	4e12      	ldr	r6, [pc, #72]	; (ba654 <_ZN9TimeClass6formatExPKc+0x7c>)
   ba60a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   ba60c:	4f12      	ldr	r7, [pc, #72]	; (ba658 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   ba60e:	e9d6 3200 	ldrd	r3, r2, [r6]
   ba612:	185b      	adds	r3, r3, r1
   ba614:	9901      	ldr	r1, [sp, #4]
   ba616:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   ba61a:	e9d7 0100 	ldrd	r0, r1, [r7]
   ba61e:	181b      	adds	r3, r3, r0
   ba620:	eb42 0201 	adc.w	r2, r2, r1
   ba624:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   ba628:	2100      	movs	r1, #0
   ba62a:	2224      	movs	r2, #36	; 0x24
   ba62c:	a803      	add	r0, sp, #12
   ba62e:	f001 f8d7 	bl	bb7e0 <memset>
    localtime_r(&t, &calendar_time);
   ba632:	a903      	add	r1, sp, #12
   ba634:	4668      	mov	r0, sp
   ba636:	f7fe fc21 	bl	b8e7c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   ba63a:	6832      	ldr	r2, [r6, #0]
   ba63c:	683b      	ldr	r3, [r7, #0]
   ba63e:	a903      	add	r1, sp, #12
   ba640:	4413      	add	r3, r2
   ba642:	4620      	mov	r0, r4
   ba644:	462a      	mov	r2, r5
   ba646:	f7ff ff5d 	bl	ba504 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   ba64a:	e7da      	b.n	ba602 <_ZN9TimeClass6formatExPKc+0x2a>
   ba64c:	2003e69c 	.word	0x2003e69c
   ba650:	2003e37c 	.word	0x2003e37c
   ba654:	2003e6d0 	.word	0x2003e6d0
   ba658:	2003e6c8 	.word	0x2003e6c8

000ba65c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   ba65c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba65e:	2000      	movs	r0, #0
   ba660:	f7fe f87a 	bl	b8758 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba664:	4604      	mov	r4, r0
   ba666:	b9a0      	cbnz	r0, ba692 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba668:	f7fe fa58 	bl	b8b1c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba66c:	2801      	cmp	r0, #1
   ba66e:	d110      	bne.n	ba692 <_ZN9TimeClass7isValidEv+0x36>
   ba670:	4620      	mov	r0, r4
   ba672:	f7fe fa93 	bl	b8b9c <system_thread_get_state>
   ba676:	b960      	cbnz	r0, ba692 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba678:	f7ff fee8 	bl	ba44c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba67c:	b910      	cbnz	r0, ba684 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba67e:	f7fe fad5 	bl	b8c2c <spark_process>
        while (_while() && !_condition()) {
   ba682:	e7f9      	b.n	ba678 <_ZN9TimeClass7isValidEv+0x1c>
   ba684:	f7ff fee2 	bl	ba44c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba68c:	2000      	movs	r0, #0
   ba68e:	f7fe b863 	b.w	b8758 <hal_rtc_time_is_valid>
}
   ba692:	4620      	mov	r0, r4
   ba694:	bd10      	pop	{r4, pc}

000ba696 <_ZN9TimeClass3nowEv>:
{
   ba696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba698:	f7ff ffe0 	bl	ba65c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba69c:	2210      	movs	r2, #16
   ba69e:	2100      	movs	r1, #0
   ba6a0:	4668      	mov	r0, sp
   ba6a2:	f001 f89d 	bl	bb7e0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba6a6:	2100      	movs	r1, #0
   ba6a8:	4668      	mov	r0, sp
   ba6aa:	f7fe f865 	bl	b8778 <hal_rtc_get_time>
}
   ba6ae:	9800      	ldr	r0, [sp, #0]
   ba6b0:	b005      	add	sp, #20
   ba6b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba6b8 <_ZN9TimeClass4hourEv>:
{
   ba6b8:	b508      	push	{r3, lr}
	return hour(now());
   ba6ba:	f7ff ffec 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6be:	17c1      	asrs	r1, r0, #31
   ba6c0:	f7ff fe8e 	bl	ba3e0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba6c4:	4b01      	ldr	r3, [pc, #4]	; (ba6cc <_ZN9TimeClass4hourEv+0x14>)
   ba6c6:	6898      	ldr	r0, [r3, #8]
   ba6c8:	bd08      	pop	{r3, pc}
   ba6ca:	bf00      	nop
   ba6cc:	2003e6a0 	.word	0x2003e6a0

000ba6d0 <_ZN9TimeClass4yearEv>:
{
   ba6d0:	b508      	push	{r3, lr}
	return year(now());
   ba6d2:	f7ff ffe0 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6d6:	17c1      	asrs	r1, r0, #31
   ba6d8:	f7ff fe82 	bl	ba3e0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba6dc:	4b01      	ldr	r3, [pc, #4]	; (ba6e4 <_ZN9TimeClass4yearEv+0x14>)
   ba6de:	6958      	ldr	r0, [r3, #20]
   ba6e0:	bd08      	pop	{r3, pc}
   ba6e2:	bf00      	nop
   ba6e4:	2003e6a0 	.word	0x2003e6a0

000ba6e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba6e8:	4b02      	ldr	r3, [pc, #8]	; (ba6f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba6ea:	681a      	ldr	r2, [r3, #0]
   ba6ec:	4b02      	ldr	r3, [pc, #8]	; (ba6f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba6ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba6f0:	4770      	bx	lr
   ba6f2:	bf00      	nop
   ba6f4:	2003e37c 	.word	0x2003e37c
   ba6f8:	2003e69c 	.word	0x2003e69c

000ba6fc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba6fc:	4770      	bx	lr

000ba6fe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba6fe:	7441      	strb	r1, [r0, #17]
}
   ba700:	4770      	bx	lr

000ba702 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba702:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba704:	7c00      	ldrb	r0, [r0, #16]
   ba706:	f7fe f9a7 	bl	b8a58 <hal_usart_available_data_for_write>
}
   ba70a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba70e:	bd08      	pop	{r3, pc}

000ba710 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba710:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba712:	7c00      	ldrb	r0, [r0, #16]
   ba714:	f7fe f978 	bl	b8a08 <hal_usart_available>
}
   ba718:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba71c:	bd08      	pop	{r3, pc}

000ba71e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba71e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba720:	7c00      	ldrb	r0, [r0, #16]
   ba722:	f7fe f981 	bl	b8a28 <hal_usart_peek>
}
   ba726:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba72a:	bd08      	pop	{r3, pc}

000ba72c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba72c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba72e:	7c00      	ldrb	r0, [r0, #16]
   ba730:	f7fe f972 	bl	b8a18 <hal_usart_read>
}
   ba734:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba738:	bd08      	pop	{r3, pc}

000ba73a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba73a:	7c00      	ldrb	r0, [r0, #16]
   ba73c:	f7fe b97c 	b.w	b8a38 <hal_usart_flush>

000ba740 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba740:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba742:	7c45      	ldrb	r5, [r0, #17]
{
   ba744:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba746:	b12d      	cbz	r5, ba754 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba748:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba74a:	b003      	add	sp, #12
   ba74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba750:	f7fe b952 	b.w	b89f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba754:	7c00      	ldrb	r0, [r0, #16]
   ba756:	9101      	str	r1, [sp, #4]
   ba758:	f7fe f97e 	bl	b8a58 <hal_usart_available_data_for_write>
   ba75c:	2800      	cmp	r0, #0
   ba75e:	9901      	ldr	r1, [sp, #4]
   ba760:	dcf2      	bgt.n	ba748 <_ZN11USARTSerial5writeEh+0x8>
}
   ba762:	4628      	mov	r0, r5
   ba764:	b003      	add	sp, #12
   ba766:	bd30      	pop	{r4, r5, pc}

000ba768 <_ZN11USARTSerialD0Ev>:
   ba768:	b510      	push	{r4, lr}
   ba76a:	2114      	movs	r1, #20
   ba76c:	4604      	mov	r4, r0
   ba76e:	f7f9 fc96 	bl	b409e <_ZdlPvj>
   ba772:	4620      	mov	r0, r4
   ba774:	bd10      	pop	{r4, pc}
	...

000ba778 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba778:	b510      	push	{r4, lr}
   ba77a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba77e:	4604      	mov	r4, r0
   ba780:	4608      	mov	r0, r1
   ba782:	4611      	mov	r1, r2
   ba784:	2200      	movs	r2, #0
   ba786:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba78a:	4b04      	ldr	r3, [pc, #16]	; (ba79c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba78c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba78e:	2301      	movs	r3, #1
  _serial = serial;
   ba790:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba792:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba794:	f7fe f968 	bl	b8a68 <hal_usart_init_ex>
}
   ba798:	4620      	mov	r0, r4
   ba79a:	bd10      	pop	{r4, pc}
   ba79c:	000bca48 	.word	0x000bca48

000ba7a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba7a0:	7441      	strb	r1, [r0, #17]
}
   ba7a2:	4770      	bx	lr

000ba7a4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba7a4:	4770      	bx	lr

000ba7a6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba7a6:	4770      	bx	lr

000ba7a8 <_ZN9USBSerial4readEv>:
{
   ba7a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba7aa:	2100      	movs	r1, #0
   ba7ac:	7c00      	ldrb	r0, [r0, #16]
   ba7ae:	f7fe f97b 	bl	b8aa8 <HAL_USB_USART_Receive_Data>
}
   ba7b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba7b6:	bd08      	pop	{r3, pc}

000ba7b8 <_ZN9USBSerial4peekEv>:
{
   ba7b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba7ba:	2101      	movs	r1, #1
   ba7bc:	7c00      	ldrb	r0, [r0, #16]
   ba7be:	f7fe f973 	bl	b8aa8 <HAL_USB_USART_Receive_Data>
}
   ba7c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba7c6:	bd08      	pop	{r3, pc}

000ba7c8 <_ZN9USBSerial17availableForWriteEv>:
{
   ba7c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba7ca:	7c00      	ldrb	r0, [r0, #16]
   ba7cc:	f7fe f964 	bl	b8a98 <HAL_USB_USART_Available_Data_For_Write>
}
   ba7d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba7d4:	bd08      	pop	{r3, pc}

000ba7d6 <_ZN9USBSerial9availableEv>:
{
   ba7d6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba7d8:	7c00      	ldrb	r0, [r0, #16]
   ba7da:	f7fe f955 	bl	b8a88 <HAL_USB_USART_Available_Data>
}
   ba7de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba7e2:	bd08      	pop	{r3, pc}

000ba7e4 <_ZN9USBSerial5writeEh>:
{
   ba7e4:	b513      	push	{r0, r1, r4, lr}
   ba7e6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba7e8:	7c00      	ldrb	r0, [r0, #16]
{
   ba7ea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba7ec:	f7fe f954 	bl	b8a98 <HAL_USB_USART_Available_Data_For_Write>
   ba7f0:	2800      	cmp	r0, #0
   ba7f2:	9901      	ldr	r1, [sp, #4]
   ba7f4:	dc01      	bgt.n	ba7fa <_ZN9USBSerial5writeEh+0x16>
   ba7f6:	7c60      	ldrb	r0, [r4, #17]
   ba7f8:	b120      	cbz	r0, ba804 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba7fa:	7c20      	ldrb	r0, [r4, #16]
   ba7fc:	f7fe f95c 	bl	b8ab8 <HAL_USB_USART_Send_Data>
   ba800:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba804:	b002      	add	sp, #8
   ba806:	bd10      	pop	{r4, pc}

000ba808 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba808:	7c00      	ldrb	r0, [r0, #16]
   ba80a:	f7fe b95d 	b.w	b8ac8 <HAL_USB_USART_Flush_Data>

000ba80e <_ZN9USBSerialD0Ev>:
   ba80e:	b510      	push	{r4, lr}
   ba810:	2114      	movs	r1, #20
   ba812:	4604      	mov	r4, r0
   ba814:	f7f9 fc43 	bl	b409e <_ZdlPvj>
   ba818:	4620      	mov	r0, r4
   ba81a:	bd10      	pop	{r4, pc}

000ba81c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba81c:	b510      	push	{r4, lr}
   ba81e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba822:	4604      	mov	r4, r0
   ba824:	4608      	mov	r0, r1
   ba826:	2100      	movs	r1, #0
   ba828:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba82c:	4b04      	ldr	r3, [pc, #16]	; (ba840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba82e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba830:	2301      	movs	r3, #1
  _serial = serial;
   ba832:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba834:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba836:	4611      	mov	r1, r2
   ba838:	f7fe f91e 	bl	b8a78 <HAL_USB_USART_Init>
}
   ba83c:	4620      	mov	r0, r4
   ba83e:	bd10      	pop	{r4, pc}
   ba840:	000bca78 	.word	0x000bca78

000ba844 <_Z19acquireSerialBufferv>:
{
   ba844:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba846:	2214      	movs	r2, #20
{
   ba848:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba84a:	2100      	movs	r1, #0
   ba84c:	f000 ffc8 	bl	bb7e0 <memset>
}
   ba850:	4620      	mov	r0, r4
   ba852:	bd10      	pop	{r4, pc}

000ba854 <_Z16_fetch_usbserialv>:
{
   ba854:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba856:	4c0f      	ldr	r4, [pc, #60]	; (ba894 <_Z16_fetch_usbserialv+0x40>)
{
   ba858:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba85a:	a803      	add	r0, sp, #12
   ba85c:	f7ff fff2 	bl	ba844 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba860:	7821      	ldrb	r1, [r4, #0]
   ba862:	f3bf 8f5b 	dmb	ish
   ba866:	f011 0101 	ands.w	r1, r1, #1
   ba86a:	d10f      	bne.n	ba88c <_Z16_fetch_usbserialv+0x38>
   ba86c:	4620      	mov	r0, r4
   ba86e:	9101      	str	r1, [sp, #4]
   ba870:	f7f9 fc17 	bl	b40a2 <__cxa_guard_acquire>
   ba874:	9901      	ldr	r1, [sp, #4]
   ba876:	b148      	cbz	r0, ba88c <_Z16_fetch_usbserialv+0x38>
   ba878:	aa03      	add	r2, sp, #12
   ba87a:	4807      	ldr	r0, [pc, #28]	; (ba898 <_Z16_fetch_usbserialv+0x44>)
   ba87c:	f7ff ffce 	bl	ba81c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba880:	4620      	mov	r0, r4
   ba882:	f7f9 fc13 	bl	b40ac <__cxa_guard_release>
   ba886:	4805      	ldr	r0, [pc, #20]	; (ba89c <_Z16_fetch_usbserialv+0x48>)
   ba888:	f000 ff5a 	bl	bb740 <atexit>
	return _usbserial;
}
   ba88c:	4802      	ldr	r0, [pc, #8]	; (ba898 <_Z16_fetch_usbserialv+0x44>)
   ba88e:	b008      	add	sp, #32
   ba890:	bd10      	pop	{r4, pc}
   ba892:	bf00      	nop
   ba894:	2003e6e0 	.word	0x2003e6e0
   ba898:	2003e6e4 	.word	0x2003e6e4
   ba89c:	000ba7a5 	.word	0x000ba7a5

000ba8a0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba8a0:	b510      	push	{r4, lr}
   ba8a2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba8a4:	f001 f801 	bl	bb8aa <strlen>
   ba8a8:	3801      	subs	r0, #1
   ba8aa:	1823      	adds	r3, r4, r0
   ba8ac:	4620      	mov	r0, r4
	while(i<j){
   ba8ae:	4283      	cmp	r3, r0
   ba8b0:	d906      	bls.n	ba8c0 <_Z11str_reversePc+0x20>
		c = *i;
   ba8b2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba8b4:	7819      	ldrb	r1, [r3, #0]
   ba8b6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba8ba:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba8be:	e7f6      	b.n	ba8ae <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba8c0:	bd10      	pop	{r4, pc}

000ba8c2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba8c2:	b570      	push	{r4, r5, r6, lr}
   ba8c4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba8c6:	1e91      	subs	r1, r2, #2
   ba8c8:	2922      	cmp	r1, #34	; 0x22
   ba8ca:	d81d      	bhi.n	ba908 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba8cc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba8ce:	b930      	cbnz	r0, ba8de <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba8d0:	4423      	add	r3, r4
            *ptr++ = '0';
   ba8d2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba8d4:	429d      	cmp	r5, r3
   ba8d6:	d210      	bcs.n	ba8fa <ultoa+0x38>
            *ptr++ = '0';
   ba8d8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba8dc:	e7fa      	b.n	ba8d4 <ultoa+0x12>
            result.quot = a/radix;
   ba8de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba8e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba8e6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba8e8:	2809      	cmp	r0, #9
                *ptr += '0';
   ba8ea:	bf94      	ite	ls
   ba8ec:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba8ee:	3157      	addhi	r1, #87	; 0x57
   ba8f0:	b2c9      	uxtb	r1, r1
   ba8f2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba8f6:	4630      	mov	r0, r6
	while(a){
   ba8f8:	e7e9      	b.n	ba8ce <ultoa+0xc>

	*ptr = '\0';
   ba8fa:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba8fc:	4620      	mov	r0, r4
	*ptr = '\0';
   ba8fe:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba900:	f7ff ffce 	bl	ba8a0 <_Z11str_reversePc>
	return buffer;
   ba904:	4620      	mov	r0, r4
}
   ba906:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba908:	2000      	movs	r0, #0
   ba90a:	e7fc      	b.n	ba906 <ultoa+0x44>

000ba90c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba90c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba90e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba910:	460c      	mov	r4, r1
   ba912:	4615      	mov	r5, r2
	if(a<0){
   ba914:	da0e      	bge.n	ba934 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba91a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba91e:	bf14      	ite	ne
   ba920:	4258      	negne	r0, r3
   ba922:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba924:	2301      	movs	r3, #1
		*buffer = '-';
   ba926:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba928:	462a      	mov	r2, r5
   ba92a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba92c:	f7ff ffc9 	bl	ba8c2 <ultoa>
	}
	return buffer;
}
   ba930:	4620      	mov	r0, r4
   ba932:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba934:	2301      	movs	r3, #1
   ba936:	e7f9      	b.n	ba92c <itoa+0x20>

000ba938 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba938:	4b01      	ldr	r3, [pc, #4]	; (ba940 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba93a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba93c:	4770      	bx	lr
   ba93e:	bf00      	nop
   ba940:	2003e380 	.word	0x2003e380

000ba944 <serialEventRun>:
{
   ba944:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba946:	4b0b      	ldr	r3, [pc, #44]	; (ba974 <serialEventRun+0x30>)
   ba948:	b143      	cbz	r3, ba95c <serialEventRun+0x18>
   ba94a:	f7ff ff83 	bl	ba854 <_Z16_fetch_usbserialv>
   ba94e:	6803      	ldr	r3, [r0, #0]
   ba950:	691b      	ldr	r3, [r3, #16]
   ba952:	4798      	blx	r3
   ba954:	2800      	cmp	r0, #0
   ba956:	dd01      	ble.n	ba95c <serialEventRun+0x18>
        serialEvent();
   ba958:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba95c:	4b06      	ldr	r3, [pc, #24]	; (ba978 <serialEventRun+0x34>)
   ba95e:	b143      	cbz	r3, ba972 <serialEventRun+0x2e>
   ba960:	f000 f992 	bl	bac88 <_Z22__fetch_global_Serial1v>
   ba964:	6803      	ldr	r3, [r0, #0]
   ba966:	691b      	ldr	r3, [r3, #16]
   ba968:	4798      	blx	r3
   ba96a:	2800      	cmp	r0, #0
   ba96c:	dd01      	ble.n	ba972 <serialEventRun+0x2e>
        serialEvent1();
   ba96e:	f3af 8000 	nop.w
}
   ba972:	bd08      	pop	{r3, pc}
	...

000ba97c <_post_loop>:
{
   ba97c:	b508      	push	{r3, lr}
	serialEventRun();
   ba97e:	f7ff ffe1 	bl	ba944 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba982:	f7fd fee1 	bl	b8748 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba986:	4b01      	ldr	r3, [pc, #4]	; (ba98c <_post_loop+0x10>)
   ba988:	6018      	str	r0, [r3, #0]
}
   ba98a:	bd08      	pop	{r3, pc}
   ba98c:	2003e70c 	.word	0x2003e70c

000ba990 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba990:	4805      	ldr	r0, [pc, #20]	; (ba9a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba992:	4a06      	ldr	r2, [pc, #24]	; (ba9ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba994:	4906      	ldr	r1, [pc, #24]	; (ba9b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba996:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba998:	1a12      	subs	r2, r2, r0
   ba99a:	f000 fef9 	bl	bb790 <memcpy>
    __backup_sram_signature = signature;
   ba99e:	4b05      	ldr	r3, [pc, #20]	; (ba9b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba9a0:	4a05      	ldr	r2, [pc, #20]	; (ba9b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba9a2:	601a      	str	r2, [r3, #0]
}
   ba9a4:	bd08      	pop	{r3, pc}
   ba9a6:	bf00      	nop
   ba9a8:	2003f400 	.word	0x2003f400
   ba9ac:	2003f404 	.word	0x2003f404
   ba9b0:	000bcd24 	.word	0x000bcd24
   ba9b4:	2003f400 	.word	0x2003f400
   ba9b8:	9a271c1e 	.word	0x9a271c1e

000ba9bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba9bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba9be:	2300      	movs	r3, #0
   ba9c0:	9300      	str	r3, [sp, #0]
   ba9c2:	461a      	mov	r2, r3
   ba9c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba9c8:	f7fe f902 	bl	b8bd0 <system_ctrl_set_result>
}
   ba9cc:	b003      	add	sp, #12
   ba9ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba9d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba9d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba9d6:	8843      	ldrh	r3, [r0, #2]
   ba9d8:	2b0a      	cmp	r3, #10
   ba9da:	d008      	beq.n	ba9ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba9dc:	2b50      	cmp	r3, #80	; 0x50
   ba9de:	d10b      	bne.n	ba9f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba9e0:	4b09      	ldr	r3, [pc, #36]	; (baa08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba9e2:	681b      	ldr	r3, [r3, #0]
   ba9e4:	b14b      	cbz	r3, ba9fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba9e6:	b003      	add	sp, #12
   ba9e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba9ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba9ee:	f7ff ffe5 	bl	ba9bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba9f2:	b003      	add	sp, #12
   ba9f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba9f8:	2300      	movs	r3, #0
   ba9fa:	9300      	str	r3, [sp, #0]
   ba9fc:	461a      	mov	r2, r3
   ba9fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   baa02:	f7fe f8e5 	bl	b8bd0 <system_ctrl_set_result>
}
   baa06:	e7f4      	b.n	ba9f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   baa08:	2003e6fc 	.word	0x2003e6fc

000baa0c <module_user_init_hook>:
{
   baa0c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   baa0e:	4812      	ldr	r0, [pc, #72]	; (baa58 <module_user_init_hook+0x4c>)
   baa10:	2100      	movs	r1, #0
   baa12:	f7fe fa23 	bl	b8e5c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   baa16:	4b11      	ldr	r3, [pc, #68]	; (baa5c <module_user_init_hook+0x50>)
   baa18:	681a      	ldr	r2, [r3, #0]
   baa1a:	4b11      	ldr	r3, [pc, #68]	; (baa60 <module_user_init_hook+0x54>)
   baa1c:	429a      	cmp	r2, r3
   baa1e:	4b11      	ldr	r3, [pc, #68]	; (baa64 <module_user_init_hook+0x58>)
   baa20:	bf0c      	ite	eq
   baa22:	2201      	moveq	r2, #1
   baa24:	2200      	movne	r2, #0
   baa26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   baa28:	d001      	beq.n	baa2e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   baa2a:	f7ff ffb1 	bl	ba990 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   baa2e:	f7fd fe73 	bl	b8718 <HAL_RNG_GetRandomNumber>
   baa32:	4604      	mov	r4, r0
    srand(seed);
   baa34:	f000 fedc 	bl	bb7f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   baa38:	4b0b      	ldr	r3, [pc, #44]	; (baa68 <module_user_init_hook+0x5c>)
   baa3a:	b113      	cbz	r3, baa42 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   baa3c:	4620      	mov	r0, r4
   baa3e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   baa42:	2100      	movs	r1, #0
   baa44:	4808      	ldr	r0, [pc, #32]	; (baa68 <module_user_init_hook+0x5c>)
   baa46:	f7fe f941 	bl	b8ccc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   baa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   baa4e:	4807      	ldr	r0, [pc, #28]	; (baa6c <module_user_init_hook+0x60>)
   baa50:	2100      	movs	r1, #0
   baa52:	f7fe b8b3 	b.w	b8bbc <system_ctrl_set_app_request_handler>
   baa56:	bf00      	nop
   baa58:	000ba939 	.word	0x000ba939
   baa5c:	2003f400 	.word	0x2003f400
   baa60:	9a271c1e 	.word	0x9a271c1e
   baa64:	2003e6f8 	.word	0x2003e6f8
   baa68:	00000000 	.word	0x00000000
   baa6c:	000ba9d5 	.word	0x000ba9d5

000baa70 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   baa70:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   baa72:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   baa74:	d902      	bls.n	baa7c <pinAvailable+0xc>
    return false;
   baa76:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   baa78:	b002      	add	sp, #8
   baa7a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   baa7c:	f1a0 030b 	sub.w	r3, r0, #11
   baa80:	2b02      	cmp	r3, #2
   baa82:	d81a      	bhi.n	baaba <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   baa84:	4c17      	ldr	r4, [pc, #92]	; (baae4 <pinAvailable+0x74>)
   baa86:	7821      	ldrb	r1, [r4, #0]
   baa88:	f3bf 8f5b 	dmb	ish
   baa8c:	f011 0101 	ands.w	r1, r1, #1
   baa90:	d10b      	bne.n	baaaa <pinAvailable+0x3a>
   baa92:	4620      	mov	r0, r4
   baa94:	9101      	str	r1, [sp, #4]
   baa96:	f7f9 fb04 	bl	b40a2 <__cxa_guard_acquire>
   baa9a:	9901      	ldr	r1, [sp, #4]
   baa9c:	b128      	cbz	r0, baaaa <pinAvailable+0x3a>
   baa9e:	4812      	ldr	r0, [pc, #72]	; (baae8 <pinAvailable+0x78>)
   baaa0:	f7ff fa64 	bl	b9f6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   baaa4:	4620      	mov	r0, r4
   baaa6:	f7f9 fb01 	bl	b40ac <__cxa_guard_release>
   baaaa:	4b0f      	ldr	r3, [pc, #60]	; (baae8 <pinAvailable+0x78>)
   baaac:	7818      	ldrb	r0, [r3, #0]
   baaae:	f7fd ff3b 	bl	b8928 <hal_spi_is_enabled>
   baab2:	2800      	cmp	r0, #0
   baab4:	d1df      	bne.n	baa76 <pinAvailable+0x6>
  return true; // 'pin' is available
   baab6:	2001      	movs	r0, #1
   baab8:	e7de      	b.n	baa78 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   baaba:	2801      	cmp	r0, #1
   baabc:	d809      	bhi.n	baad2 <pinAvailable+0x62>
   baabe:	f000 f87f 	bl	babc0 <_Z19__fetch_global_Wirev>
   baac2:	2100      	movs	r1, #0
   baac4:	7c00      	ldrb	r0, [r0, #16]
   baac6:	f7fd fee7 	bl	b8898 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   baaca:	f080 0001 	eor.w	r0, r0, #1
   baace:	b2c0      	uxtb	r0, r0
   baad0:	e7d2      	b.n	baa78 <pinAvailable+0x8>
   baad2:	3809      	subs	r0, #9
   baad4:	2801      	cmp	r0, #1
   baad6:	d8ee      	bhi.n	baab6 <pinAvailable+0x46>
   baad8:	f000 f8d6 	bl	bac88 <_Z22__fetch_global_Serial1v>
   baadc:	7c00      	ldrb	r0, [r0, #16]
   baade:	f7fd ffb3 	bl	b8a48 <hal_usart_is_enabled>
   baae2:	e7f2      	b.n	baaca <pinAvailable+0x5a>
   baae4:	2003e700 	.word	0x2003e700
   baae8:	2003e704 	.word	0x2003e704

000baaec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   baaec:	2823      	cmp	r0, #35	; 0x23
{
   baaee:	b538      	push	{r3, r4, r5, lr}
   baaf0:	4604      	mov	r4, r0
   baaf2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   baaf4:	d80a      	bhi.n	bab0c <pinMode+0x20>
   baaf6:	29ff      	cmp	r1, #255	; 0xff
   baaf8:	d008      	beq.n	bab0c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   baafa:	f7ff ffb9 	bl	baa70 <pinAvailable>
   baafe:	b128      	cbz	r0, bab0c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bab00:	4629      	mov	r1, r5
   bab02:	4620      	mov	r0, r4
}
   bab04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bab08:	f7fd be56 	b.w	b87b8 <HAL_Pin_Mode>
}
   bab0c:	bd38      	pop	{r3, r4, r5, pc}

000bab0e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bab0e:	b510      	push	{r4, lr}
   bab10:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bab12:	f7fd fe59 	bl	b87c8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bab16:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bab18:	b2db      	uxtb	r3, r3
   bab1a:	2b01      	cmp	r3, #1
   bab1c:	d908      	bls.n	bab30 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bab1e:	4620      	mov	r0, r4
   bab20:	f7ff ffa6 	bl	baa70 <pinAvailable>
   bab24:	b120      	cbz	r0, bab30 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bab26:	4620      	mov	r0, r4
}
   bab28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bab2c:	f7fd be54 	b.w	b87d8 <HAL_GPIO_Read>
}
   bab30:	2000      	movs	r0, #0
   bab32:	bd10      	pop	{r4, pc}

000bab34 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bab34:	280d      	cmp	r0, #13
{
   bab36:	b510      	push	{r4, lr}
   bab38:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bab3a:	bf9c      	itt	ls
   bab3c:	340e      	addls	r4, #14
   bab3e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bab40:	4620      	mov	r0, r4
   bab42:	f7ff ff95 	bl	baa70 <pinAvailable>
   bab46:	b150      	cbz	r0, bab5e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bab48:	2103      	movs	r1, #3
   bab4a:	4620      	mov	r0, r4
   bab4c:	f7fd fe2c 	bl	b87a8 <HAL_Validate_Pin_Function>
   bab50:	2803      	cmp	r0, #3
   bab52:	d104      	bne.n	bab5e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bab54:	4620      	mov	r0, r4
}
   bab56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bab5a:	f7fd be55 	b.w	b8808 <hal_adc_read>
}
   bab5e:	2000      	movs	r0, #0
   bab60:	bd10      	pop	{r4, pc}

000bab62 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bab62:	4770      	bx	lr

000bab64 <__tcf_1>:
   bab64:	4770      	bx	lr
	...

000bab68 <_Z17acquireWireBufferv>:
{
   bab68:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bab6a:	2520      	movs	r5, #32
   bab6c:	2314      	movs	r3, #20
{
   bab6e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bab70:	6003      	str	r3, [r0, #0]
   bab72:	6085      	str	r5, [r0, #8]
   bab74:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bab76:	4906      	ldr	r1, [pc, #24]	; (bab90 <_Z17acquireWireBufferv+0x28>)
   bab78:	4628      	mov	r0, r5
   bab7a:	f000 f8ab 	bl	bacd4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bab7e:	4904      	ldr	r1, [pc, #16]	; (bab90 <_Z17acquireWireBufferv+0x28>)
	};
   bab80:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bab82:	4628      	mov	r0, r5
   bab84:	f000 f8a6 	bl	bacd4 <_ZnajRKSt9nothrow_t>
	};
   bab88:	60e0      	str	r0, [r4, #12]
}
   bab8a:	4620      	mov	r0, r4
   bab8c:	bd38      	pop	{r3, r4, r5, pc}
   bab8e:	bf00      	nop
   bab90:	000bcaa0 	.word	0x000bcaa0

000bab94 <_Z18acquireWire1Bufferv>:
   bab94:	b538      	push	{r3, r4, r5, lr}
   bab96:	2520      	movs	r5, #32
   bab98:	2314      	movs	r3, #20
   bab9a:	4604      	mov	r4, r0
   bab9c:	6003      	str	r3, [r0, #0]
   bab9e:	6085      	str	r5, [r0, #8]
   baba0:	6105      	str	r5, [r0, #16]
   baba2:	4906      	ldr	r1, [pc, #24]	; (babbc <_Z18acquireWire1Bufferv+0x28>)
   baba4:	4628      	mov	r0, r5
   baba6:	f000 f895 	bl	bacd4 <_ZnajRKSt9nothrow_t>
   babaa:	4904      	ldr	r1, [pc, #16]	; (babbc <_Z18acquireWire1Bufferv+0x28>)
   babac:	6060      	str	r0, [r4, #4]
   babae:	4628      	mov	r0, r5
   babb0:	f000 f890 	bl	bacd4 <_ZnajRKSt9nothrow_t>
   babb4:	60e0      	str	r0, [r4, #12]
   babb6:	4620      	mov	r0, r4
   babb8:	bd38      	pop	{r3, r4, r5, pc}
   babba:	bf00      	nop
   babbc:	000bcaa0 	.word	0x000bcaa0

000babc0 <_Z19__fetch_global_Wirev>:
{
   babc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   babc2:	4d0e      	ldr	r5, [pc, #56]	; (babfc <_Z19__fetch_global_Wirev+0x3c>)
   babc4:	7829      	ldrb	r1, [r5, #0]
   babc6:	f3bf 8f5b 	dmb	ish
   babca:	f011 0401 	ands.w	r4, r1, #1
{
   babce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   babd0:	d111      	bne.n	babf6 <_Z19__fetch_global_Wirev+0x36>
   babd2:	4628      	mov	r0, r5
   babd4:	f7f9 fa65 	bl	b40a2 <__cxa_guard_acquire>
   babd8:	b168      	cbz	r0, babf6 <_Z19__fetch_global_Wirev+0x36>
   babda:	a801      	add	r0, sp, #4
   babdc:	f7ff ffc4 	bl	bab68 <_Z17acquireWireBufferv>
   babe0:	aa01      	add	r2, sp, #4
   babe2:	4621      	mov	r1, r4
   babe4:	4806      	ldr	r0, [pc, #24]	; (bac00 <_Z19__fetch_global_Wirev+0x40>)
   babe6:	f7fe febf 	bl	b9968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   babea:	4628      	mov	r0, r5
   babec:	f7f9 fa5e 	bl	b40ac <__cxa_guard_release>
   babf0:	4804      	ldr	r0, [pc, #16]	; (bac04 <_Z19__fetch_global_Wirev+0x44>)
   babf2:	f000 fda5 	bl	bb740 <atexit>
	return wire;
}
   babf6:	4802      	ldr	r0, [pc, #8]	; (bac00 <_Z19__fetch_global_Wirev+0x40>)
   babf8:	b007      	add	sp, #28
   babfa:	bd30      	pop	{r4, r5, pc}
   babfc:	2003e710 	.word	0x2003e710
   bac00:	2003e718 	.word	0x2003e718
   bac04:	000bab63 	.word	0x000bab63

000bac08 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bac08:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bac0a:	4c0e      	ldr	r4, [pc, #56]	; (bac44 <_Z20__fetch_global_Wire1v+0x3c>)
   bac0c:	7823      	ldrb	r3, [r4, #0]
   bac0e:	f3bf 8f5b 	dmb	ish
   bac12:	07db      	lsls	r3, r3, #31
{
   bac14:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bac16:	d411      	bmi.n	bac3c <_Z20__fetch_global_Wire1v+0x34>
   bac18:	4620      	mov	r0, r4
   bac1a:	f7f9 fa42 	bl	b40a2 <__cxa_guard_acquire>
   bac1e:	b168      	cbz	r0, bac3c <_Z20__fetch_global_Wire1v+0x34>
   bac20:	a801      	add	r0, sp, #4
   bac22:	f7ff ffb7 	bl	bab94 <_Z18acquireWire1Bufferv>
   bac26:	aa01      	add	r2, sp, #4
   bac28:	2101      	movs	r1, #1
   bac2a:	4807      	ldr	r0, [pc, #28]	; (bac48 <_Z20__fetch_global_Wire1v+0x40>)
   bac2c:	f7fe fe9c 	bl	b9968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bac30:	4620      	mov	r0, r4
   bac32:	f7f9 fa3b 	bl	b40ac <__cxa_guard_release>
   bac36:	4805      	ldr	r0, [pc, #20]	; (bac4c <_Z20__fetch_global_Wire1v+0x44>)
   bac38:	f000 fd82 	bl	bb740 <atexit>
	return wire;
}
   bac3c:	4802      	ldr	r0, [pc, #8]	; (bac48 <_Z20__fetch_global_Wire1v+0x40>)
   bac3e:	b006      	add	sp, #24
   bac40:	bd10      	pop	{r4, pc}
   bac42:	bf00      	nop
   bac44:	2003e714 	.word	0x2003e714
   bac48:	2003e72c 	.word	0x2003e72c
   bac4c:	000bab65 	.word	0x000bab65

000bac50 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bac50:	4770      	bx	lr
	...

000bac54 <_Z20acquireSerial1Bufferv>:
{
   bac54:	b538      	push	{r3, r4, r5, lr}
   bac56:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bac58:	2514      	movs	r5, #20
   bac5a:	462a      	mov	r2, r5
   bac5c:	2100      	movs	r1, #0
   bac5e:	f000 fdbf 	bl	bb7e0 <memset>
   bac62:	8025      	strh	r5, [r4, #0]
   bac64:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bac66:	4907      	ldr	r1, [pc, #28]	; (bac84 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bac68:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bac6a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bac6c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bac6e:	f000 f831 	bl	bacd4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bac72:	4904      	ldr	r1, [pc, #16]	; (bac84 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bac74:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bac76:	4628      	mov	r0, r5
   bac78:	f000 f82c 	bl	bacd4 <_ZnajRKSt9nothrow_t>
    };
   bac7c:	60e0      	str	r0, [r4, #12]
}
   bac7e:	4620      	mov	r0, r4
   bac80:	bd38      	pop	{r3, r4, r5, pc}
   bac82:	bf00      	nop
   bac84:	000bcaa0 	.word	0x000bcaa0

000bac88 <_Z22__fetch_global_Serial1v>:
{
   bac88:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bac8a:	4d0e      	ldr	r5, [pc, #56]	; (bacc4 <_Z22__fetch_global_Serial1v+0x3c>)
   bac8c:	7829      	ldrb	r1, [r5, #0]
   bac8e:	f3bf 8f5b 	dmb	ish
   bac92:	f011 0401 	ands.w	r4, r1, #1
{
   bac96:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bac98:	d111      	bne.n	bacbe <_Z22__fetch_global_Serial1v+0x36>
   bac9a:	4628      	mov	r0, r5
   bac9c:	f7f9 fa01 	bl	b40a2 <__cxa_guard_acquire>
   baca0:	b168      	cbz	r0, bacbe <_Z22__fetch_global_Serial1v+0x36>
   baca2:	a801      	add	r0, sp, #4
   baca4:	f7ff ffd6 	bl	bac54 <_Z20acquireSerial1Bufferv>
   baca8:	aa01      	add	r2, sp, #4
   bacaa:	4621      	mov	r1, r4
   bacac:	4806      	ldr	r0, [pc, #24]	; (bacc8 <_Z22__fetch_global_Serial1v+0x40>)
   bacae:	f7ff fd63 	bl	ba778 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bacb2:	4628      	mov	r0, r5
   bacb4:	f7f9 f9fa 	bl	b40ac <__cxa_guard_release>
   bacb8:	4804      	ldr	r0, [pc, #16]	; (baccc <_Z22__fetch_global_Serial1v+0x44>)
   bacba:	f000 fd41 	bl	bb740 <atexit>
    return serial1;
}
   bacbe:	4802      	ldr	r0, [pc, #8]	; (bacc8 <_Z22__fetch_global_Serial1v+0x40>)
   bacc0:	b007      	add	sp, #28
   bacc2:	bd30      	pop	{r4, r5, pc}
   bacc4:	2003e740 	.word	0x2003e740
   bacc8:	2003e744 	.word	0x2003e744
   baccc:	000bac51 	.word	0x000bac51

000bacd0 <_ZnwjRKSt9nothrow_t>:
   bacd0:	f7f9 b9e1 	b.w	b4096 <_Znwj>

000bacd4 <_ZnajRKSt9nothrow_t>:
   bacd4:	f7f9 b9e1 	b.w	b409a <_Znaj>

000bacd8 <_ZSt17__throw_bad_allocv>:
   bacd8:	b508      	push	{r3, lr}
   bacda:	f7fe f89f 	bl	b8e1c <abort>

000bacde <_ZSt20__throw_length_errorPKc>:
   bacde:	b508      	push	{r3, lr}
   bace0:	f7fe f89c 	bl	b8e1c <abort>

000bace4 <_ZSt25__throw_bad_function_callv>:
   bace4:	b508      	push	{r3, lr}
   bace6:	f7fe f899 	bl	b8e1c <abort>
	...

000bacec <__aeabi_drsub>:
   bacec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bacf0:	e002      	b.n	bacf8 <__adddf3>
   bacf2:	bf00      	nop

000bacf4 <__aeabi_dsub>:
   bacf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bacf8 <__adddf3>:
   bacf8:	b530      	push	{r4, r5, lr}
   bacfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bacfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bad02:	ea94 0f05 	teq	r4, r5
   bad06:	bf08      	it	eq
   bad08:	ea90 0f02 	teqeq	r0, r2
   bad0c:	bf1f      	itttt	ne
   bad0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bad12:	ea55 0c02 	orrsne.w	ip, r5, r2
   bad16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bad1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bad1e:	f000 80e2 	beq.w	baee6 <__adddf3+0x1ee>
   bad22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bad26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bad2a:	bfb8      	it	lt
   bad2c:	426d      	neglt	r5, r5
   bad2e:	dd0c      	ble.n	bad4a <__adddf3+0x52>
   bad30:	442c      	add	r4, r5
   bad32:	ea80 0202 	eor.w	r2, r0, r2
   bad36:	ea81 0303 	eor.w	r3, r1, r3
   bad3a:	ea82 0000 	eor.w	r0, r2, r0
   bad3e:	ea83 0101 	eor.w	r1, r3, r1
   bad42:	ea80 0202 	eor.w	r2, r0, r2
   bad46:	ea81 0303 	eor.w	r3, r1, r3
   bad4a:	2d36      	cmp	r5, #54	; 0x36
   bad4c:	bf88      	it	hi
   bad4e:	bd30      	pophi	{r4, r5, pc}
   bad50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bad54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bad5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bad60:	d002      	beq.n	bad68 <__adddf3+0x70>
   bad62:	4240      	negs	r0, r0
   bad64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bad68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bad6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bad70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bad74:	d002      	beq.n	bad7c <__adddf3+0x84>
   bad76:	4252      	negs	r2, r2
   bad78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bad7c:	ea94 0f05 	teq	r4, r5
   bad80:	f000 80a7 	beq.w	baed2 <__adddf3+0x1da>
   bad84:	f1a4 0401 	sub.w	r4, r4, #1
   bad88:	f1d5 0e20 	rsbs	lr, r5, #32
   bad8c:	db0d      	blt.n	badaa <__adddf3+0xb2>
   bad8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bad92:	fa22 f205 	lsr.w	r2, r2, r5
   bad96:	1880      	adds	r0, r0, r2
   bad98:	f141 0100 	adc.w	r1, r1, #0
   bad9c:	fa03 f20e 	lsl.w	r2, r3, lr
   bada0:	1880      	adds	r0, r0, r2
   bada2:	fa43 f305 	asr.w	r3, r3, r5
   bada6:	4159      	adcs	r1, r3
   bada8:	e00e      	b.n	badc8 <__adddf3+0xd0>
   badaa:	f1a5 0520 	sub.w	r5, r5, #32
   badae:	f10e 0e20 	add.w	lr, lr, #32
   badb2:	2a01      	cmp	r2, #1
   badb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   badb8:	bf28      	it	cs
   badba:	f04c 0c02 	orrcs.w	ip, ip, #2
   badbe:	fa43 f305 	asr.w	r3, r3, r5
   badc2:	18c0      	adds	r0, r0, r3
   badc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   badc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   badcc:	d507      	bpl.n	badde <__adddf3+0xe6>
   badce:	f04f 0e00 	mov.w	lr, #0
   badd2:	f1dc 0c00 	rsbs	ip, ip, #0
   badd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   badda:	eb6e 0101 	sbc.w	r1, lr, r1
   badde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bade2:	d31b      	bcc.n	bae1c <__adddf3+0x124>
   bade4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bade8:	d30c      	bcc.n	bae04 <__adddf3+0x10c>
   badea:	0849      	lsrs	r1, r1, #1
   badec:	ea5f 0030 	movs.w	r0, r0, rrx
   badf0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   badf4:	f104 0401 	add.w	r4, r4, #1
   badf8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   badfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bae00:	f080 809a 	bcs.w	baf38 <__adddf3+0x240>
   bae04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bae08:	bf08      	it	eq
   bae0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae0e:	f150 0000 	adcs.w	r0, r0, #0
   bae12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae16:	ea41 0105 	orr.w	r1, r1, r5
   bae1a:	bd30      	pop	{r4, r5, pc}
   bae1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bae20:	4140      	adcs	r0, r0
   bae22:	eb41 0101 	adc.w	r1, r1, r1
   bae26:	3c01      	subs	r4, #1
   bae28:	bf28      	it	cs
   bae2a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bae2e:	d2e9      	bcs.n	bae04 <__adddf3+0x10c>
   bae30:	f091 0f00 	teq	r1, #0
   bae34:	bf04      	itt	eq
   bae36:	4601      	moveq	r1, r0
   bae38:	2000      	moveq	r0, #0
   bae3a:	fab1 f381 	clz	r3, r1
   bae3e:	bf08      	it	eq
   bae40:	3320      	addeq	r3, #32
   bae42:	f1a3 030b 	sub.w	r3, r3, #11
   bae46:	f1b3 0220 	subs.w	r2, r3, #32
   bae4a:	da0c      	bge.n	bae66 <__adddf3+0x16e>
   bae4c:	320c      	adds	r2, #12
   bae4e:	dd08      	ble.n	bae62 <__adddf3+0x16a>
   bae50:	f102 0c14 	add.w	ip, r2, #20
   bae54:	f1c2 020c 	rsb	r2, r2, #12
   bae58:	fa01 f00c 	lsl.w	r0, r1, ip
   bae5c:	fa21 f102 	lsr.w	r1, r1, r2
   bae60:	e00c      	b.n	bae7c <__adddf3+0x184>
   bae62:	f102 0214 	add.w	r2, r2, #20
   bae66:	bfd8      	it	le
   bae68:	f1c2 0c20 	rsble	ip, r2, #32
   bae6c:	fa01 f102 	lsl.w	r1, r1, r2
   bae70:	fa20 fc0c 	lsr.w	ip, r0, ip
   bae74:	bfdc      	itt	le
   bae76:	ea41 010c 	orrle.w	r1, r1, ip
   bae7a:	4090      	lslle	r0, r2
   bae7c:	1ae4      	subs	r4, r4, r3
   bae7e:	bfa2      	ittt	ge
   bae80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bae84:	4329      	orrge	r1, r5
   bae86:	bd30      	popge	{r4, r5, pc}
   bae88:	ea6f 0404 	mvn.w	r4, r4
   bae8c:	3c1f      	subs	r4, #31
   bae8e:	da1c      	bge.n	baeca <__adddf3+0x1d2>
   bae90:	340c      	adds	r4, #12
   bae92:	dc0e      	bgt.n	baeb2 <__adddf3+0x1ba>
   bae94:	f104 0414 	add.w	r4, r4, #20
   bae98:	f1c4 0220 	rsb	r2, r4, #32
   bae9c:	fa20 f004 	lsr.w	r0, r0, r4
   baea0:	fa01 f302 	lsl.w	r3, r1, r2
   baea4:	ea40 0003 	orr.w	r0, r0, r3
   baea8:	fa21 f304 	lsr.w	r3, r1, r4
   baeac:	ea45 0103 	orr.w	r1, r5, r3
   baeb0:	bd30      	pop	{r4, r5, pc}
   baeb2:	f1c4 040c 	rsb	r4, r4, #12
   baeb6:	f1c4 0220 	rsb	r2, r4, #32
   baeba:	fa20 f002 	lsr.w	r0, r0, r2
   baebe:	fa01 f304 	lsl.w	r3, r1, r4
   baec2:	ea40 0003 	orr.w	r0, r0, r3
   baec6:	4629      	mov	r1, r5
   baec8:	bd30      	pop	{r4, r5, pc}
   baeca:	fa21 f004 	lsr.w	r0, r1, r4
   baece:	4629      	mov	r1, r5
   baed0:	bd30      	pop	{r4, r5, pc}
   baed2:	f094 0f00 	teq	r4, #0
   baed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   baeda:	bf06      	itte	eq
   baedc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   baee0:	3401      	addeq	r4, #1
   baee2:	3d01      	subne	r5, #1
   baee4:	e74e      	b.n	bad84 <__adddf3+0x8c>
   baee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baeea:	bf18      	it	ne
   baeec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baef0:	d029      	beq.n	baf46 <__adddf3+0x24e>
   baef2:	ea94 0f05 	teq	r4, r5
   baef6:	bf08      	it	eq
   baef8:	ea90 0f02 	teqeq	r0, r2
   baefc:	d005      	beq.n	baf0a <__adddf3+0x212>
   baefe:	ea54 0c00 	orrs.w	ip, r4, r0
   baf02:	bf04      	itt	eq
   baf04:	4619      	moveq	r1, r3
   baf06:	4610      	moveq	r0, r2
   baf08:	bd30      	pop	{r4, r5, pc}
   baf0a:	ea91 0f03 	teq	r1, r3
   baf0e:	bf1e      	ittt	ne
   baf10:	2100      	movne	r1, #0
   baf12:	2000      	movne	r0, #0
   baf14:	bd30      	popne	{r4, r5, pc}
   baf16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   baf1a:	d105      	bne.n	baf28 <__adddf3+0x230>
   baf1c:	0040      	lsls	r0, r0, #1
   baf1e:	4149      	adcs	r1, r1
   baf20:	bf28      	it	cs
   baf22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   baf26:	bd30      	pop	{r4, r5, pc}
   baf28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   baf2c:	bf3c      	itt	cc
   baf2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   baf32:	bd30      	popcc	{r4, r5, pc}
   baf34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baf38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   baf3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baf40:	f04f 0000 	mov.w	r0, #0
   baf44:	bd30      	pop	{r4, r5, pc}
   baf46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baf4a:	bf1a      	itte	ne
   baf4c:	4619      	movne	r1, r3
   baf4e:	4610      	movne	r0, r2
   baf50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   baf54:	bf1c      	itt	ne
   baf56:	460b      	movne	r3, r1
   baf58:	4602      	movne	r2, r0
   baf5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baf5e:	bf06      	itte	eq
   baf60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   baf64:	ea91 0f03 	teqeq	r1, r3
   baf68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   baf6c:	bd30      	pop	{r4, r5, pc}
   baf6e:	bf00      	nop

000baf70 <__aeabi_ui2d>:
   baf70:	f090 0f00 	teq	r0, #0
   baf74:	bf04      	itt	eq
   baf76:	2100      	moveq	r1, #0
   baf78:	4770      	bxeq	lr
   baf7a:	b530      	push	{r4, r5, lr}
   baf7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baf80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baf84:	f04f 0500 	mov.w	r5, #0
   baf88:	f04f 0100 	mov.w	r1, #0
   baf8c:	e750      	b.n	bae30 <__adddf3+0x138>
   baf8e:	bf00      	nop

000baf90 <__aeabi_i2d>:
   baf90:	f090 0f00 	teq	r0, #0
   baf94:	bf04      	itt	eq
   baf96:	2100      	moveq	r1, #0
   baf98:	4770      	bxeq	lr
   baf9a:	b530      	push	{r4, r5, lr}
   baf9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bafa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bafa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bafa8:	bf48      	it	mi
   bafaa:	4240      	negmi	r0, r0
   bafac:	f04f 0100 	mov.w	r1, #0
   bafb0:	e73e      	b.n	bae30 <__adddf3+0x138>
   bafb2:	bf00      	nop

000bafb4 <__aeabi_f2d>:
   bafb4:	0042      	lsls	r2, r0, #1
   bafb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bafba:	ea4f 0131 	mov.w	r1, r1, rrx
   bafbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bafc2:	bf1f      	itttt	ne
   bafc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bafc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bafcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bafd0:	4770      	bxne	lr
   bafd2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bafd6:	bf08      	it	eq
   bafd8:	4770      	bxeq	lr
   bafda:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bafde:	bf04      	itt	eq
   bafe0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bafe4:	4770      	bxeq	lr
   bafe6:	b530      	push	{r4, r5, lr}
   bafe8:	f44f 7460 	mov.w	r4, #896	; 0x380
   bafec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baff4:	e71c      	b.n	bae30 <__adddf3+0x138>
   baff6:	bf00      	nop

000baff8 <__aeabi_ul2d>:
   baff8:	ea50 0201 	orrs.w	r2, r0, r1
   baffc:	bf08      	it	eq
   baffe:	4770      	bxeq	lr
   bb000:	b530      	push	{r4, r5, lr}
   bb002:	f04f 0500 	mov.w	r5, #0
   bb006:	e00a      	b.n	bb01e <__aeabi_l2d+0x16>

000bb008 <__aeabi_l2d>:
   bb008:	ea50 0201 	orrs.w	r2, r0, r1
   bb00c:	bf08      	it	eq
   bb00e:	4770      	bxeq	lr
   bb010:	b530      	push	{r4, r5, lr}
   bb012:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb016:	d502      	bpl.n	bb01e <__aeabi_l2d+0x16>
   bb018:	4240      	negs	r0, r0
   bb01a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb01e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb022:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb026:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb02a:	f43f aed8 	beq.w	badde <__adddf3+0xe6>
   bb02e:	f04f 0203 	mov.w	r2, #3
   bb032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb036:	bf18      	it	ne
   bb038:	3203      	addne	r2, #3
   bb03a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb03e:	bf18      	it	ne
   bb040:	3203      	addne	r2, #3
   bb042:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb046:	f1c2 0320 	rsb	r3, r2, #32
   bb04a:	fa00 fc03 	lsl.w	ip, r0, r3
   bb04e:	fa20 f002 	lsr.w	r0, r0, r2
   bb052:	fa01 fe03 	lsl.w	lr, r1, r3
   bb056:	ea40 000e 	orr.w	r0, r0, lr
   bb05a:	fa21 f102 	lsr.w	r1, r1, r2
   bb05e:	4414      	add	r4, r2
   bb060:	e6bd      	b.n	badde <__adddf3+0xe6>
   bb062:	bf00      	nop

000bb064 <__aeabi_dmul>:
   bb064:	b570      	push	{r4, r5, r6, lr}
   bb066:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb06a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb06e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb072:	bf1d      	ittte	ne
   bb074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb078:	ea94 0f0c 	teqne	r4, ip
   bb07c:	ea95 0f0c 	teqne	r5, ip
   bb080:	f000 f8de 	bleq	bb240 <__aeabi_dmul+0x1dc>
   bb084:	442c      	add	r4, r5
   bb086:	ea81 0603 	eor.w	r6, r1, r3
   bb08a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb08e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb092:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb096:	bf18      	it	ne
   bb098:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb09c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb0a4:	d038      	beq.n	bb118 <__aeabi_dmul+0xb4>
   bb0a6:	fba0 ce02 	umull	ip, lr, r0, r2
   bb0aa:	f04f 0500 	mov.w	r5, #0
   bb0ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb0b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb0b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb0ba:	f04f 0600 	mov.w	r6, #0
   bb0be:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb0c2:	f09c 0f00 	teq	ip, #0
   bb0c6:	bf18      	it	ne
   bb0c8:	f04e 0e01 	orrne.w	lr, lr, #1
   bb0cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb0d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb0d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb0d8:	d204      	bcs.n	bb0e4 <__aeabi_dmul+0x80>
   bb0da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb0de:	416d      	adcs	r5, r5
   bb0e0:	eb46 0606 	adc.w	r6, r6, r6
   bb0e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb0e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb0ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb0f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb0f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb0f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb0fc:	bf88      	it	hi
   bb0fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb102:	d81e      	bhi.n	bb142 <__aeabi_dmul+0xde>
   bb104:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb108:	bf08      	it	eq
   bb10a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb10e:	f150 0000 	adcs.w	r0, r0, #0
   bb112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb116:	bd70      	pop	{r4, r5, r6, pc}
   bb118:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb11c:	ea46 0101 	orr.w	r1, r6, r1
   bb120:	ea40 0002 	orr.w	r0, r0, r2
   bb124:	ea81 0103 	eor.w	r1, r1, r3
   bb128:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb12c:	bfc2      	ittt	gt
   bb12e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb136:	bd70      	popgt	{r4, r5, r6, pc}
   bb138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb13c:	f04f 0e00 	mov.w	lr, #0
   bb140:	3c01      	subs	r4, #1
   bb142:	f300 80ab 	bgt.w	bb29c <__aeabi_dmul+0x238>
   bb146:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb14a:	bfde      	ittt	le
   bb14c:	2000      	movle	r0, #0
   bb14e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb152:	bd70      	pople	{r4, r5, r6, pc}
   bb154:	f1c4 0400 	rsb	r4, r4, #0
   bb158:	3c20      	subs	r4, #32
   bb15a:	da35      	bge.n	bb1c8 <__aeabi_dmul+0x164>
   bb15c:	340c      	adds	r4, #12
   bb15e:	dc1b      	bgt.n	bb198 <__aeabi_dmul+0x134>
   bb160:	f104 0414 	add.w	r4, r4, #20
   bb164:	f1c4 0520 	rsb	r5, r4, #32
   bb168:	fa00 f305 	lsl.w	r3, r0, r5
   bb16c:	fa20 f004 	lsr.w	r0, r0, r4
   bb170:	fa01 f205 	lsl.w	r2, r1, r5
   bb174:	ea40 0002 	orr.w	r0, r0, r2
   bb178:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb17c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb184:	fa21 f604 	lsr.w	r6, r1, r4
   bb188:	eb42 0106 	adc.w	r1, r2, r6
   bb18c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb190:	bf08      	it	eq
   bb192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb196:	bd70      	pop	{r4, r5, r6, pc}
   bb198:	f1c4 040c 	rsb	r4, r4, #12
   bb19c:	f1c4 0520 	rsb	r5, r4, #32
   bb1a0:	fa00 f304 	lsl.w	r3, r0, r4
   bb1a4:	fa20 f005 	lsr.w	r0, r0, r5
   bb1a8:	fa01 f204 	lsl.w	r2, r1, r4
   bb1ac:	ea40 0002 	orr.w	r0, r0, r2
   bb1b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb1b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb1b8:	f141 0100 	adc.w	r1, r1, #0
   bb1bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb1c0:	bf08      	it	eq
   bb1c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb1c6:	bd70      	pop	{r4, r5, r6, pc}
   bb1c8:	f1c4 0520 	rsb	r5, r4, #32
   bb1cc:	fa00 f205 	lsl.w	r2, r0, r5
   bb1d0:	ea4e 0e02 	orr.w	lr, lr, r2
   bb1d4:	fa20 f304 	lsr.w	r3, r0, r4
   bb1d8:	fa01 f205 	lsl.w	r2, r1, r5
   bb1dc:	ea43 0302 	orr.w	r3, r3, r2
   bb1e0:	fa21 f004 	lsr.w	r0, r1, r4
   bb1e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb1e8:	fa21 f204 	lsr.w	r2, r1, r4
   bb1ec:	ea20 0002 	bic.w	r0, r0, r2
   bb1f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb1f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb1f8:	bf08      	it	eq
   bb1fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb1fe:	bd70      	pop	{r4, r5, r6, pc}
   bb200:	f094 0f00 	teq	r4, #0
   bb204:	d10f      	bne.n	bb226 <__aeabi_dmul+0x1c2>
   bb206:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb20a:	0040      	lsls	r0, r0, #1
   bb20c:	eb41 0101 	adc.w	r1, r1, r1
   bb210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb214:	bf08      	it	eq
   bb216:	3c01      	subeq	r4, #1
   bb218:	d0f7      	beq.n	bb20a <__aeabi_dmul+0x1a6>
   bb21a:	ea41 0106 	orr.w	r1, r1, r6
   bb21e:	f095 0f00 	teq	r5, #0
   bb222:	bf18      	it	ne
   bb224:	4770      	bxne	lr
   bb226:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb22a:	0052      	lsls	r2, r2, #1
   bb22c:	eb43 0303 	adc.w	r3, r3, r3
   bb230:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb234:	bf08      	it	eq
   bb236:	3d01      	subeq	r5, #1
   bb238:	d0f7      	beq.n	bb22a <__aeabi_dmul+0x1c6>
   bb23a:	ea43 0306 	orr.w	r3, r3, r6
   bb23e:	4770      	bx	lr
   bb240:	ea94 0f0c 	teq	r4, ip
   bb244:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb248:	bf18      	it	ne
   bb24a:	ea95 0f0c 	teqne	r5, ip
   bb24e:	d00c      	beq.n	bb26a <__aeabi_dmul+0x206>
   bb250:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb254:	bf18      	it	ne
   bb256:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb25a:	d1d1      	bne.n	bb200 <__aeabi_dmul+0x19c>
   bb25c:	ea81 0103 	eor.w	r1, r1, r3
   bb260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb264:	f04f 0000 	mov.w	r0, #0
   bb268:	bd70      	pop	{r4, r5, r6, pc}
   bb26a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb26e:	bf06      	itte	eq
   bb270:	4610      	moveq	r0, r2
   bb272:	4619      	moveq	r1, r3
   bb274:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb278:	d019      	beq.n	bb2ae <__aeabi_dmul+0x24a>
   bb27a:	ea94 0f0c 	teq	r4, ip
   bb27e:	d102      	bne.n	bb286 <__aeabi_dmul+0x222>
   bb280:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb284:	d113      	bne.n	bb2ae <__aeabi_dmul+0x24a>
   bb286:	ea95 0f0c 	teq	r5, ip
   bb28a:	d105      	bne.n	bb298 <__aeabi_dmul+0x234>
   bb28c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb290:	bf1c      	itt	ne
   bb292:	4610      	movne	r0, r2
   bb294:	4619      	movne	r1, r3
   bb296:	d10a      	bne.n	bb2ae <__aeabi_dmul+0x24a>
   bb298:	ea81 0103 	eor.w	r1, r1, r3
   bb29c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb2a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb2a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb2a8:	f04f 0000 	mov.w	r0, #0
   bb2ac:	bd70      	pop	{r4, r5, r6, pc}
   bb2ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb2b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb2b6:	bd70      	pop	{r4, r5, r6, pc}

000bb2b8 <__aeabi_ddiv>:
   bb2b8:	b570      	push	{r4, r5, r6, lr}
   bb2ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb2be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb2c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb2c6:	bf1d      	ittte	ne
   bb2c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb2cc:	ea94 0f0c 	teqne	r4, ip
   bb2d0:	ea95 0f0c 	teqne	r5, ip
   bb2d4:	f000 f8a7 	bleq	bb426 <__aeabi_ddiv+0x16e>
   bb2d8:	eba4 0405 	sub.w	r4, r4, r5
   bb2dc:	ea81 0e03 	eor.w	lr, r1, r3
   bb2e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb2e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb2e8:	f000 8088 	beq.w	bb3fc <__aeabi_ddiv+0x144>
   bb2ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb2f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb2f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb2f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb2fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb300:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb304:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb308:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb30c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb310:	429d      	cmp	r5, r3
   bb312:	bf08      	it	eq
   bb314:	4296      	cmpeq	r6, r2
   bb316:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb31a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb31e:	d202      	bcs.n	bb326 <__aeabi_ddiv+0x6e>
   bb320:	085b      	lsrs	r3, r3, #1
   bb322:	ea4f 0232 	mov.w	r2, r2, rrx
   bb326:	1ab6      	subs	r6, r6, r2
   bb328:	eb65 0503 	sbc.w	r5, r5, r3
   bb32c:	085b      	lsrs	r3, r3, #1
   bb32e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb332:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb336:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb33a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb33e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb342:	bf22      	ittt	cs
   bb344:	1ab6      	subcs	r6, r6, r2
   bb346:	4675      	movcs	r5, lr
   bb348:	ea40 000c 	orrcs.w	r0, r0, ip
   bb34c:	085b      	lsrs	r3, r3, #1
   bb34e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb352:	ebb6 0e02 	subs.w	lr, r6, r2
   bb356:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb35a:	bf22      	ittt	cs
   bb35c:	1ab6      	subcs	r6, r6, r2
   bb35e:	4675      	movcs	r5, lr
   bb360:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb364:	085b      	lsrs	r3, r3, #1
   bb366:	ea4f 0232 	mov.w	r2, r2, rrx
   bb36a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb36e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb372:	bf22      	ittt	cs
   bb374:	1ab6      	subcs	r6, r6, r2
   bb376:	4675      	movcs	r5, lr
   bb378:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb37c:	085b      	lsrs	r3, r3, #1
   bb37e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb382:	ebb6 0e02 	subs.w	lr, r6, r2
   bb386:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb38a:	bf22      	ittt	cs
   bb38c:	1ab6      	subcs	r6, r6, r2
   bb38e:	4675      	movcs	r5, lr
   bb390:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb394:	ea55 0e06 	orrs.w	lr, r5, r6
   bb398:	d018      	beq.n	bb3cc <__aeabi_ddiv+0x114>
   bb39a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb39e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb3a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb3a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb3aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb3ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb3b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb3b6:	d1c0      	bne.n	bb33a <__aeabi_ddiv+0x82>
   bb3b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb3bc:	d10b      	bne.n	bb3d6 <__aeabi_ddiv+0x11e>
   bb3be:	ea41 0100 	orr.w	r1, r1, r0
   bb3c2:	f04f 0000 	mov.w	r0, #0
   bb3c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb3ca:	e7b6      	b.n	bb33a <__aeabi_ddiv+0x82>
   bb3cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb3d0:	bf04      	itt	eq
   bb3d2:	4301      	orreq	r1, r0
   bb3d4:	2000      	moveq	r0, #0
   bb3d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb3da:	bf88      	it	hi
   bb3dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb3e0:	f63f aeaf 	bhi.w	bb142 <__aeabi_dmul+0xde>
   bb3e4:	ebb5 0c03 	subs.w	ip, r5, r3
   bb3e8:	bf04      	itt	eq
   bb3ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb3ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb3f2:	f150 0000 	adcs.w	r0, r0, #0
   bb3f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb3fa:	bd70      	pop	{r4, r5, r6, pc}
   bb3fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb400:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb404:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb408:	bfc2      	ittt	gt
   bb40a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb40e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb412:	bd70      	popgt	{r4, r5, r6, pc}
   bb414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb418:	f04f 0e00 	mov.w	lr, #0
   bb41c:	3c01      	subs	r4, #1
   bb41e:	e690      	b.n	bb142 <__aeabi_dmul+0xde>
   bb420:	ea45 0e06 	orr.w	lr, r5, r6
   bb424:	e68d      	b.n	bb142 <__aeabi_dmul+0xde>
   bb426:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb42a:	ea94 0f0c 	teq	r4, ip
   bb42e:	bf08      	it	eq
   bb430:	ea95 0f0c 	teqeq	r5, ip
   bb434:	f43f af3b 	beq.w	bb2ae <__aeabi_dmul+0x24a>
   bb438:	ea94 0f0c 	teq	r4, ip
   bb43c:	d10a      	bne.n	bb454 <__aeabi_ddiv+0x19c>
   bb43e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb442:	f47f af34 	bne.w	bb2ae <__aeabi_dmul+0x24a>
   bb446:	ea95 0f0c 	teq	r5, ip
   bb44a:	f47f af25 	bne.w	bb298 <__aeabi_dmul+0x234>
   bb44e:	4610      	mov	r0, r2
   bb450:	4619      	mov	r1, r3
   bb452:	e72c      	b.n	bb2ae <__aeabi_dmul+0x24a>
   bb454:	ea95 0f0c 	teq	r5, ip
   bb458:	d106      	bne.n	bb468 <__aeabi_ddiv+0x1b0>
   bb45a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb45e:	f43f aefd 	beq.w	bb25c <__aeabi_dmul+0x1f8>
   bb462:	4610      	mov	r0, r2
   bb464:	4619      	mov	r1, r3
   bb466:	e722      	b.n	bb2ae <__aeabi_dmul+0x24a>
   bb468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb46c:	bf18      	it	ne
   bb46e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb472:	f47f aec5 	bne.w	bb200 <__aeabi_dmul+0x19c>
   bb476:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb47a:	f47f af0d 	bne.w	bb298 <__aeabi_dmul+0x234>
   bb47e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb482:	f47f aeeb 	bne.w	bb25c <__aeabi_dmul+0x1f8>
   bb486:	e712      	b.n	bb2ae <__aeabi_dmul+0x24a>

000bb488 <__gedf2>:
   bb488:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb48c:	e006      	b.n	bb49c <__cmpdf2+0x4>
   bb48e:	bf00      	nop

000bb490 <__ledf2>:
   bb490:	f04f 0c01 	mov.w	ip, #1
   bb494:	e002      	b.n	bb49c <__cmpdf2+0x4>
   bb496:	bf00      	nop

000bb498 <__cmpdf2>:
   bb498:	f04f 0c01 	mov.w	ip, #1
   bb49c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb4a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb4a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb4ac:	bf18      	it	ne
   bb4ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb4b2:	d01b      	beq.n	bb4ec <__cmpdf2+0x54>
   bb4b4:	b001      	add	sp, #4
   bb4b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb4ba:	bf0c      	ite	eq
   bb4bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb4c0:	ea91 0f03 	teqne	r1, r3
   bb4c4:	bf02      	ittt	eq
   bb4c6:	ea90 0f02 	teqeq	r0, r2
   bb4ca:	2000      	moveq	r0, #0
   bb4cc:	4770      	bxeq	lr
   bb4ce:	f110 0f00 	cmn.w	r0, #0
   bb4d2:	ea91 0f03 	teq	r1, r3
   bb4d6:	bf58      	it	pl
   bb4d8:	4299      	cmppl	r1, r3
   bb4da:	bf08      	it	eq
   bb4dc:	4290      	cmpeq	r0, r2
   bb4de:	bf2c      	ite	cs
   bb4e0:	17d8      	asrcs	r0, r3, #31
   bb4e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb4e6:	f040 0001 	orr.w	r0, r0, #1
   bb4ea:	4770      	bx	lr
   bb4ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb4f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4f4:	d102      	bne.n	bb4fc <__cmpdf2+0x64>
   bb4f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb4fa:	d107      	bne.n	bb50c <__cmpdf2+0x74>
   bb4fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb504:	d1d6      	bne.n	bb4b4 <__cmpdf2+0x1c>
   bb506:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb50a:	d0d3      	beq.n	bb4b4 <__cmpdf2+0x1c>
   bb50c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb510:	4770      	bx	lr
   bb512:	bf00      	nop

000bb514 <__aeabi_cdrcmple>:
   bb514:	4684      	mov	ip, r0
   bb516:	4610      	mov	r0, r2
   bb518:	4662      	mov	r2, ip
   bb51a:	468c      	mov	ip, r1
   bb51c:	4619      	mov	r1, r3
   bb51e:	4663      	mov	r3, ip
   bb520:	e000      	b.n	bb524 <__aeabi_cdcmpeq>
   bb522:	bf00      	nop

000bb524 <__aeabi_cdcmpeq>:
   bb524:	b501      	push	{r0, lr}
   bb526:	f7ff ffb7 	bl	bb498 <__cmpdf2>
   bb52a:	2800      	cmp	r0, #0
   bb52c:	bf48      	it	mi
   bb52e:	f110 0f00 	cmnmi.w	r0, #0
   bb532:	bd01      	pop	{r0, pc}

000bb534 <__aeabi_dcmpeq>:
   bb534:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb538:	f7ff fff4 	bl	bb524 <__aeabi_cdcmpeq>
   bb53c:	bf0c      	ite	eq
   bb53e:	2001      	moveq	r0, #1
   bb540:	2000      	movne	r0, #0
   bb542:	f85d fb08 	ldr.w	pc, [sp], #8
   bb546:	bf00      	nop

000bb548 <__aeabi_dcmplt>:
   bb548:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb54c:	f7ff ffea 	bl	bb524 <__aeabi_cdcmpeq>
   bb550:	bf34      	ite	cc
   bb552:	2001      	movcc	r0, #1
   bb554:	2000      	movcs	r0, #0
   bb556:	f85d fb08 	ldr.w	pc, [sp], #8
   bb55a:	bf00      	nop

000bb55c <__aeabi_dcmple>:
   bb55c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb560:	f7ff ffe0 	bl	bb524 <__aeabi_cdcmpeq>
   bb564:	bf94      	ite	ls
   bb566:	2001      	movls	r0, #1
   bb568:	2000      	movhi	r0, #0
   bb56a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb56e:	bf00      	nop

000bb570 <__aeabi_dcmpge>:
   bb570:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb574:	f7ff ffce 	bl	bb514 <__aeabi_cdrcmple>
   bb578:	bf94      	ite	ls
   bb57a:	2001      	movls	r0, #1
   bb57c:	2000      	movhi	r0, #0
   bb57e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb582:	bf00      	nop

000bb584 <__aeabi_dcmpgt>:
   bb584:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb588:	f7ff ffc4 	bl	bb514 <__aeabi_cdrcmple>
   bb58c:	bf34      	ite	cc
   bb58e:	2001      	movcc	r0, #1
   bb590:	2000      	movcs	r0, #0
   bb592:	f85d fb08 	ldr.w	pc, [sp], #8
   bb596:	bf00      	nop

000bb598 <__aeabi_dcmpun>:
   bb598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb59c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb5a0:	d102      	bne.n	bb5a8 <__aeabi_dcmpun+0x10>
   bb5a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb5a6:	d10a      	bne.n	bb5be <__aeabi_dcmpun+0x26>
   bb5a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb5ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb5b0:	d102      	bne.n	bb5b8 <__aeabi_dcmpun+0x20>
   bb5b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb5b6:	d102      	bne.n	bb5be <__aeabi_dcmpun+0x26>
   bb5b8:	f04f 0000 	mov.w	r0, #0
   bb5bc:	4770      	bx	lr
   bb5be:	f04f 0001 	mov.w	r0, #1
   bb5c2:	4770      	bx	lr

000bb5c4 <__aeabi_d2iz>:
   bb5c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb5c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb5cc:	d215      	bcs.n	bb5fa <__aeabi_d2iz+0x36>
   bb5ce:	d511      	bpl.n	bb5f4 <__aeabi_d2iz+0x30>
   bb5d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb5d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb5d8:	d912      	bls.n	bb600 <__aeabi_d2iz+0x3c>
   bb5da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb5de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb5e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb5e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb5ea:	fa23 f002 	lsr.w	r0, r3, r2
   bb5ee:	bf18      	it	ne
   bb5f0:	4240      	negne	r0, r0
   bb5f2:	4770      	bx	lr
   bb5f4:	f04f 0000 	mov.w	r0, #0
   bb5f8:	4770      	bx	lr
   bb5fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb5fe:	d105      	bne.n	bb60c <__aeabi_d2iz+0x48>
   bb600:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bb604:	bf08      	it	eq
   bb606:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bb60a:	4770      	bx	lr
   bb60c:	f04f 0000 	mov.w	r0, #0
   bb610:	4770      	bx	lr
   bb612:	bf00      	nop

000bb614 <__aeabi_d2uiz>:
   bb614:	004a      	lsls	r2, r1, #1
   bb616:	d211      	bcs.n	bb63c <__aeabi_d2uiz+0x28>
   bb618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb61c:	d211      	bcs.n	bb642 <__aeabi_d2uiz+0x2e>
   bb61e:	d50d      	bpl.n	bb63c <__aeabi_d2uiz+0x28>
   bb620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb628:	d40e      	bmi.n	bb648 <__aeabi_d2uiz+0x34>
   bb62a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb62e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb636:	fa23 f002 	lsr.w	r0, r3, r2
   bb63a:	4770      	bx	lr
   bb63c:	f04f 0000 	mov.w	r0, #0
   bb640:	4770      	bx	lr
   bb642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb646:	d102      	bne.n	bb64e <__aeabi_d2uiz+0x3a>
   bb648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb64c:	4770      	bx	lr
   bb64e:	f04f 0000 	mov.w	r0, #0
   bb652:	4770      	bx	lr

000bb654 <__aeabi_d2f>:
   bb654:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb658:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb65c:	bf24      	itt	cs
   bb65e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb662:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb666:	d90d      	bls.n	bb684 <__aeabi_d2f+0x30>
   bb668:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb66c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb670:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb674:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb678:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb67c:	bf08      	it	eq
   bb67e:	f020 0001 	biceq.w	r0, r0, #1
   bb682:	4770      	bx	lr
   bb684:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb688:	d121      	bne.n	bb6ce <__aeabi_d2f+0x7a>
   bb68a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb68e:	bfbc      	itt	lt
   bb690:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb694:	4770      	bxlt	lr
   bb696:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb69a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb69e:	f1c2 0218 	rsb	r2, r2, #24
   bb6a2:	f1c2 0c20 	rsb	ip, r2, #32
   bb6a6:	fa10 f30c 	lsls.w	r3, r0, ip
   bb6aa:	fa20 f002 	lsr.w	r0, r0, r2
   bb6ae:	bf18      	it	ne
   bb6b0:	f040 0001 	orrne.w	r0, r0, #1
   bb6b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb6b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb6bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb6c0:	ea40 000c 	orr.w	r0, r0, ip
   bb6c4:	fa23 f302 	lsr.w	r3, r3, r2
   bb6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb6cc:	e7cc      	b.n	bb668 <__aeabi_d2f+0x14>
   bb6ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb6d2:	d107      	bne.n	bb6e4 <__aeabi_d2f+0x90>
   bb6d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb6d8:	bf1e      	ittt	ne
   bb6da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb6de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb6e2:	4770      	bxne	lr
   bb6e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb6e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb6ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb6f0:	4770      	bx	lr
   bb6f2:	bf00      	nop

000bb6f4 <asctime_r>:
   bb6f4:	b510      	push	{r4, lr}
   bb6f6:	460c      	mov	r4, r1
   bb6f8:	6941      	ldr	r1, [r0, #20]
   bb6fa:	6903      	ldr	r3, [r0, #16]
   bb6fc:	6982      	ldr	r2, [r0, #24]
   bb6fe:	b086      	sub	sp, #24
   bb700:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bb704:	9104      	str	r1, [sp, #16]
   bb706:	6801      	ldr	r1, [r0, #0]
   bb708:	9103      	str	r1, [sp, #12]
   bb70a:	6841      	ldr	r1, [r0, #4]
   bb70c:	9102      	str	r1, [sp, #8]
   bb70e:	6881      	ldr	r1, [r0, #8]
   bb710:	9101      	str	r1, [sp, #4]
   bb712:	68c1      	ldr	r1, [r0, #12]
   bb714:	9100      	str	r1, [sp, #0]
   bb716:	4907      	ldr	r1, [pc, #28]	; (bb734 <asctime_r+0x40>)
   bb718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb71c:	440b      	add	r3, r1
   bb71e:	4906      	ldr	r1, [pc, #24]	; (bb738 <asctime_r+0x44>)
   bb720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb724:	440a      	add	r2, r1
   bb726:	4620      	mov	r0, r4
   bb728:	4904      	ldr	r1, [pc, #16]	; (bb73c <asctime_r+0x48>)
   bb72a:	f7fd fb57 	bl	b8ddc <siprintf>
   bb72e:	4620      	mov	r0, r4
   bb730:	b006      	add	sp, #24
   bb732:	bd10      	pop	{r4, pc}
   bb734:	000bcad6 	.word	0x000bcad6
   bb738:	000bcac1 	.word	0x000bcac1
   bb73c:	000bcaa1 	.word	0x000bcaa1

000bb740 <atexit>:
   bb740:	2300      	movs	r3, #0
   bb742:	4601      	mov	r1, r0
   bb744:	461a      	mov	r2, r3
   bb746:	4618      	mov	r0, r3
   bb748:	f000 b9c2 	b.w	bbad0 <__register_exitproc>

000bb74c <atoi>:
   bb74c:	220a      	movs	r2, #10
   bb74e:	2100      	movs	r1, #0
   bb750:	f000 b948 	b.w	bb9e4 <strtol>

000bb754 <gmtime>:
   bb754:	b538      	push	{r3, r4, r5, lr}
   bb756:	4b0b      	ldr	r3, [pc, #44]	; (bb784 <gmtime+0x30>)
   bb758:	681d      	ldr	r5, [r3, #0]
   bb75a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bb75c:	4604      	mov	r4, r0
   bb75e:	b953      	cbnz	r3, bb776 <gmtime+0x22>
   bb760:	2024      	movs	r0, #36	; 0x24
   bb762:	f7fd fb23 	bl	b8dac <malloc>
   bb766:	4602      	mov	r2, r0
   bb768:	63e8      	str	r0, [r5, #60]	; 0x3c
   bb76a:	b920      	cbnz	r0, bb776 <gmtime+0x22>
   bb76c:	4b06      	ldr	r3, [pc, #24]	; (bb788 <gmtime+0x34>)
   bb76e:	4807      	ldr	r0, [pc, #28]	; (bb78c <gmtime+0x38>)
   bb770:	2139      	movs	r1, #57	; 0x39
   bb772:	f7fd fb6b 	bl	b8e4c <__assert_func>
   bb776:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bb778:	4620      	mov	r0, r4
   bb77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb77e:	f7fd bb85 	b.w	b8e8c <gmtime_r>
   bb782:	bf00      	nop
   bb784:	2003e380 	.word	0x2003e380
   bb788:	000bcafa 	.word	0x000bcafa
   bb78c:	000bcb11 	.word	0x000bcb11

000bb790 <memcpy>:
   bb790:	440a      	add	r2, r1
   bb792:	4291      	cmp	r1, r2
   bb794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb798:	d100      	bne.n	bb79c <memcpy+0xc>
   bb79a:	4770      	bx	lr
   bb79c:	b510      	push	{r4, lr}
   bb79e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb7a6:	4291      	cmp	r1, r2
   bb7a8:	d1f9      	bne.n	bb79e <memcpy+0xe>
   bb7aa:	bd10      	pop	{r4, pc}

000bb7ac <memmove>:
   bb7ac:	4288      	cmp	r0, r1
   bb7ae:	b510      	push	{r4, lr}
   bb7b0:	eb01 0402 	add.w	r4, r1, r2
   bb7b4:	d902      	bls.n	bb7bc <memmove+0x10>
   bb7b6:	4284      	cmp	r4, r0
   bb7b8:	4623      	mov	r3, r4
   bb7ba:	d807      	bhi.n	bb7cc <memmove+0x20>
   bb7bc:	1e43      	subs	r3, r0, #1
   bb7be:	42a1      	cmp	r1, r4
   bb7c0:	d008      	beq.n	bb7d4 <memmove+0x28>
   bb7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb7ca:	e7f8      	b.n	bb7be <memmove+0x12>
   bb7cc:	4402      	add	r2, r0
   bb7ce:	4601      	mov	r1, r0
   bb7d0:	428a      	cmp	r2, r1
   bb7d2:	d100      	bne.n	bb7d6 <memmove+0x2a>
   bb7d4:	bd10      	pop	{r4, pc}
   bb7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb7de:	e7f7      	b.n	bb7d0 <memmove+0x24>

000bb7e0 <memset>:
   bb7e0:	4402      	add	r2, r0
   bb7e2:	4603      	mov	r3, r0
   bb7e4:	4293      	cmp	r3, r2
   bb7e6:	d100      	bne.n	bb7ea <memset+0xa>
   bb7e8:	4770      	bx	lr
   bb7ea:	f803 1b01 	strb.w	r1, [r3], #1
   bb7ee:	e7f9      	b.n	bb7e4 <memset+0x4>

000bb7f0 <srand>:
   bb7f0:	b538      	push	{r3, r4, r5, lr}
   bb7f2:	4b10      	ldr	r3, [pc, #64]	; (bb834 <srand+0x44>)
   bb7f4:	681d      	ldr	r5, [r3, #0]
   bb7f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb7f8:	4604      	mov	r4, r0
   bb7fa:	b9b3      	cbnz	r3, bb82a <srand+0x3a>
   bb7fc:	2018      	movs	r0, #24
   bb7fe:	f7fd fad5 	bl	b8dac <malloc>
   bb802:	4602      	mov	r2, r0
   bb804:	63a8      	str	r0, [r5, #56]	; 0x38
   bb806:	b920      	cbnz	r0, bb812 <srand+0x22>
   bb808:	4b0b      	ldr	r3, [pc, #44]	; (bb838 <srand+0x48>)
   bb80a:	480c      	ldr	r0, [pc, #48]	; (bb83c <srand+0x4c>)
   bb80c:	2142      	movs	r1, #66	; 0x42
   bb80e:	f7fd fb1d 	bl	b8e4c <__assert_func>
   bb812:	490b      	ldr	r1, [pc, #44]	; (bb840 <srand+0x50>)
   bb814:	4b0b      	ldr	r3, [pc, #44]	; (bb844 <srand+0x54>)
   bb816:	e9c0 1300 	strd	r1, r3, [r0]
   bb81a:	4b0b      	ldr	r3, [pc, #44]	; (bb848 <srand+0x58>)
   bb81c:	6083      	str	r3, [r0, #8]
   bb81e:	230b      	movs	r3, #11
   bb820:	8183      	strh	r3, [r0, #12]
   bb822:	2100      	movs	r1, #0
   bb824:	2001      	movs	r0, #1
   bb826:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb82a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb82c:	2200      	movs	r2, #0
   bb82e:	611c      	str	r4, [r3, #16]
   bb830:	615a      	str	r2, [r3, #20]
   bb832:	bd38      	pop	{r3, r4, r5, pc}
   bb834:	2003e380 	.word	0x2003e380
   bb838:	000bcafa 	.word	0x000bcafa
   bb83c:	000bcb6a 	.word	0x000bcb6a
   bb840:	abcd330e 	.word	0xabcd330e
   bb844:	e66d1234 	.word	0xe66d1234
   bb848:	0005deec 	.word	0x0005deec

000bb84c <strcmp>:
   bb84c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb850:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb854:	2a01      	cmp	r2, #1
   bb856:	bf28      	it	cs
   bb858:	429a      	cmpcs	r2, r3
   bb85a:	d0f7      	beq.n	bb84c <strcmp>
   bb85c:	1ad0      	subs	r0, r2, r3
   bb85e:	4770      	bx	lr

000bb860 <strcpy>:
   bb860:	4603      	mov	r3, r0
   bb862:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb866:	f803 2b01 	strb.w	r2, [r3], #1
   bb86a:	2a00      	cmp	r2, #0
   bb86c:	d1f9      	bne.n	bb862 <strcpy+0x2>
   bb86e:	4770      	bx	lr

000bb870 <strdup>:
   bb870:	4b02      	ldr	r3, [pc, #8]	; (bb87c <strdup+0xc>)
   bb872:	4601      	mov	r1, r0
   bb874:	6818      	ldr	r0, [r3, #0]
   bb876:	f000 b803 	b.w	bb880 <_strdup_r>
   bb87a:	bf00      	nop
   bb87c:	2003e380 	.word	0x2003e380

000bb880 <_strdup_r>:
   bb880:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb882:	4604      	mov	r4, r0
   bb884:	4608      	mov	r0, r1
   bb886:	460d      	mov	r5, r1
   bb888:	f000 f80f 	bl	bb8aa <strlen>
   bb88c:	1c42      	adds	r2, r0, #1
   bb88e:	4611      	mov	r1, r2
   bb890:	4620      	mov	r0, r4
   bb892:	9201      	str	r2, [sp, #4]
   bb894:	f7fd faca 	bl	b8e2c <_malloc_r>
   bb898:	4604      	mov	r4, r0
   bb89a:	b118      	cbz	r0, bb8a4 <_strdup_r+0x24>
   bb89c:	9a01      	ldr	r2, [sp, #4]
   bb89e:	4629      	mov	r1, r5
   bb8a0:	f7ff ff76 	bl	bb790 <memcpy>
   bb8a4:	4620      	mov	r0, r4
   bb8a6:	b003      	add	sp, #12
   bb8a8:	bd30      	pop	{r4, r5, pc}

000bb8aa <strlen>:
   bb8aa:	4603      	mov	r3, r0
   bb8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb8b0:	2a00      	cmp	r2, #0
   bb8b2:	d1fb      	bne.n	bb8ac <strlen+0x2>
   bb8b4:	1a18      	subs	r0, r3, r0
   bb8b6:	3801      	subs	r0, #1
   bb8b8:	4770      	bx	lr

000bb8ba <strncpy>:
   bb8ba:	b510      	push	{r4, lr}
   bb8bc:	3901      	subs	r1, #1
   bb8be:	4603      	mov	r3, r0
   bb8c0:	b132      	cbz	r2, bb8d0 <strncpy+0x16>
   bb8c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb8c6:	f803 4b01 	strb.w	r4, [r3], #1
   bb8ca:	3a01      	subs	r2, #1
   bb8cc:	2c00      	cmp	r4, #0
   bb8ce:	d1f7      	bne.n	bb8c0 <strncpy+0x6>
   bb8d0:	441a      	add	r2, r3
   bb8d2:	2100      	movs	r1, #0
   bb8d4:	4293      	cmp	r3, r2
   bb8d6:	d100      	bne.n	bb8da <strncpy+0x20>
   bb8d8:	bd10      	pop	{r4, pc}
   bb8da:	f803 1b01 	strb.w	r1, [r3], #1
   bb8de:	e7f9      	b.n	bb8d4 <strncpy+0x1a>

000bb8e0 <_strtol_l.constprop.0>:
   bb8e0:	2b01      	cmp	r3, #1
   bb8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb8e6:	d001      	beq.n	bb8ec <_strtol_l.constprop.0+0xc>
   bb8e8:	2b24      	cmp	r3, #36	; 0x24
   bb8ea:	d906      	bls.n	bb8fa <_strtol_l.constprop.0+0x1a>
   bb8ec:	f7fd faa6 	bl	b8e3c <__errno>
   bb8f0:	2316      	movs	r3, #22
   bb8f2:	6003      	str	r3, [r0, #0]
   bb8f4:	2000      	movs	r0, #0
   bb8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb8fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb9e0 <_strtol_l.constprop.0+0x100>
   bb8fe:	460d      	mov	r5, r1
   bb900:	462e      	mov	r6, r5
   bb902:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb906:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb90a:	f017 0708 	ands.w	r7, r7, #8
   bb90e:	d1f7      	bne.n	bb900 <_strtol_l.constprop.0+0x20>
   bb910:	2c2d      	cmp	r4, #45	; 0x2d
   bb912:	d132      	bne.n	bb97a <_strtol_l.constprop.0+0x9a>
   bb914:	782c      	ldrb	r4, [r5, #0]
   bb916:	2701      	movs	r7, #1
   bb918:	1cb5      	adds	r5, r6, #2
   bb91a:	2b00      	cmp	r3, #0
   bb91c:	d05b      	beq.n	bb9d6 <_strtol_l.constprop.0+0xf6>
   bb91e:	2b10      	cmp	r3, #16
   bb920:	d109      	bne.n	bb936 <_strtol_l.constprop.0+0x56>
   bb922:	2c30      	cmp	r4, #48	; 0x30
   bb924:	d107      	bne.n	bb936 <_strtol_l.constprop.0+0x56>
   bb926:	782c      	ldrb	r4, [r5, #0]
   bb928:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb92c:	2c58      	cmp	r4, #88	; 0x58
   bb92e:	d14d      	bne.n	bb9cc <_strtol_l.constprop.0+0xec>
   bb930:	786c      	ldrb	r4, [r5, #1]
   bb932:	2310      	movs	r3, #16
   bb934:	3502      	adds	r5, #2
   bb936:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb93a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb93e:	f04f 0c00 	mov.w	ip, #0
   bb942:	fbb8 f9f3 	udiv	r9, r8, r3
   bb946:	4666      	mov	r6, ip
   bb948:	fb03 8a19 	mls	sl, r3, r9, r8
   bb94c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb950:	f1be 0f09 	cmp.w	lr, #9
   bb954:	d816      	bhi.n	bb984 <_strtol_l.constprop.0+0xa4>
   bb956:	4674      	mov	r4, lr
   bb958:	42a3      	cmp	r3, r4
   bb95a:	dd24      	ble.n	bb9a6 <_strtol_l.constprop.0+0xc6>
   bb95c:	f1bc 0f00 	cmp.w	ip, #0
   bb960:	db1e      	blt.n	bb9a0 <_strtol_l.constprop.0+0xc0>
   bb962:	45b1      	cmp	r9, r6
   bb964:	d31c      	bcc.n	bb9a0 <_strtol_l.constprop.0+0xc0>
   bb966:	d101      	bne.n	bb96c <_strtol_l.constprop.0+0x8c>
   bb968:	45a2      	cmp	sl, r4
   bb96a:	db19      	blt.n	bb9a0 <_strtol_l.constprop.0+0xc0>
   bb96c:	fb06 4603 	mla	r6, r6, r3, r4
   bb970:	f04f 0c01 	mov.w	ip, #1
   bb974:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb978:	e7e8      	b.n	bb94c <_strtol_l.constprop.0+0x6c>
   bb97a:	2c2b      	cmp	r4, #43	; 0x2b
   bb97c:	bf04      	itt	eq
   bb97e:	782c      	ldrbeq	r4, [r5, #0]
   bb980:	1cb5      	addeq	r5, r6, #2
   bb982:	e7ca      	b.n	bb91a <_strtol_l.constprop.0+0x3a>
   bb984:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb988:	f1be 0f19 	cmp.w	lr, #25
   bb98c:	d801      	bhi.n	bb992 <_strtol_l.constprop.0+0xb2>
   bb98e:	3c37      	subs	r4, #55	; 0x37
   bb990:	e7e2      	b.n	bb958 <_strtol_l.constprop.0+0x78>
   bb992:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb996:	f1be 0f19 	cmp.w	lr, #25
   bb99a:	d804      	bhi.n	bb9a6 <_strtol_l.constprop.0+0xc6>
   bb99c:	3c57      	subs	r4, #87	; 0x57
   bb99e:	e7db      	b.n	bb958 <_strtol_l.constprop.0+0x78>
   bb9a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb9a4:	e7e6      	b.n	bb974 <_strtol_l.constprop.0+0x94>
   bb9a6:	f1bc 0f00 	cmp.w	ip, #0
   bb9aa:	da05      	bge.n	bb9b8 <_strtol_l.constprop.0+0xd8>
   bb9ac:	2322      	movs	r3, #34	; 0x22
   bb9ae:	6003      	str	r3, [r0, #0]
   bb9b0:	4646      	mov	r6, r8
   bb9b2:	b942      	cbnz	r2, bb9c6 <_strtol_l.constprop.0+0xe6>
   bb9b4:	4630      	mov	r0, r6
   bb9b6:	e79e      	b.n	bb8f6 <_strtol_l.constprop.0+0x16>
   bb9b8:	b107      	cbz	r7, bb9bc <_strtol_l.constprop.0+0xdc>
   bb9ba:	4276      	negs	r6, r6
   bb9bc:	2a00      	cmp	r2, #0
   bb9be:	d0f9      	beq.n	bb9b4 <_strtol_l.constprop.0+0xd4>
   bb9c0:	f1bc 0f00 	cmp.w	ip, #0
   bb9c4:	d000      	beq.n	bb9c8 <_strtol_l.constprop.0+0xe8>
   bb9c6:	1e69      	subs	r1, r5, #1
   bb9c8:	6011      	str	r1, [r2, #0]
   bb9ca:	e7f3      	b.n	bb9b4 <_strtol_l.constprop.0+0xd4>
   bb9cc:	2430      	movs	r4, #48	; 0x30
   bb9ce:	2b00      	cmp	r3, #0
   bb9d0:	d1b1      	bne.n	bb936 <_strtol_l.constprop.0+0x56>
   bb9d2:	2308      	movs	r3, #8
   bb9d4:	e7af      	b.n	bb936 <_strtol_l.constprop.0+0x56>
   bb9d6:	2c30      	cmp	r4, #48	; 0x30
   bb9d8:	d0a5      	beq.n	bb926 <_strtol_l.constprop.0+0x46>
   bb9da:	230a      	movs	r3, #10
   bb9dc:	e7ab      	b.n	bb936 <_strtol_l.constprop.0+0x56>
   bb9de:	bf00      	nop
   bb9e0:	000bcbc4 	.word	0x000bcbc4

000bb9e4 <strtol>:
   bb9e4:	4613      	mov	r3, r2
   bb9e6:	460a      	mov	r2, r1
   bb9e8:	4601      	mov	r1, r0
   bb9ea:	4802      	ldr	r0, [pc, #8]	; (bb9f4 <strtol+0x10>)
   bb9ec:	6800      	ldr	r0, [r0, #0]
   bb9ee:	f7ff bf77 	b.w	bb8e0 <_strtol_l.constprop.0>
   bb9f2:	bf00      	nop
   bb9f4:	2003e380 	.word	0x2003e380

000bb9f8 <close>:
   bb9f8:	4b02      	ldr	r3, [pc, #8]	; (bba04 <close+0xc>)
   bb9fa:	4601      	mov	r1, r0
   bb9fc:	6818      	ldr	r0, [r3, #0]
   bb9fe:	f000 b8c9 	b.w	bbb94 <_close_r>
   bba02:	bf00      	nop
   bba04:	2003e380 	.word	0x2003e380

000bba08 <fstat>:
   bba08:	4b02      	ldr	r3, [pc, #8]	; (bba14 <fstat+0xc>)
   bba0a:	460a      	mov	r2, r1
   bba0c:	4601      	mov	r1, r0
   bba0e:	6818      	ldr	r0, [r3, #0]
   bba10:	f000 b8d0 	b.w	bbbb4 <_fstat_r>
   bba14:	2003e380 	.word	0x2003e380

000bba18 <lseek>:
   bba18:	4613      	mov	r3, r2
   bba1a:	460a      	mov	r2, r1
   bba1c:	4601      	mov	r1, r0
   bba1e:	4802      	ldr	r0, [pc, #8]	; (bba28 <lseek+0x10>)
   bba20:	6800      	ldr	r0, [r0, #0]
   bba22:	f000 b8dd 	b.w	bbbe0 <_lseek_r>
   bba26:	bf00      	nop
   bba28:	2003e380 	.word	0x2003e380

000bba2c <open>:
   bba2c:	b40e      	push	{r1, r2, r3}
   bba2e:	b503      	push	{r0, r1, lr}
   bba30:	ab03      	add	r3, sp, #12
   bba32:	4601      	mov	r1, r0
   bba34:	4806      	ldr	r0, [pc, #24]	; (bba50 <open+0x24>)
   bba36:	f853 2b04 	ldr.w	r2, [r3], #4
   bba3a:	9301      	str	r3, [sp, #4]
   bba3c:	6800      	ldr	r0, [r0, #0]
   bba3e:	9b04      	ldr	r3, [sp, #16]
   bba40:	f000 f8e0 	bl	bbc04 <_open_r>
   bba44:	b002      	add	sp, #8
   bba46:	f85d eb04 	ldr.w	lr, [sp], #4
   bba4a:	b003      	add	sp, #12
   bba4c:	4770      	bx	lr
   bba4e:	bf00      	nop
   bba50:	2003e380 	.word	0x2003e380

000bba54 <read>:
   bba54:	4613      	mov	r3, r2
   bba56:	460a      	mov	r2, r1
   bba58:	4601      	mov	r1, r0
   bba5a:	4802      	ldr	r0, [pc, #8]	; (bba64 <read+0x10>)
   bba5c:	6800      	ldr	r0, [r0, #0]
   bba5e:	f000 b8e3 	b.w	bbc28 <_read_r>
   bba62:	bf00      	nop
   bba64:	2003e380 	.word	0x2003e380

000bba68 <unlink>:
   bba68:	4b02      	ldr	r3, [pc, #8]	; (bba74 <unlink+0xc>)
   bba6a:	4601      	mov	r1, r0
   bba6c:	6818      	ldr	r0, [r3, #0]
   bba6e:	f000 b80d 	b.w	bba8c <_unlink_r>
   bba72:	bf00      	nop
   bba74:	2003e380 	.word	0x2003e380

000bba78 <write>:
   bba78:	4613      	mov	r3, r2
   bba7a:	460a      	mov	r2, r1
   bba7c:	4601      	mov	r1, r0
   bba7e:	4802      	ldr	r0, [pc, #8]	; (bba88 <write+0x10>)
   bba80:	6800      	ldr	r0, [r0, #0]
   bba82:	f000 b813 	b.w	bbaac <_write_r>
   bba86:	bf00      	nop
   bba88:	2003e380 	.word	0x2003e380

000bba8c <_unlink_r>:
   bba8c:	b538      	push	{r3, r4, r5, lr}
   bba8e:	4d06      	ldr	r5, [pc, #24]	; (bbaa8 <_unlink_r+0x1c>)
   bba90:	2300      	movs	r3, #0
   bba92:	4604      	mov	r4, r0
   bba94:	4608      	mov	r0, r1
   bba96:	602b      	str	r3, [r5, #0]
   bba98:	f7fc ff8e 	bl	b89b8 <_unlink>
   bba9c:	1c43      	adds	r3, r0, #1
   bba9e:	d102      	bne.n	bbaa6 <_unlink_r+0x1a>
   bbaa0:	682b      	ldr	r3, [r5, #0]
   bbaa2:	b103      	cbz	r3, bbaa6 <_unlink_r+0x1a>
   bbaa4:	6023      	str	r3, [r4, #0]
   bbaa6:	bd38      	pop	{r3, r4, r5, pc}
   bbaa8:	2003e7ec 	.word	0x2003e7ec

000bbaac <_write_r>:
   bbaac:	b538      	push	{r3, r4, r5, lr}
   bbaae:	4d07      	ldr	r5, [pc, #28]	; (bbacc <_write_r+0x20>)
   bbab0:	4604      	mov	r4, r0
   bbab2:	4608      	mov	r0, r1
   bbab4:	4611      	mov	r1, r2
   bbab6:	2200      	movs	r2, #0
   bbab8:	602a      	str	r2, [r5, #0]
   bbaba:	461a      	mov	r2, r3
   bbabc:	f7fc ff44 	bl	b8948 <_write>
   bbac0:	1c43      	adds	r3, r0, #1
   bbac2:	d102      	bne.n	bbaca <_write_r+0x1e>
   bbac4:	682b      	ldr	r3, [r5, #0]
   bbac6:	b103      	cbz	r3, bbaca <_write_r+0x1e>
   bbac8:	6023      	str	r3, [r4, #0]
   bbaca:	bd38      	pop	{r3, r4, r5, pc}
   bbacc:	2003e7ec 	.word	0x2003e7ec

000bbad0 <__register_exitproc>:
   bbad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbad4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbb90 <__register_exitproc+0xc0>
   bbad8:	4606      	mov	r6, r0
   bbada:	f8d8 0000 	ldr.w	r0, [r8]
   bbade:	461f      	mov	r7, r3
   bbae0:	460d      	mov	r5, r1
   bbae2:	4691      	mov	r9, r2
   bbae4:	f000 f878 	bl	bbbd8 <__retarget_lock_acquire_recursive>
   bbae8:	4b25      	ldr	r3, [pc, #148]	; (bbb80 <__register_exitproc+0xb0>)
   bbaea:	681c      	ldr	r4, [r3, #0]
   bbaec:	b934      	cbnz	r4, bbafc <__register_exitproc+0x2c>
   bbaee:	4c25      	ldr	r4, [pc, #148]	; (bbb84 <__register_exitproc+0xb4>)
   bbaf0:	601c      	str	r4, [r3, #0]
   bbaf2:	4b25      	ldr	r3, [pc, #148]	; (bbb88 <__register_exitproc+0xb8>)
   bbaf4:	b113      	cbz	r3, bbafc <__register_exitproc+0x2c>
   bbaf6:	681b      	ldr	r3, [r3, #0]
   bbaf8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbafc:	6863      	ldr	r3, [r4, #4]
   bbafe:	2b1f      	cmp	r3, #31
   bbb00:	dd07      	ble.n	bbb12 <__register_exitproc+0x42>
   bbb02:	f8d8 0000 	ldr.w	r0, [r8]
   bbb06:	f000 f869 	bl	bbbdc <__retarget_lock_release_recursive>
   bbb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbb12:	b34e      	cbz	r6, bbb68 <__register_exitproc+0x98>
   bbb14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbb18:	b988      	cbnz	r0, bbb3e <__register_exitproc+0x6e>
   bbb1a:	4b1c      	ldr	r3, [pc, #112]	; (bbb8c <__register_exitproc+0xbc>)
   bbb1c:	b923      	cbnz	r3, bbb28 <__register_exitproc+0x58>
   bbb1e:	f8d8 0000 	ldr.w	r0, [r8]
   bbb22:	f000 f85a 	bl	bbbda <__retarget_lock_release>
   bbb26:	e7f0      	b.n	bbb0a <__register_exitproc+0x3a>
   bbb28:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbb2c:	f7fd f93e 	bl	b8dac <malloc>
   bbb30:	2800      	cmp	r0, #0
   bbb32:	d0f4      	beq.n	bbb1e <__register_exitproc+0x4e>
   bbb34:	2300      	movs	r3, #0
   bbb36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbb3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbb3e:	6863      	ldr	r3, [r4, #4]
   bbb40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbb44:	2201      	movs	r2, #1
   bbb46:	409a      	lsls	r2, r3
   bbb48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbb4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbb50:	4313      	orrs	r3, r2
   bbb52:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbb56:	2e02      	cmp	r6, #2
   bbb58:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbb5c:	bf02      	ittt	eq
   bbb5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbb62:	4313      	orreq	r3, r2
   bbb64:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbb68:	6863      	ldr	r3, [r4, #4]
   bbb6a:	f8d8 0000 	ldr.w	r0, [r8]
   bbb6e:	1c5a      	adds	r2, r3, #1
   bbb70:	3302      	adds	r3, #2
   bbb72:	6062      	str	r2, [r4, #4]
   bbb74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbb78:	f000 f830 	bl	bbbdc <__retarget_lock_release_recursive>
   bbb7c:	2000      	movs	r0, #0
   bbb7e:	e7c6      	b.n	bbb0e <__register_exitproc+0x3e>
   bbb80:	2003e7e4 	.word	0x2003e7e4
   bbb84:	2003e758 	.word	0x2003e758
   bbb88:	00000000 	.word	0x00000000
   bbb8c:	000b8dad 	.word	0x000b8dad
   bbb90:	2003e3e4 	.word	0x2003e3e4

000bbb94 <_close_r>:
   bbb94:	b538      	push	{r3, r4, r5, lr}
   bbb96:	4d06      	ldr	r5, [pc, #24]	; (bbbb0 <_close_r+0x1c>)
   bbb98:	2300      	movs	r3, #0
   bbb9a:	4604      	mov	r4, r0
   bbb9c:	4608      	mov	r0, r1
   bbb9e:	602b      	str	r3, [r5, #0]
   bbba0:	f7fc fee2 	bl	b8968 <_close>
   bbba4:	1c43      	adds	r3, r0, #1
   bbba6:	d102      	bne.n	bbbae <_close_r+0x1a>
   bbba8:	682b      	ldr	r3, [r5, #0]
   bbbaa:	b103      	cbz	r3, bbbae <_close_r+0x1a>
   bbbac:	6023      	str	r3, [r4, #0]
   bbbae:	bd38      	pop	{r3, r4, r5, pc}
   bbbb0:	2003e7ec 	.word	0x2003e7ec

000bbbb4 <_fstat_r>:
   bbbb4:	b538      	push	{r3, r4, r5, lr}
   bbbb6:	4d07      	ldr	r5, [pc, #28]	; (bbbd4 <_fstat_r+0x20>)
   bbbb8:	2300      	movs	r3, #0
   bbbba:	4604      	mov	r4, r0
   bbbbc:	4608      	mov	r0, r1
   bbbbe:	4611      	mov	r1, r2
   bbbc0:	602b      	str	r3, [r5, #0]
   bbbc2:	f7fc fed9 	bl	b8978 <_fstat>
   bbbc6:	1c43      	adds	r3, r0, #1
   bbbc8:	d102      	bne.n	bbbd0 <_fstat_r+0x1c>
   bbbca:	682b      	ldr	r3, [r5, #0]
   bbbcc:	b103      	cbz	r3, bbbd0 <_fstat_r+0x1c>
   bbbce:	6023      	str	r3, [r4, #0]
   bbbd0:	bd38      	pop	{r3, r4, r5, pc}
   bbbd2:	bf00      	nop
   bbbd4:	2003e7ec 	.word	0x2003e7ec

000bbbd8 <__retarget_lock_acquire_recursive>:
   bbbd8:	4770      	bx	lr

000bbbda <__retarget_lock_release>:
   bbbda:	4770      	bx	lr

000bbbdc <__retarget_lock_release_recursive>:
   bbbdc:	4770      	bx	lr
	...

000bbbe0 <_lseek_r>:
   bbbe0:	b538      	push	{r3, r4, r5, lr}
   bbbe2:	4d07      	ldr	r5, [pc, #28]	; (bbc00 <_lseek_r+0x20>)
   bbbe4:	4604      	mov	r4, r0
   bbbe6:	4608      	mov	r0, r1
   bbbe8:	4611      	mov	r1, r2
   bbbea:	2200      	movs	r2, #0
   bbbec:	602a      	str	r2, [r5, #0]
   bbbee:	461a      	mov	r2, r3
   bbbf0:	f7fc feca 	bl	b8988 <_lseek>
   bbbf4:	1c43      	adds	r3, r0, #1
   bbbf6:	d102      	bne.n	bbbfe <_lseek_r+0x1e>
   bbbf8:	682b      	ldr	r3, [r5, #0]
   bbbfa:	b103      	cbz	r3, bbbfe <_lseek_r+0x1e>
   bbbfc:	6023      	str	r3, [r4, #0]
   bbbfe:	bd38      	pop	{r3, r4, r5, pc}
   bbc00:	2003e7ec 	.word	0x2003e7ec

000bbc04 <_open_r>:
   bbc04:	b538      	push	{r3, r4, r5, lr}
   bbc06:	4d07      	ldr	r5, [pc, #28]	; (bbc24 <_open_r+0x20>)
   bbc08:	4604      	mov	r4, r0
   bbc0a:	4608      	mov	r0, r1
   bbc0c:	4611      	mov	r1, r2
   bbc0e:	2200      	movs	r2, #0
   bbc10:	602a      	str	r2, [r5, #0]
   bbc12:	461a      	mov	r2, r3
   bbc14:	f7fc fe90 	bl	b8938 <_open>
   bbc18:	1c43      	adds	r3, r0, #1
   bbc1a:	d102      	bne.n	bbc22 <_open_r+0x1e>
   bbc1c:	682b      	ldr	r3, [r5, #0]
   bbc1e:	b103      	cbz	r3, bbc22 <_open_r+0x1e>
   bbc20:	6023      	str	r3, [r4, #0]
   bbc22:	bd38      	pop	{r3, r4, r5, pc}
   bbc24:	2003e7ec 	.word	0x2003e7ec

000bbc28 <_read_r>:
   bbc28:	b538      	push	{r3, r4, r5, lr}
   bbc2a:	4d07      	ldr	r5, [pc, #28]	; (bbc48 <_read_r+0x20>)
   bbc2c:	4604      	mov	r4, r0
   bbc2e:	4608      	mov	r0, r1
   bbc30:	4611      	mov	r1, r2
   bbc32:	2200      	movs	r2, #0
   bbc34:	602a      	str	r2, [r5, #0]
   bbc36:	461a      	mov	r2, r3
   bbc38:	f7fc fe8e 	bl	b8958 <_read>
   bbc3c:	1c43      	adds	r3, r0, #1
   bbc3e:	d102      	bne.n	bbc46 <_read_r+0x1e>
   bbc40:	682b      	ldr	r3, [r5, #0]
   bbc42:	b103      	cbz	r3, bbc46 <_read_r+0x1e>
   bbc44:	6023      	str	r3, [r4, #0]
   bbc46:	bd38      	pop	{r3, r4, r5, pc}
   bbc48:	2003e7ec 	.word	0x2003e7ec

000bbc4c <dynalib_user>:
   bbc4c:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bbc5c:	00000000 6e6b6e55 006e776f 20746f4e     ....Unknown.Not 
   bbc6c:	72616843 676e6967 61684300 64656772     Charging.Charged
   bbc7c:	73694400 72616863 676e6967 75614600     .Discharging.Fau
   bbc8c:	4400746c 6e6f6369 7463656e 4e006465     lt.Diconnected.N
   bbc9c:	00656e6f 69466957 4d534700 544d5500     one.WiFi.GSM.UMT
   bbcac:	44430053 4c00414d 49004554 38454545     S.CDMA.LTE.IEEE8
   bbcbc:	35313230 544c0034 41435f45 314d5f54     02154.LTE_CAT_M1
   bbccc:	45544c00 5441435f 31424e5f 322e3200     .LTE_CAT_NB1.2.2
   bbcdc:	73410030 74726573 466e6f69 756c6961     0.AssertionFailu
   bbcec:	2a206572 69705f70 203c206e 20323328     re *p_pin < (32 
   bbcfc:	3631202b 227b0029 72656c61 3a227374     + 16).{"alerts":
   bbd0c:	222c6925 656d6974 6d617473 253a2270     %i,"timestamp":%
   bbd1c:	3030756c 007d2030 64696255 5f73746f     lu000 }.Ubidots_
   bbd2c:	72656c41 6f485f74 4b006b6f 20706565     Alert_Hook.Keep 
   bbd3c:	76696c41 65732065 6f742074 20692520     Alive set to %i 
   bbd4c:	00636573 7065654b 696c4120 53006576     sec.Keep Alive.S
   bbd5c:	56207465 6f627265 4d206573 0065646f     et Verbose Mode.
   bbd6c:	61656c43 20646572 62726556 2065736f     Cleared Verbose 
   bbd7c:	65646f4d 53002a00 74207465 7233206f     Mode.*.Set to 3r
   bbd8c:	61502064 20797472 006d6953 20746553     d Party Sim.Set 
   bbd9c:	50206f74 69747261 20656c63 006d6953     to Particle Sim.
   bbdac:	6574227b 7265706d 72757461 253a2265     {"temperature":%
   bbdbc:	66312e34 2220202c 696d7568 79746964     4.1f,  "humidity
   bbdcc:	34253a22 2c66312e 53222020 6d6c696f     ":%4.1f,  "Soilm
   bbddc:	7473696f 22657275 2c69253a 53222020     oisture":%i,  "S
   bbdec:	6d6c696f 7473696f 32657275 69253a22     oilmoisture2":%i
   bbdfc:	2220202c 2278756c 2e34253a 202c6631     ,  "lux":%4.1f, 
   bbe0c:	68772220 22657469 2e34253a 202c6631      "white":%4.1f, 
   bbe1c:	6c612220 253a2273 66312e34 6162222c      "als":%4.1f,"ba
   bbe2c:	72657474 253a2279 65007d69 7269766e     ttery":%i}.envir
   bbe3c:	656d6e6f 6c61746e 6f6f682d 7246006b     onmental-hook.Fr
   bbe4c:	25206d6f 6f742073 00732520 74617453     om %s to %s.Stat
   bbe5c:	72542065 69736e61 6e6f6974 20732500     e Transition.%s 
   bbe6c:	32253a53 2566302e 51202c25 2e32253a     S:%2.0f%%, Q:%2.
   bbe7c:	25256630 73410020 74726573 466e6f69     0f%% .AssertionF
   bbe8c:	756c6961 73206572 26206372 72732026     ailure src && sr
   bbe9c:	633e2d63 626c6c61 006b6361 44206f4e     c->callback.No D
   bbeac:	00617461 70736552 65736e6f 63655220     ata.Response Rec
   bbebc:	65766965 6e550064 776f6e6b 6572206e     eived.Unknown re
   bbecc:	6e6f7073 72206573 76656365 20646569     sponse recevied 
   bbedc:	55006925 6f646962 48207374 006b6f6f     %i.Ubidots Hook.
   bbeec:	20746553 20776f4c 65776f50 6f4d2072     Set Low Power Mo
   bbefc:	43006564 7261656c 4c206465 5020776f     de.Cleared Low P
   bbf0c:	7265776f 646f4d20 34250065 2a66312e     ower Mode.%4.1f*
   bbf1c:	34250043 2566312e 754c0025 203a2078     C.%4.1f%%.Lux : 
   bbf2c:	312e3425 68570066 20657469 3425203a     %4.1f.White : %4
   bbf3c:	0066312e 20534c41 3425203a 0066312e     .1f.ALS : %4.1f.
   bbf4c:	00206925 64616f4c 20676e69 74737953     %i .Loading Syst
   bbf5c:	44206d65 75616665 0073746c 64616f4c     em Defaults.Load
   bbf6c:	20676e69 74737973 64206d65 75616665     ing system defau
   bbf7c:	0073746c 6e6e6f43 65746365 6e692064     lts.Connected in
   bbf8c:	20692520 73636573 6f6c4300 63206475      %i secs.Cloud c
   bbf9c:	656e6e6f 6f697463 7573206e 73656363     onnection succes
   bbfac:	6c756673 6c654300 616c756c 6f430072     sful.Cellular.Co
   bbfbc:	63656e6e 20646574 63206f74 756c6c65     nnected to cellu
   bbfcc:	2072616c 20747562 20746f6e 74726150     lar but not Part
   bbfdc:	656c6369 69614600 2064656c 63206f74     icle.Failed to c
   bbfec:	656e6e6f 2f007463 6b6f6f68 7365722d     onnect./hook-res
   bbffc:	736e6f70 6e652f65 6f726976 6e656d6e     ponse/environmen
   bc00c:	2d6c6174 6b6f6f68 6552002f 7361656c     tal-hook/.Releas
   bc01c:	65740065 7265706d 72757461 75680065     e.temperature.hu
   bc02c:	6964696d 4c007974 57007875 65746968     midity.Lux.White
   bc03c:	77615200 534c4120 74614200 79726574     .Raw ALS.Battery
   bc04c:	74614200 79726574 746e6f43 00747865     .BatteryContext.
   bc05c:	7065654b 696c4120 53206576 6c006365     Keep Alive Sec.l
   bc06c:	6f50776f 4d726577 0065646f 6e676953     owPowerMode.Sign
   bc07c:	52006c61 74657365 6e756f43 61420074     al.ResetCount.Ba
   bc08c:	72657474 6c6f5679 65676174 656c4100     tteryVoltage.Ale
   bc09c:	00737472 6f706552 6e697472 75442067     rts.Reporting Du
   bc0ac:	69746172 4d006e6f 75736165 4e2d6572     ration.Measure-N
   bc0bc:	5600776f 6f627265 4d2d6573 0065646f     ow.Verbose-Mode.
   bc0cc:	20746553 20776f4c 65776f50 72450072     Set Low Power.Er
   bc0dc:	20726f72 4853202d 20313354 74696e49     ror - SHT31 Init
   bc0ec:	696c6169 6974617a 45006e6f 726f7272     ialization.Error
   bc0fc:	56202d20 204c4d45 74696e49 696c6169      - VEML Initiali
   bc10c:	6974617a 54006e6f 00657572 736c6146     zation.True.Fals
   bc11c:	74530065 75747261 6f4e0070 6f632074     e.Startup.Not co
   bc12c:	63656e6e 676e6974 6c202d20 6220776f     nnecting - low b
   bc13c:	65747461 6d207972 0065646f 66667553     attery mode.Suff
   bc14c:	65696369 6220746e 65747461 70207972     icient battery p
   bc15c:	7265776f 6e6f6320 7463656e 00676e69     ower connecting.
   bc16c:	20746f4e 6e6e6f63 69746365 2d20676e     Not connecting -
   bc17c:	30353c20 63202525 67726168 202d2065      <50%% charge - 
   bc18c:	72756f66 756f6820 63732072 75646568     four hour schedu
   bc19c:	4e00656c 6320746f 656e6e6f 6e697463     le.Not connectin
   bc1ac:	202d2067 362d3035 20252535 72616863     g - 50-65%% char
   bc1bc:	2d206567 6f777420 756f6820 63732072     ge - two hour sc
   bc1cc:	75646568 4e00656c 69707061 6620676e     hedule.Napping f
   bc1dc:	2520726f 65732069 646e6f63 614e0073     or %i seconds.Na
   bc1ec:	6e697070 75442067 69746172 43006e6f     pping Duration.C
   bc1fc:	656e6e6f 6e697463 74732067 20657461     onnecting state 
   bc20c:	20747562 65726c61 20796461 6e6e6f63     but already conn
   bc21c:	65746365 6c630064 2064756f 6e6e6f63     ected.cloud conn
   bc22c:	69746365 75206e6f 6375736e 73736563     ection unsuccess
   bc23c:	006c7566 65736552 6e697474 65642067     ful.Resetting de
   bc24c:	65636976 74697720 6c612068 20747265     vice with alert 
   bc25c:	65646f63 00692520 4f525245 54535f52     code %i.ERROR_ST
   bc26c:	00455441 74206e49 66206568 776d7269     ATE.In the firmw
   bc27c:	20657261 61647075 73206574 65746174     are update state
   bc28c:	72696600 7261776d 70752065 65746164     .firmware update
   bc29c:	6d6f6320 74656c70 66006465 776d7269      completed.firmw
   bc2ac:	20657261 61647075 74206574 64656d69     are update timed
   bc2bc:	74756f20 00000000                        out....

000bc2c4 <_ZTV5Timer>:
	...
   bc2cc:	000b4499 000b44ed 000b40dd              .D...D...@..

000bc2d8 <_ZTV8MB85RC64>:
	...
   bc2e0:	000b4161 000b4175 000b6399 000b642f     aA..uA...c../d..
   bc2f0:	000b64b1 000bbc60 000bbc9b 000bbca0     .d..`...........
   bc300:	000bbca5 000bbca9 000bbcae 000bbcb3     ................
   bc310:	000bbcb7 000bbcc2 000bbccd 000bbc60     ............`...
   bc320:	000bbc68 000bbc6c 000bbc75 000bbc7d     h...l...u...}...
   bc330:	000bbc89 000bbc8f 72617453 20707574     ........Startup 
   bc340:	63637553 66737365 00006c75 00000000     Successful......
	...

000bc378 <_ZL17FRAMversionNumber>:
   bc378:	00000006 74697277 74614465 61662061     ....writeData fa
   bc388:	64656c69 72756420 20676e69 73617265     iled during eras
   bc398:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000bc3a8 <_ZTV6MB85RC>:
	...
   bc3b0:	000b62e9 000b62eb 000b6399 000b642f     .b...b...c../d..
   bc3c0:	000b64b1 69766564 65526563 66206461     .d..deviceRead f
   bc3d0:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bc3e0:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   bc3f0:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   bc400:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bc410:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   bc420:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   bc430:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   bc440:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   bc450:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   bc460:	00000063                                c...

000bc464 <_ZTV12MCP79410SRAM>:
	...
   bc46c:	000b6571 000b6587 000b6561 000b6565     qe...e..ae..ee..
   bc47c:	000b65b1 000b68a1 000b6b01              .e...h...k..

000bc488 <_ZTV12MCP79410Time>:
	...
   bc490:	000b6575 000b6579                       ue..ye..

000bc498 <_ZTV14MCP79410EEPROM>:
	...
   bc4a0:	000b6573 000b6595 000b6569 000b656d     se...e..ie..me..
   bc4b0:	000b65b1 000b68db 000b6d49              .e...h..Im..

000bc4bc <_ZTV8MCP79410>:
	...
   bc4c4:	000b6577 000b65a3 2e707061 71627570     we...e..app.pubq
   bc4d4:	63614200 6f72676b 50646e75 696c6275     .BackgroundPubli
   bc4e4:	4b526873 00000000                       shRK....

000bc4ec <_ZTV19BackgroundPublishRK>:
	...
   bc4f4:	000b7055 000b7071 656c6966 3d6d754e     Up..qp..fileNum=
   bc504:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   bc514:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   bc524:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   bc534:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   bc544:	7572726f 64657470 65766520 6e20746e     orrupted event n
   bc554:	20656d61 6420726f 00617461 64616572     ame or data.read
   bc564:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   bc574:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   bc584:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   bc594:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   bc5a4:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   bc5b4:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   bc5c4:	6c696620 6d754e65 0064253d 63736964      fileNum=%d.disc
   bc5d4:	65647261 76652064 20746e65 72006425     arded event %d.r
   bc5e4:	74657365 20726f20 63736964 656e6e6f     eset or disconne
   bc5f4:	65207463 746e6576 6173202c 66206576     ct event, save f
   bc604:	73656c69 206f7420 75657571 61720065     iles to queue.ra
   bc614:	6964006d 72616373 676e6964 726f6320     m.discarding cor
   bc624:	74707572 66206465 20656c69 70006425     rupted file %d.p
   bc634:	696c6275 6e696873 73252067 65766520     ublishing %s eve
   bc644:	253d746e 61642073 253d6174 59530073     nt=%s data=%s.SY
   bc654:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   bc664:	2944454c 20736920 75716572 64657269     LED) is required
   bc674:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   bc684:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   bc694:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   bc6a4:	61657263 73206574 3a3a6474 75716564     create std::dequ
   bc6b4:	616c2065 72656772 61687420 616d206e     e larger than ma
   bc6c4:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   bc6d4:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   bc6e4:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   bc6f4:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   bc704:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   bc714:	63637573 20737365 72006425 766f6d65     success %d.remov
   bc724:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bc734:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   bc744:	676e6974 206f7420 656c6966 66612073     ting to files af
   bc754:	20726574 6c627570 20687369 6c696166     ter publish fail
   bc764:	00657275                                ure.

000bc768 <_ZTV17PublishQueuePosix>:
	...
   bc770:	000b7c19 000b7ed5 000b7ef9 64383025     .|...~...~..%08d
   bc780:	6d657200 6465766f 00732520 65207325     .removed %s.%s e
   bc790:	74736978 6e612073 73692064 64206120     xists and is a d
   bc7a0:	63657269 79726f74 6c696600 6e692065     irectory.file in
   bc7b0:	65687420 79617720 6564202c 6974656c      the way, deleti
   bc7c0:	2520676e 74730073 66207461 64656c69     ng %s.stat filed
   bc7d0:	72726520 253d6f6e 72630064 65746165      errno=%d.create
   bc7e0:	69642064 73252072 646b6d00 66207269     d dir %s.mkdir f
   bc7f0:	656c6961 72652064 3d6f6e72 75006425     ailed errno=%d.u
   bc800:	6e6f636e 75676966 20646572 50726964     nconfigured dirP
   bc810:	00687461 6e616373 676e696e 20732520     ath.scanning %s 
   bc820:	68746977 74617020 6e726574 00732520     with pattern %s.
   bc830:	69646461 7420676e 7571206f 20657565     adding to queue 
   bc840:	25206425 65670073 6c694674 6f724665     %d %s.getFileFro
   bc850:	6575516d 72206575 72757465 2064656e     mQueue returned 
   bc860:	61006425 732e7070 69667165 0000656c     %d.app.seqfile..

000bc870 <_ZTV14SequentialFile>:
	...
   bc878:	000b8261 000b828d 000b7f0d 2e707061     a...........app.
   bc888:	38316261 00003530                       ab1805..

000bc890 <_ZTVN5spark13CellularClassE>:
	...
   bc898:	000b8f57 000b8f4d 000b8f43 000b8f05     W...M...C.......
   bc8a8:	000b4501 000b8f37 000b9bf9 000b9c01     .E..7...........
   bc8b8:	000b8f2b 000b8f23 000b8f19 000b8f0f     +...#...........
   bc8c8:	000b9c31                                1...

000bc8cc <_ZTV14CellularSignal>:
	...
   bc8d4:	000b8fe5 000b9049 000b8fe7 000b9059     ....I.......Y...
   bc8e4:	000b908d 000b90b9 000b90ed 000b900d     ................
   bc8f4:	000b8feb 000b9007 fffffffc 00000000     ................
   bc904:	000b9041                                A...

000bc908 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc910:	000b9131 000b9137 000b9175 000b9145     1...7...u...E...
   bc920:	000b9133                                3...

000bc924 <_ZTVN5spark13EthernetClassE>:
	...
   bc92c:	000b9777 000b976d 000b9763 000b9759     w...m...c...Y...
   bc93c:	000b974d 000b9741 000b9bf9 000b9c01     M...A...........
   bc94c:	000b9735 000b972d 000b9723 000b9719     5...-...#.......
   bc95c:	000b9c31                                1...

000bc960 <_ZTV7TwoWire>:
	...
   bc968:	000b9911 000b995b 000b9933 000b9913     ....[...3.......
   bc978:	000b993b 000b9943 000b994b 000b9953     ;...C...K...S...

000bc988 <_ZTV9IPAddress>:
	...
   bc990:	000b9ac9 000b9ab9 000b9abb 00707061     ............app.

000bc9a0 <_ZTVN5spark12NetworkClassE>:
	...
   bc9a8:	000b9bb9 000b9bc3 000b9bcd 000b9bd7     ................
   bc9b8:	000b9be1 000b9bed 000b9bf9 000b9c01     ................
   bc9c8:	000b9c09 000b9c15 000b9c1d 000b9c27     ............'...
   bc9d8:	000b9c31 006e616e 00666e69 0066766f     1...nan.inf.ovf.
   bc9e8:	69726977 5300676e 65747379 6c73206d     wiring.System sl
   bc9f8:	20706565 666e6f63 72756769 6f697461     eep configuratio
   bca08:	7369206e 766e6920 64696c61 005a002e     n is invalid..Z.
   bca18:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
   bca28:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
   bca38:	69746373 0000656d                       sctime..

000bca40 <_ZTV11USARTSerial>:
	...
   bca48:	000ba6fd 000ba769 000ba741 000b9d1d     ....i...A.......
   bca58:	000ba711 000ba72d 000ba71f 000ba73b     ....-.......;...
   bca68:	000ba6ff 000ba703                       ........

000bca70 <_ZTV9USBSerial>:
	...
   bca78:	000ba7a7 000ba80f 000ba7e5 000b9d1d     ................
   bca88:	000ba7d7 000ba7a9 000ba7b9 000ba809     ................
   bca98:	000ba7c9 000ba7a1                       ........

000bcaa0 <_ZSt7nothrow>:
   bcaa0:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bcab0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bcac1 <day_name.1>:
   bcac1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bcad1:	61536972                                 riSat

000bcad6 <mon_name.0>:
   bcad6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bcae6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bcaf6:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bcb06:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bcb16:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bcb26:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bcb36:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bcb46:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bcb56:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bcb66:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bcb76:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bcb86:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bcb96:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bcba6:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bcbb6:	696c6474 61722f62 632e646e               tdlib/rand.c.

000bcbc3 <_ctype_>:
   bcbc3:	20202000 20202020 28282020 20282828     .         ((((( 
   bcbd3:	20202020 20202020 20202020 20202020                     
   bcbe3:	10108820 10101010 10101010 10101010      ...............
   bcbf3:	04040410 04040404 10040404 10101010     ................
   bcc03:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bcc13:	01010101 01010101 01010101 10101010     ................
   bcc23:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bcc33:	02020202 02020202 02020202 10101010     ................
   bcc43:	00000020 00000000 00000000 00000000      ...............
	...

000bccc4 <link_const_variable_data_end>:
   bccc4:	000b55d1 	.word	0x000b55d1
   bccc8:	000b6d79 	.word	0x000b6d79
   bcccc:	000b6db9 	.word	0x000b6db9
   bccd0:	000b7ec5 	.word	0x000b7ec5
   bccd4:	000b85a9 	.word	0x000b85a9
   bccd8:	000b85b9 	.word	0x000b85b9
   bccdc:	000b8ef5 	.word	0x000b8ef5
   bcce0:	000b8fb5 	.word	0x000b8fb5
   bcce4:	000b9781 	.word	0x000b9781
   bcce8:	000b9ba9 	.word	0x000b9ba9
   bccec:	000b9d09 	.word	0x000b9d09
   bccf0:	000b9f61 	.word	0x000b9f61
   bccf4:	000ba3bd 	.word	0x000ba3bd
   bccf8:	000ba6e9 	.word	0x000ba6e9

000bccfc <link_constructors_end>:
   bccfc:	00000000 	.word	0x00000000
