
/Users/abdulhannanmustajab/Desktop/IoT/GLE_Chili_Dryer/Env-soil/ENV_Soil/target/2.3.0/boron/ENV_Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005d20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000d9d40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000140  2003e234  000da544  0001e234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  2003e378  2003e378  0002e378  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da684  000da684  0002a684  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da6ac  000da6ac  0002a6ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d21cb  00000000  00000000  0002a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d667  00000000  00000000  001fc87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00033a5b  00000000  00000000  00219ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003018  00000000  00000000  0024d93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008c58  00000000  00000000  00250955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000406f1  00000000  00000000  002595ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004bba2  00000000  00000000  00299c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113636  00000000  00000000  002e5840  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000862c  00000000  00000000  003f8e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f817 	bl	d9064 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f839 	bl	d90b4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e234 	.word	0x2003e234
   d404c:	000da544 	.word	0x000da544
   d4050:	2003e374 	.word	0x2003e374
   d4054:	2003e378 	.word	0x2003e378
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 faad 	bl	d85c0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9d0c 	.word	0x000d9d0c
   d4080:	000d9d38 	.word	0x000d9d38

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf02 	b.w	d4e8c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd3b 	bl	d4b04 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 ba4d 	b.w	d8530 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bfc5 	b.w	d7024 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bfc3 	b.w	d7024 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bfc9 	b.w	d7034 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fe60 	bl	d6d70 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6a91 	.word	0x000d6a91

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e520 	.word	0x2003e520

000d40d4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d6:	6803      	ldr	r3, [r0, #0]
   d40d8:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40da:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40dc:	d904      	bls.n	d40e8 <nrf_gpio_pin_port_decode+0x14>
   d40de:	4a07      	ldr	r2, [pc, #28]	; (d40fc <nrf_gpio_pin_port_decode+0x28>)
   d40e0:	2100      	movs	r1, #0
   d40e2:	200a      	movs	r0, #10
   d40e4:	f002 fe44 	bl	d6d70 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40ec:	bf83      	ittte	hi
   d40ee:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40f2:	4803      	ldrhi	r0, [pc, #12]	; (d4100 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40f4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40f6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	000d6a91 	.word	0x000d6a91
   d4100:	50000300 	.word	0x50000300

000d4104 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d4104:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4106:	4904      	ldr	r1, [pc, #16]	; (d4118 <_Z10measureNow6String+0x14>)
   d4108:	f003 fe99 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d410c:	b118      	cbz	r0, d4116 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d410e:	4b03      	ldr	r3, [pc, #12]	; (d411c <_Z10measureNow6String+0x18>)
   d4110:	2203      	movs	r2, #3
   d4112:	701a      	strb	r2, [r3, #0]
    return 1;
   d4114:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4116:	bd08      	pop	{r3, pc}
   d4118:	000d93c6 	.word	0x000d93c6
   d411c:	2003e4a8 	.word	0x2003e4a8

000d4120 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4120:	b510      	push	{r4, lr}
   d4122:	4b03      	ldr	r3, [pc, #12]	; (d4130 <_ZN8MB85RC64D1Ev+0x10>)
   d4124:	6003      	str	r3, [r0, #0]
   d4126:	4604      	mov	r4, r0
   d4128:	f001 fb52 	bl	d57d0 <_ZN6MB85RCD1Ev>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}
   d4130:	000d9718 	.word	0x000d9718

000d4134 <_ZN8MB85RC64D0Ev>:
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
   d4138:	f7ff fff2 	bl	d4120 <_ZN8MB85RC64D1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2110      	movs	r1, #16
   d4140:	f004 fb26 	bl	d8790 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4148:	b510      	push	{r4, lr}
   d414a:	4b03      	ldr	r3, [pc, #12]	; (d4158 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d414c:	6003      	str	r3, [r0, #0]
   d414e:	4604      	mov	r4, r0
   d4150:	f002 f930 	bl	d63b4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	bd10      	pop	{r4, pc}
   d4158:	000d96f0 	.word	0x000d96f0

000d415c <_ZN17PublishQueueAsyncD0Ev>:
   d415c:	b510      	push	{r4, lr}
   d415e:	4604      	mov	r4, r0
   d4160:	f7ff fff2 	bl	d4148 <_ZN17PublishQueueAsyncD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	2138      	movs	r1, #56	; 0x38
   d4168:	f004 fb12 	bl	d8790 <_ZdlPvj>
   d416c:	4620      	mov	r0, r4
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4174:	6800      	ldr	r0, [r0, #0]
   d4176:	b118      	cbz	r0, d4180 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4178:	f002 ff5c 	bl	d7034 <free>
            wakeupSource_ = nullptr;
   d417c:	2300      	movs	r3, #0
   d417e:	6023      	str	r3, [r4, #0]
        }
    }
   d4180:	bd10      	pop	{r4, pc}

000d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4182:	2300      	movs	r3, #0
   d4184:	2204      	movs	r2, #4
   d4186:	f002 be7d 	b.w	d6e84 <spark_variable>
	...

000d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d418e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4190:	4605      	mov	r5, r0
   d4192:	460f      	mov	r7, r1
   d4194:	4616      	mov	r6, r2
        if (valid_) {
   d4196:	b18b      	cbz	r3, d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4198:	6803      	ldr	r3, [r0, #0]
   d419a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d419c:	b183      	cbz	r3, d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d419e:	889a      	ldrh	r2, [r3, #4]
   d41a0:	2a01      	cmp	r2, #1
   d41a2:	d006      	beq.n	d41b2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41a4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41a6:	e7f9      	b.n	d419c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41a8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41aa:	b14b      	cbz	r3, d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ac:	889a      	ldrh	r2, [r3, #4]
   d41ae:	2a01      	cmp	r2, #1
   d41b0:	d1fa      	bne.n	d41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41b2:	b12b      	cbz	r3, d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41b4:	899a      	ldrh	r2, [r3, #12]
   d41b6:	42ba      	cmp	r2, r7
   d41b8:	d1f6      	bne.n	d41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41ba:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41bc:	4628      	mov	r0, r5
   d41be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41c0:	490a      	ldr	r1, [pc, #40]	; (d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d41c2:	2010      	movs	r0, #16
   d41c4:	f004 fae6 	bl	d8794 <_ZnwjRKSt9nothrow_t>
   d41c8:	4604      	mov	r4, r0
   d41ca:	b168      	cbz	r0, d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41cc:	2210      	movs	r2, #16
   d41ce:	2100      	movs	r1, #0
   d41d0:	f004 ff70 	bl	d90b4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41d4:	4b06      	ldr	r3, [pc, #24]	; (d41f0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41d6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41d8:	2301      	movs	r3, #1
   d41da:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41dc:	692b      	ldr	r3, [r5, #16]
   d41de:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41e0:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41e2:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41e4:	612c      	str	r4, [r5, #16]
   d41e6:	e7e9      	b.n	d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41e8:	7528      	strb	r0, [r5, #20]
                return *this;
   d41ea:	e7e7      	b.n	d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41ec:	000d9bb0 	.word	0x000d9bb0
   d41f0:	00030010 	.word	0x00030010

000d41f4 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41f4:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d41f6:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41f8:	4605      	mov	r5, r0
   d41fa:	460e      	mov	r6, r1
        if (valid_) {
   d41fc:	b1cb      	cbz	r3, d4232 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41fe:	6803      	ldr	r3, [r0, #0]
   d4200:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4202:	b123      	cbz	r3, d420e <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4204:	889a      	ldrh	r2, [r3, #4]
   d4206:	2a04      	cmp	r2, #4
   d4208:	d017      	beq.n	d423a <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d420a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d420c:	e7f9      	b.n	d4202 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d420e:	490c      	ldr	r1, [pc, #48]	; (d4240 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4210:	2010      	movs	r0, #16
   d4212:	f004 fabf 	bl	d8794 <_ZnwjRKSt9nothrow_t>
   d4216:	4604      	mov	r4, r0
   d4218:	b168      	cbz	r0, d4236 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d421a:	2210      	movs	r2, #16
   d421c:	2100      	movs	r1, #0
   d421e:	f004 ff49 	bl	d90b4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4222:	4b08      	ldr	r3, [pc, #32]	; (d4244 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4224:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4226:	2304      	movs	r3, #4
   d4228:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d422a:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d422c:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d422e:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d4232:	4628      	mov	r0, r5
   d4234:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4236:	7528      	strb	r0, [r5, #20]
                return *this;
   d4238:	e7fb      	b.n	d4232 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d423a:	60de      	str	r6, [r3, #12]
                return *this;
   d423c:	e7f9      	b.n	d4232 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d423e:	bf00      	nop
   d4240:	000d9bb0 	.word	0x000d9bb0
   d4244:	00030010 	.word	0x00030010

000d4248 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4248:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d424a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d424c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d424e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4252:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4256:	2201      	movs	r2, #1
   d4258:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d425a:	4341      	muls	r1, r0
   d425c:	466a      	mov	r2, sp
   d425e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4260:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4264:	f002 fe66 	bl	d6f34 <spark_set_connection_property>
    }
   d4268:	b003      	add	sp, #12
   d426a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4270 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   d4270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4272:	4d32      	ldr	r5, [pc, #200]	; (d433c <digitalWriteFast+0xcc>)
   d4274:	4c32      	ldr	r4, [pc, #200]	; (d4340 <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4276:	782b      	ldrb	r3, [r5, #0]
   d4278:	f3bf 8f5b 	dmb	ish
   d427c:	0106      	lsls	r6, r0, #4
    if (value)
   d427e:	b371      	cbz	r1, d42de <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4280:	07d8      	lsls	r0, r3, #31
   d4282:	d409      	bmi.n	d4298 <digitalWriteFast+0x28>
   d4284:	4628      	mov	r0, r5
   d4286:	f7ff ff17 	bl	d40b8 <__cxa_guard_acquire>
   d428a:	b128      	cbz	r0, d4298 <digitalWriteFast+0x28>
   d428c:	f002 fc30 	bl	d6af0 <HAL_Pin_Map>
   d4290:	6020      	str	r0, [r4, #0]
   d4292:	4628      	mov	r0, r5
   d4294:	f7ff ff15 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4298:	6823      	ldr	r3, [r4, #0]
   d429a:	5d9b      	ldrb	r3, [r3, r6]
   d429c:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d429e:	782b      	ldrb	r3, [r5, #0]
   d42a0:	f3bf 8f5b 	dmb	ish
   d42a4:	07d9      	lsls	r1, r3, #31
   d42a6:	d409      	bmi.n	d42bc <digitalWriteFast+0x4c>
   d42a8:	4824      	ldr	r0, [pc, #144]	; (d433c <digitalWriteFast+0xcc>)
   d42aa:	f7ff ff05 	bl	d40b8 <__cxa_guard_acquire>
   d42ae:	b128      	cbz	r0, d42bc <digitalWriteFast+0x4c>
   d42b0:	f002 fc1e 	bl	d6af0 <HAL_Pin_Map>
   d42b4:	6020      	str	r0, [r4, #0]
   d42b6:	4821      	ldr	r0, [pc, #132]	; (d433c <digitalWriteFast+0xcc>)
   d42b8:	f7ff ff03 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42bc:	6820      	ldr	r0, [r4, #0]
   d42be:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d42c0:	a801      	add	r0, sp, #4
   d42c2:	7873      	ldrb	r3, [r6, #1]
   d42c4:	f003 031f 	and.w	r3, r3, #31
   d42c8:	433b      	orrs	r3, r7
   d42ca:	9301      	str	r3, [sp, #4]
   d42cc:	f7ff ff02 	bl	d40d4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d42d0:	9a01      	ldr	r2, [sp, #4]
   d42d2:	2301      	movs	r3, #1
   d42d4:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d42d6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   d42da:	b003      	add	sp, #12
   d42dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42de:	07da      	lsls	r2, r3, #31
   d42e0:	d409      	bmi.n	d42f6 <digitalWriteFast+0x86>
   d42e2:	4628      	mov	r0, r5
   d42e4:	f7ff fee8 	bl	d40b8 <__cxa_guard_acquire>
   d42e8:	b128      	cbz	r0, d42f6 <digitalWriteFast+0x86>
   d42ea:	f002 fc01 	bl	d6af0 <HAL_Pin_Map>
   d42ee:	6020      	str	r0, [r4, #0]
   d42f0:	4628      	mov	r0, r5
   d42f2:	f7ff fee6 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42f6:	6823      	ldr	r3, [r4, #0]
   d42f8:	5d9b      	ldrb	r3, [r3, r6]
   d42fa:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42fc:	782b      	ldrb	r3, [r5, #0]
   d42fe:	f3bf 8f5b 	dmb	ish
   d4302:	07db      	lsls	r3, r3, #31
   d4304:	d409      	bmi.n	d431a <digitalWriteFast+0xaa>
   d4306:	480d      	ldr	r0, [pc, #52]	; (d433c <digitalWriteFast+0xcc>)
   d4308:	f7ff fed6 	bl	d40b8 <__cxa_guard_acquire>
   d430c:	b128      	cbz	r0, d431a <digitalWriteFast+0xaa>
   d430e:	f002 fbef 	bl	d6af0 <HAL_Pin_Map>
   d4312:	6020      	str	r0, [r4, #0]
   d4314:	4809      	ldr	r0, [pc, #36]	; (d433c <digitalWriteFast+0xcc>)
   d4316:	f7ff fed4 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d431a:	6820      	ldr	r0, [r4, #0]
   d431c:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d431e:	a801      	add	r0, sp, #4
   d4320:	7873      	ldrb	r3, [r6, #1]
   d4322:	f003 031f 	and.w	r3, r3, #31
   d4326:	433b      	orrs	r3, r7
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	f7ff fed3 	bl	d40d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d432e:	9a01      	ldr	r2, [sp, #4]
   d4330:	2301      	movs	r3, #1
   d4332:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4334:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d4338:	e7cf      	b.n	d42da <digitalWriteFast+0x6a>
   d433a:	bf00      	nop
   d433c:	2003e378 	.word	0x2003e378
   d4340:	2003e37c 	.word	0x2003e37c

000d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4344:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4346:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4348:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d434c:	f88d 3000 	strb.w	r3, [sp]
   d4350:	f88d 5004 	strb.w	r5, [sp, #4]
   d4354:	68e4      	ldr	r4, [r4, #12]
   d4356:	233c      	movs	r3, #60	; 0x3c
   d4358:	47a0      	blx	r4
	}
   d435a:	b003      	add	sp, #12
   d435c:	bd30      	pop	{r4, r5, pc}
	...

000d4360 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4360:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4362:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4364:	b092      	sub	sp, #72	; 0x48
   d4366:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4368:	b97b      	cbnz	r3, d438a <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d436a:	4919      	ldr	r1, [pc, #100]	; (d43d0 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d436c:	a802      	add	r0, sp, #8
   d436e:	f004 fed7 	bl	d9120 <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4372:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4374:	f88d 3000 	strb.w	r3, [sp]
   d4378:	4b16      	ldr	r3, [pc, #88]	; (d43d4 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d437a:	4917      	ldr	r1, [pc, #92]	; (d43d8 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d437c:	781b      	ldrb	r3, [r3, #0]
   d437e:	4817      	ldr	r0, [pc, #92]	; (d43dc <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4380:	aa02      	add	r2, sp, #8
   d4382:	f7ff ffdf 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4386:	b012      	add	sp, #72	; 0x48
   d4388:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d438a:	4608      	mov	r0, r1
   d438c:	f004 fe54 	bl	d9038 <atoi>
   d4390:	28c8      	cmp	r0, #200	; 0xc8
   d4392:	d10e      	bne.n	d43b2 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4394:	4912      	ldr	r1, [pc, #72]	; (d43e0 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4396:	a802      	add	r0, sp, #8
   d4398:	f004 fec2 	bl	d9120 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d439c:	f003 ff79 	bl	d8292 <_ZN9TimeClass3nowEv>
   d43a0:	4b10      	ldr	r3, [pc, #64]	; (d43e4 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43a2:	6198      	str	r0, [r3, #24]
    systemStatusWriteNeeded = true;
   d43a4:	4b10      	ldr	r3, [pc, #64]	; (d43e8 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43a6:	2201      	movs	r2, #1
   d43a8:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d43aa:	4b10      	ldr	r3, [pc, #64]	; (d43ec <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43ac:	2200      	movs	r2, #0
   d43ae:	701a      	strb	r2, [r3, #0]
   d43b0:	e7df      	b.n	d4372 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43b2:	4620      	mov	r0, r4
   d43b4:	f004 fe40 	bl	d9038 <atoi>
   d43b8:	28c9      	cmp	r0, #201	; 0xc9
   d43ba:	d0eb      	beq.n	d4394 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d43bc:	4620      	mov	r0, r4
   d43be:	f004 fe3b 	bl	d9038 <atoi>
   d43c2:	4a0b      	ldr	r2, [pc, #44]	; (d43f0 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43c4:	4603      	mov	r3, r0
   d43c6:	2140      	movs	r1, #64	; 0x40
   d43c8:	a802      	add	r0, sp, #8
   d43ca:	f002 fe4b 	bl	d7064 <snprintf>
   d43ce:	e7d0      	b.n	d4372 <_Z14UbidotsHandlerPKcS0_+0x12>
   d43d0:	000d93c8 	.word	0x000d93c8
   d43d4:	2003e39d 	.word	0x2003e39d
   d43d8:	000d93ff 	.word	0x000d93ff
   d43dc:	2003e414 	.word	0x2003e414
   d43e0:	000d93d0 	.word	0x000d93d0
   d43e4:	2003e4b4 	.word	0x2003e4b4
   d43e8:	2003e4d0 	.word	0x2003e4d0
   d43ec:	2003e3d8 	.word	0x2003e3d8
   d43f0:	000d93e2 	.word	0x000d93e2

000d43f4 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d43f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43f6:	4916      	ldr	r1, [pc, #88]	; (d4450 <_Z14setVerboseMode6String+0x5c>)
   d43f8:	4605      	mov	r5, r0
   d43fa:	f003 fd20 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43fe:	4604      	mov	r4, r0
   d4400:	b188      	cbz	r0, d4426 <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d4402:	4b14      	ldr	r3, [pc, #80]	; (d4454 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4404:	4a14      	ldr	r2, [pc, #80]	; (d4458 <_Z14setVerboseMode6String+0x64>)
   d4406:	4915      	ldr	r1, [pc, #84]	; (d445c <_Z14setVerboseMode6String+0x68>)
   d4408:	4815      	ldr	r0, [pc, #84]	; (d4460 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d440a:	2401      	movs	r4, #1
   d440c:	725c      	strb	r4, [r3, #9]
   d440e:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4410:	f88d 3000 	strb.w	r3, [sp]
   d4414:	4b13      	ldr	r3, [pc, #76]	; (d4464 <_Z14setVerboseMode6String+0x70>)
   d4416:	781b      	ldrb	r3, [r3, #0]
   d4418:	f7ff ff94 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    systemStatusWriteNeeded = true;
   d441c:	4b12      	ldr	r3, [pc, #72]	; (d4468 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d441e:	4620      	mov	r0, r4
    systemStatusWriteNeeded = true;
   d4420:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    systemStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4422:	b003      	add	sp, #12
   d4424:	bd30      	pop	{r4, r5, pc}
   d4426:	4911      	ldr	r1, [pc, #68]	; (d446c <_Z14setVerboseMode6String+0x78>)
   d4428:	4628      	mov	r0, r5
   d442a:	f003 fd08 	bl	d7e3e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d442e:	2800      	cmp	r0, #0
   d4430:	d0f7      	beq.n	d4422 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d4432:	4b08      	ldr	r3, [pc, #32]	; (d4454 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4434:	4a0e      	ldr	r2, [pc, #56]	; (d4470 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d4436:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4438:	4b0a      	ldr	r3, [pc, #40]	; (d4464 <_Z14setVerboseMode6String+0x70>)
   d443a:	f88d 4000 	strb.w	r4, [sp]
   d443e:	781b      	ldrb	r3, [r3, #0]
   d4440:	4906      	ldr	r1, [pc, #24]	; (d445c <_Z14setVerboseMode6String+0x68>)
   d4442:	4807      	ldr	r0, [pc, #28]	; (d4460 <_Z14setVerboseMode6String+0x6c>)
   d4444:	f7ff ff7e 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    systemStatusWriteNeeded = true;
   d4448:	4b07      	ldr	r3, [pc, #28]	; (d4468 <_Z14setVerboseMode6String+0x74>)
   d444a:	2001      	movs	r0, #1
   d444c:	7018      	strb	r0, [r3, #0]
    return 1;
   d444e:	e7e8      	b.n	d4422 <_Z14setVerboseMode6String+0x2e>
   d4450:	000d93c6 	.word	0x000d93c6
   d4454:	2003e4b4 	.word	0x2003e4b4
   d4458:	000d940c 	.word	0x000d940c
   d445c:	000d942f 	.word	0x000d942f
   d4460:	2003e414 	.word	0x2003e414
   d4464:	2003e39d 	.word	0x2003e39d
   d4468:	2003e4d0 	.word	0x2003e4d0
   d446c:	000d941d 	.word	0x000d941d
   d4470:	000d941f 	.word	0x000d941f

000d4474 <_Z16setThirdPartySim6String>:
}



int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d4474:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4476:	4918      	ldr	r1, [pc, #96]	; (d44d8 <_Z16setThirdPartySim6String+0x64>)
   d4478:	4605      	mov	r5, r0
   d447a:	f003 fce0 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d447e:	4604      	mov	r4, r0
   d4480:	b1b8      	cbz	r0, d44b2 <_Z16setThirdPartySim6String+0x3e>
  {
    sysStatus.thirdPartySim = true;
   d4482:	4b16      	ldr	r3, [pc, #88]	; (d44dc <_Z16setThirdPartySim6String+0x68>)
   d4484:	2201      	movs	r2, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4486:	6858      	ldr	r0, [r3, #4]
    sysStatus.thirdPartySim = true;
   d4488:	705a      	strb	r2, [r3, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d448a:	f7ff fedd 	bl	d4248 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d448e:	f002 fd19 	bl	d6ec4 <spark_cloud_flag_connected>
    // keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4492:	b148      	cbz	r0, d44a8 <_Z16setThirdPartySim6String+0x34>
   d4494:	2300      	movs	r3, #0
   d4496:	f88d 3000 	strb.w	r3, [sp]
   d449a:	4b11      	ldr	r3, [pc, #68]	; (d44e0 <_Z16setThirdPartySim6String+0x6c>)
   d449c:	4a11      	ldr	r2, [pc, #68]	; (d44e4 <_Z16setThirdPartySim6String+0x70>)
   d449e:	781b      	ldrb	r3, [r3, #0]
   d44a0:	4911      	ldr	r1, [pc, #68]	; (d44e8 <_Z16setThirdPartySim6String+0x74>)
   d44a2:	4812      	ldr	r0, [pc, #72]	; (d44ec <_Z16setThirdPartySim6String+0x78>)
   d44a4:	f7ff ff4e 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    systemStatusWriteNeeded = true;
   d44a8:	4b11      	ldr	r3, [pc, #68]	; (d44f0 <_Z16setThirdPartySim6String+0x7c>)
   d44aa:	2001      	movs	r0, #1
   d44ac:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    systemStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d44ae:	b003      	add	sp, #12
   d44b0:	bd30      	pop	{r4, r5, pc}
   d44b2:	4910      	ldr	r1, [pc, #64]	; (d44f4 <_Z16setThirdPartySim6String+0x80>)
   d44b4:	4628      	mov	r0, r5
   d44b6:	f003 fcc2 	bl	d7e3e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d44ba:	2800      	cmp	r0, #0
   d44bc:	d0f7      	beq.n	d44ae <_Z16setThirdPartySim6String+0x3a>
    sysStatus.thirdPartySim = false;
   d44be:	4b07      	ldr	r3, [pc, #28]	; (d44dc <_Z16setThirdPartySim6String+0x68>)
   d44c0:	705c      	strb	r4, [r3, #1]
   d44c2:	f002 fcff 	bl	d6ec4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d44c6:	2800      	cmp	r0, #0
   d44c8:	d0ee      	beq.n	d44a8 <_Z16setThirdPartySim6String+0x34>
   d44ca:	4b05      	ldr	r3, [pc, #20]	; (d44e0 <_Z16setThirdPartySim6String+0x6c>)
   d44cc:	f88d 4000 	strb.w	r4, [sp]
   d44d0:	781b      	ldrb	r3, [r3, #0]
   d44d2:	4a09      	ldr	r2, [pc, #36]	; (d44f8 <_Z16setThirdPartySim6String+0x84>)
   d44d4:	e7e4      	b.n	d44a0 <_Z16setThirdPartySim6String+0x2c>
   d44d6:	bf00      	nop
   d44d8:	000d93c6 	.word	0x000d93c6
   d44dc:	2003e4b4 	.word	0x2003e4b4
   d44e0:	2003e39d 	.word	0x2003e39d
   d44e4:	000d9434 	.word	0x000d9434
   d44e8:	000d942f 	.word	0x000d942f
   d44ec:	2003e414 	.word	0x2003e414
   d44f0:	2003e4d0 	.word	0x2003e4d0
   d44f4:	000d941d 	.word	0x000d941d
   d44f8:	000d9449 	.word	0x000d9449

000d44fc <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   d44fc:	b510      	push	{r4, lr}
   d44fe:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4500:	6800      	ldr	r0, [r0, #0]
   d4502:	220a      	movs	r2, #10
   d4504:	a903      	add	r1, sp, #12
   d4506:	f004 fec5 	bl	d9294 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d450a:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d450e:	d81a      	bhi.n	d4546 <_Z12setKeepAlive6String+0x4a>
  sysStatus.keepAlive = tempTime;
   d4510:	4c0e      	ldr	r4, [pc, #56]	; (d454c <_Z12setKeepAlive6String+0x50>)
   d4512:	6060      	str	r0, [r4, #4]
   d4514:	f002 fcd6 	bl	d6ec4 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4518:	b180      	cbz	r0, d453c <_Z12setKeepAlive6String+0x40>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d451a:	6863      	ldr	r3, [r4, #4]
   d451c:	4a0c      	ldr	r2, [pc, #48]	; (d4550 <_Z12setKeepAlive6String+0x54>)
   d451e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4522:	a804      	add	r0, sp, #16
   d4524:	f002 fd9e 	bl	d7064 <snprintf>
   d4528:	2300      	movs	r3, #0
    publishQueue.publish("Keep Alive",data, PRIVATE);
   d452a:	f88d 3000 	strb.w	r3, [sp]
   d452e:	4b09      	ldr	r3, [pc, #36]	; (d4554 <_Z12setKeepAlive6String+0x58>)
   d4530:	4909      	ldr	r1, [pc, #36]	; (d4558 <_Z12setKeepAlive6String+0x5c>)
   d4532:	781b      	ldrb	r3, [r3, #0]
   d4534:	4809      	ldr	r0, [pc, #36]	; (d455c <_Z12setKeepAlive6String+0x60>)
   d4536:	aa04      	add	r2, sp, #16
   d4538:	f7ff ff04 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  systemStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d453c:	4b08      	ldr	r3, [pc, #32]	; (d4560 <_Z12setKeepAlive6String+0x64>)
   d453e:	2001      	movs	r0, #1
   d4540:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4542:	b044      	add	sp, #272	; 0x110
   d4544:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4546:	2000      	movs	r0, #0
   d4548:	e7fb      	b.n	d4542 <_Z12setKeepAlive6String+0x46>
   d454a:	bf00      	nop
   d454c:	2003e4b4 	.word	0x2003e4b4
   d4550:	000d945d 	.word	0x000d945d
   d4554:	2003e39d 	.word	0x2003e39d
   d4558:	000d9476 	.word	0x000d9476
   d455c:	2003e414 	.word	0x2003e414
   d4560:	2003e4d0 	.word	0x2003e4d0

000d4564 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4564:	b507      	push	{r0, r1, r2, lr}
   d4566:	f002 fcad 	bl	d6ec4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d456a:	b148      	cbz	r0, d4580 <_Z18loadSystemDefaultsv+0x1c>
   d456c:	2300      	movs	r3, #0
   d456e:	f88d 3000 	strb.w	r3, [sp]
   d4572:	4b0b      	ldr	r3, [pc, #44]	; (d45a0 <_Z18loadSystemDefaultsv+0x3c>)
   d4574:	4a0b      	ldr	r2, [pc, #44]	; (d45a4 <_Z18loadSystemDefaultsv+0x40>)
   d4576:	781b      	ldrb	r3, [r3, #0]
   d4578:	490b      	ldr	r1, [pc, #44]	; (d45a8 <_Z18loadSystemDefaultsv+0x44>)
   d457a:	480c      	ldr	r0, [pc, #48]	; (d45ac <_Z18loadSystemDefaultsv+0x48>)
   d457c:	f7ff fee2 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4580:	4a0b      	ldr	r2, [pc, #44]	; (d45b0 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4582:	480c      	ldr	r0, [pc, #48]	; (d45b4 <_Z18loadSystemDefaultsv+0x50>)
   d4584:	2378      	movs	r3, #120	; 0x78
   d4586:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d4588:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d458a:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d458c:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d458e:	7293      	strb	r3, [r2, #10]
   d4590:	231c      	movs	r3, #28
  sysStatus.structuresVersion = 1;
   d4592:	8011      	strh	r1, [r2, #0]
}
   d4594:	b003      	add	sp, #12
   d4596:	f85d eb04 	ldr.w	lr, [sp], #4
   d459a:	f001 b9d4 	b.w	d5946 <_ZN6MB85RC9writeDataEjPKhj>
   d459e:	bf00      	nop
   d45a0:	2003e39d 	.word	0x2003e39d
   d45a4:	000d9481 	.word	0x000d9481
   d45a8:	000d942f 	.word	0x000d942f
   d45ac:	2003e414 	.word	0x2003e414
   d45b0:	2003e4b4 	.word	0x2003e4b4
   d45b4:	2003e3dc 	.word	0x2003e3dc

000d45b8 <_Z17checkSystemValuesv>:
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d45b8:	4b08      	ldr	r3, [pc, #32]	; (d45dc <_Z17checkSystemValuesv+0x24>)
   d45ba:	685a      	ldr	r2, [r3, #4]
   d45bc:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
   d45c0:	bf84      	itt	hi
   d45c2:	f44f 7216 	movhi.w	r2, #600	; 0x258
   d45c6:	605a      	strhi	r2, [r3, #4]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d45c8:	695a      	ldr	r2, [r3, #20]
   d45ca:	2aff      	cmp	r2, #255	; 0xff
   d45cc:	bf84      	itt	hi
   d45ce:	2200      	movhi	r2, #0
   d45d0:	615a      	strhi	r2, [r3, #20]
  systemStatusWriteNeeded = true;
   d45d2:	4b03      	ldr	r3, [pc, #12]	; (d45e0 <_Z17checkSystemValuesv+0x28>)
   d45d4:	2201      	movs	r2, #1
   d45d6:	701a      	strb	r2, [r3, #0]
}
   d45d8:	4770      	bx	lr
   d45da:	bf00      	nop
   d45dc:	2003e4b4 	.word	0x2003e4b4
   d45e0:	2003e4d0 	.word	0x2003e4d0

000d45e4 <_Z11petWatchdogv>:
{
   d45e4:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   d45e6:	2101      	movs	r1, #1
   d45e8:	2005      	movs	r0, #5
   d45ea:	f7ff fe41 	bl	d4270 <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   d45ee:	2100      	movs	r1, #0
   d45f0:	2005      	movs	r0, #5
   d45f2:	f7ff fe3d 	bl	d4270 <digitalWriteFast>
  watchdogFlag = false;
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <_Z11petWatchdogv+0x1c>)
   d45f8:	2200      	movs	r2, #0
   d45fa:	701a      	strb	r2, [r3, #0]
}
   d45fc:	bd08      	pop	{r3, pc}
   d45fe:	bf00      	nop
   d4600:	2003e520 	.word	0x2003e520

000d4604 <_Z9sendEventv>:
{
   d4604:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d4606:	4c1b      	ldr	r4, [pc, #108]	; (d4674 <_Z9sendEventv+0x70>)
{
   d4608:	b0ae      	sub	sp, #184	; 0xb8
  snprintf(data, sizeof(data), "{\"temperature\":%4.1f,  \"humidity\":%4.1f,  \"Soilmoisture\":%i,  \"lux\":%4.1f,  \"white\":%4.1f,  \"als\":%4.1f,\"battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.soilMoisture,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d460a:	6a23      	ldr	r3, [r4, #32]
   d460c:	69e0      	ldr	r0, [r4, #28]
   d460e:	930c      	str	r3, [sp, #48]	; 0x30
   d4610:	f004 fa2c 	bl	d8a6c <__aeabi_f2d>
   d4614:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4618:	69a0      	ldr	r0, [r4, #24]
   d461a:	f004 fa27 	bl	d8a6c <__aeabi_f2d>
   d461e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4622:	6960      	ldr	r0, [r4, #20]
   d4624:	f004 fa22 	bl	d8a6c <__aeabi_f2d>
   d4628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d462a:	9304      	str	r3, [sp, #16]
   d462c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4630:	6920      	ldr	r0, [r4, #16]
   d4632:	f004 fa1b 	bl	d8a6c <__aeabi_f2d>
   d4636:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d463a:	68e0      	ldr	r0, [r4, #12]
   d463c:	f004 fa16 	bl	d8a6c <__aeabi_f2d>
   d4640:	4a0d      	ldr	r2, [pc, #52]	; (d4678 <_Z9sendEventv+0x74>)
   d4642:	e9cd 0100 	strd	r0, r1, [sp]
   d4646:	2180      	movs	r1, #128	; 0x80
   d4648:	a80e      	add	r0, sp, #56	; 0x38
   d464a:	f002 fd0b 	bl	d7064 <snprintf>
  publishQueue.publish("environmental-hook", data, PRIVATE);
   d464e:	2300      	movs	r3, #0
   d4650:	f88d 3000 	strb.w	r3, [sp]
   d4654:	4b09      	ldr	r3, [pc, #36]	; (d467c <_Z9sendEventv+0x78>)
   d4656:	490a      	ldr	r1, [pc, #40]	; (d4680 <_Z9sendEventv+0x7c>)
   d4658:	781b      	ldrb	r3, [r3, #0]
   d465a:	480a      	ldr	r0, [pc, #40]	; (d4684 <_Z9sendEventv+0x80>)
   d465c:	aa0e      	add	r2, sp, #56	; 0x38
   d465e:	f7ff fe71 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d4662:	4b09      	ldr	r3, [pc, #36]	; (d4688 <_Z9sendEventv+0x84>)
   d4664:	2201      	movs	r2, #1
   d4666:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4668:	f002 fa1a 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d466c:	4b07      	ldr	r3, [pc, #28]	; (d468c <_Z9sendEventv+0x88>)
   d466e:	6018      	str	r0, [r3, #0]
}
   d4670:	b02e      	add	sp, #184	; 0xb8
   d4672:	bd10      	pop	{r4, pc}
   d4674:	2003e470 	.word	0x2003e470
   d4678:	000d9499 	.word	0x000d9499
   d467c:	2003e39d 	.word	0x2003e39d
   d4680:	000d950f 	.word	0x000d950f
   d4684:	2003e414 	.word	0x2003e414
   d4688:	2003e3d8 	.word	0x2003e3d8
   d468c:	2003e524 	.word	0x2003e524

000d4690 <_Z22publishStateTransitionv>:
{
   d4690:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4692:	4d11      	ldr	r5, [pc, #68]	; (d46d8 <_Z22publishStateTransitionv+0x48>)
   d4694:	4c11      	ldr	r4, [pc, #68]	; (d46dc <_Z22publishStateTransitionv+0x4c>)
   d4696:	4912      	ldr	r1, [pc, #72]	; (d46e0 <_Z22publishStateTransitionv+0x50>)
   d4698:	782a      	ldrb	r2, [r5, #0]
   d469a:	7820      	ldrb	r0, [r4, #0]
{
   d469c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d469e:	231a      	movs	r3, #26
   d46a0:	fb03 1202 	mla	r2, r3, r2, r1
   d46a4:	9200      	str	r2, [sp, #0]
   d46a6:	fb03 1300 	mla	r3, r3, r0, r1
   d46aa:	4a0e      	ldr	r2, [pc, #56]	; (d46e4 <_Z22publishStateTransitionv+0x54>)
   d46ac:	2128      	movs	r1, #40	; 0x28
   d46ae:	a802      	add	r0, sp, #8
   d46b0:	f002 fcd8 	bl	d7064 <snprintf>
  oldState = state;
   d46b4:	782b      	ldrb	r3, [r5, #0]
   d46b6:	7023      	strb	r3, [r4, #0]
   d46b8:	f002 fc04 	bl	d6ec4 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d46bc:	b148      	cbz	r0, d46d2 <_Z22publishStateTransitionv+0x42>
   d46be:	2300      	movs	r3, #0
   d46c0:	f88d 3000 	strb.w	r3, [sp]
   d46c4:	4b08      	ldr	r3, [pc, #32]	; (d46e8 <_Z22publishStateTransitionv+0x58>)
   d46c6:	4909      	ldr	r1, [pc, #36]	; (d46ec <_Z22publishStateTransitionv+0x5c>)
   d46c8:	781b      	ldrb	r3, [r3, #0]
   d46ca:	4809      	ldr	r0, [pc, #36]	; (d46f0 <_Z22publishStateTransitionv+0x60>)
   d46cc:	aa02      	add	r2, sp, #8
   d46ce:	f7ff fe39 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d46d2:	b00d      	add	sp, #52	; 0x34
   d46d4:	bd30      	pop	{r4, r5, pc}
   d46d6:	bf00      	nop
   d46d8:	2003e4a8 	.word	0x2003e4a8
   d46dc:	2003e412 	.word	0x2003e412
   d46e0:	2003e238 	.word	0x2003e238
   d46e4:	000d9522 	.word	0x000d9522
   d46e8:	2003e39d 	.word	0x2003e39d
   d46ec:	000d9530 	.word	0x000d9530
   d46f0:	2003e414 	.word	0x2003e414

000d46f4 <_Z17connectToParticlev>:
void keepAliveMessage() {
  publishQueue.publish("*", PRIVATE,NO_ACK);
}


bool connectToParticle() {
   d46f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d46f8:	481f      	ldr	r0, [pc, #124]	; (d4778 <_Z17connectToParticlev+0x84>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d46fa:	f8df a088 	ldr.w	sl, [pc, #136]	; d4784 <_Z17connectToParticlev+0x90>
   d46fe:	6840      	ldr	r0, [r0, #4]
   d4700:	2300      	movs	r3, #0
   d4702:	461a      	mov	r2, r3
   d4704:	4619      	mov	r1, r3
   d4706:	f002 fc4d 	bl	d6fa4 <network_on>
        spark_cloud_flag_connect();
   d470a:	f002 fbd3 	bl	d6eb4 <spark_cloud_flag_connect>
   d470e:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4712:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4716:	f240 38e7 	movw	r8, #999	; 0x3e7
   d471a:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d471e:	2000      	movs	r0, #0
   d4720:	f002 f9ce 	bl	d6ac0 <hal_timer_millis>
   d4724:	4605      	mov	r5, r0
   d4726:	2000      	movs	r0, #0
   d4728:	f002 f9ca 	bl	d6ac0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d472c:	1b46      	subs	r6, r0, r5
   d472e:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4732:	45b9      	cmp	r9, r7
   d4734:	bf08      	it	eq
   d4736:	45b0      	cmpeq	r8, r6
   d4738:	d305      	bcc.n	d4746 <_Z17connectToParticlev+0x52>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d473a:	f002 fbc3 	bl	d6ec4 <spark_cloud_flag_connected>
   d473e:	b910      	cbnz	r0, d4746 <_Z17connectToParticlev+0x52>
            spark_process();
   d4740:	f002 fbb0 	bl	d6ea4 <spark_process>
        while (_while() && !_condition()) {
   d4744:	e7ef      	b.n	d4726 <_Z17connectToParticlev+0x32>
   d4746:	f002 fbbd 	bl	d6ec4 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d474a:	b120      	cbz	r0, d4756 <_Z17connectToParticlev+0x62>
   d474c:	f002 fbba 	bl	d6ec4 <spark_cloud_flag_connected>
    Particle.process();                                           // Keeps the device responsive as it is not traversing the main loop
    petWatchdog();                                                // Pet the watchdog as we are out of the main loop for a long time.
  }
  if (Particle.connected()) {
   d4750:	b960      	cbnz	r0, d476c <_Z17connectToParticlev+0x78>
    return 1;                                                     // Were able to connect successfully
  }
  else {
    return 0;                                                     // Failed to connect
  }
}
   d4752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d4756:	f002 f9a3 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d475a:	f8ca 0000 	str.w	r0, [sl]
    		spark_process();
   d475e:	f002 fba1 	bl	d6ea4 <spark_process>
    petWatchdog();                                                // Pet the watchdog as we are out of the main loop for a long time.
   d4762:	f7ff ff3f 	bl	d45e4 <_Z11petWatchdogv>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4766:	3c01      	subs	r4, #1
   d4768:	d1d9      	bne.n	d471e <_Z17connectToParticlev+0x2a>
   d476a:	e7ef      	b.n	d474c <_Z17connectToParticlev+0x58>
    sysStatus.connectedStatus = true;
   d476c:	4a03      	ldr	r2, [pc, #12]	; (d477c <_Z17connectToParticlev+0x88>)
   d476e:	2301      	movs	r3, #1
   d4770:	7213      	strb	r3, [r2, #8]
    systemStatusWriteNeeded = true;
   d4772:	4a03      	ldr	r2, [pc, #12]	; (d4780 <_Z17connectToParticlev+0x8c>)
   d4774:	7013      	strb	r3, [r2, #0]
    return 1;                                                     // Were able to connect successfully
   d4776:	e7ec      	b.n	d4752 <_Z17connectToParticlev+0x5e>
   d4778:	2003e544 	.word	0x2003e544
   d477c:	2003e4b4 	.word	0x2003e4b4
   d4780:	2003e4d0 	.word	0x2003e4d0
   d4784:	2003e73c 	.word	0x2003e73c

000d4788 <_Z15setLowPowerMode6String>:
{
   d4788:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d478a:	4927      	ldr	r1, [pc, #156]	; (d4828 <_Z15setLowPowerMode6String+0xa0>)
   d478c:	4604      	mov	r4, r0
   d478e:	f003 fb56 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4792:	b340      	cbz	r0, d47e6 <_Z15setLowPowerMode6String+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4794:	4924      	ldr	r1, [pc, #144]	; (d4828 <_Z15setLowPowerMode6String+0xa0>)
   d4796:	4620      	mov	r0, r4
   d4798:	f003 fb51 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d479c:	bb58      	cbnz	r0, d47f6 <_Z15setLowPowerMode6String+0x6e>
   d479e:	4923      	ldr	r1, [pc, #140]	; (d482c <_Z15setLowPowerMode6String+0xa4>)
   d47a0:	4620      	mov	r0, r4
   d47a2:	f003 fb4c 	bl	d7e3e <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d47a6:	2800      	cmp	r0, #0
   d47a8:	d03a      	beq.n	d4820 <_Z15setLowPowerMode6String+0x98>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d47aa:	f002 fb8b 	bl	d6ec4 <spark_cloud_flag_connected>
   d47ae:	4c20      	ldr	r4, [pc, #128]	; (d4830 <_Z15setLowPowerMode6String+0xa8>)
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d47b0:	b918      	cbnz	r0, d47ba <_Z15setLowPowerMode6String+0x32>
      connectToParticle();
   d47b2:	f7ff ff9f 	bl	d46f4 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d47b6:	2301      	movs	r3, #1
   d47b8:	7223      	strb	r3, [r4, #8]
   d47ba:	2500      	movs	r5, #0
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
   d47bc:	4b1d      	ldr	r3, [pc, #116]	; (d4834 <_Z15setLowPowerMode6String+0xac>)
   d47be:	f88d 5000 	strb.w	r5, [sp]
   d47c2:	781b      	ldrb	r3, [r3, #0]
   d47c4:	4a1c      	ldr	r2, [pc, #112]	; (d4838 <_Z15setLowPowerMode6String+0xb0>)
   d47c6:	491d      	ldr	r1, [pc, #116]	; (d483c <_Z15setLowPowerMode6String+0xb4>)
   d47c8:	481d      	ldr	r0, [pc, #116]	; (d4840 <_Z15setLowPowerMode6String+0xb8>)
   d47ca:	f7ff fdbb 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d47ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d47d2:	f002 fc93 	bl	d70fc <delay>
    strncpy(lowPowerModeStr,"False", sizeof(lowPowerModeStr));                                  // Use capitalization so we know that we set this.
   d47d6:	4a1b      	ldr	r2, [pc, #108]	; (d4844 <_Z15setLowPowerMode6String+0xbc>)
   d47d8:	4b1b      	ldr	r3, [pc, #108]	; (d4848 <_Z15setLowPowerMode6String+0xc0>)
   d47da:	6811      	ldr	r1, [r2, #0]
   d47dc:	8892      	ldrh	r2, [r2, #4]
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d47de:	72e5      	strb	r5, [r4, #11]
    strncpy(lowPowerModeStr,"False", sizeof(lowPowerModeStr));                                  // Use capitalization so we know that we set this.
   d47e0:	6019      	str	r1, [r3, #0]
   d47e2:	809a      	strh	r2, [r3, #4]
   d47e4:	e01c      	b.n	d4820 <_Z15setLowPowerMode6String+0x98>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d47e6:	4911      	ldr	r1, [pc, #68]	; (d482c <_Z15setLowPowerMode6String+0xa4>)
   d47e8:	4620      	mov	r0, r4
   d47ea:	f003 fb28 	bl	d7e3e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d47ee:	2800      	cmp	r0, #0
   d47f0:	d1d0      	bne.n	d4794 <_Z15setLowPowerMode6String+0xc>
}
   d47f2:	b003      	add	sp, #12
   d47f4:	bd30      	pop	{r4, r5, pc}
   d47f6:	f002 fb65 	bl	d6ec4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d47fa:	b148      	cbz	r0, d4810 <_Z15setLowPowerMode6String+0x88>
   d47fc:	2300      	movs	r3, #0
      publishQueue.publish("Mode","Low Power Mode", PRIVATE);
   d47fe:	f88d 3000 	strb.w	r3, [sp]
   d4802:	4b0c      	ldr	r3, [pc, #48]	; (d4834 <_Z15setLowPowerMode6String+0xac>)
   d4804:	4a11      	ldr	r2, [pc, #68]	; (d484c <_Z15setLowPowerMode6String+0xc4>)
   d4806:	781b      	ldrb	r3, [r3, #0]
   d4808:	490c      	ldr	r1, [pc, #48]	; (d483c <_Z15setLowPowerMode6String+0xb4>)
   d480a:	480d      	ldr	r0, [pc, #52]	; (d4840 <_Z15setLowPowerMode6String+0xb8>)
   d480c:	f7ff fd9a 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d4810:	4b07      	ldr	r3, [pc, #28]	; (d4830 <_Z15setLowPowerMode6String+0xa8>)
    strncpy(lowPowerModeStr,"True", sizeof(lowPowerModeStr));
   d4812:	490f      	ldr	r1, [pc, #60]	; (d4850 <_Z15setLowPowerMode6String+0xc8>)
   d4814:	480c      	ldr	r0, [pc, #48]	; (d4848 <_Z15setLowPowerMode6String+0xc0>)
    sysStatus.lowPowerMode = true;
   d4816:	2201      	movs	r2, #1
   d4818:	72da      	strb	r2, [r3, #11]
    strncpy(lowPowerModeStr,"True", sizeof(lowPowerModeStr));
   d481a:	2206      	movs	r2, #6
   d481c:	f004 fcad 	bl	d917a <strncpy>
  systemStatusWriteNeeded = true;
   d4820:	4b0c      	ldr	r3, [pc, #48]	; (d4854 <_Z15setLowPowerMode6String+0xcc>)
   d4822:	2001      	movs	r0, #1
   d4824:	7018      	strb	r0, [r3, #0]
  return 1;
   d4826:	e7e4      	b.n	d47f2 <_Z15setLowPowerMode6String+0x6a>
   d4828:	000d93c6 	.word	0x000d93c6
   d482c:	000d941d 	.word	0x000d941d
   d4830:	2003e4b4 	.word	0x2003e4b4
   d4834:	2003e39d 	.word	0x2003e39d
   d4838:	000d9557 	.word	0x000d9557
   d483c:	000d942f 	.word	0x000d942f
   d4840:	2003e414 	.word	0x2003e414
   d4844:	000d9569 	.word	0x000d9569
   d4848:	2003e3fc 	.word	0x2003e3fc
   d484c:	000d9543 	.word	0x000d9543
   d4850:	000d9552 	.word	0x000d9552
   d4854:	2003e4d0 	.word	0x2003e4d0

000d4858 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4858:	b508      	push	{r3, lr}
   d485a:	f002 fb33 	bl	d6ec4 <spark_cloud_flag_connected>
  return !Particle.connected();
   d485e:	f080 0001 	eor.w	r0, r0, #1
   d4862:	b2c0      	uxtb	r0, r0
   d4864:	bd08      	pop	{r3, pc}
	...

000d4868 <_Z22disconnectFromParticlev>:
{
   d4868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d486c:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d486e:	2400      	movs	r4, #0
  Particle.disconnect();
   d4870:	a801      	add	r0, sp, #4
   d4872:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4876:	f8ad 400c 	strh.w	r4, [sp, #12]
   d487a:	f002 fd39 	bl	d72f0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d487e:	4620      	mov	r0, r4
   d4880:	f002 f91e 	bl	d6ac0 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4884:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4888:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d488a:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d488e:	2000      	movs	r0, #0
   d4890:	f002 f916 	bl	d6ac0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4894:	1b46      	subs	r6, r0, r5
   d4896:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d489a:	45b9      	cmp	r9, r7
   d489c:	bf08      	it	eq
   d489e:	45b0      	cmpeq	r8, r6
   d48a0:	d305      	bcc.n	d48ae <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d48a2:	f7ff ffd9 	bl	d4858 <_Z12notConnectedv>
   d48a6:	b910      	cbnz	r0, d48ae <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d48a8:	f002 fafc 	bl	d6ea4 <spark_process>
        while (_while() && !_condition()) {
   d48ac:	e7ef      	b.n	d488e <_Z22disconnectFromParticlev+0x26>
   d48ae:	f7ff ffd3 	bl	d4858 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d48b2:	480a      	ldr	r0, [pc, #40]	; (d48dc <_Z22disconnectFromParticlev+0x74>)
   d48b4:	2300      	movs	r3, #0
   d48b6:	4619      	mov	r1, r3
   d48b8:	461a      	mov	r2, r3
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	f002 fb7a 	bl	d6fb4 <network_off>
  sysStatus.connectedStatus = false;
   d48c0:	4b07      	ldr	r3, [pc, #28]	; (d48e0 <_Z22disconnectFromParticlev+0x78>)
   d48c2:	2200      	movs	r2, #0
   d48c4:	721a      	strb	r2, [r3, #8]
  systemStatusWriteNeeded = true;
   d48c6:	4b07      	ldr	r3, [pc, #28]	; (d48e4 <_Z22disconnectFromParticlev+0x7c>)
   d48c8:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d48ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d48ce:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d48d0:	f002 fc14 	bl	d70fc <delay>
}
   d48d4:	4620      	mov	r0, r4
   d48d6:	b005      	add	sp, #20
   d48d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d48dc:	2003e544 	.word	0x2003e544
   d48e0:	2003e4b4 	.word	0x2003e4b4
   d48e4:	2003e4d0 	.word	0x2003e4d0

000d48e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d48e8:	b530      	push	{r4, r5, lr}
   d48ea:	b085      	sub	sp, #20
   d48ec:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d48ee:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d48f0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d48f2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d48f4:	f002 fa54 	bl	d6da0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d48f8:	b9b0      	cbnz	r0, d4928 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d48fa:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d48fc:	b10c      	cbz	r4, d4902 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d48fe:	6923      	ldr	r3, [r4, #16]
   d4900:	b923      	cbnz	r3, d490c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4902:	4a0a      	ldr	r2, [pc, #40]	; (d492c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4904:	2100      	movs	r1, #0
   d4906:	200a      	movs	r0, #10
   d4908:	f002 fa32 	bl	d6d70 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d490c:	2300      	movs	r3, #0
   d490e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4912:	230c      	movs	r3, #12
   d4914:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4918:	2304      	movs	r3, #4
   d491a:	9303      	str	r3, [sp, #12]
   d491c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d491e:	6923      	ldr	r3, [r4, #16]
   d4920:	aa01      	add	r2, sp, #4
   d4922:	2101      	movs	r1, #1
   d4924:	4620      	mov	r0, r4
   d4926:	4798      	blx	r3
}
   d4928:	b005      	add	sp, #20
   d492a:	bd30      	pop	{r4, r5, pc}
   d492c:	000d6a91 	.word	0x000d6a91

000d4930 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4930:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4932:	4d0e      	ldr	r5, [pc, #56]	; (d496c <_Z17getBatteryContextv+0x3c>)
   d4934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4936:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4938:	ac01      	add	r4, sp, #4
   d493a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d493c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4944:	4669      	mov	r1, sp
   d4946:	2007      	movs	r0, #7
   d4948:	f7ff ffce 	bl	d48e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d494c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d494e:	bfa8      	it	ge
   d4950:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4952:	4a07      	ldr	r2, [pc, #28]	; (d4970 <_Z17getBatteryContextv+0x40>)
   d4954:	ab08      	add	r3, sp, #32
   d4956:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d495a:	2110      	movs	r1, #16
   d495c:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4960:	4804      	ldr	r0, [pc, #16]	; (d4974 <_Z17getBatteryContextv+0x44>)
   d4962:	f002 fb7f 	bl	d7064 <snprintf>
}
   d4966:	b009      	add	sp, #36	; 0x24
   d4968:	bd30      	pop	{r4, r5, pc}
   d496a:	bf00      	nop
   d496c:	000d972c 	.word	0x000d972c
   d4970:	000d9800 	.word	0x000d9800
   d4974:	2003e39e 	.word	0x2003e39e

000d4978 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
    }

    float batteryCharge() const {
   d4978:	b507      	push	{r0, r1, r2, lr}
   d497a:	2003      	movs	r0, #3
   d497c:	a901      	add	r1, sp, #4
   d497e:	f7ff ffb3 	bl	d48e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4982:	b940      	cbnz	r0, d4996 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4984:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4988:	ee00 3a10 	vmov	s0, r3
   d498c:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d4990:	b003      	add	sp, #12
   d4992:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4996:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d499a:	e7f9      	b.n	d4990 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d499c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d499c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  sensor_data.validData = false;
   d499e:	4c48      	ldr	r4, [pc, #288]	; (d4ac0 <_Z16takeMeasurementsv+0x124>)
  if (sht31.readTemperature()){
   d49a0:	4848      	ldr	r0, [pc, #288]	; (d4ac4 <_Z16takeMeasurementsv+0x128>)
  sensor_data.validData = false;
   d49a2:	2500      	movs	r5, #0
   d49a4:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d49a6:	f002 f807 	bl	d69b8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d49aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d49ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49b2:	f000 8081 	beq.w	d4ab8 <_Z16takeMeasurementsv+0x11c>
    sensor_data.temperatureInC = sht31.readTemperature();
   d49b6:	4843      	ldr	r0, [pc, #268]	; (d4ac4 <_Z16takeMeasurementsv+0x128>)
   d49b8:	f001 fffe 	bl	d69b8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d49bc:	ee10 0a10 	vmov	r0, s0
   d49c0:	ed84 0a03 	vstr	s0, [r4, #12]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d49c4:	f004 f852 	bl	d8a6c <__aeabi_f2d>
   d49c8:	4a3f      	ldr	r2, [pc, #252]	; (d4ac8 <_Z16takeMeasurementsv+0x12c>)
   d49ca:	e9cd 0100 	strd	r0, r1, [sp]
   d49ce:	2110      	movs	r1, #16
   d49d0:	483e      	ldr	r0, [pc, #248]	; (d4acc <_Z16takeMeasurementsv+0x130>)
   d49d2:	f002 fb47 	bl	d7064 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d49d6:	483b      	ldr	r0, [pc, #236]	; (d4ac4 <_Z16takeMeasurementsv+0x128>)
   d49d8:	f001 fffc 	bl	d69d4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d49dc:	ee10 0a10 	vmov	r0, s0
   d49e0:	ed84 0a04 	vstr	s0, [r4, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d49e4:	f004 f842 	bl	d8a6c <__aeabi_f2d>
   d49e8:	4a39      	ldr	r2, [pc, #228]	; (d4ad0 <_Z16takeMeasurementsv+0x134>)
   d49ea:	e9cd 0100 	strd	r0, r1, [sp]
   d49ee:	2110      	movs	r1, #16
   d49f0:	4838      	ldr	r0, [pc, #224]	; (d4ad4 <_Z16takeMeasurementsv+0x138>)
   d49f2:	f002 fb37 	bl	d7064 <snprintf>
    sensor_data.lux = veml.readLux();
   d49f6:	4838      	ldr	r0, [pc, #224]	; (d4ad8 <_Z16takeMeasurementsv+0x13c>)
   d49f8:	f000 fdbe 	bl	d5578 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   d49fc:	4836      	ldr	r0, [pc, #216]	; (d4ad8 <_Z16takeMeasurementsv+0x13c>)
    sensor_data.lux = veml.readLux();
   d49fe:	ed84 0a05 	vstr	s0, [r4, #20]
    sensor_data.white = veml.readWhite();
   d4a02:	f000 fdd9 	bl	d55b8 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   d4a06:	4834      	ldr	r0, [pc, #208]	; (d4ad8 <_Z16takeMeasurementsv+0x13c>)
    sensor_data.white = veml.readWhite();
   d4a08:	ed84 0a06 	vstr	s0, [r4, #24]
    sensor_data.raw_als = veml.readALS();
   d4a0c:	f000 fd56 	bl	d54bc <_ZN17Adafruit_VEML77007readALSEv>
   d4a10:	ee07 0a90 	vmov	s15, r0
   d4a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d4a18:	6960      	ldr	r0, [r4, #20]
    sensor_data.raw_als = veml.readALS();
   d4a1a:	edc4 7a07 	vstr	s15, [r4, #28]
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d4a1e:	f004 f825 	bl	d8a6c <__aeabi_f2d>
   d4a22:	4a2e      	ldr	r2, [pc, #184]	; (d4adc <_Z16takeMeasurementsv+0x140>)
   d4a24:	e9cd 0100 	strd	r0, r1, [sp]
   d4a28:	2110      	movs	r1, #16
   d4a2a:	482d      	ldr	r0, [pc, #180]	; (d4ae0 <_Z16takeMeasurementsv+0x144>)
   d4a2c:	f002 fb1a 	bl	d7064 <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   d4a30:	69a0      	ldr	r0, [r4, #24]
   d4a32:	f004 f81b 	bl	d8a6c <__aeabi_f2d>
   d4a36:	4a2b      	ldr	r2, [pc, #172]	; (d4ae4 <_Z16takeMeasurementsv+0x148>)
   d4a38:	e9cd 0100 	strd	r0, r1, [sp]
   d4a3c:	2110      	movs	r1, #16
   d4a3e:	482a      	ldr	r0, [pc, #168]	; (d4ae8 <_Z16takeMeasurementsv+0x14c>)
   d4a40:	f002 fb10 	bl	d7064 <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   d4a44:	69e0      	ldr	r0, [r4, #28]
   d4a46:	f004 f811 	bl	d8a6c <__aeabi_f2d>
   d4a4a:	4a28      	ldr	r2, [pc, #160]	; (d4aec <_Z16takeMeasurementsv+0x150>)
   d4a4c:	e9cd 0100 	strd	r0, r1, [sp]
   d4a50:	2110      	movs	r1, #16
   d4a52:	4827      	ldr	r0, [pc, #156]	; (d4af0 <_Z16takeMeasurementsv+0x154>)
   d4a54:	f002 fb06 	bl	d7064 <snprintf>
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4a58:	f7ff ff8e 	bl	d4978 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4a5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4a60:	2110      	movs	r1, #16
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4a62:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4a66:	4a23      	ldr	r2, [pc, #140]	; (d4af4 <_Z16takeMeasurementsv+0x158>)
   d4a68:	4823      	ldr	r0, [pc, #140]	; (d4af8 <_Z16takeMeasurementsv+0x15c>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4a6a:	edc4 7a08 	vstr	s15, [r4, #32]
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4a6e:	f002 faf9 	bl	d7064 <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   d4a72:	f7ff ff5d 	bl	d4930 <_Z17getBatteryContextv>
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4a76:	f7ff ff7f 	bl	d4978 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4a7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4a7e:	4a1f      	ldr	r2, [pc, #124]	; (d4afc <_Z16takeMeasurementsv+0x160>)
   d4a80:	ee17 3a90 	vmov	r3, s15
    if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4a84:	2b1d      	cmp	r3, #29
   d4a86:	bfcc      	ite	gt
   d4a88:	2300      	movgt	r3, #0
   d4a8a:	2301      	movle	r3, #1
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4a8c:	2013      	movs	r0, #19
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4a8e:	edc2 7a03 	vstr	s15, [r2, #12]
    if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4a92:	7293      	strb	r3, [r2, #10]
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4a94:	f003 fe28 	bl	d86e8 <analogRead>
   d4a98:	2364      	movs	r3, #100	; 0x64
   d4a9a:	4629      	mov	r1, r5
   d4a9c:	9300      	str	r3, [sp, #0]
   d4a9e:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4aa2:	462b      	mov	r3, r5
   d4aa4:	f002 fb1e 	bl	d70e4 <_Z3mapiiiii>
    sensor_data.validData = true;
   d4aa8:	2501      	movs	r5, #1
    sensor_data.soilMoisture = map(analogRead(soilPin),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4aaa:	62a0      	str	r0, [r4, #40]	; 0x28
    sensor_data.validData = true;
   d4aac:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4aae:	f003 fbf0 	bl	d8292 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;  
   d4ab2:	4b13      	ldr	r3, [pc, #76]	; (d4b00 <_Z16takeMeasurementsv+0x164>)
    sensor_data.timeStamp = Time.now();
   d4ab4:	6060      	str	r0, [r4, #4]
    sensorDataWriteNeeded = true;  
   d4ab6:	701d      	strb	r5, [r3, #0]
    }else return 0;
   d4ab8:	4628      	mov	r0, r5
  }                                                                       // Take measurement from all the sensors
   d4aba:	b003      	add	sp, #12
   d4abc:	bd30      	pop	{r4, r5, pc}
   d4abe:	bf00      	nop
   d4ac0:	2003e470 	.word	0x2003e470
   d4ac4:	2003e49c 	.word	0x2003e49c
   d4ac8:	000d956f 	.word	0x000d956f
   d4acc:	2003e4d1 	.word	0x2003e4d1
   d4ad0:	000d9577 	.word	0x000d9577
   d4ad4:	2003e3ec 	.word	0x2003e3ec
   d4ad8:	2003e4e4 	.word	0x2003e4e4
   d4adc:	000d957f 	.word	0x000d957f
   d4ae0:	2003e402 	.word	0x2003e402
   d4ae4:	000d958b 	.word	0x000d958b
   d4ae8:	2003e528 	.word	0x2003e528
   d4aec:	000d9599 	.word	0x000d9599
   d4af0:	2003e380 	.word	0x2003e380
   d4af4:	000d95a5 	.word	0x000d95a5
   d4af8:	2003e3ae 	.word	0x2003e3ae
   d4afc:	2003e4b4 	.word	0x2003e4b4
   d4b00:	2003e46c 	.word	0x2003e46c

000d4b04 <loop>:
{
   d4b04:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4b06:	4c7a      	ldr	r4, [pc, #488]	; (d4cf0 <loop+0x1ec>)
   d4b08:	7823      	ldrb	r3, [r4, #0]
   d4b0a:	3b01      	subs	r3, #1
{
   d4b0c:	b08a      	sub	sp, #40	; 0x28
   d4b0e:	2b06      	cmp	r3, #6
   d4b10:	d84d      	bhi.n	d4bae <loop+0xaa>
   d4b12:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4b16:	00c5      	.short	0x00c5
   d4b18:	002d0007 	.word	0x002d0007
   d4b1c:	0093006e 	.word	0x0093006e
   d4b20:	01640119 	.word	0x01640119
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4b24:	4d73      	ldr	r5, [pc, #460]	; (d4cf4 <loop+0x1f0>)
   d4b26:	7a6b      	ldrb	r3, [r5, #9]
   d4b28:	b12b      	cbz	r3, d4b36 <loop+0x32>
   d4b2a:	4b73      	ldr	r3, [pc, #460]	; (d4cf8 <loop+0x1f4>)
   d4b2c:	781b      	ldrb	r3, [r3, #0]
   d4b2e:	2b02      	cmp	r3, #2
   d4b30:	d001      	beq.n	d4b36 <loop+0x32>
   d4b32:	f7ff fdad 	bl	d4690 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE; 
   d4b36:	7aeb      	ldrb	r3, [r5, #11]
   d4b38:	b153      	cbz	r3, d4b50 <loop+0x4c>
   d4b3a:	f001 ffb1 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d4b3e:	4b6f      	ldr	r3, [pc, #444]	; (d4cfc <loop+0x1f8>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	1ac0      	subs	r0, r0, r3
   d4b44:	4b6e      	ldr	r3, [pc, #440]	; (d4d00 <loop+0x1fc>)
   d4b46:	681b      	ldr	r3, [r3, #0]
   d4b48:	4298      	cmp	r0, r3
   d4b4a:	bf84      	itt	hi
   d4b4c:	2306      	movhi	r3, #6
   d4b4e:	7023      	strbhi	r3, [r4, #0]
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;                                 // If in low power mode, Goto sleep.
   d4b50:	7aab      	ldrb	r3, [r5, #10]
   d4b52:	b10b      	cbz	r3, d4b58 <loop+0x54>
   d4b54:	2307      	movs	r3, #7
   d4b56:	7023      	strb	r3, [r4, #0]
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;  
   d4b58:	f003 fb9b 	bl	d8292 <_ZN9TimeClass3nowEv>
   d4b5c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4b60:	fb90 f2f3 	sdiv	r2, r0, r3
   d4b64:	fb02 0313 	mls	r3, r2, r3, r0
   d4b68:	bb0b      	cbnz	r3, d4bae <loop+0xaa>
   d4b6a:	2303      	movs	r3, #3
      state = RESP_WAIT_STATE;                                                                        // Wait for Response
   d4b6c:	7023      	strb	r3, [r4, #0]
   d4b6e:	e01e      	b.n	d4bae <loop+0xaa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4b70:	4e60      	ldr	r6, [pc, #384]	; (d4cf4 <loop+0x1f0>)
   d4b72:	7a72      	ldrb	r2, [r6, #9]
   d4b74:	b12a      	cbz	r2, d4b82 <loop+0x7e>
   d4b76:	4b60      	ldr	r3, [pc, #384]	; (d4cf8 <loop+0x1f4>)
   d4b78:	781b      	ldrb	r3, [r3, #0]
   d4b7a:	2b03      	cmp	r3, #3
   d4b7c:	d001      	beq.n	d4b82 <loop+0x7e>
   d4b7e:	f7ff fd87 	bl	d4690 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4b82:	f7ff ff0b 	bl	d499c <_Z16takeMeasurementsv>
   d4b86:	4605      	mov	r5, r0
   d4b88:	2800      	cmp	r0, #0
   d4b8a:	d130      	bne.n	d4bee <loop+0xea>
      state = ERROR_STATE;
   d4b8c:	2301      	movs	r3, #1
   d4b8e:	7023      	strb	r3, [r4, #0]
   d4b90:	f001 ff86 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b94:	4b5b      	ldr	r3, [pc, #364]	; (d4d04 <loop+0x200>)
   d4b96:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode) {
   d4b98:	7a73      	ldrb	r3, [r6, #9]
   d4b9a:	b143      	cbz	r3, d4bae <loop+0xaa>
        publishQueue.publish("State","Error taking Measurements",PRIVATE);
   d4b9c:	4b5a      	ldr	r3, [pc, #360]	; (d4d08 <loop+0x204>)
   d4b9e:	f88d 5000 	strb.w	r5, [sp]
   d4ba2:	781b      	ldrb	r3, [r3, #0]
   d4ba4:	4a59      	ldr	r2, [pc, #356]	; (d4d0c <loop+0x208>)
   d4ba6:	495a      	ldr	r1, [pc, #360]	; (d4d10 <loop+0x20c>)
   d4ba8:	485a      	ldr	r0, [pc, #360]	; (d4d14 <loop+0x210>)
   d4baa:	f7ff fbcb 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  rtc.loop();                                                                               // keeps the clock up to date
   d4bae:	485a      	ldr	r0, [pc, #360]	; (d4d18 <loop+0x214>)
   d4bb0:	f001 faa6 	bl	d6100 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4bb4:	4b59      	ldr	r3, [pc, #356]	; (d4d1c <loop+0x218>)
   d4bb6:	781b      	ldrb	r3, [r3, #0]
   d4bb8:	b10b      	cbz	r3, d4bbe <loop+0xba>
   d4bba:	f7ff fd13 	bl	d45e4 <_Z11petWatchdogv>
  if (systemStatusWriteNeeded) {
   d4bbe:	4c58      	ldr	r4, [pc, #352]	; (d4d20 <loop+0x21c>)
   d4bc0:	7823      	ldrb	r3, [r4, #0]
   d4bc2:	b13b      	cbz	r3, d4bd4 <loop+0xd0>
   d4bc4:	231c      	movs	r3, #28
   d4bc6:	4a4b      	ldr	r2, [pc, #300]	; (d4cf4 <loop+0x1f0>)
   d4bc8:	4856      	ldr	r0, [pc, #344]	; (d4d24 <loop+0x220>)
   d4bca:	2101      	movs	r1, #1
   d4bcc:	f000 febb 	bl	d5946 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d4bd0:	2300      	movs	r3, #0
   d4bd2:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4bd4:	4c54      	ldr	r4, [pc, #336]	; (d4d28 <loop+0x224>)
   d4bd6:	7823      	ldrb	r3, [r4, #0]
   d4bd8:	b13b      	cbz	r3, d4bea <loop+0xe6>
   d4bda:	232c      	movs	r3, #44	; 0x2c
   d4bdc:	4a53      	ldr	r2, [pc, #332]	; (d4d2c <loop+0x228>)
   d4bde:	4851      	ldr	r0, [pc, #324]	; (d4d24 <loop+0x220>)
   d4be0:	21a0      	movs	r1, #160	; 0xa0
   d4be2:	f000 feb0 	bl	d5946 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4be6:	2300      	movs	r3, #0
   d4be8:	7023      	strb	r3, [r4, #0]
}
   d4bea:	b00a      	add	sp, #40	; 0x28
   d4bec:	bd70      	pop	{r4, r5, r6, pc}
    else state = REPORTING_STATE;
   d4bee:	2304      	movs	r3, #4
   d4bf0:	e7bc      	b.n	d4b6c <loop+0x68>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4bf2:	4d40      	ldr	r5, [pc, #256]	; (d4cf4 <loop+0x1f0>)
   d4bf4:	7a6a      	ldrb	r2, [r5, #9]
   d4bf6:	b12a      	cbz	r2, d4c04 <loop+0x100>
   d4bf8:	4b3f      	ldr	r3, [pc, #252]	; (d4cf8 <loop+0x1f4>)
   d4bfa:	781b      	ldrb	r3, [r3, #0]
   d4bfc:	2b04      	cmp	r3, #4
   d4bfe:	d001      	beq.n	d4c04 <loop+0x100>
   d4c00:	f7ff fd46 	bl	d4690 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                                              // Only attempt to connect if not already New process to get connected
   d4c04:	7a2b      	ldrb	r3, [r5, #8]
   d4c06:	b90b      	cbnz	r3, d4c0c <loop+0x108>
   d4c08:	f7ff fd74 	bl	d46f4 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c0c:	f002 f95a 	bl	d6ec4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c10:	b168      	cbz	r0, d4c2e <loop+0x12a>
      if (Time.hour() == 12) Particle.syncTime();                                                     // Set the clock each day at noon
   d4c12:	f003 fb4f 	bl	d82b4 <_ZN9TimeClass4hourEv>
   d4c16:	280c      	cmp	r0, #12
   d4c18:	d105      	bne.n	d4c26 <loop+0x122>
   d4c1a:	f002 f953 	bl	d6ec4 <spark_cloud_flag_connected>
        if (!connected()) {
   d4c1e:	b110      	cbz	r0, d4c26 <loop+0x122>
        return spark_sync_time(NULL);
   d4c20:	2000      	movs	r0, #0
   d4c22:	f002 f96f 	bl	d6f04 <spark_sync_time>
      sendEvent();                                                                                    // Send data to Ubidots
   d4c26:	f7ff fced 	bl	d4604 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                                        // Wait for Response
   d4c2a:	2305      	movs	r3, #5
   d4c2c:	e79e      	b.n	d4b6c <loop+0x68>
      state = ERROR_STATE;
   d4c2e:	2301      	movs	r3, #1
   d4c30:	7023      	strb	r3, [r4, #0]
   d4c32:	f001 ff35 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c36:	4b33      	ldr	r3, [pc, #204]	; (d4d04 <loop+0x200>)
     stayAwakeTimeStamp = millis();
   d4c38:	6018      	str	r0, [r3, #0]
   d4c3a:	e7b8      	b.n	d4bae <loop+0xaa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c3c:	4b2d      	ldr	r3, [pc, #180]	; (d4cf4 <loop+0x1f0>)
   d4c3e:	7a5b      	ldrb	r3, [r3, #9]
   d4c40:	b12b      	cbz	r3, d4c4e <loop+0x14a>
   d4c42:	4b2d      	ldr	r3, [pc, #180]	; (d4cf8 <loop+0x1f4>)
   d4c44:	781b      	ldrb	r3, [r3, #0]
   d4c46:	2b05      	cmp	r3, #5
   d4c48:	d001      	beq.n	d4c4e <loop+0x14a>
   d4c4a:	f7ff fd21 	bl	d4690 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4c4e:	4b38      	ldr	r3, [pc, #224]	; (d4d30 <loop+0x22c>)
   d4c50:	781b      	ldrb	r3, [r3, #0]
   d4c52:	b943      	cbnz	r3, d4c66 <loop+0x162>
     state = IDLE_STATE;
   d4c54:	2302      	movs	r3, #2
   d4c56:	7023      	strb	r3, [r4, #0]
     stayAwake = stayAwakeLong;
   d4c58:	4b29      	ldr	r3, [pc, #164]	; (d4d00 <loop+0x1fc>)
   d4c5a:	4a36      	ldr	r2, [pc, #216]	; (d4d34 <loop+0x230>)
   d4c5c:	601a      	str	r2, [r3, #0]
   d4c5e:	f001 ff1f 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
     stayAwakeTimeStamp = millis();
   d4c62:	4b26      	ldr	r3, [pc, #152]	; (d4cfc <loop+0x1f8>)
   d4c64:	e7e8      	b.n	d4c38 <loop+0x134>
   d4c66:	f001 ff1b 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4c6a:	4b33      	ldr	r3, [pc, #204]	; (d4d38 <loop+0x234>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	1ac0      	subs	r0, r0, r3
   d4c70:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4c74:	4298      	cmp	r0, r3
   d4c76:	d99a      	bls.n	d4bae <loop+0xaa>
   d4c78:	f001 ff12 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c7c:	4d21      	ldr	r5, [pc, #132]	; (d4d04 <loop+0x200>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c7e:	4a2f      	ldr	r2, [pc, #188]	; (d4d3c <loop+0x238>)
      resetTimeStamp = millis();
   d4c80:	6028      	str	r0, [r5, #0]
   d4c82:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c84:	f88d 3000 	strb.w	r3, [sp]
   d4c88:	4b1f      	ldr	r3, [pc, #124]	; (d4d08 <loop+0x204>)
   d4c8a:	492d      	ldr	r1, [pc, #180]	; (d4d40 <loop+0x23c>)
   d4c8c:	781b      	ldrb	r3, [r3, #0]
   d4c8e:	4821      	ldr	r0, [pc, #132]	; (d4d14 <loop+0x210>)
   d4c90:	f7ff fb58 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d4c94:	2301      	movs	r3, #1
   d4c96:	7023      	strb	r3, [r4, #0]
   d4c98:	f001 ff02 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c9c:	6028      	str	r0, [r5, #0]
   d4c9e:	e786      	b.n	d4bae <loop+0xaa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ca0:	4b14      	ldr	r3, [pc, #80]	; (d4cf4 <loop+0x1f0>)
   d4ca2:	7a5b      	ldrb	r3, [r3, #9]
   d4ca4:	b12b      	cbz	r3, d4cb2 <loop+0x1ae>
   d4ca6:	4b14      	ldr	r3, [pc, #80]	; (d4cf8 <loop+0x1f4>)
   d4ca8:	781b      	ldrb	r3, [r3, #0]
   d4caa:	2b01      	cmp	r3, #1
   d4cac:	d001      	beq.n	d4cb2 <loop+0x1ae>
   d4cae:	f7ff fcef 	bl	d4690 <_Z22publishStateTransitionv>
   d4cb2:	f001 fef5 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4cb6:	4b13      	ldr	r3, [pc, #76]	; (d4d04 <loop+0x200>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4cbe:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4cc2:	4283      	cmp	r3, r0
   d4cc4:	f4bf af73 	bcs.w	d4bae <loop+0xaa>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4cc8:	f002 f8fc 	bl	d6ec4 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4ccc:	b148      	cbz	r0, d4ce2 <loop+0x1de>
   d4cce:	2300      	movs	r3, #0
   d4cd0:	f88d 3000 	strb.w	r3, [sp]
   d4cd4:	4b0c      	ldr	r3, [pc, #48]	; (d4d08 <loop+0x204>)
   d4cd6:	4a1b      	ldr	r2, [pc, #108]	; (d4d44 <loop+0x240>)
   d4cd8:	781b      	ldrb	r3, [r3, #0]
   d4cda:	490d      	ldr	r1, [pc, #52]	; (d4d10 <loop+0x20c>)
   d4cdc:	480d      	ldr	r0, [pc, #52]	; (d4d14 <loop+0x210>)
   d4cde:	f7ff fb31 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4ce6:	f002 fa09 	bl	d70fc <delay>
      System.reset();
   d4cea:	f003 f8ff 	bl	d7eec <_ZN11SystemClass5resetEv>
   d4cee:	e75e      	b.n	d4bae <loop+0xaa>
   d4cf0:	2003e4a8 	.word	0x2003e4a8
   d4cf4:	2003e4b4 	.word	0x2003e4b4
   d4cf8:	2003e412 	.word	0x2003e412
   d4cfc:	2003e4b0 	.word	0x2003e4b0
   d4d00:	2003e4ac 	.word	0x2003e4ac
   d4d04:	2003e44c 	.word	0x2003e44c
   d4d08:	2003e39d 	.word	0x2003e39d
   d4d0c:	000d95ab 	.word	0x000d95ab
   d4d10:	000d95c5 	.word	0x000d95c5
   d4d14:	2003e414 	.word	0x2003e414
   d4d18:	2003e450 	.word	0x2003e450
   d4d1c:	2003e520 	.word	0x2003e520
   d4d20:	2003e4d0 	.word	0x2003e4d0
   d4d24:	2003e3dc 	.word	0x2003e3dc
   d4d28:	2003e46c 	.word	0x2003e46c
   d4d2c:	2003e470 	.word	0x2003e470
   d4d30:	2003e3d8 	.word	0x2003e3d8
   d4d34:	00015f90 	.word	0x00015f90
   d4d38:	2003e524 	.word	0x2003e524
   d4d3c:	000d9bd0 	.word	0x000d9bd0
   d4d40:	000d95cb 	.word	0x000d95cb
   d4d44:	000d95e4 	.word	0x000d95e4
      if (sysStatus.verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4d48:	4d4b      	ldr	r5, [pc, #300]	; (d4e78 <loop+0x374>)
   d4d4a:	7a6a      	ldrb	r2, [r5, #9]
   d4d4c:	b12a      	cbz	r2, d4d5a <loop+0x256>
   d4d4e:	4b4b      	ldr	r3, [pc, #300]	; (d4e7c <loop+0x378>)
   d4d50:	781b      	ldrb	r3, [r3, #0]
   d4d52:	2b06      	cmp	r3, #6
   d4d54:	d001      	beq.n	d4d5a <loop+0x256>
   d4d56:	f7ff fc9b 	bl	d4690 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d4d5a:	7a2b      	ldrb	r3, [r5, #8]
   d4d5c:	b10b      	cbz	r3, d4d62 <loop+0x25e>
   d4d5e:	f7ff fd83 	bl	d4868 <_Z22disconnectFromParticlev>
      stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d4d62:	4b47      	ldr	r3, [pc, #284]	; (d4e80 <loop+0x37c>)
   d4d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d68:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4d6a:	f003 fa92 	bl	d8292 <_ZN9TimeClass3nowEv>
   d4d6e:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
   d4d72:	fb90 f3f5 	sdiv	r3, r0, r5
   d4d76:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d4d7a:	4b42      	ldr	r3, [pc, #264]	; (d4e84 <loop+0x380>)
   d4d7c:	f5c5 6596 	rsb	r5, r5, #1200	; 0x4b0
   d4d80:	7d1a      	ldrb	r2, [r3, #20]
   d4d82:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d4d86:	bfa8      	it	ge
   d4d88:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
   d4d8c:	b10a      	cbz	r2, d4d92 <loop+0x28e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4d8e:	2202      	movs	r2, #2
   d4d90:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d4d92:	2200      	movs	r2, #0
   d4d94:	2104      	movs	r1, #4
   d4d96:	483b      	ldr	r0, [pc, #236]	; (d4e84 <loop+0x380>)
   d4d98:	f7ff f9f8 	bl	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds*1000);
   d4d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4da0:	4369      	muls	r1, r5
   d4da2:	f7ff fa27 	bl	d41f4 <_ZN8particle24SystemSleepConfiguration8durationEm>
      SystemSleepResult result = System.sleep(config);
   d4da6:	4937      	ldr	r1, [pc, #220]	; (d4e84 <loop+0x380>)
   d4da8:	a803      	add	r0, sp, #12
   d4daa:	f003 f8a3 	bl	d7ef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4dae:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d4db0:	b17b      	cbz	r3, d4dd2 <loop+0x2ce>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4db2:	889a      	ldrh	r2, [r3, #4]
   d4db4:	2a01      	cmp	r2, #1
   d4db6:	d10c      	bne.n	d4dd2 <loop+0x2ce>
      if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d4db8:	899b      	ldrh	r3, [r3, #12]
   d4dba:	2b04      	cmp	r3, #4
   d4dbc:	d109      	bne.n	d4dd2 <loop+0x2ce>
        setLowPowerMode("0");
   d4dbe:	4932      	ldr	r1, [pc, #200]	; (d4e88 <loop+0x384>)
   d4dc0:	a806      	add	r0, sp, #24
   d4dc2:	f002 ffe2 	bl	d7d8a <_ZN6StringC1EPKc>
   d4dc6:	a806      	add	r0, sp, #24
   d4dc8:	f7ff fcde 	bl	d4788 <_Z15setLowPowerMode6String>
   d4dcc:	a806      	add	r0, sp, #24
   d4dce:	f002 ff91 	bl	d7cf4 <_ZN6StringD1Ev>
      state = MEASURING_STATE;
   d4dd2:	2303      	movs	r3, #3
        freeWakeupSourceMemory();
   d4dd4:	a803      	add	r0, sp, #12
      state = IDLE_STATE;                                               //  Head back to the idle state to see what to do next
   d4dd6:	7023      	strb	r3, [r4, #0]
   d4dd8:	f7ff f9ca 	bl	d4170 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
    } break;
   d4ddc:	e6e7      	b.n	d4bae <loop+0xaa>
      if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4dde:	4d26      	ldr	r5, [pc, #152]	; (d4e78 <loop+0x374>)
   d4de0:	7a6a      	ldrb	r2, [r5, #9]
   d4de2:	b12a      	cbz	r2, d4df0 <loop+0x2ec>
   d4de4:	4b25      	ldr	r3, [pc, #148]	; (d4e7c <loop+0x378>)
   d4de6:	781b      	ldrb	r3, [r3, #0]
   d4de8:	2b07      	cmp	r3, #7
   d4dea:	d001      	beq.n	d4df0 <loop+0x2ec>
   d4dec:	f7ff fc50 	bl	d4690 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d4df0:	7a2b      	ldrb	r3, [r5, #8]
   d4df2:	b10b      	cbz	r3, d4df8 <loop+0x2f4>
   d4df4:	f7ff fd38 	bl	d4868 <_Z22disconnectFromParticlev>
      petWatchdog();
   d4df8:	f7ff fbf4 	bl	d45e4 <_Z11petWatchdogv>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4dfc:	f003 fa49 	bl	d8292 <_ZN9TimeClass3nowEv>
   d4e00:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
   d4e04:	fb90 f3f5 	sdiv	r3, r0, r5
   d4e08:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d4e0c:	4b1d      	ldr	r3, [pc, #116]	; (d4e84 <loop+0x380>)
   d4e0e:	f5c5 6596 	rsb	r5, r5, #1200	; 0x4b0
   d4e12:	7d1a      	ldrb	r2, [r3, #20]
   d4e14:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d4e18:	bfa8      	it	ge
   d4e1a:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
   d4e1e:	b10a      	cbz	r2, d4e24 <loop+0x320>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4e20:	2202      	movs	r2, #2
   d4e22:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)
   d4e24:	2200      	movs	r2, #0
   d4e26:	2104      	movs	r1, #4
   d4e28:	4816      	ldr	r0, [pc, #88]	; (d4e84 <loop+0x380>)
   d4e2a:	f7ff f9af 	bl	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        .duration(wakeInSeconds*1000);
   d4e2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4e32:	4369      	muls	r1, r5
   d4e34:	f7ff f9de 	bl	d41f4 <_ZN8particle24SystemSleepConfiguration8durationEm>
        System.sleep(config);
   d4e38:	4912      	ldr	r1, [pc, #72]	; (d4e84 <loop+0x380>)
   d4e3a:	a806      	add	r0, sp, #24
   d4e3c:	f003 f85a 	bl	d7ef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   d4e40:	a806      	add	r0, sp, #24
   d4e42:	f7ff f995 	bl	d4170 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d4e46:	490f      	ldr	r1, [pc, #60]	; (d4e84 <loop+0x380>)
   d4e48:	a803      	add	r0, sp, #12
   d4e4a:	f003 f853 	bl	d7ef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4e4e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d4e50:	b17b      	cbz	r3, d4e72 <loop+0x36e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4e52:	889a      	ldrh	r2, [r3, #4]
   d4e54:	2a01      	cmp	r2, #1
   d4e56:	d10c      	bne.n	d4e72 <loop+0x36e>
      if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d4e58:	899b      	ldrh	r3, [r3, #12]
   d4e5a:	2b04      	cmp	r3, #4
   d4e5c:	d109      	bne.n	d4e72 <loop+0x36e>
        setLowPowerMode("0");
   d4e5e:	490a      	ldr	r1, [pc, #40]	; (d4e88 <loop+0x384>)
   d4e60:	a806      	add	r0, sp, #24
   d4e62:	f002 ff92 	bl	d7d8a <_ZN6StringC1EPKc>
   d4e66:	a806      	add	r0, sp, #24
   d4e68:	f7ff fc8e 	bl	d4788 <_Z15setLowPowerMode6String>
   d4e6c:	a806      	add	r0, sp, #24
   d4e6e:	f002 ff41 	bl	d7cf4 <_ZN6StringD1Ev>
      state = IDLE_STATE;                                               //  Head back to the idle state to see what to do next
   d4e72:	2302      	movs	r3, #2
   d4e74:	e7ae      	b.n	d4dd4 <loop+0x2d0>
   d4e76:	bf00      	nop
   d4e78:	2003e4b4 	.word	0x2003e4b4
   d4e7c:	2003e412 	.word	0x2003e412
   d4e80:	2003e4ac 	.word	0x2003e4ac
   d4e84:	2003e3c0 	.word	0x2003e3c0
   d4e88:	000d941d 	.word	0x000d941d

000d4e8c <setup>:
{
   d4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4e8e:	2100      	movs	r1, #0
{
   d4e90:	b09b      	sub	sp, #108	; 0x6c
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4e92:	2008      	movs	r0, #8
   d4e94:	f003 fc04 	bl	d86a0 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4e98:	2101      	movs	r1, #1
   d4e9a:	2005      	movs	r0, #5
   d4e9c:	f003 fc00 	bl	d86a0 <pinMode>
  pinMode(userSwitch,INPUT);                                                                // Momentary contact button on board for direct user input
   d4ea0:	2100      	movs	r1, #0
   d4ea2:	2004      	movs	r0, #4
   d4ea4:	f003 fbfc 	bl	d86a0 <pinMode>
  pinMode(soilPin, INPUT);    
   d4ea8:	2100      	movs	r1, #0
   d4eaa:	2013      	movs	r0, #19
   d4eac:	f003 fbf8 	bl	d86a0 <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   d4eb0:	f7ff fb98 	bl	d45e4 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	9300      	str	r3, [sp, #0]
   d4eb8:	2201      	movs	r2, #1
   d4eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4ebe:	498f      	ldr	r1, [pc, #572]	; (d50fc <setup+0x270>)
   d4ec0:	2008      	movs	r0, #8
   d4ec2:	f002 fd69 	bl	d7998 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4ec6:	4b8e      	ldr	r3, [pc, #568]	; (d5100 <setup+0x274>)
   d4ec8:	aa0a      	add	r2, sp, #40	; 0x28
   d4eca:	f103 0510 	add.w	r5, r3, #16
   d4ece:	4616      	mov	r6, r2
   d4ed0:	6818      	ldr	r0, [r3, #0]
   d4ed2:	6859      	ldr	r1, [r3, #4]
   d4ed4:	4614      	mov	r4, r2
   d4ed6:	c403      	stmia	r4!, {r0, r1}
   d4ed8:	3308      	adds	r3, #8
   d4eda:	42ab      	cmp	r3, r5
   d4edc:	4622      	mov	r2, r4
   d4ede:	d1f7      	bne.n	d4ed0 <setup+0x44>
   d4ee0:	8819      	ldrh	r1, [r3, #0]
   d4ee2:	789b      	ldrb	r3, [r3, #2]
   d4ee4:	70a3      	strb	r3, [r4, #2]
   d4ee6:	222d      	movs	r2, #45	; 0x2d
   d4ee8:	8021      	strh	r1, [r4, #0]
   d4eea:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d4eee:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4ef0:	4c84      	ldr	r4, [pc, #528]	; (d5104 <setup+0x278>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4ef2:	f004 f8df 	bl	d90b4 <memset>
  state = IDLE_STATE;
   d4ef6:	2702      	movs	r7, #2
    static String deviceID(void) { return spark_deviceID(); }
   d4ef8:	a802      	add	r0, sp, #8
   d4efa:	7027      	strb	r7, [r4, #0]
   d4efc:	f001 ffea 	bl	d6ed4 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4f00:	a902      	add	r1, sp, #8
   d4f02:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4f04:	2500      	movs	r5, #0
   d4f06:	f002 ff63 	bl	d7dd0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/environmental-hook/", UbidotsHandler, MY_DEVICES);
   d4f0a:	497f      	ldr	r1, [pc, #508]	; (d5108 <setup+0x27c>)
   d4f0c:	a806      	add	r0, sp, #24
   d4f0e:	f002 ff81 	bl	d7e14 <_ZplRK15StringSumHelperPKc>
   d4f12:	e9cd 5500 	strd	r5, r5, [sp]
   d4f16:	462a      	mov	r2, r5
   d4f18:	497c      	ldr	r1, [pc, #496]	; (d510c <setup+0x280>)
   d4f1a:	6800      	ldr	r0, [r0, #0]
   d4f1c:	462b      	mov	r3, r5
   d4f1e:	f001 ffe9 	bl	d6ef4 <spark_subscribe>
class StringSumHelper : public String
   d4f22:	a806      	add	r0, sp, #24
   d4f24:	f002 fee6 	bl	d7cf4 <_ZN6StringD1Ev>
   d4f28:	a802      	add	r0, sp, #8
   d4f2a:	f002 fee3 	bl	d7cf4 <_ZN6StringD1Ev>
  Particle.variable("Release",releaseNumber);
   d4f2e:	4b78      	ldr	r3, [pc, #480]	; (d5110 <setup+0x284>)
        return _variable(varKey, var, STRING);
   d4f30:	4878      	ldr	r0, [pc, #480]	; (d5114 <setup+0x288>)
   d4f32:	6819      	ldr	r1, [r3, #0]
   d4f34:	f7ff f925 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f38:	4977      	ldr	r1, [pc, #476]	; (d5118 <setup+0x28c>)
   d4f3a:	4878      	ldr	r0, [pc, #480]	; (d511c <setup+0x290>)
   d4f3c:	f7ff f921 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f40:	4977      	ldr	r1, [pc, #476]	; (d5120 <setup+0x294>)
   d4f42:	4878      	ldr	r0, [pc, #480]	; (d5124 <setup+0x298>)
   d4f44:	f7ff f91d 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f48:	4977      	ldr	r1, [pc, #476]	; (d5128 <setup+0x29c>)
   d4f4a:	4878      	ldr	r0, [pc, #480]	; (d512c <setup+0x2a0>)
   d4f4c:	f7ff f919 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f50:	4977      	ldr	r1, [pc, #476]	; (d5130 <setup+0x2a4>)
   d4f52:	4878      	ldr	r0, [pc, #480]	; (d5134 <setup+0x2a8>)
   d4f54:	f7ff f915 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f58:	4977      	ldr	r1, [pc, #476]	; (d5138 <setup+0x2ac>)
   d4f5a:	4878      	ldr	r0, [pc, #480]	; (d513c <setup+0x2b0>)
   d4f5c:	f7ff f911 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f60:	4977      	ldr	r1, [pc, #476]	; (d5140 <setup+0x2b4>)
   d4f62:	4878      	ldr	r0, [pc, #480]	; (d5144 <setup+0x2b8>)
   d4f64:	f7ff f90d 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f68:	4977      	ldr	r1, [pc, #476]	; (d5148 <setup+0x2bc>)
   d4f6a:	4878      	ldr	r0, [pc, #480]	; (d514c <setup+0x2c0>)
   d4f6c:	f7ff f909 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4f70:	4977      	ldr	r1, [pc, #476]	; (d5150 <setup+0x2c4>)
   d4f72:	4878      	ldr	r0, [pc, #480]	; (d5154 <setup+0x2c8>)
   d4f74:	462b      	mov	r3, r5
   d4f76:	463a      	mov	r2, r7
   d4f78:	f001 ff84 	bl	d6e84 <spark_variable>
   d4f7c:	462b      	mov	r3, r5
   d4f7e:	2201      	movs	r2, #1
   d4f80:	4975      	ldr	r1, [pc, #468]	; (d5158 <setup+0x2cc>)
   d4f82:	4876      	ldr	r0, [pc, #472]	; (d515c <setup+0x2d0>)
   d4f84:	f001 ff7e 	bl	d6e84 <spark_variable>
        return _variable(varKey, var, STRING);
   d4f88:	4975      	ldr	r1, [pc, #468]	; (d5160 <setup+0x2d4>)
   d4f8a:	4876      	ldr	r0, [pc, #472]	; (d5164 <setup+0x2d8>)
   d4f8c:	f7ff f8f9 	bl	d4182 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4f90:	4a75      	ldr	r2, [pc, #468]	; (d5168 <setup+0x2dc>)
   d4f92:	4976      	ldr	r1, [pc, #472]	; (d516c <setup+0x2e0>)
   d4f94:	4876      	ldr	r0, [pc, #472]	; (d5170 <setup+0x2e4>)
   d4f96:	f002 f99a 	bl	d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4f9a:	4a76      	ldr	r2, [pc, #472]	; (d5174 <setup+0x2e8>)
   d4f9c:	4976      	ldr	r1, [pc, #472]	; (d5178 <setup+0x2ec>)
   d4f9e:	4874      	ldr	r0, [pc, #464]	; (d5170 <setup+0x2e4>)
   d4fa0:	f002 f995 	bl	d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4fa4:	4a75      	ldr	r2, [pc, #468]	; (d517c <setup+0x2f0>)
   d4fa6:	4976      	ldr	r1, [pc, #472]	; (d5180 <setup+0x2f4>)
   d4fa8:	4871      	ldr	r0, [pc, #452]	; (d5170 <setup+0x2e4>)
   d4faa:	f002 f990 	bl	d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4fae:	4a6b      	ldr	r2, [pc, #428]	; (d515c <setup+0x2d0>)
   d4fb0:	4974      	ldr	r1, [pc, #464]	; (d5184 <setup+0x2f8>)
   d4fb2:	486f      	ldr	r0, [pc, #444]	; (d5170 <setup+0x2e4>)
   d4fb4:	f002 f98b 	bl	d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4fb8:	4a73      	ldr	r2, [pc, #460]	; (d5188 <setup+0x2fc>)
   d4fba:	4974      	ldr	r1, [pc, #464]	; (d518c <setup+0x300>)
   d4fbc:	486c      	ldr	r0, [pc, #432]	; (d5170 <setup+0x2e4>)
   d4fbe:	f002 f986 	bl	d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                                            // Start the real time clock
   d4fc2:	4873      	ldr	r0, [pc, #460]	; (d5190 <setup+0x304>)
   d4fc4:	f000 ff96 	bl	d5ef4 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                                       // Ensures alarm is still not set from last cycle
   d4fc8:	4629      	mov	r1, r5
   d4fca:	4871      	ldr	r0, [pc, #452]	; (d5190 <setup+0x304>)
   d4fcc:	f001 f8cf 	bl	d616e <_ZN8MCP7941010clearAlarmEi>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4fd0:	4870      	ldr	r0, [pc, #448]	; (d5194 <setup+0x308>)
   d4fd2:	2144      	movs	r1, #68	; 0x44
   d4fd4:	f001 fc5b 	bl	d688e <_ZN14Adafruit_SHT315beginEh>
   d4fd8:	b948      	cbnz	r0, d4fee <setup+0x162>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4fda:	496f      	ldr	r1, [pc, #444]	; (d5198 <setup+0x30c>)
   d4fdc:	4630      	mov	r0, r6
   d4fde:	f004 f89f 	bl	d9120 <strcpy>
    state = ERROR_STATE;
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	7023      	strb	r3, [r4, #0]
   d4fe6:	f001 fd5b 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4fea:	4b6c      	ldr	r3, [pc, #432]	; (d519c <setup+0x310>)
   d4fec:	6018      	str	r0, [r3, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   d4fee:	f003 fbab 	bl	d8748 <_Z19__fetch_global_Wirev>
   d4ff2:	4601      	mov	r1, r0
   d4ff4:	486a      	ldr	r0, [pc, #424]	; (d51a0 <setup+0x314>)
   d4ff6:	f000 fb02 	bl	d55fe <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   d4ffa:	b960      	cbnz	r0, d5016 <setup+0x18a>
   d4ffc:	f001 fd50 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5000:	4d66      	ldr	r5, [pc, #408]	; (d519c <setup+0x310>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d5002:	4968      	ldr	r1, [pc, #416]	; (d51a4 <setup+0x318>)
    resetTimeStamp = millis();
   d5004:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d5006:	4630      	mov	r0, r6
   d5008:	f004 f88a 	bl	d9120 <strcpy>
    state = ERROR_STATE;
   d500c:	2301      	movs	r3, #1
   d500e:	7023      	strb	r3, [r4, #0]
   d5010:	f001 fd46 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5014:	6028      	str	r0, [r5, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   d5016:	4862      	ldr	r0, [pc, #392]	; (d51a0 <setup+0x314>)
   d5018:	2100      	movs	r1, #0
   d501a:	f000 fa69 	bl	d54f0 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   d501e:	4860      	ldr	r0, [pc, #384]	; (d51a0 <setup+0x314>)
   d5020:	210c      	movs	r1, #12
   d5022:	f000 fa5c 	bl	d54de <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.interruptEnable(true);
   d5026:	2101      	movs	r1, #1
   d5028:	485d      	ldr	r0, [pc, #372]	; (d51a0 <setup+0x314>)
   d502a:	f000 fa52 	bl	d54d2 <_ZN17Adafruit_VEML770015interruptEnableEb>
  fram.begin();                                                                             // Initialize the FRAM module
   d502e:	485e      	ldr	r0, [pc, #376]	; (d51a8 <setup+0x31c>)
   d5030:	f000 fbfc 	bl	d582c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5034:	2301      	movs	r3, #1
   d5036:	485c      	ldr	r0, [pc, #368]	; (d51a8 <setup+0x31c>)
   d5038:	aa06      	add	r2, sp, #24
   d503a:	2100      	movs	r1, #0
   d503c:	f000 fc38 	bl	d58b0 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d5040:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5044:	2b05      	cmp	r3, #5
   d5046:	d02b      	beq.n	d50a0 <setup+0x214>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d5048:	4857      	ldr	r0, [pc, #348]	; (d51a8 <setup+0x31c>)
   d504a:	f000 fbf9 	bl	d5840 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d504e:	4a57      	ldr	r2, [pc, #348]	; (d51ac <setup+0x320>)
   d5050:	4855      	ldr	r0, [pc, #340]	; (d51a8 <setup+0x31c>)
   d5052:	2304      	movs	r3, #4
   d5054:	2100      	movs	r1, #0
   d5056:	f000 fc76 	bl	d5946 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d505a:	2301      	movs	r3, #1
   d505c:	4852      	ldr	r0, [pc, #328]	; (d51a8 <setup+0x31c>)
   d505e:	aa06      	add	r2, sp, #24
   d5060:	2100      	movs	r1, #0
   d5062:	f000 fc25 	bl	d58b0 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d5066:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d506a:	2b05      	cmp	r3, #5
   d506c:	d015      	beq.n	d509a <setup+0x20e>
   d506e:	2301      	movs	r3, #1
   d5070:	7023      	strb	r3, [r4, #0]
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   d5072:	4d4f      	ldr	r5, [pc, #316]	; (d51b0 <setup+0x324>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5074:	f7ff faa0 	bl	d45b8 <_Z17checkSystemValuesv>
  connectToParticle();
   d5078:	f7ff fb3c 	bl	d46f4 <_Z17connectToParticlev>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   d507c:	7aeb      	ldrb	r3, [r5, #11]
   d507e:	b1b3      	cbz	r3, d50ae <setup+0x222>
   d5080:	494c      	ldr	r1, [pc, #304]	; (d51b4 <setup+0x328>)
   d5082:	4837      	ldr	r0, [pc, #220]	; (d5160 <setup+0x2d4>)
   d5084:	2206      	movs	r2, #6
   d5086:	f004 f878 	bl	d917a <strncpy>
  if (sysStatus.thirdPartySim) {
   d508a:	786b      	ldrb	r3, [r5, #1]
   d508c:	b1db      	cbz	r3, d50c6 <setup+0x23a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d508e:	f001 ff19 	bl	d6ec4 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   d5092:	b998      	cbnz	r0, d50bc <setup+0x230>
            spark_process();
   d5094:	f001 ff06 	bl	d6ea4 <spark_process>
        while (_while() && !_condition()) {
   d5098:	e7f9      	b.n	d508e <setup+0x202>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d509a:	f7ff fa63 	bl	d4564 <_Z18loadSystemDefaultsv>
   d509e:	e7e8      	b.n	d5072 <setup+0x1e6>
   d50a0:	4a43      	ldr	r2, [pc, #268]	; (d51b0 <setup+0x324>)
   d50a2:	4841      	ldr	r0, [pc, #260]	; (d51a8 <setup+0x31c>)
   d50a4:	231c      	movs	r3, #28
   d50a6:	2101      	movs	r1, #1
   d50a8:	f000 fc02 	bl	d58b0 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d50ac:	e7e1      	b.n	d5072 <setup+0x1e6>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"True",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"False",sizeof(lowPowerModeStr));
   d50ae:	4a42      	ldr	r2, [pc, #264]	; (d51b8 <setup+0x32c>)
   d50b0:	4b2b      	ldr	r3, [pc, #172]	; (d5160 <setup+0x2d4>)
   d50b2:	6811      	ldr	r1, [r2, #0]
   d50b4:	8892      	ldrh	r2, [r2, #4]
   d50b6:	6019      	str	r1, [r3, #0]
   d50b8:	809a      	strh	r2, [r3, #4]
   d50ba:	e7e6      	b.n	d508a <setup+0x1fe>
   d50bc:	f001 ff02 	bl	d6ec4 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                    // Set the keep alive value
   d50c0:	6868      	ldr	r0, [r5, #4]
   d50c2:	f7ff f8c1 	bl	d4248 <_ZN10CloudClass9keepAliveEj>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                                       // Make sure the device wakes up and connects
   d50c6:	2004      	movs	r0, #4
   d50c8:	f003 fafb 	bl	d86c2 <digitalRead>
   d50cc:	b908      	cbnz	r0, d50d2 <setup+0x246>
   d50ce:	f7ff fa49 	bl	d4564 <_Z18loadSystemDefaultsv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d50d2:	f7ff fc63 	bl	d499c <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d50d6:	7a6b      	ldrb	r3, [r5, #9]
   d50d8:	b14b      	cbz	r3, d50ee <setup+0x262>
   d50da:	2300      	movs	r3, #0
   d50dc:	f88d 3000 	strb.w	r3, [sp]
   d50e0:	4b36      	ldr	r3, [pc, #216]	; (d51bc <setup+0x330>)
   d50e2:	4937      	ldr	r1, [pc, #220]	; (d51c0 <setup+0x334>)
   d50e4:	781b      	ldrb	r3, [r3, #0]
   d50e6:	4837      	ldr	r0, [pc, #220]	; (d51c4 <setup+0x338>)
   d50e8:	4632      	mov	r2, r6
   d50ea:	f7ff f92b 	bl	d4344 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d50ee:	7823      	ldrb	r3, [r4, #0]
   d50f0:	b90b      	cbnz	r3, d50f6 <setup+0x26a>
   d50f2:	2302      	movs	r3, #2
   d50f4:	7023      	strb	r3, [r4, #0]
}
   d50f6:	b01b      	add	sp, #108	; 0x6c
   d50f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50fa:	bf00      	nop
   d50fc:	000d40c9 	.word	0x000d40c9
   d5100:	000d9748 	.word	0x000d9748
   d5104:	2003e4a8 	.word	0x2003e4a8
   d5108:	000d95f8 	.word	0x000d95f8
   d510c:	000d4361 	.word	0x000d4361
   d5110:	2003e234 	.word	0x2003e234
   d5114:	000d961b 	.word	0x000d961b
   d5118:	2003e4d1 	.word	0x2003e4d1
   d511c:	000d9623 	.word	0x000d9623
   d5120:	2003e3ec 	.word	0x2003e3ec
   d5124:	000d962f 	.word	0x000d962f
   d5128:	2003e402 	.word	0x2003e402
   d512c:	000d9638 	.word	0x000d9638
   d5130:	2003e528 	.word	0x2003e528
   d5134:	000d963c 	.word	0x000d963c
   d5138:	2003e380 	.word	0x2003e380
   d513c:	000d9642 	.word	0x000d9642
   d5140:	2003e3ae 	.word	0x2003e3ae
   d5144:	000d964a 	.word	0x000d964a
   d5148:	2003e39e 	.word	0x2003e39e
   d514c:	000d9652 	.word	0x000d9652
   d5150:	2003e4b8 	.word	0x2003e4b8
   d5154:	000d9661 	.word	0x000d9661
   d5158:	2003e4b5 	.word	0x2003e4b5
   d515c:	000d943b 	.word	0x000d943b
   d5160:	2003e3fc 	.word	0x2003e3fc
   d5164:	000d9670 	.word	0x000d9670
   d5168:	000d967d 	.word	0x000d967d
   d516c:	000d4105 	.word	0x000d4105
   d5170:	000d72a3 	.word	0x000d72a3
   d5174:	000d9689 	.word	0x000d9689
   d5178:	000d43f5 	.word	0x000d43f5
   d517c:	000d9476 	.word	0x000d9476
   d5180:	000d44fd 	.word	0x000d44fd
   d5184:	000d4475 	.word	0x000d4475
   d5188:	000d9696 	.word	0x000d9696
   d518c:	000d4789 	.word	0x000d4789
   d5190:	2003e450 	.word	0x2003e450
   d5194:	2003e49c 	.word	0x2003e49c
   d5198:	000d96a4 	.word	0x000d96a4
   d519c:	2003e44c 	.word	0x2003e44c
   d51a0:	2003e4e4 	.word	0x2003e4e4
   d51a4:	000d96c1 	.word	0x000d96c1
   d51a8:	2003e3dc 	.word	0x2003e3dc
   d51ac:	000d9788 	.word	0x000d9788
   d51b0:	2003e4b4 	.word	0x2003e4b4
   d51b4:	000d9552 	.word	0x000d9552
   d51b8:	000d9569 	.word	0x000d9569
   d51bc:	2003e39d 	.word	0x2003e39d
   d51c0:	000d96dd 	.word	0x000d96dd
   d51c4:	2003e414 	.word	0x2003e414

000d51c8 <_GLOBAL__sub_I_sysStatus>:
   d51c8:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d51ca:	4b23      	ldr	r3, [pc, #140]	; (d5258 <_GLOBAL__sub_I_sysStatus+0x90>)
    SleepResult() {}
   d51cc:	4a23      	ldr	r2, [pc, #140]	; (d525c <_GLOBAL__sub_I_sysStatus+0x94>)
   d51ce:	2501      	movs	r5, #1
   d51d0:	701d      	strb	r5, [r3, #0]
   d51d2:	4b23      	ldr	r3, [pc, #140]	; (d5260 <_GLOBAL__sub_I_sysStatus+0x98>)
   d51d4:	2002      	movs	r0, #2
   d51d6:	7018      	strb	r0, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d51d8:	4b22      	ldr	r3, [pc, #136]	; (d5264 <_GLOBAL__sub_I_sysStatus+0x9c>)
   d51da:	2400      	movs	r4, #0
   d51dc:	601c      	str	r4, [r3, #0]
   d51de:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d51e0:	719c      	strb	r4, [r3, #6]
   d51e2:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   d51e4:	f001 fdee 	bl	d6dc4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d51e8:	4621      	mov	r1, r4
   d51ea:	4628      	mov	r0, r5
   d51ec:	f001 fdfa 	bl	d6de4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d51f0:	4629      	mov	r1, r5
   d51f2:	2004      	movs	r0, #4
   d51f4:	f001 fc34 	bl	d6a60 <HAL_Feature_Set>
        : config_(config) {
   d51f8:	4b1b      	ldr	r3, [pc, #108]	; (d5268 <_GLOBAL__sub_I_sysStatus+0xa0>)
Adafruit_VEML7700 veml;
   d51fa:	481c      	ldr	r0, [pc, #112]	; (d526c <_GLOBAL__sub_I_sysStatus+0xa4>)
              valid_(true) {
   d51fc:	f8a3 4009 	strh.w	r4, [r3, #9]
        : config_(config) {
   d5200:	461a      	mov	r2, r3
   d5202:	1d19      	adds	r1, r3, #4
   d5204:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d5208:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d520a:	4a19      	ldr	r2, [pc, #100]	; (d5270 <_GLOBAL__sub_I_sysStatus+0xa8>)
              valid_(true) {
   d520c:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d520e:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d5212:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5214:	721c      	strb	r4, [r3, #8]
   d5216:	f000 f950 	bl	d54ba <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d521a:	4816      	ldr	r0, [pc, #88]	; (d5274 <_GLOBAL__sub_I_sysStatus+0xac>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d521c:	4d16      	ldr	r5, [pc, #88]	; (d5278 <_GLOBAL__sub_I_sysStatus+0xb0>)
   d521e:	f001 fb13 	bl	d6848 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d5222:	f003 fa91 	bl	d8748 <_Z19__fetch_global_Wirev>
   d5226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d522a:	4601      	mov	r1, r0
   d522c:	4623      	mov	r3, r4
   d522e:	4628      	mov	r0, r5
   d5230:	f000 faf2 	bl	d5818 <_ZN6MB85RCC1ER7TwoWireji>
   d5234:	4b11      	ldr	r3, [pc, #68]	; (d527c <_GLOBAL__sub_I_sysStatus+0xb4>)
   d5236:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5238:	f003 fa86 	bl	d8748 <_Z19__fetch_global_Wirev>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d523c:	4c10      	ldr	r4, [pc, #64]	; (d5280 <_GLOBAL__sub_I_sysStatus+0xb8>)
   d523e:	4601      	mov	r1, r0
   d5240:	4810      	ldr	r0, [pc, #64]	; (d5284 <_GLOBAL__sub_I_sysStatus+0xbc>)
   d5242:	f000 fd5f 	bl	d5d04 <_ZN8MCP79410C1ER7TwoWire>
   d5246:	4910      	ldr	r1, [pc, #64]	; (d5288 <_GLOBAL__sub_I_sysStatus+0xc0>)
   d5248:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d524c:	4620      	mov	r0, r4
   d524e:	f001 f9d9 	bl	d6604 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5252:	4b0e      	ldr	r3, [pc, #56]	; (d528c <_GLOBAL__sub_I_sysStatus+0xc4>)
   d5254:	6023      	str	r3, [r4, #0]
   d5256:	bd38      	pop	{r3, r4, r5, pc}
   d5258:	2003e39d 	.word	0x2003e39d
   d525c:	ffff0000 	.word	0xffff0000
   d5260:	2003e39c 	.word	0x2003e39c
   d5264:	2003e390 	.word	0x2003e390
   d5268:	2003e3c0 	.word	0x2003e3c0
   d526c:	2003e4e4 	.word	0x2003e4e4
   d5270:	00030010 	.word	0x00030010
   d5274:	2003e49c 	.word	0x2003e49c
   d5278:	2003e3dc 	.word	0x2003e3dc
   d527c:	000d9718 	.word	0x000d9718
   d5280:	2003e414 	.word	0x2003e414
   d5284:	2003e450 	.word	0x2003e450
   d5288:	2003f400 	.word	0x2003f400
   d528c:	000d96f0 	.word	0x000d96f0

000d5290 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d5290:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5292:	2200      	movs	r2, #0
  _addr = addr;
   d5294:	7001      	strb	r1, [r0, #0]
  _begun = false;
   d5296:	7202      	strb	r2, [r0, #8]
}
   d5298:	4770      	bx	lr

000d529a <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   d529a:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d529c:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d529e:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d52a0:	b153      	cbz	r3, d52b8 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d52a2:	7821      	ldrb	r1, [r4, #0]
   d52a4:	6860      	ldr	r0, [r4, #4]
   d52a6:	f002 fb55 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   d52aa:	6860      	ldr	r0, [r4, #4]
   d52ac:	f002 fb5d 	bl	d796a <_ZN7TwoWire15endTransmissionEv>
   d52b0:	fab0 f080 	clz	r0, r0
   d52b4:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   d52b6:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d52b8:	f000 f803 	bl	d52c2 <_ZN18Adafruit_I2CDevice5beginEv>
   d52bc:	2800      	cmp	r0, #0
   d52be:	d1f0      	bne.n	d52a2 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d52c0:	e7f9      	b.n	d52b6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d52c2 <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   d52c2:	b510      	push	{r4, lr}
   d52c4:	4604      	mov	r4, r0
  _wire->begin();
   d52c6:	6840      	ldr	r0, [r0, #4]
   d52c8:	f002 fb12 	bl	d78f0 <_ZN7TwoWire5beginEv>
  _begun = true;
   d52cc:	2301      	movs	r3, #1
   d52ce:	7223      	strb	r3, [r4, #8]
  return detected();
   d52d0:	4620      	mov	r0, r4
}
   d52d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   d52d6:	f7ff bfe0 	b.w	d529a <_ZN18Adafruit_I2CDevice8detectedEv>

000d52da <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d52da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52de:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d52e2:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   d52e4:	1993      	adds	r3, r2, r6
   d52e6:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d52e8:	4604      	mov	r4, r0
   d52ea:	4688      	mov	r8, r1
   d52ec:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   d52ee:	d902      	bls.n	d52f6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d52f0:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   d52f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d52f6:	7801      	ldrb	r1, [r0, #0]
   d52f8:	6840      	ldr	r0, [r0, #4]
   d52fa:	f002 fb2b 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d52fe:	b97e      	cbnz	r6, d5320 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   d5300:	6860      	ldr	r0, [r4, #4]
   d5302:	6803      	ldr	r3, [r0, #0]
   d5304:	462a      	mov	r2, r5
   d5306:	68db      	ldr	r3, [r3, #12]
   d5308:	4641      	mov	r1, r8
   d530a:	4798      	blx	r3
   d530c:	4285      	cmp	r5, r0
   d530e:	d1ef      	bne.n	d52f0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   d5310:	6860      	ldr	r0, [r4, #4]
   d5312:	4639      	mov	r1, r7
   d5314:	f002 fb25 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
   d5318:	fab0 f080 	clz	r0, r0
   d531c:	0940      	lsrs	r0, r0, #5
   d531e:	e7e8      	b.n	d52f2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5320:	f1b9 0f00 	cmp.w	r9, #0
   d5324:	d0ec      	beq.n	d5300 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
   d5326:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d5328:	6803      	ldr	r3, [r0, #0]
   d532a:	4632      	mov	r2, r6
   d532c:	68db      	ldr	r3, [r3, #12]
   d532e:	4649      	mov	r1, r9
   d5330:	4798      	blx	r3
   d5332:	42b0      	cmp	r0, r6
   d5334:	d1dc      	bne.n	d52f0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   d5336:	e7e3      	b.n	d5300 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000d5338 <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   d5338:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d533a:	b570      	push	{r4, r5, r6, lr}
   d533c:	4606      	mov	r6, r0
   d533e:	460c      	mov	r4, r1
   d5340:	4615      	mov	r5, r2
  if (len > 32) {
   d5342:	d80f      	bhi.n	d5364 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   d5344:	7801      	ldrb	r1, [r0, #0]
   d5346:	6840      	ldr	r0, [r0, #4]
   d5348:	f002 faef 	bl	d792a <_ZN7TwoWire11requestFromEhjh>
   d534c:	42a8      	cmp	r0, r5
   d534e:	d109      	bne.n	d5364 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   d5350:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   d5352:	42a5      	cmp	r5, r4
   d5354:	d008      	beq.n	d5368 <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   d5356:	6870      	ldr	r0, [r6, #4]
   d5358:	6803      	ldr	r3, [r0, #0]
   d535a:	695b      	ldr	r3, [r3, #20]
   d535c:	4798      	blx	r3
   d535e:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   d5362:	e7f6      	b.n	d5352 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   d5364:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5366:	bd70      	pop	{r4, r5, r6, pc}
   d5368:	2001      	movs	r0, #1
   d536a:	e7fc      	b.n	d5366 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000d536c <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d536c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d536e:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   d5370:	2300      	movs	r3, #0
   d5372:	e9cd 3300 	strd	r3, r3, [sp]
   d5376:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d537a:	9e06      	ldr	r6, [sp, #24]
   d537c:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   d537e:	f7ff ffac 	bl	d52da <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   d5382:	b140      	cbz	r0, d5396 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   d5384:	2301      	movs	r3, #1
   d5386:	4632      	mov	r2, r6
   d5388:	4629      	mov	r1, r5
   d538a:	4620      	mov	r0, r4
}
   d538c:	b002      	add	sp, #8
   d538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d5392:	f7ff bfd1 	b.w	d5338 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d5396:	b002      	add	sp, #8
   d5398:	bd70      	pop	{r4, r5, r6, pc}

000d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   d539a:	b510      	push	{r4, lr}
  _device = device;
   d539c:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   d539e:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   d53a0:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   d53a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   d53a8:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   d53aa:	7202      	strb	r2, [r0, #8]
  _width = width;
   d53ac:	7183      	strb	r3, [r0, #6]
}
   d53ae:	bd10      	pop	{r4, pc}

000d53b0 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   d53b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   d53b2:	8883      	ldrh	r3, [r0, #4]
   d53b4:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   d53b8:	79c3      	ldrb	r3, [r0, #7]
   d53ba:	9301      	str	r3, [sp, #4]
   d53bc:	ab03      	add	r3, sp, #12
   d53be:	9300      	str	r3, [sp, #0]
   d53c0:	6800      	ldr	r0, [r0, #0]
   d53c2:	2301      	movs	r3, #1
   d53c4:	f7ff ff89 	bl	d52da <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   d53c8:	b005      	add	sp, #20
   d53ca:	f85d fb04 	ldr.w	pc, [sp], #4

000d53ce <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   d53ce:	b4f0      	push	{r4, r5, r6, r7}
   d53d0:	460c      	mov	r4, r1
  if (numbytes == 0) {
   d53d2:	b902      	cbnz	r2, d53d6 <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   d53d4:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   d53d6:	2a04      	cmp	r2, #4
   d53d8:	d813      	bhi.n	d5402 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   d53da:	f100 0509 	add.w	r5, r0, #9
   d53de:	1883      	adds	r3, r0, r2
   d53e0:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   d53e2:	4283      	cmp	r3, r0
   d53e4:	d009      	beq.n	d53fa <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   d53e6:	7a07      	ldrb	r7, [r0, #8]
   d53e8:	b2e6      	uxtb	r6, r4
   d53ea:	b927      	cbnz	r7, d53f6 <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   d53ec:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   d53ee:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   d53f0:	3501      	adds	r5, #1
   d53f2:	3b01      	subs	r3, #1
   d53f4:	e7f5      	b.n	d53e2 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   d53f6:	721e      	strb	r6, [r3, #8]
   d53f8:	e7f9      	b.n	d53ee <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   d53fa:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d53fc:	4618      	mov	r0, r3
   d53fe:	f7ff bfd7 	b.w	d53b0 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   d5402:	2000      	movs	r0, #0
   d5404:	bcf0      	pop	{r4, r5, r6, r7}
   d5406:	4770      	bx	lr

000d5408 <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d5408:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   d540a:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d540c:	460b      	mov	r3, r1
  _buffer[0] = _address;
   d540e:	8881      	ldrh	r1, [r0, #4]
   d5410:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   d5414:	2100      	movs	r1, #0
   d5416:	e9cd 2100 	strd	r2, r1, [sp]
   d541a:	2201      	movs	r2, #1
   d541c:	4621      	mov	r1, r4
   d541e:	6800      	ldr	r0, [r0, #0]
   d5420:	f7ff ffa4 	bl	d536c <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   d5424:	b002      	add	sp, #8
   d5426:	bd10      	pop	{r4, pc}

000d5428 <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   d5428:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   d542a:	f100 0509 	add.w	r5, r0, #9
   d542e:	7982      	ldrb	r2, [r0, #6]
   d5430:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   d5432:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   d5434:	f7ff ffe8 	bl	d5408 <_ZN20Adafruit_I2CRegister4readEPhh>
   d5438:	b178      	cbz	r0, d545a <_ZN20Adafruit_I2CRegister4readEv+0x32>
   d543a:	79a2      	ldrb	r2, [r4, #6]
   d543c:	4629      	mov	r1, r5
   d543e:	4422      	add	r2, r4
  uint32_t value = 0;
   d5440:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   d5442:	42a2      	cmp	r2, r4
   d5444:	d00b      	beq.n	d545e <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   d5446:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   d5448:	7a20      	ldrb	r0, [r4, #8]
   d544a:	b920      	cbnz	r0, d5456 <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   d544c:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   d544e:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   d5450:	3a01      	subs	r2, #1
   d5452:	3101      	adds	r1, #1
   d5454:	e7f5      	b.n	d5442 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   d5456:	7808      	ldrb	r0, [r1, #0]
   d5458:	e7f9      	b.n	d544e <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   d545a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d545e:	bd38      	pop	{r3, r4, r5, pc}

000d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   d5460:	b510      	push	{r4, lr}
  _register = reg;
   d5462:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d5464:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d5466:	7143      	strb	r3, [r0, #5]
}
   d5468:	bd10      	pop	{r4, pc}

000d546a <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   d546a:	b510      	push	{r4, lr}
   d546c:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d546e:	6800      	ldr	r0, [r0, #0]
   d5470:	f7ff ffda 	bl	d5428 <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   d5474:	7923      	ldrb	r3, [r4, #4]
   d5476:	1c5a      	adds	r2, r3, #1
   d5478:	2301      	movs	r3, #1
   d547a:	4093      	lsls	r3, r2
  val >>= _shift;
   d547c:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   d547e:	3b01      	subs	r3, #1
  val >>= _shift;
   d5480:	40d0      	lsrs	r0, r2
}
   d5482:	4018      	ands	r0, r3
   d5484:	bd10      	pop	{r4, pc}

000d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d5486:	b570      	push	{r4, r5, r6, lr}
   d5488:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d548a:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d548c:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d548e:	f7ff ffcb 	bl	d5428 <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   d5492:	7923      	ldrb	r3, [r4, #4]
   d5494:	2201      	movs	r2, #1
   d5496:	3301      	adds	r3, #1
   d5498:	409a      	lsls	r2, r3
   d549a:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d549c:	7962      	ldrb	r2, [r4, #5]
   d549e:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;      // remove the current data at that spot
   d54a2:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d54a6:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   d54aa:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d54ac:	4091      	lsls	r1, r2
  _register->write(val, _register->width());
   d54ae:	4329      	orrs	r1, r5
   d54b0:	7982      	ldrb	r2, [r0, #6]
   d54b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   d54b6:	f7ff bf8a 	b.w	d53ce <_ZN20Adafruit_I2CRegister5writeEmh>

000d54ba <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   d54ba:	4770      	bx	lr

000d54bc <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   d54bc:	b508      	push	{r3, lr}
  return ALS_Data->read();
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	f7ff ffb2 	bl	d5428 <_ZN20Adafruit_I2CRegister4readEv>
}
   d54c4:	b280      	uxth	r0, r0
   d54c6:	bd08      	pop	{r3, pc}

000d54c8 <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   d54c8:	69c0      	ldr	r0, [r0, #28]
   d54ca:	f081 0101 	eor.w	r1, r1, #1
   d54ce:	f7ff bfda 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d54d2 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   d54d2:	6a00      	ldr	r0, [r0, #32]
   d54d4:	f7ff bfd7 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d54d8 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   d54d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d54da:	f7ff bfd4 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d54de <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   d54de:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d54e0:	f7ff bfd1 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d54e4 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   d54e4:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   d54e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d54e8:	f7ff ffbf 	bl	d546a <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d54ec:	b2c0      	uxtb	r0, r0
   d54ee:	bd08      	pop	{r3, pc}

000d54f0 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   d54f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d54f2:	f7ff bfc8 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d54f6 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   d54f6:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   d54f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d54fa:	f7ff ffb6 	bl	d546a <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d54fe:	b2c0      	uxtb	r0, r0
   d5500:	bd08      	pop	{r3, pc}

000d5502 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   d5502:	b510      	push	{r4, lr}
   d5504:	ed2d 8b02 	vpush	{d8}
   d5508:	4604      	mov	r4, r0
   d550a:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   d550e:	f7ff fff2 	bl	d54f6 <_ZN17Adafruit_VEML77007getGainEv>
   d5512:	2802      	cmp	r0, #2
   d5514:	d018      	beq.n	d5548 <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   d5516:	2803      	cmp	r0, #3
   d5518:	d013      	beq.n	d5542 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   d551a:	2801      	cmp	r0, #1
   d551c:	d103      	bne.n	d5526 <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   d551e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   d5522:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   d5526:	4620      	mov	r0, r4
   d5528:	f7ff ffdc 	bl	d54e4 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   d552c:	3801      	subs	r0, #1
   d552e:	280b      	cmp	r0, #11
   d5530:	d814      	bhi.n	d555c <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   d5532:	e8df f000 	tbb	[pc, r0]
   d5536:	1b18      	.short	0x1b18
   d5538:	1313131e 	.word	0x1313131e
   d553c:	13131113 	.word	0x13131113
   d5540:	0c13      	.short	0x0c13
    value *= 4;
   d5542:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d5546:	e7ec      	b.n	d5522 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   d5548:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   d554c:	e7e9      	b.n	d5522 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   d554e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   d5552:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   d5556:	e001      	b.n	d555c <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   d5558:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   d555c:	eeb0 0a48 	vmov.f32	s0, s16
   d5560:	ecbd 8b02 	vpop	{d8}
   d5564:	bd10      	pop	{r4, pc}
    value /= 2.0;
   d5566:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d556a:	e7f2      	b.n	d5552 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   d556c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   d5570:	e7ef      	b.n	d5552 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   d5572:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d5576:	e7ec      	b.n	d5552 <_ZN17Adafruit_VEML77009normalizeEf+0x50>

000d5578 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   d5578:	b510      	push	{r4, lr}
   d557a:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	f7ff ff53 	bl	d5428 <_ZN20Adafruit_I2CRegister4readEv>
   d5582:	ee07 0a90 	vmov	s15, r0
   d5586:	4620      	mov	r0, r4
   d5588:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d558c:	f7ff ffb9 	bl	d5502 <_ZN17Adafruit_VEML77009normalizeEf>
   d5590:	ee10 0a10 	vmov	r0, s0
   d5594:	f003 fa6a 	bl	d8a6c <__aeabi_f2d>
   d5598:	a305      	add	r3, pc, #20	; (adr r3, d55b0 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   d559a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d559e:	f003 fabd 	bl	d8b1c <__aeabi_dmul>
   d55a2:	f003 fccd 	bl	d8f40 <__aeabi_d2f>
}
   d55a6:	ee00 0a10 	vmov	s0, r0
   d55aa:	bd10      	pop	{r4, pc}
   d55ac:	f3af 8000 	nop.w
   d55b0:	487fcb92 	.word	0x487fcb92
   d55b4:	3fad7dbf 	.word	0x3fad7dbf

000d55b8 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   d55b8:	b510      	push	{r4, lr}
   d55ba:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   d55bc:	6880      	ldr	r0, [r0, #8]
   d55be:	f7ff ff33 	bl	d5428 <_ZN20Adafruit_I2CRegister4readEv>
   d55c2:	ee07 0a90 	vmov	s15, r0
   d55c6:	4620      	mov	r0, r4
   d55c8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d55cc:	f7ff ff99 	bl	d5502 <_ZN17Adafruit_VEML77009normalizeEf>
   d55d0:	ee10 0a10 	vmov	r0, s0
   d55d4:	f003 fa4a 	bl	d8a6c <__aeabi_f2d>
   d55d8:	a305      	add	r3, pc, #20	; (adr r3, d55f0 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   d55da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55de:	f003 fa9d 	bl	d8b1c <__aeabi_dmul>
   d55e2:	f003 fcad 	bl	d8f40 <__aeabi_d2f>
}
   d55e6:	ee00 0a10 	vmov	s0, r0
   d55ea:	bd10      	pop	{r4, pc}
   d55ec:	f3af 8000 	nop.w
   d55f0:	487fcb92 	.word	0x487fcb92
   d55f4:	3fad7dbf 	.word	0x3fad7dbf

000d55f8 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   d55f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d55fa:	f7ff bf44 	b.w	d5486 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d55fe <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   d55fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5600:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d5602:	200c      	movs	r0, #12
{
   d5604:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d5606:	f7fe fd46 	bl	d4096 <_Znwj>
   d560a:	4605      	mov	r5, r0
   d560c:	b118      	cbz	r0, d5616 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   d560e:	9a03      	ldr	r2, [sp, #12]
   d5610:	2110      	movs	r1, #16
   d5612:	f7ff fe3d 	bl	d5290 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d5616:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   d5618:	4628      	mov	r0, r5
   d561a:	f7ff fe52 	bl	d52c2 <_ZN18Adafruit_I2CDevice5beginEv>
   d561e:	4605      	mov	r5, r0
   d5620:	2800      	cmp	r0, #0
   d5622:	f000 80d2 	beq.w	d57ca <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   d5626:	2010      	movs	r0, #16
   d5628:	f7fe fd35 	bl	d4096 <_Znwj>
   d562c:	4606      	mov	r6, r0
   d562e:	b138      	cbz	r0, d5640 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   d5630:	2301      	movs	r3, #1
   d5632:	2200      	movs	r2, #0
   d5634:	e9cd 2300 	strd	r2, r3, [sp]
   d5638:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d563a:	2302      	movs	r3, #2
   d563c:	f7ff fead 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5640:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   d5642:	2010      	movs	r0, #16
   d5644:	f7fe fd27 	bl	d4096 <_Znwj>
   d5648:	4606      	mov	r6, r0
   d564a:	b138      	cbz	r0, d565c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   d564c:	2300      	movs	r3, #0
   d564e:	2201      	movs	r2, #1
   d5650:	e9cd 3200 	strd	r3, r2, [sp]
   d5654:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5656:	2302      	movs	r3, #2
   d5658:	f7ff fe9f 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d565c:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   d565e:	2010      	movs	r0, #16
   d5660:	f7fe fd19 	bl	d4096 <_Znwj>
   d5664:	4606      	mov	r6, r0
   d5666:	b140      	cbz	r0, d567a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   d5668:	2300      	movs	r3, #0
   d566a:	2201      	movs	r2, #1
   d566c:	e9cd 3200 	strd	r3, r2, [sp]
   d5670:	2302      	movs	r3, #2
   d5672:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5674:	461a      	mov	r2, r3
   d5676:	f7ff fe90 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d567a:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   d567c:	2010      	movs	r0, #16
   d567e:	f7fe fd0a 	bl	d4096 <_Znwj>
   d5682:	4606      	mov	r6, r0
   d5684:	b148      	cbz	r0, d569a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   d5686:	2300      	movs	r3, #0
   d5688:	f04f 0e01 	mov.w	lr, #1
   d568c:	e9cd 3e00 	strd	r3, lr, [sp]
   d5690:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5692:	2302      	movs	r3, #2
   d5694:	2203      	movs	r2, #3
   d5696:	f7ff fe80 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d569a:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   d569c:	2010      	movs	r0, #16
   d569e:	f7fe fcfa 	bl	d4096 <_Znwj>
   d56a2:	4606      	mov	r6, r0
   d56a4:	b148      	cbz	r0, d56ba <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   d56a6:	2300      	movs	r3, #0
   d56a8:	f04f 0c01 	mov.w	ip, #1
   d56ac:	e9cd 3c00 	strd	r3, ip, [sp]
   d56b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d56b2:	2302      	movs	r3, #2
   d56b4:	2204      	movs	r2, #4
   d56b6:	f7ff fe70 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d56ba:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   d56bc:	2010      	movs	r0, #16
   d56be:	f7fe fcea 	bl	d4096 <_Znwj>
   d56c2:	4606      	mov	r6, r0
   d56c4:	b140      	cbz	r0, d56d8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   d56c6:	2300      	movs	r3, #0
   d56c8:	2101      	movs	r1, #1
   d56ca:	e9cd 3100 	strd	r3, r1, [sp]
   d56ce:	2205      	movs	r2, #5
   d56d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d56d2:	2302      	movs	r3, #2
   d56d4:	f7ff fe61 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d56d8:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   d56da:	2010      	movs	r0, #16
   d56dc:	f7fe fcdb 	bl	d4096 <_Znwj>
   d56e0:	4606      	mov	r6, r0
   d56e2:	b140      	cbz	r0, d56f6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   d56e4:	2300      	movs	r3, #0
   d56e6:	2201      	movs	r2, #1
   d56e8:	e9cd 3200 	strd	r3, r2, [sp]
   d56ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d56ee:	2302      	movs	r3, #2
   d56f0:	2206      	movs	r2, #6
   d56f2:	f7ff fe52 	bl	d539a <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d56f6:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   d56f8:	2008      	movs	r0, #8
   d56fa:	f7fe fccc 	bl	d4096 <_Znwj>
   d56fe:	4606      	mov	r6, r0
   d5700:	b120      	cbz	r0, d570c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   d5702:	6821      	ldr	r1, [r4, #0]
   d5704:	2300      	movs	r3, #0
   d5706:	2201      	movs	r2, #1
   d5708:	f7ff feaa 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d570c:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   d570e:	2008      	movs	r0, #8
   d5710:	f7fe fcc1 	bl	d4096 <_Znwj>
   d5714:	4606      	mov	r6, r0
   d5716:	b120      	cbz	r0, d5722 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   d5718:	2301      	movs	r3, #1
   d571a:	6821      	ldr	r1, [r4, #0]
   d571c:	461a      	mov	r2, r3
   d571e:	f7ff fe9f 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5722:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   d5724:	2008      	movs	r0, #8
   d5726:	f7fe fcb6 	bl	d4096 <_Znwj>
   d572a:	4606      	mov	r6, r0
   d572c:	b120      	cbz	r0, d5738 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   d572e:	6821      	ldr	r1, [r4, #0]
   d5730:	2304      	movs	r3, #4
   d5732:	2202      	movs	r2, #2
   d5734:	f7ff fe94 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5738:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   d573a:	2008      	movs	r0, #8
   d573c:	f7fe fcab 	bl	d4096 <_Znwj>
   d5740:	4606      	mov	r6, r0
   d5742:	b120      	cbz	r0, d574e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   d5744:	6821      	ldr	r1, [r4, #0]
   d5746:	2306      	movs	r3, #6
   d5748:	2204      	movs	r2, #4
   d574a:	f7ff fe89 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d574e:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   d5750:	2008      	movs	r0, #8
   d5752:	f7fe fca0 	bl	d4096 <_Znwj>
   d5756:	4606      	mov	r6, r0
   d5758:	b120      	cbz	r0, d5764 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   d575a:	6821      	ldr	r1, [r4, #0]
   d575c:	230b      	movs	r3, #11
   d575e:	2202      	movs	r2, #2
   d5760:	f7ff fe7e 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5764:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   d5766:	2008      	movs	r0, #8
   d5768:	f7fe fc95 	bl	d4096 <_Znwj>
   d576c:	4606      	mov	r6, r0
   d576e:	b120      	cbz	r0, d577a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   d5770:	6961      	ldr	r1, [r4, #20]
   d5772:	2300      	movs	r3, #0
   d5774:	2201      	movs	r2, #1
   d5776:	f7ff fe73 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d577a:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d577c:	2008      	movs	r0, #8
   d577e:	f7fe fc8a 	bl	d4096 <_Znwj>
   d5782:	4606      	mov	r6, r0
   d5784:	b120      	cbz	r0, d5790 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   d5786:	6961      	ldr	r1, [r4, #20]
   d5788:	2301      	movs	r3, #1
   d578a:	2202      	movs	r2, #2
   d578c:	f7ff fe68 	bl	d5460 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   d5790:	2100      	movs	r1, #0
   d5792:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d5794:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   d5796:	f7ff fe97 	bl	d54c8 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   d579a:	2100      	movs	r1, #0
   d579c:	4620      	mov	r0, r4
   d579e:	f7ff fe98 	bl	d54d2 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   d57a2:	2100      	movs	r1, #0
   d57a4:	4620      	mov	r0, r4
   d57a6:	f7ff fe97 	bl	d54d8 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   d57aa:	2100      	movs	r1, #0
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7ff fe9f 	bl	d54f0 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   d57b2:	2100      	movs	r1, #0
   d57b4:	4620      	mov	r0, r4
   d57b6:	f7ff fe92 	bl	d54de <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   d57ba:	2100      	movs	r1, #0
   d57bc:	4620      	mov	r0, r4
   d57be:	f7ff ff1b 	bl	d55f8 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   d57c2:	2101      	movs	r1, #1
   d57c4:	4620      	mov	r0, r4
   d57c6:	f7ff fe7f 	bl	d54c8 <_ZN17Adafruit_VEML77006enableEb>
}
   d57ca:	4628      	mov	r0, r5
   d57cc:	b004      	add	sp, #16
   d57ce:	bd70      	pop	{r4, r5, r6, pc}

000d57d0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d57d0:	4770      	bx	lr

000d57d2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d57d2:	b510      	push	{r4, lr}
}
   d57d4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d57d6:	4604      	mov	r4, r0
}
   d57d8:	f002 ffda 	bl	d8790 <_ZdlPvj>
   d57dc:	4620      	mov	r0, r4
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d57e0:	6803      	ldr	r3, [r0, #0]
   d57e2:	b2c9      	uxtb	r1, r1
   d57e4:	689b      	ldr	r3, [r3, #8]
   d57e6:	4718      	bx	r3

000d57e8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d57e8:	b40e      	push	{r1, r2, r3}
   d57ea:	b510      	push	{r4, lr}
   d57ec:	b08d      	sub	sp, #52	; 0x34
   d57ee:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d57f0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d57f2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d57f6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d57f8:	2300      	movs	r3, #0
   d57fa:	2020      	movs	r0, #32
   d57fc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5800:	e9cd 4200 	strd	r4, r2, [sp]
   d5804:	201e      	movs	r0, #30
   d5806:	aa04      	add	r2, sp, #16
   d5808:	f001 fac2 	bl	d6d90 <log_message_v>
}
   d580c:	b00d      	add	sp, #52	; 0x34
   d580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5812:	b003      	add	sp, #12
   d5814:	4770      	bx	lr
	...

000d5818 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5818:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d581a:	4d03      	ldr	r5, [pc, #12]	; (d5828 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d581c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5820:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5824:	bd30      	pop	{r4, r5, pc}
   d5826:	bf00      	nop
   d5828:	000d97c0 	.word	0x000d97c0

000d582c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d582c:	6840      	ldr	r0, [r0, #4]
   d582e:	f002 b85f 	b.w	d78f0 <_ZN7TwoWire5beginEv>

000d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5832:	b510      	push	{r4, lr}
   d5834:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5836:	6800      	ldr	r0, [r0, #0]
   d5838:	f002 f8a3 	bl	d7982 <_ZN7TwoWire6unlockEv>
   d583c:	4620      	mov	r0, r4
   d583e:	bd10      	pop	{r4, pc}

000d5840 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5844:	b08a      	sub	sp, #40	; 0x28
   d5846:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5848:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d584a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d584c:	f002 f890 	bl	d7970 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5850:	221e      	movs	r2, #30
   d5852:	2100      	movs	r1, #0
   d5854:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5856:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5858:	f003 fc2c 	bl	d90b4 <memset>
		size_t framAddr = 0;
   d585c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d585e:	b1ef      	cbz	r7, d589c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5860:	6823      	ldr	r3, [r4, #0]
   d5862:	2f1e      	cmp	r7, #30
   d5864:	46b8      	mov	r8, r7
   d5866:	bf28      	it	cs
   d5868:	f04f 081e 	movcs.w	r8, #30
   d586c:	68dd      	ldr	r5, [r3, #12]
   d586e:	aa02      	add	r2, sp, #8
   d5870:	4643      	mov	r3, r8
   d5872:	4631      	mov	r1, r6
   d5874:	4620      	mov	r0, r4
   d5876:	47a8      	blx	r5
			if (!result) {
   d5878:	4605      	mov	r5, r0
   d587a:	b958      	cbnz	r0, d5894 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d587c:	480a      	ldr	r0, [pc, #40]	; (d58a8 <_ZN6MB85RC5eraseEv+0x68>)
   d587e:	490b      	ldr	r1, [pc, #44]	; (d58ac <_ZN6MB85RC5eraseEv+0x6c>)
   d5880:	4632      	mov	r2, r6
   d5882:	f7ff ffb1 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5886:	a801      	add	r0, sp, #4
   d5888:	f7ff ffd3 	bl	d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d588c:	4628      	mov	r0, r5
   d588e:	b00a      	add	sp, #40	; 0x28
   d5890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5894:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5898:	4446      	add	r6, r8
		while(totalLen > 0) {
   d589a:	e7e0      	b.n	d585e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d589c:	a801      	add	r0, sp, #4
   d589e:	f7ff ffc8 	bl	d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d58a2:	2501      	movs	r5, #1
   d58a4:	e7f2      	b.n	d588c <_ZN6MB85RC5eraseEv+0x4c>
   d58a6:	bf00      	nop
   d58a8:	2003e57c 	.word	0x2003e57c
   d58ac:	000d978c 	.word	0x000d978c

000d58b0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d58b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d58b4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d58b6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d58b8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d58ba:	460d      	mov	r5, r1
   d58bc:	4616      	mov	r6, r2
   d58be:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d58c0:	f002 f856 	bl	d7970 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d58c4:	b1a7      	cbz	r7, d58f0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d58c6:	68e1      	ldr	r1, [r4, #12]
   d58c8:	6860      	ldr	r0, [r4, #4]
   d58ca:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d58ce:	f002 f845 	bl	d795c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d58d2:	0a29      	lsrs	r1, r5, #8
   d58d4:	6860      	ldr	r0, [r4, #4]
   d58d6:	f7ff ff83 	bl	d57e0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d58da:	4629      	mov	r1, r5
   d58dc:	6860      	ldr	r0, [r4, #4]
   d58de:	f7ff ff7f 	bl	d57e0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d58e2:	6860      	ldr	r0, [r4, #4]
   d58e4:	2100      	movs	r1, #0
   d58e6:	f002 f83c 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d58ea:	b148      	cbz	r0, d5900 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d58ec:	2400      	movs	r4, #0
   d58ee:	e000      	b.n	d58f2 <_ZN6MB85RC8readDataEjPhj+0x42>
   d58f0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d58f2:	a801      	add	r0, sp, #4
   d58f4:	f7ff ff9d 	bl	d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d58f8:	4620      	mov	r0, r4
   d58fa:	b003      	add	sp, #12
   d58fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5900:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5902:	7b21      	ldrb	r1, [r4, #12]
   d5904:	6860      	ldr	r0, [r4, #4]
   d5906:	46b8      	mov	r8, r7
   d5908:	bf28      	it	cs
   d590a:	f04f 0820 	movcs.w	r8, #32
   d590e:	2301      	movs	r3, #1
   d5910:	4642      	mov	r2, r8
   d5912:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5916:	f002 f808 	bl	d792a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d591a:	f002 ff15 	bl	d8748 <_Z19__fetch_global_Wirev>
   d591e:	6803      	ldr	r3, [r0, #0]
   d5920:	691b      	ldr	r3, [r3, #16]
   d5922:	4798      	blx	r3
   d5924:	4540      	cmp	r0, r8
   d5926:	dbe1      	blt.n	d58ec <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5928:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d592c:	f002 ff0c 	bl	d8748 <_Z19__fetch_global_Wirev>
   d5930:	6803      	ldr	r3, [r0, #0]
   d5932:	695b      	ldr	r3, [r3, #20]
   d5934:	4798      	blx	r3
   d5936:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d593a:	454e      	cmp	r6, r9
   d593c:	d1f6      	bne.n	d592c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d593e:	4445      	add	r5, r8
   d5940:	eba7 0708 	sub.w	r7, r7, r8
   d5944:	e7be      	b.n	d58c4 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5946 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d594a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d594c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d594e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5950:	460e      	mov	r6, r1
   d5952:	4690      	mov	r8, r2
   d5954:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5956:	f002 f80b 	bl	d7970 <_ZN7TwoWire4lockEv>
   d595a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d595e:	f1b9 0f00 	cmp.w	r9, #0
   d5962:	d02a      	beq.n	d59ba <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5964:	b34d      	cbz	r5, d59ba <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5966:	68e1      	ldr	r1, [r4, #12]
   d5968:	6860      	ldr	r0, [r4, #4]
   d596a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d596e:	f001 fff5 	bl	d795c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5972:	0a31      	lsrs	r1, r6, #8
   d5974:	6860      	ldr	r0, [r4, #4]
   d5976:	f7ff ff33 	bl	d57e0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d597a:	6860      	ldr	r0, [r4, #4]
   d597c:	4631      	mov	r1, r6
   d597e:	f7ff ff2f 	bl	d57e0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5982:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5986:	4647      	mov	r7, r8
   d5988:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d598c:	6860      	ldr	r0, [r4, #4]
   d598e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5992:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5994:	3d01      	subs	r5, #1
				wire.write(*data);
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d599a:	4555      	cmp	r5, sl
   d599c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d59a0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d59a2:	d001      	beq.n	d59a8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d59a4:	2d00      	cmp	r5, #0
   d59a6:	d1f1      	bne.n	d598c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d59a8:	6860      	ldr	r0, [r4, #4]
   d59aa:	2101      	movs	r1, #1
   d59ac:	f001 ffd9 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d59b0:	2800      	cmp	r0, #0
   d59b2:	d0d7      	beq.n	d5964 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d59b4:	f04f 0900 	mov.w	r9, #0
   d59b8:	e7d1      	b.n	d595e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d59ba:	a801      	add	r0, sp, #4
   d59bc:	f7ff ff39 	bl	d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d59c0:	4648      	mov	r0, r9
   d59c2:	b003      	add	sp, #12
   d59c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d59c8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d59c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59cc:	b08b      	sub	sp, #44	; 0x2c
   d59ce:	460e      	mov	r6, r1
   d59d0:	4615      	mov	r5, r2
   d59d2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d59d4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d59d6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d59d8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d59da:	f001 ffc9 	bl	d7970 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d59de:	42ae      	cmp	r6, r5
   d59e0:	d229      	bcs.n	d5a36 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d59e2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d59e4:	4425      	add	r5, r4
			while(numBytes > 0) {
   d59e6:	b18c      	cbz	r4, d5a0c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d59e8:	2c1e      	cmp	r4, #30
   d59ea:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d59ec:	f8d8 3000 	ldr.w	r3, [r8]
   d59f0:	bf28      	it	cs
   d59f2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d59f4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d59f6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d59fa:	aa02      	add	r2, sp, #8
   d59fc:	463b      	mov	r3, r7
   d59fe:	4631      	mov	r1, r6
   d5a00:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5a02:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5a04:	47c8      	blx	r9
				if (!result) {
   d5a06:	b948      	cbnz	r0, d5a1c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5a08:	2400      	movs	r4, #0
   d5a0a:	e000      	b.n	d5a0e <_ZN6MB85RC8moveDataEjjj+0x46>
   d5a0c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5a0e:	a801      	add	r0, sp, #4
   d5a10:	f7ff ff0f 	bl	d5832 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5a14:	4620      	mov	r0, r4
   d5a16:	b00b      	add	sp, #44	; 0x2c
   d5a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5a1c:	f8d8 3000 	ldr.w	r3, [r8]
   d5a20:	aa02      	add	r2, sp, #8
   d5a22:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5a26:	4629      	mov	r1, r5
   d5a28:	463b      	mov	r3, r7
   d5a2a:	4640      	mov	r0, r8
   d5a2c:	47c8      	blx	r9
				if (!result) {
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	d0ea      	beq.n	d5a08 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5a32:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5a34:	e7d7      	b.n	d59e6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5a36:	d9e9      	bls.n	d5a0c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5a38:	2c00      	cmp	r4, #0
   d5a3a:	d0e7      	beq.n	d5a0c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5a3c:	f8d8 3000 	ldr.w	r3, [r8]
   d5a40:	2c1e      	cmp	r4, #30
   d5a42:	4627      	mov	r7, r4
   d5a44:	bf28      	it	cs
   d5a46:	271e      	movcs	r7, #30
   d5a48:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5a4c:	aa02      	add	r2, sp, #8
   d5a4e:	463b      	mov	r3, r7
   d5a50:	4631      	mov	r1, r6
   d5a52:	4640      	mov	r0, r8
   d5a54:	47c8      	blx	r9
				if (!result) {
   d5a56:	2800      	cmp	r0, #0
   d5a58:	d0d6      	beq.n	d5a08 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5a5a:	f8d8 3000 	ldr.w	r3, [r8]
   d5a5e:	aa02      	add	r2, sp, #8
   d5a60:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5a64:	4629      	mov	r1, r5
   d5a66:	463b      	mov	r3, r7
   d5a68:	4640      	mov	r0, r8
   d5a6a:	47c8      	blx	r9
				if (!result) {
   d5a6c:	2800      	cmp	r0, #0
   d5a6e:	d0cb      	beq.n	d5a08 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5a70:	443e      	add	r6, r7
				framAddrTo += count;
   d5a72:	443d      	add	r5, r7
				numBytes -= count;
   d5a74:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5a76:	e7df      	b.n	d5a38 <_ZN6MB85RC8moveDataEjjj+0x70>

000d5a78 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5a78:	2040      	movs	r0, #64	; 0x40
   d5a7a:	4770      	bx	lr

000d5a7c <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5a7c:	2000      	movs	r0, #0
   d5a7e:	4770      	bx	lr

000d5a80 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5a80:	2080      	movs	r0, #128	; 0x80
   d5a82:	4770      	bx	lr

000d5a84 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5a84:	20ff      	movs	r0, #255	; 0xff
   d5a86:	4770      	bx	lr

000d5a88 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5a88:	4770      	bx	lr

000d5a8a <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5a8a:	4770      	bx	lr

000d5a8c <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5a8c:	4770      	bx	lr

000d5a8e <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5a8e:	4770      	bx	lr

000d5a90 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5a90:	b510      	push	{r4, lr}
}
   d5a92:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5a94:	4604      	mov	r4, r0
}
   d5a96:	f002 fe7b 	bl	d8790 <_ZdlPvj>
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	bd10      	pop	{r4, pc}

000d5a9e <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5a9e:	b510      	push	{r4, lr}
}
   d5aa0:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5aa2:	4604      	mov	r4, r0
}
   d5aa4:	f002 fe74 	bl	d8790 <_ZdlPvj>
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5aac:	b510      	push	{r4, lr}
}
   d5aae:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5ab0:	4604      	mov	r4, r0
}
   d5ab2:	f002 fe6d 	bl	d8790 <_ZdlPvj>
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	bd10      	pop	{r4, pc}

000d5aba <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5aba:	b510      	push	{r4, lr}
}
   d5abc:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5abe:	4604      	mov	r4, r0
}
   d5ac0:	f002 fe66 	bl	d8790 <_ZdlPvj>
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5acc:	6803      	ldr	r3, [r0, #0]
   d5ace:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5ad0:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5ad2:	4798      	blx	r3
   d5ad4:	2210      	movs	r2, #16
   d5ad6:	4601      	mov	r1, r0
   d5ad8:	4668      	mov	r0, sp
   d5ada:	f003 faeb 	bl	d90b4 <memset>
	size_t len = length();
   d5ade:	6823      	ldr	r3, [r4, #0]
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	689b      	ldr	r3, [r3, #8]
   d5ae4:	4798      	blx	r3
	size_t offset = 0;
   d5ae6:	2500      	movs	r5, #0
	size_t len = length();
   d5ae8:	4607      	mov	r7, r0
	bool bResult = false;
   d5aea:	4628      	mov	r0, r5
	while(offset < len) {
   d5aec:	42bd      	cmp	r5, r7
   d5aee:	d20e      	bcs.n	d5b0e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5af0:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5af2:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5af4:	2e10      	cmp	r6, #16
   d5af6:	bf28      	it	cs
   d5af8:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5afa:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5afe:	466a      	mov	r2, sp
   d5b00:	4633      	mov	r3, r6
   d5b02:	4629      	mov	r1, r5
   d5b04:	4620      	mov	r0, r4
   d5b06:	47c0      	blx	r8
		if (!bResult) {
   d5b08:	b108      	cbz	r0, d5b0e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5b0a:	4435      	add	r5, r6
	while(offset < len) {
   d5b0c:	e7ee      	b.n	d5aec <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5b0e:	b004      	add	sp, #16
   d5b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b14 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5b14:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5b18:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5b1a:	f240 1301 	movw	r3, #257	; 0x101
   d5b1e:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5b20:	2300      	movs	r3, #0
   d5b22:	8203      	strh	r3, [r0, #16]
}
   d5b24:	4770      	bx	lr
	...

000d5b28 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b06      	ldr	r3, [pc, #24]	; (d5b44 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5b2c:	6003      	str	r3, [r0, #0]
   d5b2e:	4b06      	ldr	r3, [pc, #24]	; (d5b48 <_ZN12MCP79410TimeC1Ev+0x20>)
   d5b30:	6043      	str	r3, [r0, #4]
   d5b32:	f240 7304 	movw	r3, #1796	; 0x704
   d5b36:	8103      	strh	r3, [r0, #8]
   d5b38:	2300      	movs	r3, #0
   d5b3a:	7443      	strb	r3, [r0, #17]
	clear();
   d5b3c:	f7ff ffea 	bl	d5b14 <_ZN12MCP79410Time5clearEv>
}
   d5b40:	bd08      	pop	{r3, pc}
   d5b42:	bf00      	nop
   d5b44:	000d98a0 	.word	0x000d98a0
   d5b48:	03020100 	.word	0x03020100

000d5b4c <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5b4c:	0903      	lsrs	r3, r0, #4
}
   d5b4e:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5b50:	f000 000f 	and.w	r0, r0, #15
}
   d5b54:	fb02 0003 	mla	r0, r2, r3, r0
   d5b58:	4770      	bx	lr

000d5b5a <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5b5a:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5b5c:	7a80      	ldrb	r0, [r0, #10]
   d5b5e:	f7ff fff5 	bl	d5b4c <_ZN12MCP79410Time8bcdToIntEh>
}
   d5b62:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5b66:	bd08      	pop	{r3, pc}

000d5b68 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5b68:	7ac0      	ldrb	r0, [r0, #11]
   d5b6a:	f000 001f 	and.w	r0, r0, #31
   d5b6e:	f7ff bfed 	b.w	d5b4c <_ZN12MCP79410Time8bcdToIntEh>

000d5b72 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5b72:	7b00      	ldrb	r0, [r0, #12]
   d5b74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5b78:	f7ff bfe8 	b.w	d5b4c <_ZN12MCP79410Time8bcdToIntEh>

000d5b7c <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5b7c:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5b7e:	7b81      	ldrb	r1, [r0, #14]
   d5b80:	064a      	lsls	r2, r1, #25
   d5b82:	d50d      	bpl.n	d5ba0 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5b84:	f001 001f 	and.w	r0, r1, #31
   d5b88:	f7ff ffe0 	bl	d5b4c <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5b8c:	068b      	lsls	r3, r1, #26
   d5b8e:	d503      	bpl.n	d5b98 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5b90:	280c      	cmp	r0, #12
   d5b92:	d000      	beq.n	d5b96 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5b94:	300c      	adds	r0, #12
}
   d5b96:	bd08      	pop	{r3, pc}
				return 0;
   d5b98:	280c      	cmp	r0, #12
   d5b9a:	bf08      	it	eq
   d5b9c:	2000      	moveq	r0, #0
   d5b9e:	e7fa      	b.n	d5b96 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5ba4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5ba8:	f7ff bfd0 	b.w	d5b4c <_ZN12MCP79410Time8bcdToIntEh>

000d5bac <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5bac:	7bc0      	ldrb	r0, [r0, #15]
   d5bae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5bb2:	f7ff bfcb 	b.w	d5b4c <_ZN12MCP79410Time8bcdToIntEh>

000d5bb6 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5bb6:	7c00      	ldrb	r0, [r0, #16]
   d5bb8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5bbc:	f7ff bfc6 	b.w	d5b4c <_ZN12MCP79410Time8bcdToIntEh>

000d5bc0 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5bc0:	b510      	push	{r4, lr}
   d5bc2:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5bc4:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5bc6:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5bc8:	2100      	movs	r1, #0
   d5bca:	a801      	add	r0, sp, #4
   d5bcc:	f003 fa72 	bl	d90b4 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f7ff ffc2 	bl	d5b5a <_ZNK12MCP79410Time7getYearEv>
   d5bd6:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5bda:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ffc3 	bl	d5b68 <_ZNK12MCP79410Time8getMonthEv>
   d5be2:	3801      	subs	r0, #1
   d5be4:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff ffc3 	bl	d5b72 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5bec:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5bee:	4620      	mov	r0, r4
   d5bf0:	f7ff ffc4 	bl	d5b7c <_ZNK12MCP79410Time7getHourEv>
   d5bf4:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f7ff ffd8 	bl	d5bac <_ZNK12MCP79410Time9getMinuteEv>
   d5bfc:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5bfe:	4620      	mov	r0, r4
   d5c00:	f7ff ffd9 	bl	d5bb6 <_ZNK12MCP79410Time9getSecondEv>
   d5c04:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5c06:	a801      	add	r0, sp, #4
   d5c08:	f001 fa64 	bl	d70d4 <mktime>
}
   d5c0c:	b00a      	add	sp, #40	; 0x28
   d5c0e:	bd10      	pop	{r4, pc}

000d5c10 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5c10:	210a      	movs	r1, #10
   d5c12:	fb90 f2f1 	sdiv	r2, r0, r1
   d5c16:	fb92 f3f1 	sdiv	r3, r2, r1
   d5c1a:	fb01 2313 	mls	r3, r1, r3, r2
   d5c1e:	011b      	lsls	r3, r3, #4
   d5c20:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5c22:	fb01 0012 	mls	r0, r1, r2, r0
   d5c26:	4318      	orrs	r0, r3
}
   d5c28:	b2c0      	uxtb	r0, r0
   d5c2a:	4770      	bx	lr

000d5c2c <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5c2c:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5c2e:	b510      	push	{r4, lr}
   d5c30:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5c32:	fb91 f0f3 	sdiv	r0, r1, r3
   d5c36:	fb00 1013 	mls	r0, r0, r3, r1
   d5c3a:	f7ff ffe9 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
   d5c3e:	72a0      	strb	r0, [r4, #10]
}
   d5c40:	bd10      	pop	{r4, pc}

000d5c42 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5c42:	b510      	push	{r4, lr}
   d5c44:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5c46:	4608      	mov	r0, r1
   d5c48:	f7ff ffe2 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
   d5c4c:	72e0      	strb	r0, [r4, #11]
}
   d5c4e:	bd10      	pop	{r4, pc}

000d5c50 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5c50:	b510      	push	{r4, lr}
   d5c52:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5c54:	4608      	mov	r0, r1
   d5c56:	f7ff ffdb 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5c5a:	7b23      	ldrb	r3, [r4, #12]
   d5c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5c60:	4318      	orrs	r0, r3
   d5c62:	7320      	strb	r0, [r4, #12]
}
   d5c64:	bd10      	pop	{r4, pc}

000d5c66 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5c66:	b510      	push	{r4, lr}
   d5c68:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5c6a:	1c48      	adds	r0, r1, #1
   d5c6c:	f7ff ffd0 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5c70:	7b63      	ldrb	r3, [r4, #13]
   d5c72:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5c76:	4318      	orrs	r0, r3
   d5c78:	7360      	strb	r0, [r4, #13]
}
   d5c7a:	bd10      	pop	{r4, pc}

000d5c7c <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5c7c:	b510      	push	{r4, lr}
   d5c7e:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5c80:	4608      	mov	r0, r1
   d5c82:	f7ff ffc5 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
   d5c86:	73a0      	strb	r0, [r4, #14]
}
   d5c88:	bd10      	pop	{r4, pc}

000d5c8a <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5c8a:	b510      	push	{r4, lr}
   d5c8c:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5c8e:	4608      	mov	r0, r1
   d5c90:	f7ff ffbe 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
   d5c94:	73e0      	strb	r0, [r4, #15]
}
   d5c96:	bd10      	pop	{r4, pc}

000d5c98 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5c9c:	4608      	mov	r0, r1
   d5c9e:	f7ff ffb7 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5ca2:	7c23      	ldrb	r3, [r4, #16]
   d5ca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5ca8:	4318      	orrs	r0, r3
   d5caa:	7420      	strb	r0, [r4, #16]
}
   d5cac:	bd10      	pop	{r4, pc}

000d5cae <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5cb0:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5cb2:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5cb4:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5cb8:	f003 f9c2 	bl	d9040 <gmtime>
   d5cbc:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5cbe:	6941      	ldr	r1, [r0, #20]
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	f7ff ffb3 	bl	d5c2c <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5cc6:	6929      	ldr	r1, [r5, #16]
   d5cc8:	4620      	mov	r0, r4
   d5cca:	3101      	adds	r1, #1
   d5ccc:	f7ff ffb9 	bl	d5c42 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5cd0:	68e9      	ldr	r1, [r5, #12]
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	f7ff ffbc 	bl	d5c50 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5cd8:	69a9      	ldr	r1, [r5, #24]
   d5cda:	4620      	mov	r0, r4
   d5cdc:	f7ff ffc3 	bl	d5c66 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5ce0:	68a9      	ldr	r1, [r5, #8]
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	f7ff ffca 	bl	d5c7c <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5ce8:	6869      	ldr	r1, [r5, #4]
   d5cea:	4620      	mov	r0, r4
   d5cec:	f7ff ffcd 	bl	d5c8a <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5cf0:	6829      	ldr	r1, [r5, #0]
   d5cf2:	293b      	cmp	r1, #59	; 0x3b
   d5cf4:	bfa8      	it	ge
   d5cf6:	213b      	movge	r1, #59	; 0x3b
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	f7ff ffcd 	bl	d5c98 <_ZN12MCP79410Time9setSecondEi>
}
   d5cfe:	b003      	add	sp, #12
   d5d00:	bd30      	pop	{r4, r5, pc}
	...

000d5d04 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5d04:	4a05      	ldr	r2, [pc, #20]	; (d5d1c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5d06:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5d08:	e9c0 2100 	strd	r2, r1, [r0]
   d5d0c:	4a04      	ldr	r2, [pc, #16]	; (d5d20 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5d0e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5d10:	4a04      	ldr	r2, [pc, #16]	; (d5d24 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5d12:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5d14:	4a04      	ldr	r2, [pc, #16]	; (d5d28 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5d16:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5d18:	6142      	str	r2, [r0, #20]
}
   d5d1a:	4770      	bx	lr
   d5d1c:	000d98d4 	.word	0x000d98d4
   d5d20:	03010000 	.word	0x03010000
   d5d24:	000d987c 	.word	0x000d987c
   d5d28:	000d98b0 	.word	0x000d98b0

000d5d2c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d30:	4604      	mov	r4, r0
   d5d32:	460f      	mov	r7, r1
   d5d34:	4690      	mov	r8, r2
   d5d36:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5d38:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d3c:	429e      	cmp	r6, r3
   d5d3e:	d231      	bcs.n	d5da4 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5d40:	6860      	ldr	r0, [r4, #4]
   d5d42:	4639      	mov	r1, r7
   d5d44:	f001 fe06 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5d48:	eb08 0106 	add.w	r1, r8, r6
   d5d4c:	6860      	ldr	r0, [r4, #4]
   d5d4e:	f7ff fd47 	bl	d57e0 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5d52:	6860      	ldr	r0, [r4, #4]
   d5d54:	2100      	movs	r1, #0
   d5d56:	f001 fe04 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5d5a:	4605      	mov	r5, r0
   d5d5c:	b9d0      	cbnz	r0, d5d94 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5d60:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5d62:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5d64:	2a20      	cmp	r2, #32
   d5d66:	f04f 0301 	mov.w	r3, #1
   d5d6a:	bf28      	it	cs
   d5d6c:	2220      	movcs	r2, #32
   d5d6e:	4639      	mov	r1, r7
   d5d70:	f001 fddb 	bl	d792a <_ZN7TwoWire11requestFromEhjh>
   d5d74:	eb09 0b06 	add.w	fp, r9, r6
   d5d78:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5d7a:	eb0b 0a00 	add.w	sl, fp, r0
   d5d7e:	45da      	cmp	sl, fp
   d5d80:	d006      	beq.n	d5d90 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5d82:	6860      	ldr	r0, [r4, #4]
   d5d84:	6803      	ldr	r3, [r0, #0]
   d5d86:	695b      	ldr	r3, [r3, #20]
   d5d88:	4798      	blx	r3
   d5d8a:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5d8e:	e7f6      	b.n	d5d7e <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5d90:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5d92:	e7d2      	b.n	d5d3a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5d94:	4602      	mov	r2, r0
   d5d96:	4904      	ldr	r1, [pc, #16]	; (d5da8 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5d98:	4804      	ldr	r0, [pc, #16]	; (d5dac <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5d9a:	f7ff fd25 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5d9e:	4628      	mov	r0, r5
   d5da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5da4:	2500      	movs	r5, #0
	return stat;
   d5da6:	e7fa      	b.n	d5d9e <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5da8:	000d97d4 	.word	0x000d97d4
   d5dac:	2003e538 	.word	0x2003e538

000d5db0 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5db4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5db8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5dba:	6803      	ldr	r3, [r0, #0]
   d5dbc:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5dbe:	4605      	mov	r5, r0
   d5dc0:	460c      	mov	r4, r1
   d5dc2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5dc4:	4798      	blx	r3
   d5dc6:	4580      	cmp	r8, r0
   d5dc8:	d80d      	bhi.n	d5de6 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5dca:	3420      	adds	r4, #32
   d5dcc:	6868      	ldr	r0, [r5, #4]
   d5dce:	9600      	str	r6, [sp, #0]
   d5dd0:	463b      	mov	r3, r7
   d5dd2:	b2e2      	uxtb	r2, r4
   d5dd4:	216f      	movs	r1, #111	; 0x6f
   d5dd6:	f7ff ffa9 	bl	d5d2c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5dda:	fab0 f080 	clz	r0, r0
   d5dde:	0940      	lsrs	r0, r0, #5
}
   d5de0:	b002      	add	sp, #8
   d5de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5de6:	2000      	movs	r0, #0
   d5de8:	e7fa      	b.n	d5de0 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5dea <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5dea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5dee:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5df2:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5df4:	6803      	ldr	r3, [r0, #0]
   d5df6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5df8:	4604      	mov	r4, r0
   d5dfa:	460d      	mov	r5, r1
   d5dfc:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5dfe:	4798      	blx	r3
   d5e00:	4580      	cmp	r8, r0
   d5e02:	d80c      	bhi.n	d5e1e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5e04:	6860      	ldr	r0, [r4, #4]
   d5e06:	9600      	str	r6, [sp, #0]
   d5e08:	463b      	mov	r3, r7
   d5e0a:	b2ea      	uxtb	r2, r5
   d5e0c:	2157      	movs	r1, #87	; 0x57
   d5e0e:	f7ff ff8d 	bl	d5d2c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5e12:	fab0 f080 	clz	r0, r0
   d5e16:	0940      	lsrs	r0, r0, #5
}
   d5e18:	b002      	add	sp, #8
   d5e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5e1e:	2000      	movs	r0, #0
   d5e20:	e7fa      	b.n	d5e18 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5e22 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5e22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5e24:	1e1e      	subs	r6, r3, #0
   d5e26:	bf0c      	ite	eq
   d5e28:	2307      	moveq	r3, #7
   d5e2a:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5e2c:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5e2e:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5e30:	ab02      	add	r3, sp, #8
   d5e32:	460a      	mov	r2, r1
   d5e34:	216f      	movs	r1, #111	; 0x6f
   d5e36:	f7ff ff79 	bl	d5d2c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d5e3a:	4605      	mov	r5, r0
   d5e3c:	b9a8      	cbnz	r0, d5e6a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d5e3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5e42:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5e44:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d5e48:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d5e4a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d5e4e:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d5e50:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5e54:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d5e56:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5e5a:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d5e5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5e60:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d5e62:	b92e      	cbnz	r6, d5e70 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d5e64:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5e68:	72a3      	strb	r3, [r4, #10]
}
   d5e6a:	4628      	mov	r0, r5
   d5e6c:	b004      	add	sp, #16
   d5e6e:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d5e70:	f002 fa2c 	bl	d82cc <_ZN9TimeClass4yearEv>
   d5e74:	f7ff fecc 	bl	d5c10 <_ZN12MCP79410Time8intToBcdEi>
   d5e78:	72a0      	strb	r0, [r4, #10]
	return stat;
   d5e7a:	e7f6      	b.n	d5e6a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d5e7c <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5e7e:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5e80:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5e82:	9300      	str	r3, [sp, #0]
   d5e84:	216f      	movs	r1, #111	; 0x6f
   d5e86:	ab03      	add	r3, sp, #12
   d5e88:	f7ff ff50 	bl	d5d2c <_ZNK8MCP7941010deviceReadEhhPhj>
   d5e8c:	b920      	cbnz	r0, d5e98 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d5e8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d5e92:	b005      	add	sp, #20
   d5e94:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5e98:	2000      	movs	r0, #0
   d5e9a:	e7fa      	b.n	d5e92 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d5e9c <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d5e9c:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d5e9e:	2103      	movs	r1, #3
   d5ea0:	f7ff ffec 	bl	d5e7c <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5ea4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d5ea8:	bd08      	pop	{r3, pc}

000d5eaa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d5eaa:	b538      	push	{r3, r4, r5, lr}
   d5eac:	2300      	movs	r3, #0
   d5eae:	460c      	mov	r4, r1
   d5eb0:	460a      	mov	r2, r1
   d5eb2:	4619      	mov	r1, r3
   d5eb4:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5eb6:	f7ff ffb4 	bl	d5e22 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d5eba:	b930      	cbnz	r0, d5eca <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5ebc:	7aa3      	ldrb	r3, [r4, #10]
   d5ebe:	b123      	cbz	r3, d5eca <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5ec0:	4628      	mov	r0, r5
}
   d5ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5ec6:	f7ff bfe9 	b.w	d5e9c <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d5eca:	2000      	movs	r0, #0
   d5ecc:	bd38      	pop	{r3, r4, r5, pc}

000d5ece <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d5ece:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5ed0:	4602      	mov	r2, r0
	MCP79410Time time;
   d5ed2:	a801      	add	r0, sp, #4
   d5ed4:	f7ff fe28 	bl	d5b28 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5ed8:	a901      	add	r1, sp, #4
   d5eda:	4610      	mov	r0, r2
   d5edc:	f7ff ffe5 	bl	d5eaa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5ee0:	b128      	cbz	r0, d5eee <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5ee2:	a801      	add	r0, sp, #4
   d5ee4:	f7ff fe6c 	bl	d5bc0 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5ee8:	b007      	add	sp, #28
   d5eea:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5eee:	2000      	movs	r0, #0
   d5ef0:	4601      	mov	r1, r0
   d5ef2:	e7f9      	b.n	d5ee8 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5ef4 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5ef4:	b5d0      	push	{r4, r6, r7, lr}
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	b086      	sub	sp, #24
	wire.begin();
   d5efa:	6840      	ldr	r0, [r0, #4]
   d5efc:	f001 fcf8 	bl	d78f0 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d5f00:	f002 f9aa 	bl	d8258 <_ZN9TimeClass7isValidEv>
   d5f04:	b9e8      	cbnz	r0, d5f42 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5f06:	7ae3      	ldrb	r3, [r4, #11]
   d5f08:	079b      	lsls	r3, r3, #30
   d5f0a:	d51a      	bpl.n	d5f42 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	f7ff ffde 	bl	d5ece <_ZNK8MCP7941010getRTCTimeEv>
   d5f12:	4606      	mov	r6, r0
   d5f14:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5f16:	ea56 0307 	orrs.w	r3, r6, r7
   d5f1a:	d012      	beq.n	d5f42 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d5f1c:	f002 f8a3 	bl	d8066 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d5f20:	4b0a      	ldr	r3, [pc, #40]	; (d5f4c <_ZN8MCP794105setupEv+0x58>)
   d5f22:	490b      	ldr	r1, [pc, #44]	; (d5f50 <_ZN8MCP794105setupEv+0x5c>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	9300      	str	r3, [sp, #0]
   d5f28:	4632      	mov	r2, r6
   d5f2a:	463b      	mov	r3, r7
   d5f2c:	a802      	add	r0, sp, #8
   d5f2e:	f002 f951 	bl	d81d4 <_ZN9TimeClass6formatExPKc>
   d5f32:	4808      	ldr	r0, [pc, #32]	; (d5f54 <_ZN8MCP794105setupEv+0x60>)
   d5f34:	9a02      	ldr	r2, [sp, #8]
   d5f36:	4908      	ldr	r1, [pc, #32]	; (d5f58 <_ZN8MCP794105setupEv+0x64>)
   d5f38:	f7ff fc56 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
   d5f3c:	a802      	add	r0, sp, #8
   d5f3e:	f001 fed9 	bl	d7cf4 <_ZN6StringD1Ev>
	setupDone = true;
   d5f42:	2301      	movs	r3, #1
   d5f44:	7223      	strb	r3, [r4, #8]
}
   d5f46:	b006      	add	sp, #24
   d5f48:	bdd0      	pop	{r4, r6, r7, pc}
   d5f4a:	bf00      	nop
   d5f4c:	2003e308 	.word	0x2003e308
   d5f50:	2003e5a8 	.word	0x2003e5a8
   d5f54:	2003e538 	.word	0x2003e538
   d5f58:	000d97ee 	.word	0x000d97ee

000d5f5c <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f60:	4606      	mov	r6, r0
   d5f62:	4688      	mov	r8, r1
   d5f64:	4691      	mov	r9, r2
   d5f66:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f68:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d5f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f6c:	429d      	cmp	r5, r3
   d5f6e:	d229      	bcs.n	d5fc4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d5f70:	6870      	ldr	r0, [r6, #4]
   d5f72:	4641      	mov	r1, r8
   d5f74:	f001 fcee 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f78:	6870      	ldr	r0, [r6, #4]
   d5f7a:	eb09 0105 	add.w	r1, r9, r5
   d5f7e:	f7ff fc2f 	bl	d57e0 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d5f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f84:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d5f86:	2f1f      	cmp	r7, #31
   d5f88:	bf28      	it	cs
   d5f8a:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d5f8c:	eb0a 0405 	add.w	r4, sl, r5
   d5f90:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d5f94:	6870      	ldr	r0, [r6, #4]
   d5f96:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f9a:	6802      	ldr	r2, [r0, #0]
   d5f9c:	6892      	ldr	r2, [r2, #8]
   d5f9e:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d5fa0:	45a3      	cmp	fp, r4
   d5fa2:	d1f7      	bne.n	d5f94 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d5fa4:	6870      	ldr	r0, [r6, #4]
   d5fa6:	2101      	movs	r1, #1
   d5fa8:	f001 fcdb 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5fac:	4604      	mov	r4, r0
   d5fae:	b138      	cbz	r0, d5fc0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d5fb0:	4602      	mov	r2, r0
   d5fb2:	4905      	ldr	r1, [pc, #20]	; (d5fc8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5fb4:	4805      	ldr	r0, [pc, #20]	; (d5fcc <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d5fb6:	f7ff fc17 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d5fba:	4620      	mov	r0, r4
   d5fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5fc0:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5fc2:	e7d2      	b.n	d5f6a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5fc4:	2400      	movs	r4, #0
	return stat;
   d5fc6:	e7f8      	b.n	d5fba <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5fc8:	000d9803 	.word	0x000d9803
   d5fcc:	2003e538 	.word	0x2003e538

000d5fd0 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5fd4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5fd8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5fda:	6803      	ldr	r3, [r0, #0]
   d5fdc:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5fde:	4605      	mov	r5, r0
   d5fe0:	460c      	mov	r4, r1
   d5fe2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5fe4:	4798      	blx	r3
   d5fe6:	4580      	cmp	r8, r0
   d5fe8:	d80d      	bhi.n	d6006 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5fea:	3420      	adds	r4, #32
   d5fec:	6868      	ldr	r0, [r5, #4]
   d5fee:	9600      	str	r6, [sp, #0]
   d5ff0:	463b      	mov	r3, r7
   d5ff2:	b2e2      	uxtb	r2, r4
   d5ff4:	216f      	movs	r1, #111	; 0x6f
   d5ff6:	f7ff ffb1 	bl	d5f5c <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d5ffa:	fab0 f080 	clz	r0, r0
   d5ffe:	0940      	lsrs	r0, r0, #5
}
   d6000:	b002      	add	sp, #8
   d6002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6006:	2000      	movs	r0, #0
   d6008:	e7fa      	b.n	d6000 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d600a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d600a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d600c:	7c13      	ldrb	r3, [r2, #16]
   d600e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6012:	7bd3      	ldrb	r3, [r2, #15]
   d6014:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6018:	7b93      	ldrb	r3, [r2, #14]
   d601a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d601e:	7b53      	ldrb	r3, [r2, #13]
   d6020:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6024:	7b13      	ldrb	r3, [r2, #12]
   d6026:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d602a:	7ad3      	ldrb	r3, [r2, #11]
   d602c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6030:	7a93      	ldrb	r3, [r2, #10]
   d6032:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6036:	2307      	movs	r3, #7
   d6038:	9300      	str	r3, [sp, #0]
   d603a:	460a      	mov	r2, r1
   d603c:	ab02      	add	r3, sp, #8
   d603e:	216f      	movs	r1, #111	; 0x6f
   d6040:	f7ff ff8c 	bl	d5f5c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6044:	b005      	add	sp, #20
   d6046:	f85d fb04 	ldr.w	pc, [sp], #4

000d604a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d604a:	b510      	push	{r4, lr}
   d604c:	b088      	sub	sp, #32
   d604e:	4604      	mov	r4, r0
	MCP79410Time time;
   d6050:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6052:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6054:	f7ff fd68 	bl	d5b28 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6058:	9b01      	ldr	r3, [sp, #4]
   d605a:	a803      	add	r0, sp, #12
   d605c:	f7ff fe27 	bl	d5cae <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6060:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6064:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6066:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d606a:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d606e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6072:	b16a      	cbz	r2, d6090 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6074:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6078:	aa03      	add	r2, sp, #12
   d607a:	2100      	movs	r1, #0
   d607c:	4620      	mov	r0, r4
   d607e:	f88d 3019 	strb.w	r3, [sp, #25]
   d6082:	f7ff ffc2 	bl	d600a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6086:	fab0 f080 	clz	r0, r0
   d608a:	0940      	lsrs	r0, r0, #5
   d608c:	b008      	add	sp, #32
   d608e:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6090:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6094:	e7f0      	b.n	d6078 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6098 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6098:	b5f0      	push	{r4, r5, r6, r7, lr}
   d609a:	b087      	sub	sp, #28
   d609c:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d609e:	f002 f8db 	bl	d8258 <_ZN9TimeClass7isValidEv>
   d60a2:	4604      	mov	r4, r0
   d60a4:	b1e8      	cbz	r0, d60e2 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d60a6:	f002 f8f4 	bl	d8292 <_ZN9TimeClass3nowEv>
   d60aa:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d60ac:	4602      	mov	r2, r0
		time_t now = Time.now();
   d60ae:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d60b0:	463b      	mov	r3, r7
   d60b2:	4628      	mov	r0, r5
   d60b4:	f7ff ffc9 	bl	d604a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d60b8:	4b0c      	ldr	r3, [pc, #48]	; (d60ec <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d60ba:	490d      	ldr	r1, [pc, #52]	; (d60f0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	9300      	str	r3, [sp, #0]
   d60c0:	4632      	mov	r2, r6
   d60c2:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d60c4:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d60c6:	a802      	add	r0, sp, #8
   d60c8:	f002 f884 	bl	d81d4 <_ZN9TimeClass6formatExPKc>
   d60cc:	4809      	ldr	r0, [pc, #36]	; (d60f4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d60ce:	9a02      	ldr	r2, [sp, #8]
   d60d0:	4909      	ldr	r1, [pc, #36]	; (d60f8 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d60d2:	f7ff fb89 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
   d60d6:	a802      	add	r0, sp, #8
   d60d8:	f001 fe0c 	bl	d7cf4 <_ZN6StringD1Ev>
}
   d60dc:	4620      	mov	r0, r4
   d60de:	b007      	add	sp, #28
   d60e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d60e2:	4906      	ldr	r1, [pc, #24]	; (d60fc <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d60e4:	4803      	ldr	r0, [pc, #12]	; (d60f4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d60e6:	f7ff fb7f 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
   d60ea:	e7f7      	b.n	d60dc <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d60ec:	2003e308 	.word	0x2003e308
   d60f0:	2003e5a8 	.word	0x2003e5a8
   d60f4:	2003e538 	.word	0x2003e538
   d60f8:	000d981e 	.word	0x000d981e
   d60fc:	000d9834 	.word	0x000d9834

000d6100 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6100:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6102:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6104:	4604      	mov	r4, r0
	if (!timeSet) {
   d6106:	b99d      	cbnz	r5, d6130 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6108:	f002 f8a6 	bl	d8258 <_ZN9TimeClass7isValidEv>
   d610c:	b180      	cbz	r0, d6130 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d610e:	2200      	movs	r2, #0
   d6110:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6112:	4669      	mov	r1, sp
   d6114:	4628      	mov	r0, r5
        tm = 0;
   d6116:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d611a:	f000 ff03 	bl	d6f24 <spark_sync_time_last>
			if (lastSync != 0) {
   d611e:	b138      	cbz	r0, d6130 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6120:	7ae3      	ldrb	r3, [r4, #11]
   d6122:	07db      	lsls	r3, r3, #31
   d6124:	d502      	bpl.n	d612c <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d6126:	4620      	mov	r0, r4
   d6128:	f7ff ffb6 	bl	d6098 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d612c:	2301      	movs	r3, #1
   d612e:	7263      	strb	r3, [r4, #9]
}
   d6130:	b003      	add	sp, #12
   d6132:	bd30      	pop	{r4, r5, pc}

000d6134 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6136:	2301      	movs	r3, #1
	buf[0] = value;
   d6138:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d613c:	9300      	str	r3, [sp, #0]
   d613e:	460a      	mov	r2, r1
   d6140:	ab03      	add	r3, sp, #12
   d6142:	216f      	movs	r1, #111	; 0x6f
   d6144:	f7ff ff0a 	bl	d5f5c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6148:	b005      	add	sp, #20
   d614a:	f85d fb04 	ldr.w	pc, [sp], #4

000d614e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d614e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6150:	4604      	mov	r4, r0
   d6152:	460d      	mov	r5, r1
   d6154:	4617      	mov	r7, r2
   d6156:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d6158:	f7ff fe90 	bl	d5e7c <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d615c:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d6160:	4332      	orrs	r2, r6
   d6162:	4629      	mov	r1, r5
   d6164:	4620      	mov	r0, r4
}
   d6166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d616a:	f7ff bfe3 	b.w	d6134 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d616e <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d616e:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d6170:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6172:	d80c      	bhi.n	d618e <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6174:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d6176:	f04f 0300 	mov.w	r3, #0
   d617a:	bf14      	ite	ne
   d617c:	22df      	movne	r2, #223	; 0xdf
   d617e:	22ef      	moveq	r2, #239	; 0xef
   d6180:	2107      	movs	r1, #7
   d6182:	f7ff ffe4 	bl	d614e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d6186:	fab0 f080 	clz	r0, r0
   d618a:	0940      	lsrs	r0, r0, #5
}
   d618c:	bd08      	pop	{r3, pc}
		return false;
   d618e:	2000      	movs	r0, #0
   d6190:	e7fc      	b.n	d618c <_ZN8MCP7941010clearAlarmEi+0x1e>

000d6192 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6192:	b538      	push	{r3, r4, r5, lr}
   d6194:	4604      	mov	r4, r0
   d6196:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6198:	6860      	ldr	r0, [r4, #4]
   d619a:	2157      	movs	r1, #87	; 0x57
   d619c:	f001 fbda 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d61a0:	6860      	ldr	r0, [r4, #4]
   d61a2:	2101      	movs	r1, #1
   d61a4:	f001 fbdd 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d61a8:	b108      	cbz	r0, d61ae <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d61aa:	3d01      	subs	r5, #1
   d61ac:	d1f4      	bne.n	d6198 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d61ae:	bd38      	pop	{r3, r4, r5, pc}

000d61b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d61b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61b4:	4604      	mov	r4, r0
   d61b6:	460f      	mov	r7, r1
   d61b8:	4616      	mov	r6, r2
   d61ba:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d61be:	45b0      	cmp	r8, r6
   d61c0:	d020      	beq.n	d6204 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d61c2:	6860      	ldr	r0, [r4, #4]
   d61c4:	2157      	movs	r1, #87	; 0x57
   d61c6:	f001 fbc5 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d61ca:	4639      	mov	r1, r7
   d61cc:	6860      	ldr	r0, [r4, #4]
   d61ce:	f7ff fb07 	bl	d57e0 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d61d2:	6860      	ldr	r0, [r4, #4]
   d61d4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d61d8:	6803      	ldr	r3, [r0, #0]
   d61da:	689b      	ldr	r3, [r3, #8]
   d61dc:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d61de:	6860      	ldr	r0, [r4, #4]
   d61e0:	2101      	movs	r1, #1
   d61e2:	f001 fbbe 	bl	d7962 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d61e6:	3701      	adds	r7, #1
   d61e8:	4605      	mov	r5, r0
   d61ea:	b138      	cbz	r0, d61fc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d61ec:	4602      	mov	r2, r0
   d61ee:	4906      	ldr	r1, [pc, #24]	; (d6208 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d61f0:	4806      	ldr	r0, [pc, #24]	; (d620c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d61f2:	f7ff faf9 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
}
   d61f6:	4628      	mov	r0, r5
   d61f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff ffc8 	bl	d6192 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6202:	e7dc      	b.n	d61be <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6204:	2500      	movs	r5, #0
	return stat;
   d6206:	e7f6      	b.n	d61f6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d6208:	000d9849 	.word	0x000d9849
   d620c:	2003e538 	.word	0x2003e538

000d6210 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6212:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6214:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6216:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6218:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d621a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d621c:	4604      	mov	r4, r0
   d621e:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6220:	4798      	blx	r3
   d6222:	4287      	cmp	r7, r0
   d6224:	d80a      	bhi.n	d623c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d6226:	9a01      	ldr	r2, [sp, #4]
   d6228:	6860      	ldr	r0, [r4, #4]
   d622a:	4633      	mov	r3, r6
   d622c:	b2e9      	uxtb	r1, r5
   d622e:	f7ff ffbf 	bl	d61b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6232:	fab0 f080 	clz	r0, r0
   d6236:	0940      	lsrs	r0, r0, #5
}
   d6238:	b003      	add	sp, #12
   d623a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d623c:	2000      	movs	r0, #0
   d623e:	e7fb      	b.n	d6238 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6240 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d6240:	4b01      	ldr	r3, [pc, #4]	; (d6248 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6242:	4a02      	ldr	r2, [pc, #8]	; (d624c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6244:	601a      	str	r2, [r3, #0]
}
   d6246:	4770      	bx	lr
   d6248:	2003e538 	.word	0x2003e538
   d624c:	000d986a 	.word	0x000d986a

000d6250 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d6250:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6252:	4603      	mov	r3, r0
	switch (__op)
   d6254:	d102      	bne.n	d625c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d6256:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d6258:	2000      	movs	r0, #0
   d625a:	4770      	bx	lr
	  switch (__op)
   d625c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d625e:	bf04      	itt	eq
   d6260:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6264:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6268:	e7f6      	b.n	d6258 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d626a <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d626a:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d626c:	2301      	movs	r3, #1
   d626e:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6270:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6272:	4604      	mov	r4, r0
        if (th->func) {
   d6274:	b143      	cbz	r3, d6288 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6276:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6278:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d627a:	2301      	movs	r3, #1
   d627c:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d627e:	2000      	movs	r0, #0
    }
   d6280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6284:	f000 bbe4 	b.w	d6a50 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6288:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d628a:	2800      	cmp	r0, #0
   d628c:	d0f5      	beq.n	d627a <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d628e:	6883      	ldr	r3, [r0, #8]
   d6290:	b90b      	cbnz	r3, d6296 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6292:	f002 fa83 	bl	d879c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6296:	68c3      	ldr	r3, [r0, #12]
   d6298:	e7ee      	b.n	d6278 <_ZN6Thread3runEPv+0xe>

000d629a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d629a:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d629c:	6842      	ldr	r2, [r0, #4]
   d629e:	4603      	mov	r3, r0
   d62a0:	1054      	asrs	r4, r2, #1
   d62a2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d62a6:	07d2      	lsls	r2, r2, #31
   d62a8:	bf48      	it	mi
   d62aa:	590a      	ldrmi	r2, [r1, r4]
   d62ac:	681b      	ldr	r3, [r3, #0]
      }
   d62ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   d62b2:	bf48      	it	mi
   d62b4:	58d3      	ldrmi	r3, [r2, r3]
   d62b6:	4718      	bx	r3

000d62b8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d62b8:	b510      	push	{r4, lr}
      if (_M_manager)
   d62ba:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d62bc:	4604      	mov	r4, r0
      if (_M_manager)
   d62be:	b113      	cbz	r3, d62c6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62c0:	2203      	movs	r2, #3
   d62c2:	4601      	mov	r1, r0
   d62c4:	4798      	blx	r3
    }
   d62c6:	4620      	mov	r0, r4
   d62c8:	bd10      	pop	{r4, pc}
	...

000d62cc <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d62cc:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d62ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d62d0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d62d4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d62d6:	3008      	adds	r0, #8
   d62d8:	f000 fb9a 	bl	d6a10 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d62dc:	2004      	movs	r0, #4
   d62de:	f7fd feda 	bl	d4096 <_Znwj>
   d62e2:	4605      	mov	r5, r0
   d62e4:	b398      	cbz	r0, d634e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d62e6:	491b      	ldr	r1, [pc, #108]	; (d6354 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d62e8:	2014      	movs	r0, #20
   d62ea:	f002 fa53 	bl	d8794 <_ZnwjRKSt9nothrow_t>
   d62ee:	b130      	cbz	r0, d62fe <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d62f0:	2300      	movs	r3, #0
            exited(false) {
   d62f2:	e9c0 3300 	strd	r3, r3, [r0]
   d62f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d62fa:	7403      	strb	r3, [r0, #16]
   d62fc:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d62fe:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6300:	b1a0      	cbz	r0, d632c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6302:	4b15      	ldr	r3, [pc, #84]	; (d6358 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6304:	4915      	ldr	r1, [pc, #84]	; (d635c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6306:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d630a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d630e:	e9cd 0300 	strd	r0, r3, [sp]
   d6312:	2202      	movs	r2, #2
   d6314:	4b12      	ldr	r3, [pc, #72]	; (d6360 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6316:	3004      	adds	r0, #4
   d6318:	f000 fb6a 	bl	d69f0 <os_thread_create>
   d631c:	b930      	cbnz	r0, d632c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d631e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6320:	7c1b      	ldrb	r3, [r3, #16]
   d6322:	b9a3      	cbnz	r3, d634e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6324:	2001      	movs	r0, #1
   d6326:	f000 fbab 	bl	d6a80 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d632a:	e7f8      	b.n	d631e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d632c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d632e:	2300      	movs	r3, #0
   d6330:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6332:	b164      	cbz	r4, d634e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6334:	6827      	ldr	r7, [r4, #0]
   d6336:	b137      	cbz	r7, d6346 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6338:	4638      	mov	r0, r7
   d633a:	f7ff ffbd 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d633e:	2110      	movs	r1, #16
   d6340:	4638      	mov	r0, r7
   d6342:	f002 fa25 	bl	d8790 <_ZdlPvj>
   d6346:	2114      	movs	r1, #20
   d6348:	4620      	mov	r0, r4
   d634a:	f002 fa21 	bl	d8790 <_ZdlPvj>
   d634e:	6075      	str	r5, [r6, #4]
}
   d6350:	b003      	add	sp, #12
   d6352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6354:	000d9bb0 	.word	0x000d9bb0
   d6358:	000d656b 	.word	0x000d656b
   d635c:	000d98dc 	.word	0x000d98dc
   d6360:	000d626b 	.word	0x000d626b

000d6364 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6364:	f247 5130 	movw	r1, #30000	; 0x7530
   d6368:	4a08      	ldr	r2, [pc, #32]	; (d638c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d636a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d636c:	4908      	ldr	r1, [pc, #32]	; (d6390 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d636e:	6002      	str	r2, [r0, #0]
   d6370:	2200      	movs	r2, #0
   d6372:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6376:	4907      	ldr	r1, [pc, #28]	; (d6394 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6378:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d637a:	4907      	ldr	r1, [pc, #28]	; (d6398 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d637c:	6042      	str	r2, [r0, #4]
   d637e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d6382:	6181      	str	r1, [r0, #24]
   d6384:	8502      	strh	r2, [r0, #40]	; 0x28
   d6386:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d638a:	4770      	bx	lr
   d638c:	000d99a0 	.word	0x000d99a0
   d6390:	000d66d5 	.word	0x000d66d5
   d6394:	000d629b 	.word	0x000d629b
   d6398:	000d6251 	.word	0x000d6251

000d639c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d639c:	b510      	push	{r4, lr}
   d639e:	4b04      	ldr	r3, [pc, #16]	; (d63b0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d63a0:	4604      	mov	r4, r0
   d63a2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d63a6:	f7ff ff87 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
}
   d63aa:	4620      	mov	r0, r4
   d63ac:	bd10      	pop	{r4, pc}
   d63ae:	bf00      	nop
   d63b0:	000d99a0 	.word	0x000d99a0

000d63b4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d63b4:	b510      	push	{r4, lr}
   d63b6:	4b03      	ldr	r3, [pc, #12]	; (d63c4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d63b8:	6003      	str	r3, [r0, #0]
   d63ba:	4604      	mov	r4, r0
   d63bc:	f7ff ffee 	bl	d639c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d63c0:	4620      	mov	r0, r4
   d63c2:	bd10      	pop	{r4, pc}
   d63c4:	000d99c8 	.word	0x000d99c8

000d63c8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d63c8:	b510      	push	{r4, lr}
   d63ca:	4604      	mov	r4, r0
}
   d63cc:	f7ff fff2 	bl	d63b4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d63d0:	4620      	mov	r0, r4
   d63d2:	2138      	movs	r1, #56	; 0x38
   d63d4:	f002 f9dc 	bl	d8790 <_ZdlPvj>
   d63d8:	4620      	mov	r0, r4
   d63da:	bd10      	pop	{r4, pc}

000d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d63dc:	6880      	ldr	r0, [r0, #8]
   d63de:	f000 bb1f 	b.w	d6a20 <os_mutex_lock>

000d63e2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d63e2:	6880      	ldr	r0, [r0, #8]
   d63e4:	f000 bb24 	b.w	d6a30 <os_mutex_unlock>

000d63e8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d63e8:	b510      	push	{r4, lr}
   d63ea:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d63ec:	6800      	ldr	r0, [r0, #0]
   d63ee:	f7ff fff8 	bl	d63e2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d63f2:	4620      	mov	r0, r4
   d63f4:	bd10      	pop	{r4, pc}

000d63f6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d63f6:	b513      	push	{r0, r1, r4, lr}
   d63f8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d63fa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d63fc:	f7ff ffee 	bl	d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6402:	88dc      	ldrh	r4, [r3, #6]
   d6404:	b2a4      	uxth	r4, r4
   d6406:	b10c      	cbz	r4, d640c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6408:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d640c:	a801      	add	r0, sp, #4
   d640e:	f7ff ffeb 	bl	d63e8 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6412:	4620      	mov	r0, r4
   d6414:	b002      	add	sp, #8
   d6416:	bd10      	pop	{r4, pc}

000d6418 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6418:	b513      	push	{r0, r1, r4, lr}
   d641a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d641c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d641e:	f7ff ffdd 	bl	d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6422:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6426:	b943      	cbnz	r3, d643a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6428:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d642a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d642c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d642e:	a801      	add	r0, sp, #4
   d6430:	f7ff ffda 	bl	d63e8 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6434:	4620      	mov	r0, r4
   d6436:	b002      	add	sp, #8
   d6438:	bd10      	pop	{r4, pc}
	bool result = false;
   d643a:	2400      	movs	r4, #0
   d643c:	e7f7      	b.n	d642e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d643e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d643e:	b513      	push	{r0, r1, r4, lr}
   d6440:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6442:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6444:	f7ff ffca 	bl	d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d644a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d644c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d644e:	f7ff ffcb 	bl	d63e8 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6452:	4620      	mov	r0, r4
   d6454:	b002      	add	sp, #8
   d6456:	bd10      	pop	{r4, pc}

000d6458 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d645c:	4699      	mov	r9, r3
   d645e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d6460:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6464:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6468:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d646c:	4604      	mov	r4, r0
   d646e:	460f      	mov	r7, r1
   d6470:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6472:	b913      	cbnz	r3, d647a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6474:	6803      	ldr	r3, [r0, #0]
   d6476:	689b      	ldr	r3, [r3, #8]
   d6478:	4798      	blx	r3
		data = "";
   d647a:	4b31      	ldr	r3, [pc, #196]	; (d6540 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d647c:	4638      	mov	r0, r7
		data = "";
   d647e:	2e00      	cmp	r6, #0
   d6480:	bf08      	it	eq
   d6482:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6484:	f002 fe71 	bl	d916a <strlen>
   d6488:	4605      	mov	r5, r0
   d648a:	4630      	mov	r0, r6
   d648c:	f002 fe6d 	bl	d916a <strlen>
   d6490:	4428      	add	r0, r5
   d6492:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6496:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6498:	bf1c      	itt	ne
   d649a:	f025 0503 	bicne.w	r5, r5, #3
   d649e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d64a0:	4633      	mov	r3, r6
   d64a2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d64a6:	e9cd 9a00 	strd	r9, sl, [sp]
   d64aa:	4926      	ldr	r1, [pc, #152]	; (d6544 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d64ac:	4826      	ldr	r0, [pc, #152]	; (d6548 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d64ae:	463a      	mov	r2, r7
   d64b0:	f7ff f99a 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d64b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d64b6:	3b08      	subs	r3, #8
   d64b8:	42ab      	cmp	r3, r5
   d64ba:	d212      	bcs.n	d64e2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d64bc:	2400      	movs	r4, #0
}
   d64be:	4620      	mov	r0, r4
   d64c0:	b006      	add	sp, #24
   d64c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d64c6:	88cb      	ldrh	r3, [r1, #6]
   d64c8:	2b01      	cmp	r3, #1
   d64ca:	d036      	beq.n	d653a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d64cc:	a805      	add	r0, sp, #20
   d64ce:	f7ff ff8b 	bl	d63e8 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d64d2:	6823      	ldr	r3, [r4, #0]
   d64d4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d64d8:	699b      	ldr	r3, [r3, #24]
   d64da:	4620      	mov	r0, r4
   d64dc:	4798      	blx	r3
   d64de:	2800      	cmp	r0, #0
   d64e0:	d0ec      	beq.n	d64bc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d64e2:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d64e4:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d64e6:	f7ff ff79 	bl	d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d64ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d64ec:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d64ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d64f0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d64f2:	1ad2      	subs	r2, r2, r3
   d64f4:	42aa      	cmp	r2, r5
   d64f6:	d3e6      	bcc.n	d64c6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d64f8:	ea48 080a 	orr.w	r8, r8, sl
   d64fc:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6500:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6504:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6506:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d650a:	4639      	mov	r1, r7
   d650c:	4640      	mov	r0, r8
   d650e:	f002 fe07 	bl	d9120 <strcpy>
				cp += strlen(cp) + 1;
   d6512:	4640      	mov	r0, r8
   d6514:	f002 fe29 	bl	d916a <strlen>
   d6518:	3001      	adds	r0, #1
				strcpy(cp, data);
   d651a:	4631      	mov	r1, r6
   d651c:	4440      	add	r0, r8
   d651e:	f002 fdff 	bl	d9120 <strcpy>
				nextFree += size;
   d6522:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6524:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6526:	441d      	add	r5, r3
   d6528:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d652a:	88d3      	ldrh	r3, [r2, #6]
   d652c:	3301      	adds	r3, #1
   d652e:	80d3      	strh	r3, [r2, #6]
				return true;
   d6530:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6532:	a805      	add	r0, sp, #20
   d6534:	f7ff ff58 	bl	d63e8 <_ZN11StMutexLockD1Ev>
   d6538:	e7c1      	b.n	d64be <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d653a:	2400      	movs	r4, #0
   d653c:	e7f9      	b.n	d6532 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d653e:	bf00      	nop
   d6540:	000d9bd0 	.word	0x000d9bd0
   d6544:	000d98ee 	.word	0x000d98ee
   d6548:	2003e53c 	.word	0x2003e53c

000d654c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d654c:	b508      	push	{r3, lr}
   d654e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6550:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6554:	69a3      	ldr	r3, [r4, #24]
   d6556:	b90b      	cbnz	r3, d655c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6558:	f002 f920 	bl	d879c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d655c:	69e3      	ldr	r3, [r4, #28]
   d655e:	4621      	mov	r1, r4
   d6560:	4628      	mov	r0, r5
   d6562:	4798      	blx	r3
		os_thread_yield();
   d6564:	f000 fa4c 	bl	d6a00 <os_thread_yield>
	while(true) {
   d6568:	e7f4      	b.n	d6554 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d656a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d656a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d656c:	f7ff ffee 	bl	d654c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6570 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6570:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d6572:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6576:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6578:	4628      	mov	r0, r5
   d657a:	f002 fdf6 	bl	d916a <strlen>
   d657e:	3001      	adds	r0, #1
   d6580:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6582:	4628      	mov	r0, r5
   d6584:	f002 fdf1 	bl	d916a <strlen>
	size_t offset = start - retainedBuffer;
   d6588:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d658a:	3001      	adds	r0, #1
   d658c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d658e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d6590:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6594:	bf1c      	itt	ne
   d6596:	f1c3 0304 	rsbne	r3, r3, #4
   d659a:	18c0      	addne	r0, r0, r3
}
   d659c:	bd68      	pop	{r3, r5, r6, pc}

000d659e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d659e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d65a0:	4604      	mov	r4, r0
   d65a2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d65a4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d65a6:	f7ff ff19 	bl	d63dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d65aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d65ac:	88fb      	ldrh	r3, [r7, #6]
   d65ae:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d65b2:	b1e6      	cbz	r6, d65ee <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d65b4:	2b01      	cmp	r3, #1
   d65b6:	d922      	bls.n	d65fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d65b8:	4629      	mov	r1, r5
   d65ba:	4620      	mov	r0, r4
   d65bc:	f7ff ffd8 	bl	d6570 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d65c0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d65c2:	4629      	mov	r1, r5
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7ff ffd3 	bl	d6570 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d65ca:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d65cc:	443a      	add	r2, r7
	if (after > 0) {
   d65ce:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d65d0:	4601      	mov	r1, r0
	size_t len = next - start;
   d65d2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d65d6:	d002      	beq.n	d65de <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d65d8:	4628      	mov	r0, r5
   d65da:	f002 fd51 	bl	d9080 <memmove>
	nextFree -= len;
   d65de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d65e0:	1b9b      	subs	r3, r3, r6
   d65e2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d65e4:	88fb      	ldrh	r3, [r7, #6]
   d65e6:	3b01      	subs	r3, #1
   d65e8:	80fb      	strh	r3, [r7, #6]
	return true;
   d65ea:	2601      	movs	r6, #1
   d65ec:	e001      	b.n	d65f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d65ee:	2b00      	cmp	r3, #0
   d65f0:	d1e7      	bne.n	d65c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d65f2:	a801      	add	r0, sp, #4
   d65f4:	f7ff fef8 	bl	d63e8 <_ZN11StMutexLockD1Ev>
}
   d65f8:	4630      	mov	r0, r6
   d65fa:	b003      	add	sp, #12
   d65fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d65fe:	2600      	movs	r6, #0
   d6600:	e7f7      	b.n	d65f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6604 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6608:	460d      	mov	r5, r1
   d660a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d660c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d660e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6610:	f7ff fea8 	bl	d6364 <_ZN21PublishQueueAsyncBaseC1Ev>
   d6614:	4b15      	ldr	r3, [pc, #84]	; (d666c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6616:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d661a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d661c:	4b14      	ldr	r3, [pc, #80]	; (d6670 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d661e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6620:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6622:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6624:	4698      	mov	r8, r3
   d6626:	d117      	bne.n	d6658 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6628:	88ab      	ldrh	r3, [r5, #4]
   d662a:	b29b      	uxth	r3, r3
   d662c:	42b3      	cmp	r3, r6
   d662e:	d113      	bne.n	d6658 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6630:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6634:	6367      	str	r7, [r4, #52]	; 0x34
   d6636:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d663a:	88eb      	ldrh	r3, [r5, #6]
   d663c:	fa1f f289 	uxth.w	r2, r9
   d6640:	b29b      	uxth	r3, r3
   d6642:	429a      	cmp	r2, r3
   d6644:	d20e      	bcs.n	d6664 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6646:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6648:	4620      	mov	r0, r4
   d664a:	f7ff ff91 	bl	d6570 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d664e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6650:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6652:	f109 0901 	add.w	r9, r9, #1
   d6656:	d9f0      	bls.n	d663a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6658:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d665a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d665e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6660:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6662:	80eb      	strh	r3, [r5, #6]
}
   d6664:	4620      	mov	r0, r4
   d6666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d666a:	bf00      	nop
   d666c:	000d99c8 	.word	0x000d99c8
   d6670:	d19cab61 	.word	0xd19cab61

000d6674 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6674:	b510      	push	{r4, lr}
   d6676:	e9d1 2300 	ldrd	r2, r3, [r1]
   d667a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d667c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d667e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6680:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6682:	b90a      	cbnz	r2, d6688 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6684:	07d9      	lsls	r1, r3, #31
   d6686:	d505      	bpl.n	d6694 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6688:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d668c:	4b0f      	ldr	r3, [pc, #60]	; (d66cc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d668e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6690:	4b0f      	ldr	r3, [pc, #60]	; (d66d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6692:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6694:	ab02      	add	r3, sp, #8
   d6696:	e893 0003 	ldmia.w	r3, {r0, r1}
   d669a:	466a      	mov	r2, sp
   d669c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d66a0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d66a4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d66a8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66ac:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d66ae:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d66b2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d66b4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66b6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d66b8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d66ba:	4618      	mov	r0, r3
   d66bc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d66be:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d66c0:	9105      	str	r1, [sp, #20]
   d66c2:	f7ff fdf9 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
	}
   d66c6:	4620      	mov	r0, r4
   d66c8:	b006      	add	sp, #24
   d66ca:	bd10      	pop	{r4, pc}
   d66cc:	000d629b 	.word	0x000d629b
   d66d0:	000d6251 	.word	0x000d6251

000d66d4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d66d4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d66d6:	4b05      	ldr	r3, [pc, #20]	; (d66ec <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d66d8:	9300      	str	r3, [sp, #0]
   d66da:	4669      	mov	r1, sp
   d66dc:	2300      	movs	r3, #0
   d66de:	3010      	adds	r0, #16
   d66e0:	9301      	str	r3, [sp, #4]
   d66e2:	f7ff ffc7 	bl	d6674 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d66e6:	b003      	add	sp, #12
   d66e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d66ec:	000d671d 	.word	0x000d671d

000d66f0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d66f0:	b513      	push	{r0, r1, r4, lr}
   d66f2:	4604      	mov	r4, r0
   d66f4:	f000 f9d4 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d66f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d66fa:	1ac0      	subs	r0, r0, r3
   d66fc:	68e3      	ldr	r3, [r4, #12]
   d66fe:	4298      	cmp	r0, r3
   d6700:	d308      	bcc.n	d6714 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6702:	4b05      	ldr	r3, [pc, #20]	; (d6718 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6704:	9300      	str	r3, [sp, #0]
   d6706:	4669      	mov	r1, sp
   d6708:	2300      	movs	r3, #0
   d670a:	f104 0010 	add.w	r0, r4, #16
   d670e:	9301      	str	r3, [sp, #4]
   d6710:	f7ff ffb0 	bl	d6674 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6714:	b002      	add	sp, #8
   d6716:	bd10      	pop	{r4, pc}
   d6718:	000d671d 	.word	0x000d671d

000d671c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6720:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6724:	b086      	sub	sp, #24
   d6726:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6728:	2b00      	cmp	r3, #0
   d672a:	d164      	bne.n	d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d672c:	f000 fbca 	bl	d6ec4 <spark_cloud_flag_connected>
   d6730:	2800      	cmp	r0, #0
   d6732:	d060      	beq.n	d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6734:	f000 f9b4 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d6738:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d673a:	1ac0      	subs	r0, r0, r3
   d673c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6740:	4298      	cmp	r0, r3
   d6742:	d958      	bls.n	d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6744:	6823      	ldr	r3, [r4, #0]
   d6746:	4620      	mov	r0, r4
   d6748:	695b      	ldr	r3, [r3, #20]
   d674a:	4798      	blx	r3
		if (data) {
   d674c:	4605      	mov	r5, r0
   d674e:	2800      	cmp	r0, #0
   d6750:	d051      	beq.n	d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6752:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6756:	2301      	movs	r3, #1
   d6758:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d675c:	4638      	mov	r0, r7
   d675e:	f002 fd04 	bl	d916a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6762:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6766:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d676a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d676c:	682b      	ldr	r3, [r5, #0]
   d676e:	492b      	ldr	r1, [pc, #172]	; (d681c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6770:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6772:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6774:	4633      	mov	r3, r6
   d6776:	482a      	ldr	r0, [pc, #168]	; (d6820 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6778:	463a      	mov	r2, r7
   d677a:	f7ff f835 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d677e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6780:	f88d 8000 	strb.w	r8, [sp]
   d6784:	4632      	mov	r2, r6
   d6786:	4639      	mov	r1, r7
   d6788:	a802      	add	r0, sp, #8
   d678a:	f000 febf 	bl	d750c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d678e:	9d02      	ldr	r5, [sp, #8]
   d6790:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d6792:	b91b      	cbnz	r3, d679c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6794:	2001      	movs	r0, #1
   d6796:	f000 fcb1 	bl	d70fc <delay>
			while(!request.isDone()) {
   d679a:	e7f8      	b.n	d678e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d679c:	2000      	movs	r0, #0
   d679e:	f000 fb29 	bl	d6df4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d67a2:	b120      	cbz	r0, d67ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d67a4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d67a6:	b913      	cbnz	r3, d67ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d67a8:	f000 fb7c 	bl	d6ea4 <spark_process>
    }
   d67ac:	e7fa      	b.n	d67a4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d67ae:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d67b0:	2b01      	cmp	r3, #1
   d67b2:	d123      	bne.n	d67fc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d67b4:	491b      	ldr	r1, [pc, #108]	; (d6824 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d67b6:	481a      	ldr	r0, [pc, #104]	; (d6820 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d67b8:	f7ff f816 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d67bc:	6823      	ldr	r3, [r4, #0]
   d67be:	2100      	movs	r1, #0
   d67c0:	699b      	ldr	r3, [r3, #24]
   d67c2:	4620      	mov	r0, r4
   d67c4:	4798      	blx	r3
			isSending = false;
   d67c6:	2300      	movs	r3, #0
   d67c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d67cc:	f000 f968 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d67d0:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d67d2:	9c03      	ldr	r4, [sp, #12]
   d67d4:	b17c      	cbz	r4, d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d67d6:	6863      	ldr	r3, [r4, #4]
   d67d8:	3b01      	subs	r3, #1
   d67da:	6063      	str	r3, [r4, #4]
   d67dc:	b95b      	cbnz	r3, d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d67de:	6823      	ldr	r3, [r4, #0]
   d67e0:	4620      	mov	r0, r4
   d67e2:	689b      	ldr	r3, [r3, #8]
   d67e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d67e6:	68a3      	ldr	r3, [r4, #8]
   d67e8:	3b01      	subs	r3, #1
   d67ea:	60a3      	str	r3, [r4, #8]
   d67ec:	b91b      	cbnz	r3, d67f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d67ee:	6823      	ldr	r3, [r4, #0]
   d67f0:	4620      	mov	r0, r4
   d67f2:	68db      	ldr	r3, [r3, #12]
   d67f4:	4798      	blx	r3
}
   d67f6:	b006      	add	sp, #24
   d67f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d67fc:	68e2      	ldr	r2, [r4, #12]
   d67fe:	490a      	ldr	r1, [pc, #40]	; (d6828 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6800:	4807      	ldr	r0, [pc, #28]	; (d6820 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6802:	f7fe fff1 	bl	d57e8 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6806:	4b09      	ldr	r3, [pc, #36]	; (d682c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6808:	9304      	str	r3, [sp, #16]
   d680a:	a904      	add	r1, sp, #16
   d680c:	2300      	movs	r3, #0
   d680e:	f104 0010 	add.w	r0, r4, #16
   d6812:	9305      	str	r3, [sp, #20]
   d6814:	f7ff ff2e 	bl	d6674 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6818:	e7d5      	b.n	d67c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d681a:	bf00      	nop
   d681c:	000d992f 	.word	0x000d992f
   d6820:	2003e53c 	.word	0x2003e53c
   d6824:	000d9950 	.word	0x000d9950
   d6828:	000d9967 	.word	0x000d9967
   d682c:	000d66f1 	.word	0x000d66f1

000d6830 <_GLOBAL__sub_I_pubqLogger>:
   d6830:	4b01      	ldr	r3, [pc, #4]	; (d6838 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6832:	4a02      	ldr	r2, [pc, #8]	; (d683c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6834:	601a      	str	r2, [r3, #0]
}
   d6836:	4770      	bx	lr
   d6838:	2003e53c 	.word	0x2003e53c
   d683c:	000d998e 	.word	0x000d998e

000d6840 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d6840:	6803      	ldr	r3, [r0, #0]
   d6842:	b2c9      	uxtb	r1, r1
   d6844:	689b      	ldr	r3, [r3, #8]
   d6846:	4718      	bx	r3

000d6848 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d6848:	4770      	bx	lr

000d684a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d684a:	b538      	push	{r3, r4, r5, lr}
   d684c:	4605      	mov	r5, r0
   d684e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d6850:	f001 ff7a 	bl	d8748 <_Z19__fetch_global_Wirev>
   d6854:	7829      	ldrb	r1, [r5, #0]
   d6856:	f001 f87d 	bl	d7954 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d685a:	f001 ff75 	bl	d8748 <_Z19__fetch_global_Wirev>
   d685e:	0a21      	lsrs	r1, r4, #8
   d6860:	f7ff ffee 	bl	d6840 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d6864:	f001 ff70 	bl	d8748 <_Z19__fetch_global_Wirev>
   d6868:	b2e1      	uxtb	r1, r4
   d686a:	f7ff ffe9 	bl	d6840 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d686e:	f001 ff6b 	bl	d8748 <_Z19__fetch_global_Wirev>
}
   d6872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d6876:	f001 b878 	b.w	d796a <_ZN7TwoWire15endTransmissionEv>

000d687a <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d687a:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d687c:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d6880:	f7ff ffe3 	bl	d684a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d6884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d6888:	200a      	movs	r0, #10
   d688a:	f000 bc37 	b.w	d70fc <delay>

000d688e <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d688e:	b538      	push	{r3, r4, r5, lr}
   d6890:	4604      	mov	r4, r0
   d6892:	460d      	mov	r5, r1
  Wire.begin();
   d6894:	f001 ff58 	bl	d8748 <_Z19__fetch_global_Wirev>
   d6898:	f001 f82a 	bl	d78f0 <_ZN7TwoWire5beginEv>
  reset();
   d689c:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d689e:	7025      	strb	r5, [r4, #0]
  reset();
   d68a0:	f7ff ffeb 	bl	d687a <_ZN14Adafruit_SHT315resetEv>
}
   d68a4:	2001      	movs	r0, #1
   d68a6:	bd38      	pop	{r3, r4, r5, pc}

000d68a8 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d68a8:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d68aa:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d68ac:	4291      	cmp	r1, r2
   d68ae:	d00e      	beq.n	d68ce <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d68b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d68b4:	4058      	eors	r0, r3
   d68b6:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d68b8:	f010 0f80 	tst.w	r0, #128	; 0x80
   d68bc:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d68c0:	bf18      	it	ne
   d68c2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d68c6:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d68c8:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d68ca:	d1f5      	bne.n	d68b8 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d68cc:	e7ee      	b.n	d68ac <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d68ce:	4770      	bx	lr

000d68d0 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d68d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d68d2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d68d6:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d68d8:	f7ff ffb7 	bl	d684a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d68dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d68e0:	f000 fc0c 	bl	d70fc <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d68e4:	f001 ff30 	bl	d8748 <_Z19__fetch_global_Wirev>
   d68e8:	7829      	ldrb	r1, [r5, #0]
   d68ea:	2206      	movs	r2, #6
   d68ec:	f001 f82f 	bl	d794e <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d68f0:	f001 ff2a 	bl	d8748 <_Z19__fetch_global_Wirev>
   d68f4:	6803      	ldr	r3, [r0, #0]
   d68f6:	691b      	ldr	r3, [r3, #16]
   d68f8:	4798      	blx	r3
   d68fa:	2806      	cmp	r0, #6
   d68fc:	d14b      	bne.n	d6996 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d68fe:	466e      	mov	r6, sp
   d6900:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d6902:	f001 ff21 	bl	d8748 <_Z19__fetch_global_Wirev>
   d6906:	6803      	ldr	r3, [r0, #0]
   d6908:	695b      	ldr	r3, [r3, #20]
   d690a:	4798      	blx	r3
   d690c:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d690e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d6912:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d6916:	4669      	mov	r1, sp
   d6918:	d1f3      	bne.n	d6902 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d691a:	2202      	movs	r2, #2
   d691c:	4628      	mov	r0, r5
   d691e:	f7ff ffc3 	bl	d68a8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d6922:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d6926:	4286      	cmp	r6, r0
   d6928:	d135      	bne.n	d6996 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d692a:	2202      	movs	r2, #2
   d692c:	f10d 0103 	add.w	r1, sp, #3
   d6930:	4628      	mov	r0, r5
   d6932:	f7ff ffb9 	bl	d68a8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d6936:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d693a:	4286      	cmp	r6, r0
   d693c:	d12b      	bne.n	d6996 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d693e:	f8bd 0000 	ldrh.w	r0, [sp]
   d6942:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d6946:	ba40      	rev16	r0, r0
   d6948:	b280      	uxth	r0, r0
   d694a:	f002 f86d 	bl	d8a28 <__aeabi_ui2d>
  stemp *= 175;
   d694e:	a318      	add	r3, pc, #96	; (adr r3, d69b0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d6950:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6954:	f002 f8e2 	bl	d8b1c <__aeabi_dmul>
  stemp /= 0xffff;
   d6958:	a311      	add	r3, pc, #68	; (adr r3, d69a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d695a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d695e:	f002 fa07 	bl	d8d70 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d6962:	4b11      	ldr	r3, [pc, #68]	; (d69a8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d6964:	2200      	movs	r2, #0
   d6966:	f001 ff21 	bl	d87ac <__aeabi_dsub>
  temp = stemp;
   d696a:	f002 fae9 	bl	d8f40 <__aeabi_d2f>
   d696e:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d6970:	ba60      	rev16	r0, r4
   d6972:	b280      	uxth	r0, r0
   d6974:	f002 f858 	bl	d8a28 <__aeabi_ui2d>
  shum *= 100;
   d6978:	4b0c      	ldr	r3, [pc, #48]	; (d69ac <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d697a:	2200      	movs	r2, #0
   d697c:	f002 f8ce 	bl	d8b1c <__aeabi_dmul>
  shum /= 0xFFFF;
   d6980:	a307      	add	r3, pc, #28	; (adr r3, d69a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d6982:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6986:	f002 f9f3 	bl	d8d70 <__aeabi_ddiv>
  humidity = shum;
   d698a:	f002 fad9 	bl	d8f40 <__aeabi_d2f>
   d698e:	6068      	str	r0, [r5, #4]
  return true;
   d6990:	2001      	movs	r0, #1
}
   d6992:	b002      	add	sp, #8
   d6994:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d6996:	2000      	movs	r0, #0
   d6998:	e7fb      	b.n	d6992 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d699a:	bf00      	nop
   d699c:	f3af 8000 	nop.w
   d69a0:	00000000 	.word	0x00000000
   d69a4:	40efffe0 	.word	0x40efffe0
   d69a8:	40468000 	.word	0x40468000
   d69ac:	40590000 	.word	0x40590000
   d69b0:	00000000 	.word	0x00000000
   d69b4:	4065e000 	.word	0x4065e000

000d69b8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d69b8:	b510      	push	{r4, lr}
   d69ba:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d69bc:	f7ff ff88 	bl	d68d0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d69c0:	b110      	cbz	r0, d69c8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d69c2:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d69c6:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d69c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d69d0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d69cc:	e7fb      	b.n	d69c6 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d69ce:	bf00      	nop
   d69d0:	7fc00000 	.word	0x7fc00000

000d69d4 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d69d4:	b510      	push	{r4, lr}
   d69d6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d69d8:	f7ff ff7a 	bl	d68d0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d69dc:	b110      	cbz	r0, d69e4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d69de:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d69e2:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d69e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d69ec <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d69e8:	e7fb      	b.n	d69e2 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d69ea:	bf00      	nop
   d69ec:	7fc00000 	.word	0x7fc00000

000d69f0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <os_thread_create+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	685b      	ldr	r3, [r3, #4]
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030248 	.word	0x00030248

000d6a00 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <os_thread_yield+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	68db      	ldr	r3, [r3, #12]
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030248 	.word	0x00030248

000d6a10 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <os_mutex_create+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030248 	.word	0x00030248

000d6a20 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <os_mutex_lock+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030248 	.word	0x00030248

000d6a30 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <os_mutex_unlock+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030248 	.word	0x00030248

000d6a40 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <os_mutex_recursive_create+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030248 	.word	0x00030248

000d6a50 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <os_thread_exit+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030248 	.word	0x00030248

000d6a60 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <HAL_Feature_Set+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030234 	.word	0x00030234

000d6a70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <HAL_RNG_GetRandomNumber+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	685b      	ldr	r3, [r3, #4]
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030218 	.word	0x00030218

000d6a80 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <HAL_Delay_Milliseconds+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	689b      	ldr	r3, [r3, #8]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030218 	.word	0x00030218

000d6a90 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <HAL_Delay_Microseconds+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	68db      	ldr	r3, [r3, #12]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030218 	.word	0x00030218

000d6aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	695b      	ldr	r3, [r3, #20]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030218 	.word	0x00030218

000d6ab0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <hal_rtc_time_is_valid+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030218 	.word	0x00030218

000d6ac0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <hal_timer_millis+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030218 	.word	0x00030218

000d6ad0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <hal_rtc_get_time+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030218 	.word	0x00030218

000d6ae0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <hal_rtc_set_time+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030218 	.word	0x00030218

000d6af0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <HAL_Pin_Map+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	681b      	ldr	r3, [r3, #0]
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	0003022c 	.word	0x0003022c

000d6b00 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <HAL_Validate_Pin_Function+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	685b      	ldr	r3, [r3, #4]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	0003022c 	.word	0x0003022c

000d6b10 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <HAL_Pin_Mode+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	689b      	ldr	r3, [r3, #8]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	0003022c 	.word	0x0003022c

000d6b20 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <HAL_Get_Pin_Mode+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	68db      	ldr	r3, [r3, #12]
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	0003022c 	.word	0x0003022c

000d6b30 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <HAL_GPIO_Read+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	695b      	ldr	r3, [r3, #20]
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	0003022c 	.word	0x0003022c

000d6b40 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <HAL_Interrupts_Attach+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	699b      	ldr	r3, [r3, #24]
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	0003022c 	.word	0x0003022c

000d6b50 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <HAL_Interrupts_Detach+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	69db      	ldr	r3, [r3, #28]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	0003022c 	.word	0x0003022c

000d6b60 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <hal_adc_read+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	0003022c 	.word	0x0003022c

000d6b70 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <hal_i2c_begin+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	68db      	ldr	r3, [r3, #12]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030228 	.word	0x00030228

000d6b80 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <hal_i2c_begin_transmission+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	699b      	ldr	r3, [r3, #24]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030228 	.word	0x00030228

000d6b90 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <hal_i2c_end_transmission+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	69db      	ldr	r3, [r3, #28]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030228 	.word	0x00030228

000d6ba0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <hal_i2c_write+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	6a1b      	ldr	r3, [r3, #32]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030228 	.word	0x00030228

000d6bb0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <hal_i2c_available+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030228 	.word	0x00030228

000d6bc0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <hal_i2c_read+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030228 	.word	0x00030228

000d6bd0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <hal_i2c_peek+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030228 	.word	0x00030228

000d6be0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <hal_i2c_flush+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030228 	.word	0x00030228

000d6bf0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <hal_i2c_is_enabled+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030228 	.word	0x00030228

000d6c00 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <hal_i2c_init+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <hal_i2c_lock+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030228 	.word	0x00030228

000d6c20 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <hal_i2c_unlock+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030228 	.word	0x00030228

000d6c30 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <hal_i2c_request_ex+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030228 	.word	0x00030228

000d6c40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <inet_inet_ntop+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	695b      	ldr	r3, [r3, #20]
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030264 	.word	0x00030264

000d6c50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <netdb_freeaddrinfo+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	689b      	ldr	r3, [r3, #8]
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030268 	.word	0x00030268

000d6c60 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <netdb_getaddrinfo+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	68db      	ldr	r3, [r3, #12]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030268 	.word	0x00030268

000d6c70 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <hal_spi_init+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	69db      	ldr	r3, [r3, #28]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030230 	.word	0x00030230

000d6c80 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <hal_spi_is_enabled+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6a1b      	ldr	r3, [r3, #32]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030230 	.word	0x00030230

000d6c90 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <hal_usart_init+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	681b      	ldr	r3, [r3, #0]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	0003023c 	.word	0x0003023c

000d6ca0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <hal_usart_write+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	68db      	ldr	r3, [r3, #12]
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	0003023c 	.word	0x0003023c

000d6cb0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <hal_usart_available+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	691b      	ldr	r3, [r3, #16]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	0003023c 	.word	0x0003023c

000d6cc0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <hal_usart_read+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	695b      	ldr	r3, [r3, #20]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	0003023c 	.word	0x0003023c

000d6cd0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <hal_usart_peek+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	699b      	ldr	r3, [r3, #24]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	0003023c 	.word	0x0003023c

000d6ce0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <hal_usart_flush+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	69db      	ldr	r3, [r3, #28]
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	0003023c 	.word	0x0003023c

000d6cf0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <hal_usart_is_enabled+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	6a1b      	ldr	r3, [r3, #32]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	0003023c 	.word	0x0003023c

000d6d00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <hal_usart_available_data_for_write+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	0003023c 	.word	0x0003023c

000d6d10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USB_USART_Init+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	681b      	ldr	r3, [r3, #0]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003024c 	.word	0x0003024c

000d6d20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <HAL_USB_USART_Available_Data+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	691b      	ldr	r3, [r3, #16]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	0003024c 	.word	0x0003024c

000d6d30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	695b      	ldr	r3, [r3, #20]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	0003024c 	.word	0x0003024c

000d6d40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <HAL_USB_USART_Receive_Data+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	699b      	ldr	r3, [r3, #24]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	0003024c 	.word	0x0003024c

000d6d50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <HAL_USB_USART_Send_Data+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	69db      	ldr	r3, [r3, #28]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	0003024c 	.word	0x0003024c

000d6d60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <HAL_USB_USART_Flush_Data+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	6a1b      	ldr	r3, [r3, #32]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	0003024c 	.word	0x0003024c

000d6d70 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <panic_+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	00030260 	.word	0x00030260

000d6d80 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <log_message+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	00030260 	.word	0x00030260

000d6d90 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <log_message_v+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	00030260 	.word	0x00030260

000d6da0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b03      	ldr	r3, [pc, #12]	; (d6db0 <diag_get_source+0x10>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6daa:	9301      	str	r3, [sp, #4]
   d6dac:	bd08      	pop	{r3, pc}
   d6dae:	0000      	.short	0x0000
   d6db0:	00030260 	.word	0x00030260

000d6db4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6db4:	b508      	push	{r3, lr}
   d6db6:	4b02      	ldr	r3, [pc, #8]	; (d6dc0 <system_mode+0xc>)
   d6db8:	681b      	ldr	r3, [r3, #0]
   d6dba:	681b      	ldr	r3, [r3, #0]
   d6dbc:	9301      	str	r3, [sp, #4]
   d6dbe:	bd08      	pop	{r3, pc}
   d6dc0:	00030220 	.word	0x00030220

000d6dc4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b02      	ldr	r3, [pc, #8]	; (d6dd0 <set_system_mode+0xc>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	685b      	ldr	r3, [r3, #4]
   d6dcc:	9301      	str	r3, [sp, #4]
   d6dce:	bd08      	pop	{r3, pc}
   d6dd0:	00030220 	.word	0x00030220

000d6dd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6dd4:	b508      	push	{r3, lr}
   d6dd6:	4b02      	ldr	r3, [pc, #8]	; (d6de0 <system_delay_ms+0xc>)
   d6dd8:	681b      	ldr	r3, [r3, #0]
   d6dda:	695b      	ldr	r3, [r3, #20]
   d6ddc:	9301      	str	r3, [sp, #4]
   d6dde:	bd08      	pop	{r3, pc}
   d6de0:	00030220 	.word	0x00030220

000d6de4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6de4:	b508      	push	{r3, lr}
   d6de6:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <system_thread_set_state+0xc>)
   d6de8:	681b      	ldr	r3, [r3, #0]
   d6dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	bd08      	pop	{r3, pc}
   d6df0:	00030220 	.word	0x00030220

000d6df4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6df4:	b508      	push	{r3, lr}
   d6df6:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <application_thread_current+0xc>)
   d6df8:	681b      	ldr	r3, [r3, #0]
   d6dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6dfc:	9301      	str	r3, [sp, #4]
   d6dfe:	bd08      	pop	{r3, pc}
   d6e00:	00030220 	.word	0x00030220

000d6e04 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6e04:	b508      	push	{r3, lr}
   d6e06:	4b02      	ldr	r3, [pc, #8]	; (d6e10 <application_thread_invoke+0xc>)
   d6e08:	681b      	ldr	r3, [r3, #0]
   d6e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e0c:	9301      	str	r3, [sp, #4]
   d6e0e:	bd08      	pop	{r3, pc}
   d6e10:	00030220 	.word	0x00030220

000d6e14 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6e14:	b508      	push	{r3, lr}
   d6e16:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <system_thread_get_state+0xc>)
   d6e18:	681b      	ldr	r3, [r3, #0]
   d6e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e1c:	9301      	str	r3, [sp, #4]
   d6e1e:	bd08      	pop	{r3, pc}
   d6e20:	00030220 	.word	0x00030220

000d6e24 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6e24:	b508      	push	{r3, lr}
   d6e26:	4b02      	ldr	r3, [pc, #8]	; (d6e30 <system_notify_time_changed+0xc>)
   d6e28:	681b      	ldr	r3, [r3, #0]
   d6e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6e2c:	9301      	str	r3, [sp, #4]
   d6e2e:	bd08      	pop	{r3, pc}
   d6e30:	00030220 	.word	0x00030220

000d6e34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e34:	b508      	push	{r3, lr}
   d6e36:	4b03      	ldr	r3, [pc, #12]	; (d6e44 <system_ctrl_set_app_request_handler+0x10>)
   d6e38:	681b      	ldr	r3, [r3, #0]
   d6e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e3e:	9301      	str	r3, [sp, #4]
   d6e40:	bd08      	pop	{r3, pc}
   d6e42:	0000      	.short	0x0000
   d6e44:	00030220 	.word	0x00030220

000d6e48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b03      	ldr	r3, [pc, #12]	; (d6e58 <system_ctrl_set_result+0x10>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e52:	9301      	str	r3, [sp, #4]
   d6e54:	bd08      	pop	{r3, pc}
   d6e56:	0000      	.short	0x0000
   d6e58:	00030220 	.word	0x00030220

000d6e5c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b03      	ldr	r3, [pc, #12]	; (d6e6c <system_sleep_ext+0x10>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6e66:	9301      	str	r3, [sp, #4]
   d6e68:	bd08      	pop	{r3, pc}
   d6e6a:	0000      	.short	0x0000
   d6e6c:	00030220 	.word	0x00030220

000d6e70 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b03      	ldr	r3, [pc, #12]	; (d6e80 <system_reset+0x10>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6e7a:	9301      	str	r3, [sp, #4]
   d6e7c:	bd08      	pop	{r3, pc}
   d6e7e:	0000      	.short	0x0000
   d6e80:	00030220 	.word	0x00030220

000d6e84 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6e84:	b508      	push	{r3, lr}
   d6e86:	4b02      	ldr	r3, [pc, #8]	; (d6e90 <spark_variable+0xc>)
   d6e88:	681b      	ldr	r3, [r3, #0]
   d6e8a:	681b      	ldr	r3, [r3, #0]
   d6e8c:	9301      	str	r3, [sp, #4]
   d6e8e:	bd08      	pop	{r3, pc}
   d6e90:	00030244 	.word	0x00030244

000d6e94 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6e94:	b508      	push	{r3, lr}
   d6e96:	4b02      	ldr	r3, [pc, #8]	; (d6ea0 <spark_function+0xc>)
   d6e98:	681b      	ldr	r3, [r3, #0]
   d6e9a:	685b      	ldr	r3, [r3, #4]
   d6e9c:	9301      	str	r3, [sp, #4]
   d6e9e:	bd08      	pop	{r3, pc}
   d6ea0:	00030244 	.word	0x00030244

000d6ea4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b02      	ldr	r3, [pc, #8]	; (d6eb0 <spark_process+0xc>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	689b      	ldr	r3, [r3, #8]
   d6eac:	9301      	str	r3, [sp, #4]
   d6eae:	bd08      	pop	{r3, pc}
   d6eb0:	00030244 	.word	0x00030244

000d6eb4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6eb4:	b508      	push	{r3, lr}
   d6eb6:	4b02      	ldr	r3, [pc, #8]	; (d6ec0 <spark_cloud_flag_connect+0xc>)
   d6eb8:	681b      	ldr	r3, [r3, #0]
   d6eba:	68db      	ldr	r3, [r3, #12]
   d6ebc:	9301      	str	r3, [sp, #4]
   d6ebe:	bd08      	pop	{r3, pc}
   d6ec0:	00030244 	.word	0x00030244

000d6ec4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4b02      	ldr	r3, [pc, #8]	; (d6ed0 <spark_cloud_flag_connected+0xc>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	695b      	ldr	r3, [r3, #20]
   d6ecc:	9301      	str	r3, [sp, #4]
   d6ece:	bd08      	pop	{r3, pc}
   d6ed0:	00030244 	.word	0x00030244

000d6ed4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6ed4:	b508      	push	{r3, lr}
   d6ed6:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <spark_deviceID+0xc>)
   d6ed8:	681b      	ldr	r3, [r3, #0]
   d6eda:	69db      	ldr	r3, [r3, #28]
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	00030244 	.word	0x00030244

000d6ee4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6ee4:	b508      	push	{r3, lr}
   d6ee6:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <spark_send_event+0xc>)
   d6ee8:	681b      	ldr	r3, [r3, #0]
   d6eea:	6a1b      	ldr	r3, [r3, #32]
   d6eec:	9301      	str	r3, [sp, #4]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	00030244 	.word	0x00030244

000d6ef4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b02      	ldr	r3, [pc, #8]	; (d6f00 <spark_subscribe+0xc>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6efc:	9301      	str	r3, [sp, #4]
   d6efe:	bd08      	pop	{r3, pc}
   d6f00:	00030244 	.word	0x00030244

000d6f04 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6f04:	b508      	push	{r3, lr}
   d6f06:	4b02      	ldr	r3, [pc, #8]	; (d6f10 <spark_sync_time+0xc>)
   d6f08:	681b      	ldr	r3, [r3, #0]
   d6f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f0c:	9301      	str	r3, [sp, #4]
   d6f0e:	bd08      	pop	{r3, pc}
   d6f10:	00030244 	.word	0x00030244

000d6f14 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f14:	b508      	push	{r3, lr}
   d6f16:	4b02      	ldr	r3, [pc, #8]	; (d6f20 <spark_sync_time_pending+0xc>)
   d6f18:	681b      	ldr	r3, [r3, #0]
   d6f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f1c:	9301      	str	r3, [sp, #4]
   d6f1e:	bd08      	pop	{r3, pc}
   d6f20:	00030244 	.word	0x00030244

000d6f24 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6f24:	b508      	push	{r3, lr}
   d6f26:	4b02      	ldr	r3, [pc, #8]	; (d6f30 <spark_sync_time_last+0xc>)
   d6f28:	681b      	ldr	r3, [r3, #0]
   d6f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f2c:	9301      	str	r3, [sp, #4]
   d6f2e:	bd08      	pop	{r3, pc}
   d6f30:	00030244 	.word	0x00030244

000d6f34 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6f34:	b508      	push	{r3, lr}
   d6f36:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <spark_set_connection_property+0xc>)
   d6f38:	681b      	ldr	r3, [r3, #0]
   d6f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6f3c:	9301      	str	r3, [sp, #4]
   d6f3e:	bd08      	pop	{r3, pc}
   d6f40:	00030244 	.word	0x00030244

000d6f44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b02      	ldr	r3, [pc, #8]	; (d6f50 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f4c:	9301      	str	r3, [sp, #4]
   d6f4e:	bd08      	pop	{r3, pc}
   d6f50:	00030244 	.word	0x00030244

000d6f54 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d6f54:	b508      	push	{r3, lr}
   d6f56:	4b02      	ldr	r3, [pc, #8]	; (d6f60 <spark_cloud_disconnect+0xc>)
   d6f58:	681b      	ldr	r3, [r3, #0]
   d6f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6f5c:	9301      	str	r3, [sp, #4]
   d6f5e:	bd08      	pop	{r3, pc}
   d6f60:	00030244 	.word	0x00030244

000d6f64 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f64:	b508      	push	{r3, lr}
   d6f66:	4b02      	ldr	r3, [pc, #8]	; (d6f70 <network_connect+0xc>)
   d6f68:	681b      	ldr	r3, [r3, #0]
   d6f6a:	685b      	ldr	r3, [r3, #4]
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	bd08      	pop	{r3, pc}
   d6f70:	00030240 	.word	0x00030240

000d6f74 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6f74:	b508      	push	{r3, lr}
   d6f76:	4b02      	ldr	r3, [pc, #8]	; (d6f80 <network_connecting+0xc>)
   d6f78:	681b      	ldr	r3, [r3, #0]
   d6f7a:	689b      	ldr	r3, [r3, #8]
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	bd08      	pop	{r3, pc}
   d6f80:	00030240 	.word	0x00030240

000d6f84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6f84:	b508      	push	{r3, lr}
   d6f86:	4b02      	ldr	r3, [pc, #8]	; (d6f90 <network_disconnect+0xc>)
   d6f88:	681b      	ldr	r3, [r3, #0]
   d6f8a:	68db      	ldr	r3, [r3, #12]
   d6f8c:	9301      	str	r3, [sp, #4]
   d6f8e:	bd08      	pop	{r3, pc}
   d6f90:	00030240 	.word	0x00030240

000d6f94 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6f94:	b508      	push	{r3, lr}
   d6f96:	4b02      	ldr	r3, [pc, #8]	; (d6fa0 <network_ready+0xc>)
   d6f98:	681b      	ldr	r3, [r3, #0]
   d6f9a:	691b      	ldr	r3, [r3, #16]
   d6f9c:	9301      	str	r3, [sp, #4]
   d6f9e:	bd08      	pop	{r3, pc}
   d6fa0:	00030240 	.word	0x00030240

000d6fa4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fa4:	b508      	push	{r3, lr}
   d6fa6:	4b02      	ldr	r3, [pc, #8]	; (d6fb0 <network_on+0xc>)
   d6fa8:	681b      	ldr	r3, [r3, #0]
   d6faa:	695b      	ldr	r3, [r3, #20]
   d6fac:	9301      	str	r3, [sp, #4]
   d6fae:	bd08      	pop	{r3, pc}
   d6fb0:	00030240 	.word	0x00030240

000d6fb4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fb4:	b508      	push	{r3, lr}
   d6fb6:	4b02      	ldr	r3, [pc, #8]	; (d6fc0 <network_off+0xc>)
   d6fb8:	681b      	ldr	r3, [r3, #0]
   d6fba:	699b      	ldr	r3, [r3, #24]
   d6fbc:	9301      	str	r3, [sp, #4]
   d6fbe:	bd08      	pop	{r3, pc}
   d6fc0:	00030240 	.word	0x00030240

000d6fc4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6fc4:	b508      	push	{r3, lr}
   d6fc6:	4b02      	ldr	r3, [pc, #8]	; (d6fd0 <network_listen+0xc>)
   d6fc8:	681b      	ldr	r3, [r3, #0]
   d6fca:	69db      	ldr	r3, [r3, #28]
   d6fcc:	9301      	str	r3, [sp, #4]
   d6fce:	bd08      	pop	{r3, pc}
   d6fd0:	00030240 	.word	0x00030240

000d6fd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6fd4:	b508      	push	{r3, lr}
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <network_listening+0xc>)
   d6fd8:	681b      	ldr	r3, [r3, #0]
   d6fda:	6a1b      	ldr	r3, [r3, #32]
   d6fdc:	9301      	str	r3, [sp, #4]
   d6fde:	bd08      	pop	{r3, pc}
   d6fe0:	00030240 	.word	0x00030240

000d6fe4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6fe4:	b508      	push	{r3, lr}
   d6fe6:	4b02      	ldr	r3, [pc, #8]	; (d6ff0 <network_set_listen_timeout+0xc>)
   d6fe8:	681b      	ldr	r3, [r3, #0]
   d6fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fec:	9301      	str	r3, [sp, #4]
   d6fee:	bd08      	pop	{r3, pc}
   d6ff0:	00030240 	.word	0x00030240

000d6ff4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6ff4:	b508      	push	{r3, lr}
   d6ff6:	4b02      	ldr	r3, [pc, #8]	; (d7000 <network_get_listen_timeout+0xc>)
   d6ff8:	681b      	ldr	r3, [r3, #0]
   d6ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ffc:	9301      	str	r3, [sp, #4]
   d6ffe:	bd08      	pop	{r3, pc}
   d7000:	00030240 	.word	0x00030240

000d7004 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7004:	b508      	push	{r3, lr}
   d7006:	4b02      	ldr	r3, [pc, #8]	; (d7010 <network_is_on+0xc>)
   d7008:	681b      	ldr	r3, [r3, #0]
   d700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d700c:	9301      	str	r3, [sp, #4]
   d700e:	bd08      	pop	{r3, pc}
   d7010:	00030240 	.word	0x00030240

000d7014 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7014:	b508      	push	{r3, lr}
   d7016:	4b02      	ldr	r3, [pc, #8]	; (d7020 <network_is_off+0xc>)
   d7018:	681b      	ldr	r3, [r3, #0]
   d701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d701c:	9301      	str	r3, [sp, #4]
   d701e:	bd08      	pop	{r3, pc}
   d7020:	00030240 	.word	0x00030240

000d7024 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7024:	b508      	push	{r3, lr}
   d7026:	4b02      	ldr	r3, [pc, #8]	; (d7030 <malloc+0xc>)
   d7028:	681b      	ldr	r3, [r3, #0]
   d702a:	681b      	ldr	r3, [r3, #0]
   d702c:	9301      	str	r3, [sp, #4]
   d702e:	bd08      	pop	{r3, pc}
   d7030:	0003021c 	.word	0x0003021c

000d7034 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7034:	b508      	push	{r3, lr}
   d7036:	4b02      	ldr	r3, [pc, #8]	; (d7040 <free+0xc>)
   d7038:	681b      	ldr	r3, [r3, #0]
   d703a:	685b      	ldr	r3, [r3, #4]
   d703c:	9301      	str	r3, [sp, #4]
   d703e:	bd08      	pop	{r3, pc}
   d7040:	0003021c 	.word	0x0003021c

000d7044 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <realloc+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	689b      	ldr	r3, [r3, #8]
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	0003021c 	.word	0x0003021c

000d7054 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <siprintf+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	691b      	ldr	r3, [r3, #16]
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	0003021c 	.word	0x0003021c

000d7064 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <snprintf+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	69db      	ldr	r3, [r3, #28]
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	0003021c 	.word	0x0003021c

000d7074 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <abort+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	0003021c 	.word	0x0003021c

000d7084 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <_malloc_r+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	0003021c 	.word	0x0003021c

000d7094 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <newlib_impure_ptr_callback+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	0003021c 	.word	0x0003021c

000d70a4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <strftime+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	0003021c 	.word	0x0003021c

000d70b4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <localtime_r+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	0003021c 	.word	0x0003021c

000d70c4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <gmtime_r+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	0003021c 	.word	0x0003021c

000d70d4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <mktime+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	0003021c 	.word	0x0003021c

000d70e4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d70e4:	428a      	cmp	r2, r1
{
   d70e6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d70e8:	d007      	beq.n	d70fa <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d70ea:	9c02      	ldr	r4, [sp, #8]
   d70ec:	1a40      	subs	r0, r0, r1
   d70ee:	1ae4      	subs	r4, r4, r3
   d70f0:	4360      	muls	r0, r4
   d70f2:	1a52      	subs	r2, r2, r1
   d70f4:	fb90 f0f2 	sdiv	r0, r0, r2
   d70f8:	4418      	add	r0, r3
}
   d70fa:	bd10      	pop	{r4, pc}

000d70fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d70fc:	2100      	movs	r1, #0
   d70fe:	f7ff be69 	b.w	d6dd4 <system_delay_ms>

000d7102 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7102:	b510      	push	{r4, lr}
      if (_M_empty())
   d7104:	6883      	ldr	r3, [r0, #8]
   d7106:	4604      	mov	r4, r0
   d7108:	b90b      	cbnz	r3, d710e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d710a:	f001 fb47 	bl	d879c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d710e:	68c3      	ldr	r3, [r0, #12]
   d7110:	4798      	blx	r3
      if (_M_manager)
   d7112:	68a3      	ldr	r3, [r4, #8]
   d7114:	b11b      	cbz	r3, d711e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7116:	2203      	movs	r2, #3
   d7118:	4621      	mov	r1, r4
   d711a:	4620      	mov	r0, r4
   d711c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d711e:	4620      	mov	r0, r4
   d7120:	2110      	movs	r1, #16
}
   d7122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7126:	f001 bb33 	b.w	d8790 <_ZdlPvj>

000d712a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d712a:	b510      	push	{r4, lr}
          _M_dispose();
   d712c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d712e:	4604      	mov	r4, r0
          _M_dispose();
   d7130:	689b      	ldr	r3, [r3, #8]
   d7132:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7134:	68a3      	ldr	r3, [r4, #8]
   d7136:	3b01      	subs	r3, #1
   d7138:	60a3      	str	r3, [r4, #8]
   d713a:	b92b      	cbnz	r3, d7148 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d713c:	6823      	ldr	r3, [r4, #0]
   d713e:	4620      	mov	r0, r4
   d7140:	68db      	ldr	r3, [r3, #12]
    }
   d7142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7146:	4718      	bx	r3
    }
   d7148:	bd10      	pop	{r4, pc}

000d714a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d714a:	680b      	ldr	r3, [r1, #0]
   d714c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d714e:	b113      	cbz	r3, d7156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7150:	685a      	ldr	r2, [r3, #4]
   d7152:	3201      	adds	r2, #1
   d7154:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d7156:	4770      	bx	lr

000d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7158:	b510      	push	{r4, lr}
   d715a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d715c:	6800      	ldr	r0, [r0, #0]
   d715e:	b128      	cbz	r0, d716c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7160:	6843      	ldr	r3, [r0, #4]
   d7162:	3b01      	subs	r3, #1
   d7164:	6043      	str	r3, [r0, #4]
   d7166:	b90b      	cbnz	r3, d716c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7168:	f7ff ffdf 	bl	d712a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d716c:	4620      	mov	r0, r4
   d716e:	bd10      	pop	{r4, pc}

000d7170 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7170:	4802      	ldr	r0, [pc, #8]	; (d717c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7172:	2300      	movs	r3, #0
   d7174:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7176:	f7ff bc63 	b.w	d6a40 <os_mutex_recursive_create>
   d717a:	bf00      	nop
   d717c:	2003e540 	.word	0x2003e540

000d7180 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7180:	2200      	movs	r2, #0
   d7182:	6840      	ldr	r0, [r0, #4]
   d7184:	4611      	mov	r1, r2
   d7186:	f7ff bf05 	b.w	d6f94 <network_ready>

000d718a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d718a:	2200      	movs	r2, #0
   d718c:	6840      	ldr	r0, [r0, #4]
   d718e:	4611      	mov	r1, r2
   d7190:	f7ff bf20 	b.w	d6fd4 <network_listening>

000d7194 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7194:	2200      	movs	r2, #0
   d7196:	6840      	ldr	r0, [r0, #4]
   d7198:	4611      	mov	r1, r2
   d719a:	f7ff bf2b 	b.w	d6ff4 <network_get_listen_timeout>

000d719e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d719e:	6840      	ldr	r0, [r0, #4]
   d71a0:	2200      	movs	r2, #0
   d71a2:	f7ff bf1f 	b.w	d6fe4 <network_set_listen_timeout>

000d71a6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d71a6:	6840      	ldr	r0, [r0, #4]
   d71a8:	2200      	movs	r2, #0
   d71aa:	f081 0101 	eor.w	r1, r1, #1
   d71ae:	f7ff bf09 	b.w	d6fc4 <network_listen>

000d71b2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d71b2:	2300      	movs	r3, #0
   d71b4:	6840      	ldr	r0, [r0, #4]
   d71b6:	461a      	mov	r2, r3
   d71b8:	4619      	mov	r1, r3
   d71ba:	f7ff befb 	b.w	d6fb4 <network_off>

000d71be <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d71be:	2300      	movs	r3, #0
   d71c0:	6840      	ldr	r0, [r0, #4]
   d71c2:	461a      	mov	r2, r3
   d71c4:	4619      	mov	r1, r3
   d71c6:	f7ff beed 	b.w	d6fa4 <network_on>

000d71ca <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d71ca:	2200      	movs	r2, #0
   d71cc:	6840      	ldr	r0, [r0, #4]
   d71ce:	4611      	mov	r1, r2
   d71d0:	f7ff bed0 	b.w	d6f74 <network_connecting>

000d71d4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71d4:	6840      	ldr	r0, [r0, #4]
   d71d6:	2200      	movs	r2, #0
   d71d8:	2102      	movs	r1, #2
   d71da:	f7ff bed3 	b.w	d6f84 <network_disconnect>

000d71de <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d71de:	2300      	movs	r3, #0
   d71e0:	6840      	ldr	r0, [r0, #4]
   d71e2:	461a      	mov	r2, r3
   d71e4:	f7ff bebe 	b.w	d6f64 <network_connect>

000d71e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d71e8:	4b08      	ldr	r3, [pc, #32]	; (d720c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d71ea:	b510      	push	{r4, lr}
   d71ec:	2428      	movs	r4, #40	; 0x28
   d71ee:	4622      	mov	r2, r4
   d71f0:	4618      	mov	r0, r3
   d71f2:	2100      	movs	r1, #0
   d71f4:	f001 ff5e 	bl	d90b4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d71f8:	4b05      	ldr	r3, [pc, #20]	; (d7210 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d71fa:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d71fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7200:	6042      	str	r2, [r0, #4]
   d7202:	2204      	movs	r2, #4
   d7204:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7206:	4a03      	ldr	r2, [pc, #12]	; (d7214 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7208:	601a      	str	r2, [r3, #0]
   d720a:	bd10      	pop	{r4, pc}
   d720c:	2003e54c 	.word	0x2003e54c
   d7210:	2003e544 	.word	0x2003e544
   d7214:	000d99f0 	.word	0x000d99f0

000d7218 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7218:	4770      	bx	lr

000d721a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d721a:	2000      	movs	r0, #0
   d721c:	4770      	bx	lr

000d721e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d721e:	b510      	push	{r4, lr}
   d7220:	2110      	movs	r1, #16
   d7222:	4604      	mov	r4, r0
   d7224:	f001 fab4 	bl	d8790 <_ZdlPvj>
   d7228:	4620      	mov	r0, r4
   d722a:	bd10      	pop	{r4, pc}

000d722c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d722c:	b508      	push	{r3, lr}
      { delete this; }
   d722e:	f7ff fff6 	bl	d721e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7232:	bd08      	pop	{r3, pc}

000d7234 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7234:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7236:	2200      	movs	r2, #0
   d7238:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d723c:	6002      	str	r2, [r0, #0]
   d723e:	8084      	strh	r4, [r0, #4]
   d7240:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7242:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7244:	680c      	ldr	r4, [r1, #0]
   d7246:	8085      	strh	r5, [r0, #4]
   d7248:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d724a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d724c:	bd30      	pop	{r4, r5, pc}

000d724e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d724e:	b510      	push	{r4, lr}
   d7250:	4604      	mov	r4, r0
    free((void*)msg_);
   d7252:	6800      	ldr	r0, [r0, #0]
   d7254:	f7ff feee 	bl	d7034 <free>
}
   d7258:	4620      	mov	r0, r4
   d725a:	bd10      	pop	{r4, pc}

000d725c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d725c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d725e:	68c4      	ldr	r4, [r0, #12]
   d7260:	b1f4      	cbz	r4, d72a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7262:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7264:	2b02      	cmp	r3, #2
   d7266:	d103      	bne.n	d7270 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7268:	f104 000c 	add.w	r0, r4, #12
   d726c:	f7ff ffef 	bl	d724e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7270:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7272:	b135      	cbz	r5, d7282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7274:	4628      	mov	r0, r5
   d7276:	f7ff f81f 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
   d727a:	2110      	movs	r1, #16
   d727c:	4628      	mov	r0, r5
   d727e:	f001 fa87 	bl	d8790 <_ZdlPvj>
   d7282:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7284:	b135      	cbz	r5, d7294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7286:	4628      	mov	r0, r5
   d7288:	f7ff f816 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
   d728c:	2110      	movs	r1, #16
   d728e:	4628      	mov	r0, r5
   d7290:	f001 fa7e 	bl	d8790 <_ZdlPvj>
   d7294:	4620      	mov	r0, r4
   d7296:	2114      	movs	r1, #20
   d7298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d729c:	f001 ba78 	b.w	d8790 <_ZdlPvj>
   d72a0:	bd38      	pop	{r3, r4, r5, pc}

000d72a2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d72a2:	b510      	push	{r4, lr}
   d72a4:	b088      	sub	sp, #32
   d72a6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d72a8:	4668      	mov	r0, sp
   d72aa:	f000 fd6e 	bl	d7d8a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d72ae:	4669      	mov	r1, sp
   d72b0:	a804      	add	r0, sp, #16
   d72b2:	f000 fd8d 	bl	d7dd0 <_ZN6StringC1ERKS_>
   d72b6:	a804      	add	r0, sp, #16
   d72b8:	47a0      	blx	r4
   d72ba:	4604      	mov	r4, r0
   d72bc:	a804      	add	r0, sp, #16
   d72be:	f000 fd19 	bl	d7cf4 <_ZN6StringD1Ev>
    String p(param);
   d72c2:	4668      	mov	r0, sp
   d72c4:	f000 fd16 	bl	d7cf4 <_ZN6StringD1Ev>
}
   d72c8:	4620      	mov	r0, r4
   d72ca:	b008      	add	sp, #32
   d72cc:	bd10      	pop	{r4, pc}

000d72ce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d72ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d72d0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d72d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d72d6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d72d8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d72da:	461a      	mov	r2, r3
   d72dc:	4669      	mov	r1, sp
   d72de:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d72e0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d72e4:	f8ad 4000 	strh.w	r4, [sp]
   d72e8:	f7ff fdd4 	bl	d6e94 <spark_function>
}
   d72ec:	b004      	add	sp, #16
   d72ee:	bd10      	pop	{r4, pc}

000d72f0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d72f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d72f2:	230c      	movs	r3, #12
   d72f4:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d72f8:	6803      	ldr	r3, [r0, #0]
   d72fa:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d72fe:	7a03      	ldrb	r3, [r0, #8]
   d7300:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d7304:	6843      	ldr	r3, [r0, #4]
   d7306:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d7308:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d730a:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d730c:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7310:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d7312:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d7316:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d731a:	f7ff fe1b 	bl	d6f54 <spark_cloud_disconnect>
}
   d731e:	b005      	add	sp, #20
   d7320:	f85d fb04 	ldr.w	pc, [sp], #4

000d7324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7324:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7326:	460e      	mov	r6, r1
   d7328:	4604      	mov	r4, r0
   d732a:	f856 3b04 	ldr.w	r3, [r6], #4
   d732e:	9300      	str	r3, [sp, #0]
   d7330:	460d      	mov	r5, r1
   d7332:	a801      	add	r0, sp, #4
   d7334:	4631      	mov	r1, r6
   d7336:	f7ff ff08 	bl	d714a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d733a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d733c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d733e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7340:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7342:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7344:	2300      	movs	r3, #0
   d7346:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7348:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d734a:	f7ff ff05 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d734e:	4630      	mov	r0, r6
   d7350:	f7ff ff02 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7354:	4628      	mov	r0, r5
   d7356:	2108      	movs	r1, #8
   d7358:	f001 fa1a 	bl	d8790 <_ZdlPvj>
        return p;
    }
   d735c:	4620      	mov	r0, r4
   d735e:	b002      	add	sp, #8
   d7360:	bd70      	pop	{r4, r5, r6, pc}

000d7362 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7362:	b513      	push	{r0, r1, r4, lr}
   d7364:	460b      	mov	r3, r1
   d7366:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7368:	e9d0 0100 	ldrd	r0, r1, [r0]
   d736c:	466c      	mov	r4, sp
   d736e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7372:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7376:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d737a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d737e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7382:	b002      	add	sp, #8
   d7384:	bd10      	pop	{r4, pc}

000d7386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7386:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7388:	b510      	push	{r4, lr}
      if (_M_empty())
   d738a:	b90a      	cbnz	r2, d7390 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d738c:	f001 fa06 	bl	d879c <_ZSt25__throw_bad_function_callv>
    }
   d7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7394:	68c3      	ldr	r3, [r0, #12]
   d7396:	4718      	bx	r3

000d7398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7398:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d739a:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d739c:	f100 0110 	add.w	r1, r0, #16
   d73a0:	f7ff fff1 	bl	d7386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d73a4:	bd08      	pop	{r3, pc}

000d73a6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d73a6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73a8:	b510      	push	{r4, lr}
      if (_M_empty())
   d73aa:	b90a      	cbnz	r2, d73b0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d73ac:	f001 f9f6 	bl	d879c <_ZSt25__throw_bad_function_callv>
    }
   d73b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73b4:	68c3      	ldr	r3, [r0, #12]
   d73b6:	4718      	bx	r3

000d73b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73b8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d73ba:	6800      	ldr	r0, [r0, #0]
   d73bc:	f100 0110 	add.w	r1, r0, #16
   d73c0:	f7ff fff1 	bl	d73a6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d73c4:	bd08      	pop	{r3, pc}
	...

000d73c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d73c8:	b538      	push	{r3, r4, r5, lr}
   d73ca:	2300      	movs	r3, #0
   d73cc:	4604      	mov	r4, r0
   d73ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d73d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73d4:	f7fc fe5f 	bl	d4096 <_Znwj>
   d73d8:	b128      	cbz	r0, d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d73da:	2301      	movs	r3, #1
   d73dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d73e0:	4b02      	ldr	r3, [pc, #8]	; (d73ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d73e2:	6003      	str	r3, [r0, #0]
   d73e4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73e6:	6020      	str	r0, [r4, #0]
	}
   d73e8:	4620      	mov	r0, r4
   d73ea:	bd38      	pop	{r3, r4, r5, pc}
   d73ec:	000d9a2c 	.word	0x000d9a2c

000d73f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d73f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d73f2:	2300      	movs	r3, #0
   d73f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d73f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d73f8:	4604      	mov	r4, r0
   d73fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d73fc:	b12b      	cbz	r3, d740a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d73fe:	2202      	movs	r2, #2
   d7400:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7402:	68eb      	ldr	r3, [r5, #12]
   d7404:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7406:	68ab      	ldr	r3, [r5, #8]
   d7408:	60a3      	str	r3, [r4, #8]
    }
   d740a:	4620      	mov	r0, r4
   d740c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7410:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7412:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7414:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7416:	4668      	mov	r0, sp
   d7418:	f7ff ff0c 	bl	d7234 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d741c:	f04f 0302 	mov.w	r3, #2
   d7420:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7424:	2a00      	cmp	r2, #0
   d7426:	d103      	bne.n	d7430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7428:	e8c4 3f41 	strexb	r1, r3, [r4]
   d742c:	2900      	cmp	r1, #0
   d742e:	d1f7      	bne.n	d7420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7430:	d125      	bne.n	d747e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7432:	f104 050c 	add.w	r5, r4, #12
   d7436:	4669      	mov	r1, sp
   d7438:	4628      	mov	r0, r5
   d743a:	f7ff fefb 	bl	d7234 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d743e:	f3bf 8f5b 	dmb	ish
   d7442:	2301      	movs	r3, #1
   d7444:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7446:	2000      	movs	r0, #0
   d7448:	f104 0308 	add.w	r3, r4, #8
   d744c:	f3bf 8f5b 	dmb	ish
   d7450:	e853 6f00 	ldrex	r6, [r3]
   d7454:	e843 0200 	strex	r2, r0, [r3]
   d7458:	2a00      	cmp	r2, #0
   d745a:	d1f9      	bne.n	d7450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d745c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7460:	b16e      	cbz	r6, d747e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7462:	f7ff fcc7 	bl	d6df4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7466:	b178      	cbz	r0, d7488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7468:	4629      	mov	r1, r5
   d746a:	4630      	mov	r0, r6
   d746c:	f7ff ff8b 	bl	d7386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7470:	4630      	mov	r0, r6
   d7472:	f7fe ff21 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7476:	2110      	movs	r1, #16
   d7478:	4630      	mov	r0, r6
   d747a:	f001 f989 	bl	d8790 <_ZdlPvj>
        p_->setError(std::move(error));
   d747e:	4668      	mov	r0, sp
   d7480:	f7ff fee5 	bl	d724e <_ZN8particle5ErrorD1Ev>
    }
   d7484:	b009      	add	sp, #36	; 0x24
   d7486:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7488:	4631      	mov	r1, r6
   d748a:	a802      	add	r0, sp, #8
   d748c:	f7ff ffb0 	bl	d73f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7490:	68e0      	ldr	r0, [r4, #12]
   d7492:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7496:	b108      	cbz	r0, d749c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7498:	f001 fe4a 	bl	d9130 <strdup>
        type_(type) {
   d749c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d749e:	2010      	movs	r0, #16
   d74a0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d74a4:	f7fc fdf7 	bl	d4096 <_Znwj>
   d74a8:	4605      	mov	r5, r0
   d74aa:	b1e8      	cbz	r0, d74e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d74ac:	2700      	movs	r7, #0
   d74ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74b0:	2018      	movs	r0, #24
   d74b2:	f7fc fdf0 	bl	d4096 <_Znwj>
   d74b6:	4604      	mov	r4, r0
   d74b8:	b188      	cbz	r0, d74de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d74ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d74bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d74be:	a802      	add	r0, sp, #8
   d74c0:	f7ff ff4f 	bl	d7362 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d74c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d74c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d74cc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d74ce:	a906      	add	r1, sp, #24
   d74d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d74d2:	60e3      	str	r3, [r4, #12]
   d74d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d74d8:	9205      	str	r2, [sp, #20]
   d74da:	f7ff feab 	bl	d7234 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d74de:	4b08      	ldr	r3, [pc, #32]	; (d7500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d74e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74e2:	4b08      	ldr	r3, [pc, #32]	; (d7504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74e4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d74e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d74e8:	a806      	add	r0, sp, #24
   d74ea:	f7ff feb0 	bl	d724e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d74ee:	a802      	add	r0, sp, #8
   d74f0:	f7fe fee2 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d74f4:	2200      	movs	r2, #0
   d74f6:	4629      	mov	r1, r5
   d74f8:	4803      	ldr	r0, [pc, #12]	; (d7508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d74fa:	f7ff fc83 	bl	d6e04 <application_thread_invoke>
   d74fe:	e7b7      	b.n	d7470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7500:	000d7399 	.word	0x000d7399
   d7504:	000d7631 	.word	0x000d7631
   d7508:	000d7103 	.word	0x000d7103

000d750c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7510:	b08a      	sub	sp, #40	; 0x28
   d7512:	4605      	mov	r5, r0
   d7514:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7518:	460c      	mov	r4, r1
   d751a:	4617      	mov	r7, r2
   d751c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d751e:	f7ff fcd1 	bl	d6ec4 <spark_cloud_flag_connected>
   d7522:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7524:	4682      	mov	sl, r0
   d7526:	bb38      	cbnz	r0, d7578 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7528:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d752c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d752e:	a905      	add	r1, sp, #20
   d7530:	4630      	mov	r0, r6
   d7532:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7536:	f7ff fe7d 	bl	d7234 <_ZN8particle5ErrorC1EOS0_>
   d753a:	2014      	movs	r0, #20
   d753c:	f7fc fdab 	bl	d4096 <_Znwj>
   d7540:	4604      	mov	r4, r0
   d7542:	b148      	cbz	r0, d7558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7544:	2302      	movs	r3, #2
   d7546:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7548:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d754a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d754e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7550:	4631      	mov	r1, r6
   d7552:	300c      	adds	r0, #12
   d7554:	f7ff fe6e 	bl	d7234 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7558:	4628      	mov	r0, r5
	: __shared_count(__p)
   d755a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d755c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7560:	f7ff ff32 	bl	d73c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7564:	4630      	mov	r0, r6
   d7566:	f7ff fe72 	bl	d724e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d756a:	a805      	add	r0, sp, #20
   d756c:	f7ff fe6f 	bl	d724e <_ZN8particle5ErrorD1Ev>
}
   d7570:	4628      	mov	r0, r5
   d7572:	b00a      	add	sp, #40	; 0x28
   d7574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7578:	230c      	movs	r3, #12
   d757a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d757e:	2014      	movs	r0, #20
   d7580:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7584:	9307      	str	r3, [sp, #28]
   d7586:	f7fc fd86 	bl	d4096 <_Znwj>
   d758a:	4601      	mov	r1, r0
   d758c:	b128      	cbz	r0, d759a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d758e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7592:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7596:	f880 a001 	strb.w	sl, [r0, #1]
   d759a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d759c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d759e:	f7ff ff13 	bl	d73c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d75a2:	4b22      	ldr	r3, [pc, #136]	; (d762c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d75a4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d75a6:	2008      	movs	r0, #8
   d75a8:	f7fc fd75 	bl	d4096 <_Znwj>
   d75ac:	4682      	mov	sl, r0
   d75ae:	b128      	cbz	r0, d75bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d75b0:	9b03      	ldr	r3, [sp, #12]
   d75b2:	f840 3b04 	str.w	r3, [r0], #4
   d75b6:	a904      	add	r1, sp, #16
   d75b8:	f7ff fdc7 	bl	d714a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75bc:	9600      	str	r6, [sp, #0]
   d75be:	fa5f f389 	uxtb.w	r3, r9
   d75c2:	4642      	mov	r2, r8
   d75c4:	4639      	mov	r1, r7
   d75c6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d75c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75cc:	f7ff fc8a 	bl	d6ee4 <spark_send_event>
   d75d0:	b9b8      	cbnz	r0, d7602 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d75d2:	9b03      	ldr	r3, [sp, #12]
   d75d4:	785b      	ldrb	r3, [r3, #1]
   d75d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d75da:	b993      	cbnz	r3, d7602 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d75dc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d75e0:	a905      	add	r1, sp, #20
   d75e2:	a803      	add	r0, sp, #12
   d75e4:	9205      	str	r2, [sp, #20]
   d75e6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d75ea:	f7ff ff11 	bl	d7410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d75ee:	a805      	add	r0, sp, #20
   d75f0:	f7ff fe2d 	bl	d724e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d75f4:	a805      	add	r0, sp, #20
   d75f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d75f8:	f7ff fe94 	bl	d7324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d75fc:	a806      	add	r0, sp, #24
   d75fe:	f7ff fdab 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7602:	9b03      	ldr	r3, [sp, #12]
   d7604:	9305      	str	r3, [sp, #20]
   d7606:	a904      	add	r1, sp, #16
   d7608:	a806      	add	r0, sp, #24
   d760a:	f7ff fd9e 	bl	d714a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d760e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7610:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7612:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7614:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7616:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7618:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d761a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d761c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d761e:	f7ff fd9b 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7622:	a804      	add	r0, sp, #16
   d7624:	f7ff fd98 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7628:	e7a2      	b.n	d7570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d762a:	bf00      	nop
   d762c:	000d76f5 	.word	0x000d76f5

000d7630 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7630:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7634:	4605      	mov	r5, r0
	  switch (__op)
   d7636:	d007      	beq.n	d7648 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7638:	2a03      	cmp	r2, #3
   d763a:	d018      	beq.n	d766e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d763c:	2a01      	cmp	r2, #1
   d763e:	d101      	bne.n	d7644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7640:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7642:	6003      	str	r3, [r0, #0]
	}
   d7644:	2000      	movs	r0, #0
   d7646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7648:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d764a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d764c:	f7fc fd23 	bl	d4096 <_Znwj>
   d7650:	4604      	mov	r4, r0
   d7652:	b150      	cbz	r0, d766a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7654:	4631      	mov	r1, r6
   d7656:	f7ff fecb 	bl	d73f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d765a:	6930      	ldr	r0, [r6, #16]
   d765c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7660:	b108      	cbz	r0, d7666 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7662:	f001 fd65 	bl	d9130 <strdup>
        type_(type) {
   d7666:	6120      	str	r0, [r4, #16]
   d7668:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d766a:	602c      	str	r4, [r5, #0]
	}
   d766c:	e7ea      	b.n	d7644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d766e:	6804      	ldr	r4, [r0, #0]
   d7670:	2c00      	cmp	r4, #0
   d7672:	d0e7      	beq.n	d7644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7674:	f104 0010 	add.w	r0, r4, #16
   d7678:	f7ff fde9 	bl	d724e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d767c:	4620      	mov	r0, r4
   d767e:	f7fe fe1b 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7682:	2118      	movs	r1, #24
   d7684:	4620      	mov	r0, r4
   d7686:	f001 f883 	bl	d8790 <_ZdlPvj>
   d768a:	e7db      	b.n	d7644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d768c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d768c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d768e:	2300      	movs	r3, #0
   d7690:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7692:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7694:	4604      	mov	r4, r0
   d7696:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7698:	b12b      	cbz	r3, d76a6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d769a:	2202      	movs	r2, #2
   d769c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d769e:	68eb      	ldr	r3, [r5, #12]
   d76a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d76a2:	68ab      	ldr	r3, [r5, #8]
   d76a4:	60a3      	str	r3, [r4, #8]
    }
   d76a6:	4620      	mov	r0, r4
   d76a8:	bd38      	pop	{r3, r4, r5, pc}

000d76aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d76aa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d76ac:	b570      	push	{r4, r5, r6, lr}
   d76ae:	4604      	mov	r4, r0
	  switch (__op)
   d76b0:	d007      	beq.n	d76c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d76b2:	2a03      	cmp	r2, #3
   d76b4:	d012      	beq.n	d76dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d76b6:	2a01      	cmp	r2, #1
   d76b8:	d101      	bne.n	d76be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d76ba:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d76bc:	6003      	str	r3, [r0, #0]
	}
   d76be:	2000      	movs	r0, #0
   d76c0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d76c2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d76c4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d76c6:	f7fc fce6 	bl	d4096 <_Znwj>
   d76ca:	4605      	mov	r5, r0
   d76cc:	b120      	cbz	r0, d76d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d76ce:	4631      	mov	r1, r6
   d76d0:	f7ff ffdc 	bl	d768c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d76d4:	7c33      	ldrb	r3, [r6, #16]
   d76d6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d76d8:	6025      	str	r5, [r4, #0]
	}
   d76da:	e7f0      	b.n	d76be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d76dc:	6804      	ldr	r4, [r0, #0]
   d76de:	2c00      	cmp	r4, #0
   d76e0:	d0ed      	beq.n	d76be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d76e2:	4620      	mov	r0, r4
   d76e4:	f7fe fde8 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d76e8:	2114      	movs	r1, #20
   d76ea:	4620      	mov	r0, r4
   d76ec:	f001 f850 	bl	d8790 <_ZdlPvj>
   d76f0:	e7e5      	b.n	d76be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d76f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d76f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d76f6:	b089      	sub	sp, #36	; 0x24
   d76f8:	4604      	mov	r4, r0
   d76fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d76fc:	a801      	add	r0, sp, #4
   d76fe:	4611      	mov	r1, r2
   d7700:	f7ff fe10 	bl	d7324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7704:	b1a4      	cbz	r4, d7730 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7706:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7708:	b11d      	cbz	r5, d7712 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d770a:	4628      	mov	r0, r5
   d770c:	f001 fd10 	bl	d9130 <strdup>
   d7710:	4605      	mov	r5, r0
   d7712:	a801      	add	r0, sp, #4
   d7714:	a903      	add	r1, sp, #12
        type_(type) {
   d7716:	9503      	str	r5, [sp, #12]
   d7718:	f8ad 4010 	strh.w	r4, [sp, #16]
   d771c:	f7ff fe78 	bl	d7410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7720:	a803      	add	r0, sp, #12
   d7722:	f7ff fd94 	bl	d724e <_ZN8particle5ErrorD1Ev>
   d7726:	a802      	add	r0, sp, #8
   d7728:	f7ff fd16 	bl	d7158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d772c:	b009      	add	sp, #36	; 0x24
   d772e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7730:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7732:	2301      	movs	r3, #1
   d7734:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7738:	2a00      	cmp	r2, #0
   d773a:	d103      	bne.n	d7744 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d773c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7740:	2900      	cmp	r1, #0
   d7742:	d1f7      	bne.n	d7734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7744:	d1ef      	bne.n	d7726 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7746:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7748:	f3bf 8f5b 	dmb	ish
   d774c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d774e:	1d2b      	adds	r3, r5, #4
   d7750:	f3bf 8f5b 	dmb	ish
   d7754:	e853 6f00 	ldrex	r6, [r3]
   d7758:	e843 4200 	strex	r2, r4, [r3]
   d775c:	2a00      	cmp	r2, #0
   d775e:	d1f9      	bne.n	d7754 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7760:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7764:	2e00      	cmp	r6, #0
   d7766:	d0de      	beq.n	d7726 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7768:	4620      	mov	r0, r4
   d776a:	f7ff fb43 	bl	d6df4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d776e:	4607      	mov	r7, r0
   d7770:	b160      	cbz	r0, d778c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7772:	f105 010c 	add.w	r1, r5, #12
   d7776:	4630      	mov	r0, r6
   d7778:	f7ff fe15 	bl	d73a6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d777c:	4630      	mov	r0, r6
   d777e:	f7fe fd9b 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7782:	2110      	movs	r1, #16
   d7784:	4630      	mov	r0, r6
   d7786:	f001 f803 	bl	d8790 <_ZdlPvj>
   d778a:	e7cc      	b.n	d7726 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d778c:	4631      	mov	r1, r6
   d778e:	a803      	add	r0, sp, #12
   d7790:	f7ff ff7c 	bl	d768c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7794:	7b2b      	ldrb	r3, [r5, #12]
   d7796:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d779a:	2010      	movs	r0, #16
   d779c:	f7fc fc7b 	bl	d4096 <_Znwj>
   d77a0:	4605      	mov	r5, r0
   d77a2:	b1d0      	cbz	r0, d77da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d77a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d77a6:	2014      	movs	r0, #20
   d77a8:	f7fc fc75 	bl	d4096 <_Znwj>
   d77ac:	4604      	mov	r4, r0
   d77ae:	b178      	cbz	r0, d77d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d77b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d77b2:	4601      	mov	r1, r0
   d77b4:	a803      	add	r0, sp, #12
   d77b6:	f7ff fdd4 	bl	d7362 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d77bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d77be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d77c2:	9205      	str	r2, [sp, #20]
   d77c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d77c6:	60e3      	str	r3, [r4, #12]
   d77c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d77cc:	9206      	str	r2, [sp, #24]
   d77ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d77d0:	4b06      	ldr	r3, [pc, #24]	; (d77ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d77d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d77d4:	4b06      	ldr	r3, [pc, #24]	; (d77f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d77d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d77d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d77da:	a803      	add	r0, sp, #12
   d77dc:	f7fe fd6c 	bl	d62b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d77e0:	2200      	movs	r2, #0
   d77e2:	4629      	mov	r1, r5
   d77e4:	4803      	ldr	r0, [pc, #12]	; (d77f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d77e6:	f7ff fb0d 	bl	d6e04 <application_thread_invoke>
   d77ea:	e7c7      	b.n	d777c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d77ec:	000d73b9 	.word	0x000d73b9
   d77f0:	000d76ab 	.word	0x000d76ab
   d77f4:	000d7103 	.word	0x000d7103

000d77f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d77f8:	2200      	movs	r2, #0
   d77fa:	6840      	ldr	r0, [r0, #4]
   d77fc:	4611      	mov	r1, r2
   d77fe:	f7ff bbe9 	b.w	d6fd4 <network_listening>

000d7802 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7802:	2200      	movs	r2, #0
   d7804:	6840      	ldr	r0, [r0, #4]
   d7806:	4611      	mov	r1, r2
   d7808:	f7ff bbf4 	b.w	d6ff4 <network_get_listen_timeout>

000d780c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d780c:	6840      	ldr	r0, [r0, #4]
   d780e:	2200      	movs	r2, #0
   d7810:	f7ff bbe8 	b.w	d6fe4 <network_set_listen_timeout>

000d7814 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7814:	6840      	ldr	r0, [r0, #4]
   d7816:	2200      	movs	r2, #0
   d7818:	f081 0101 	eor.w	r1, r1, #1
   d781c:	f7ff bbd2 	b.w	d6fc4 <network_listen>

000d7820 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7820:	2300      	movs	r3, #0
   d7822:	6840      	ldr	r0, [r0, #4]
   d7824:	461a      	mov	r2, r3
   d7826:	4619      	mov	r1, r3
   d7828:	f7ff bbc4 	b.w	d6fb4 <network_off>

000d782c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d782c:	2300      	movs	r3, #0
   d782e:	6840      	ldr	r0, [r0, #4]
   d7830:	461a      	mov	r2, r3
   d7832:	4619      	mov	r1, r3
   d7834:	f7ff bbb6 	b.w	d6fa4 <network_on>

000d7838 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7838:	2200      	movs	r2, #0
   d783a:	6840      	ldr	r0, [r0, #4]
   d783c:	4611      	mov	r1, r2
   d783e:	f7ff bba9 	b.w	d6f94 <network_ready>

000d7842 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7842:	2200      	movs	r2, #0
   d7844:	6840      	ldr	r0, [r0, #4]
   d7846:	4611      	mov	r1, r2
   d7848:	f7ff bb94 	b.w	d6f74 <network_connecting>

000d784c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d784c:	6840      	ldr	r0, [r0, #4]
   d784e:	2200      	movs	r2, #0
   d7850:	2102      	movs	r1, #2
   d7852:	f7ff bb97 	b.w	d6f84 <network_disconnect>

000d7856 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7856:	2300      	movs	r3, #0
   d7858:	6840      	ldr	r0, [r0, #4]
   d785a:	461a      	mov	r2, r3
   d785c:	f7ff bb82 	b.w	d6f64 <network_connect>

000d7860 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7860:	4b02      	ldr	r3, [pc, #8]	; (d786c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7862:	2203      	movs	r2, #3
   d7864:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7866:	4a02      	ldr	r2, [pc, #8]	; (d7870 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7868:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d786a:	4770      	bx	lr
   d786c:	2003e574 	.word	0x2003e574
   d7870:	000d9a48 	.word	0x000d9a48

000d7874 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7874:	4770      	bx	lr

000d7876 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7878:	4606      	mov	r6, r0
   d787a:	4615      	mov	r5, r2
   d787c:	460c      	mov	r4, r1
   d787e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7880:	42bc      	cmp	r4, r7
   d7882:	d006      	beq.n	d7892 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7884:	6833      	ldr	r3, [r6, #0]
   d7886:	f814 1b01 	ldrb.w	r1, [r4], #1
   d788a:	689b      	ldr	r3, [r3, #8]
   d788c:	4630      	mov	r0, r6
   d788e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7890:	e7f6      	b.n	d7880 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7892:	4628      	mov	r0, r5
   d7894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7896 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7896:	7c00      	ldrb	r0, [r0, #16]
   d7898:	2200      	movs	r2, #0
   d789a:	f7ff b981 	b.w	d6ba0 <hal_i2c_write>

000d789e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d789e:	7c00      	ldrb	r0, [r0, #16]
   d78a0:	2100      	movs	r1, #0
   d78a2:	f7ff b985 	b.w	d6bb0 <hal_i2c_available>

000d78a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d78a6:	7c00      	ldrb	r0, [r0, #16]
   d78a8:	2100      	movs	r1, #0
   d78aa:	f7ff b989 	b.w	d6bc0 <hal_i2c_read>

000d78ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d78ae:	7c00      	ldrb	r0, [r0, #16]
   d78b0:	2100      	movs	r1, #0
   d78b2:	f7ff b98d 	b.w	d6bd0 <hal_i2c_peek>

000d78b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d78b6:	7c00      	ldrb	r0, [r0, #16]
   d78b8:	2100      	movs	r1, #0
   d78ba:	f7ff b991 	b.w	d6be0 <hal_i2c_flush>

000d78be <_ZN7TwoWireD0Ev>:
   d78be:	b510      	push	{r4, lr}
   d78c0:	2114      	movs	r1, #20
   d78c2:	4604      	mov	r4, r0
   d78c4:	f000 ff64 	bl	d8790 <_ZdlPvj>
   d78c8:	4620      	mov	r0, r4
   d78ca:	bd10      	pop	{r4, pc}

000d78cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d78cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d78ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78d2:	4604      	mov	r4, r0
   d78d4:	4608      	mov	r0, r1
   d78d6:	2100      	movs	r1, #0
   d78d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78dc:	4b03      	ldr	r3, [pc, #12]	; (d78ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d78de:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d78e0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d78e2:	4611      	mov	r1, r2
   d78e4:	f7ff f98c 	bl	d6c00 <hal_i2c_init>
}
   d78e8:	4620      	mov	r0, r4
   d78ea:	bd10      	pop	{r4, pc}
   d78ec:	000d9a84 	.word	0x000d9a84

000d78f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d78f0:	2300      	movs	r3, #0
   d78f2:	7c00      	ldrb	r0, [r0, #16]
   d78f4:	461a      	mov	r2, r3
   d78f6:	4619      	mov	r1, r3
   d78f8:	f7ff b93a 	b.w	d6b70 <hal_i2c_begin>

000d78fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d78fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d78fe:	2200      	movs	r2, #0
   d7900:	2314      	movs	r3, #20
   d7902:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7906:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d790a:	780b      	ldrb	r3, [r1, #0]
   d790c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7910:	684b      	ldr	r3, [r1, #4]
   d7912:	9303      	str	r3, [sp, #12]
   d7914:	68cb      	ldr	r3, [r1, #12]
   d7916:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7918:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d791a:	7a0b      	ldrb	r3, [r1, #8]
   d791c:	9305      	str	r3, [sp, #20]
   d791e:	a901      	add	r1, sp, #4
   d7920:	f7ff f986 	bl	d6c30 <hal_i2c_request_ex>
}
   d7924:	b007      	add	sp, #28
   d7926:	f85d fb04 	ldr.w	pc, [sp], #4

000d792a <_ZN7TwoWire11requestFromEhjh>:
{
   d792a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d792c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d792e:	f88d 1000 	strb.w	r1, [sp]
   d7932:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7936:	9103      	str	r1, [sp, #12]
   d7938:	bf18      	it	ne
   d793a:	2301      	movne	r3, #1
   d793c:	4669      	mov	r1, sp
    size_ = size;
   d793e:	9201      	str	r2, [sp, #4]
   d7940:	f88d 3008 	strb.w	r3, [sp, #8]
   d7944:	f7ff ffda 	bl	d78fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7948:	b005      	add	sp, #20
   d794a:	f85d fb04 	ldr.w	pc, [sp], #4

000d794e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d794e:	2301      	movs	r3, #1
   d7950:	f7ff bfeb 	b.w	d792a <_ZN7TwoWire11requestFromEhjh>

000d7954 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7954:	7c00      	ldrb	r0, [r0, #16]
   d7956:	2200      	movs	r2, #0
   d7958:	f7ff b912 	b.w	d6b80 <hal_i2c_begin_transmission>

000d795c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d795c:	b2c9      	uxtb	r1, r1
   d795e:	f7ff bff9 	b.w	d7954 <_ZN7TwoWire17beginTransmissionEh>

000d7962 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7962:	7c00      	ldrb	r0, [r0, #16]
   d7964:	2200      	movs	r2, #0
   d7966:	f7ff b913 	b.w	d6b90 <hal_i2c_end_transmission>

000d796a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d796a:	2101      	movs	r1, #1
   d796c:	f7ff bff9 	b.w	d7962 <_ZN7TwoWire15endTransmissionEh>

000d7970 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7970:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7972:	2100      	movs	r1, #0
   d7974:	7c00      	ldrb	r0, [r0, #16]
   d7976:	f7ff f94b 	bl	d6c10 <hal_i2c_lock>
}
   d797a:	fab0 f080 	clz	r0, r0
   d797e:	0940      	lsrs	r0, r0, #5
   d7980:	bd08      	pop	{r3, pc}

000d7982 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7982:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7984:	2100      	movs	r1, #0
   d7986:	7c00      	ldrb	r0, [r0, #16]
   d7988:	f7ff f94a 	bl	d6c20 <hal_i2c_unlock>
}
   d798c:	fab0 f080 	clz	r0, r0
   d7990:	0940      	lsrs	r0, r0, #5
   d7992:	bd08      	pop	{r3, pc}

000d7994 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7994:	4700      	bx	r0
	...

000d7998 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7998:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d799c:	2400      	movs	r4, #0
{
   d799e:	461d      	mov	r5, r3
   d79a0:	460f      	mov	r7, r1
   d79a2:	4690      	mov	r8, r2
   d79a4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d79a6:	f7ff f8d3 	bl	d6b50 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d79aa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d79ac:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d79b0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d79b4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d79b8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d79bc:	bfa2      	ittt	ge
   d79be:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d79c2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d79c6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d79c8:	4907      	ldr	r1, [pc, #28]	; (d79e8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d79ca:	9400      	str	r4, [sp, #0]
   d79cc:	4643      	mov	r3, r8
   d79ce:	463a      	mov	r2, r7
   d79d0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d79d2:	bfa8      	it	ge
   d79d4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d79d8:	f7ff f8b2 	bl	d6b40 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d79dc:	fab0 f080 	clz	r0, r0
   d79e0:	0940      	lsrs	r0, r0, #5
   d79e2:	b004      	add	sp, #16
   d79e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d79e8:	000d7995 	.word	0x000d7995

000d79ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d79ec:	4770      	bx	lr

000d79ee <_ZN9IPAddressD0Ev>:
   d79ee:	b510      	push	{r4, lr}
   d79f0:	2118      	movs	r1, #24
   d79f2:	4604      	mov	r4, r0
   d79f4:	f000 fecc 	bl	d8790 <_ZdlPvj>
   d79f8:	4620      	mov	r0, r4
   d79fa:	bd10      	pop	{r4, pc}

000d79fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d79fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d79fe:	7d03      	ldrb	r3, [r0, #20]
   d7a00:	2b06      	cmp	r3, #6
{
   d7a02:	b08d      	sub	sp, #52	; 0x34
   d7a04:	460e      	mov	r6, r1
   d7a06:	f100 0704 	add.w	r7, r0, #4
   d7a0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7a0e:	d012      	beq.n	d7a36 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7a10:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7a14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a18:	220a      	movs	r2, #10
   d7a1a:	4630      	mov	r0, r6
   d7a1c:	f000 f93b 	bl	d7c96 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7a24:	d019      	beq.n	d7a5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7a26:	2c00      	cmp	r4, #0
   d7a28:	d0f4      	beq.n	d7a14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7a2a:	212e      	movs	r1, #46	; 0x2e
   d7a2c:	4630      	mov	r0, r6
   d7a2e:	f000 f92f 	bl	d7c90 <_ZN5Print5printEc>
   d7a32:	4404      	add	r4, r0
   d7a34:	e7ee      	b.n	d7a14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a36:	232f      	movs	r3, #47	; 0x2f
   d7a38:	466a      	mov	r2, sp
   d7a3a:	4639      	mov	r1, r7
   d7a3c:	200a      	movs	r0, #10
		buf[0] = 0;
   d7a3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a42:	f7ff f8fd 	bl	d6c40 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7a46:	4668      	mov	r0, sp
   d7a48:	f001 fb8f 	bl	d916a <strlen>
   d7a4c:	6833      	ldr	r3, [r6, #0]
   d7a4e:	4602      	mov	r2, r0
   d7a50:	68db      	ldr	r3, [r3, #12]
   d7a52:	4669      	mov	r1, sp
   d7a54:	4630      	mov	r0, r6
   d7a56:	4798      	blx	r3
   d7a58:	4604      	mov	r4, r0
    }
    return n;
}
   d7a5a:	4620      	mov	r0, r4
   d7a5c:	b00d      	add	sp, #52	; 0x34
   d7a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7a60:	b510      	push	{r4, lr}
   d7a62:	4b05      	ldr	r3, [pc, #20]	; (d7a78 <_ZN9IPAddressC1Ev+0x18>)
   d7a64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a66:	2211      	movs	r2, #17
   d7a68:	f840 3b04 	str.w	r3, [r0], #4
   d7a6c:	2100      	movs	r1, #0
   d7a6e:	f001 fb21 	bl	d90b4 <memset>
}
   d7a72:	4620      	mov	r0, r4
   d7a74:	bd10      	pop	{r4, pc}
   d7a76:	bf00      	nop
   d7a78:	000d9aac 	.word	0x000d9aac

000d7a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a7c:	4603      	mov	r3, r0
   d7a7e:	4a07      	ldr	r2, [pc, #28]	; (d7a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a80:	b510      	push	{r4, lr}
   d7a82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7a86:	f101 0210 	add.w	r2, r1, #16
   d7a8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a8e:	f843 4b04 	str.w	r4, [r3], #4
   d7a92:	4291      	cmp	r1, r2
   d7a94:	d1f9      	bne.n	d7a8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a96:	780a      	ldrb	r2, [r1, #0]
   d7a98:	701a      	strb	r2, [r3, #0]
}
   d7a9a:	bd10      	pop	{r4, pc}
   d7a9c:	000d9aac 	.word	0x000d9aac

000d7aa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7aa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7aa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7aa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7aaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7aae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7ab2:	2304      	movs	r3, #4
   d7ab4:	6041      	str	r1, [r0, #4]
   d7ab6:	7503      	strb	r3, [r0, #20]
}
   d7ab8:	bd10      	pop	{r4, pc}

000d7aba <_ZN9IPAddressaSEPKh>:
{
   d7aba:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7abc:	78cb      	ldrb	r3, [r1, #3]
   d7abe:	9300      	str	r3, [sp, #0]
   d7ac0:	788b      	ldrb	r3, [r1, #2]
   d7ac2:	784a      	ldrb	r2, [r1, #1]
   d7ac4:	7809      	ldrb	r1, [r1, #0]
   d7ac6:	f7ff ffeb 	bl	d7aa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7aca:	b002      	add	sp, #8
   d7acc:	bd10      	pop	{r4, pc}
	...

000d7ad0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ad0:	4b01      	ldr	r3, [pc, #4]	; (d7ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7ad2:	4a02      	ldr	r2, [pc, #8]	; (d7adc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7ad4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7ad6:	4770      	bx	lr
   d7ad8:	2003e57c 	.word	0x2003e57c
   d7adc:	000d9ab8 	.word	0x000d9ab8

000d7ae0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	6840      	ldr	r0, [r0, #4]
   d7ae4:	461a      	mov	r2, r3
   d7ae6:	f7ff ba3d 	b.w	d6f64 <network_connect>

000d7aea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7aea:	6840      	ldr	r0, [r0, #4]
   d7aec:	2200      	movs	r2, #0
   d7aee:	2102      	movs	r1, #2
   d7af0:	f7ff ba48 	b.w	d6f84 <network_disconnect>

000d7af4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7af4:	2200      	movs	r2, #0
   d7af6:	6840      	ldr	r0, [r0, #4]
   d7af8:	4611      	mov	r1, r2
   d7afa:	f7ff ba3b 	b.w	d6f74 <network_connecting>

000d7afe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7afe:	2200      	movs	r2, #0
   d7b00:	6840      	ldr	r0, [r0, #4]
   d7b02:	4611      	mov	r1, r2
   d7b04:	f7ff ba46 	b.w	d6f94 <network_ready>

000d7b08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7b08:	2300      	movs	r3, #0
   d7b0a:	6840      	ldr	r0, [r0, #4]
   d7b0c:	461a      	mov	r2, r3
   d7b0e:	4619      	mov	r1, r3
   d7b10:	f7ff ba48 	b.w	d6fa4 <network_on>

000d7b14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7b14:	2300      	movs	r3, #0
   d7b16:	6840      	ldr	r0, [r0, #4]
   d7b18:	461a      	mov	r2, r3
   d7b1a:	4619      	mov	r1, r3
   d7b1c:	f7ff ba4a 	b.w	d6fb4 <network_off>

000d7b20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7b20:	6840      	ldr	r0, [r0, #4]
   d7b22:	2100      	movs	r1, #0
   d7b24:	f7ff ba6e 	b.w	d7004 <network_is_on>

000d7b28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7b28:	6840      	ldr	r0, [r0, #4]
   d7b2a:	2100      	movs	r1, #0
   d7b2c:	f7ff ba72 	b.w	d7014 <network_is_off>

000d7b30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7b30:	6840      	ldr	r0, [r0, #4]
   d7b32:	2200      	movs	r2, #0
   d7b34:	f081 0101 	eor.w	r1, r1, #1
   d7b38:	f7ff ba44 	b.w	d6fc4 <network_listen>

000d7b3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7b3c:	6840      	ldr	r0, [r0, #4]
   d7b3e:	2200      	movs	r2, #0
   d7b40:	f7ff ba50 	b.w	d6fe4 <network_set_listen_timeout>

000d7b44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7b44:	2200      	movs	r2, #0
   d7b46:	6840      	ldr	r0, [r0, #4]
   d7b48:	4611      	mov	r1, r2
   d7b4a:	f7ff ba53 	b.w	d6ff4 <network_get_listen_timeout>

000d7b4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7b4e:	2200      	movs	r2, #0
   d7b50:	6840      	ldr	r0, [r0, #4]
   d7b52:	4611      	mov	r1, r2
   d7b54:	f7ff ba3e 	b.w	d6fd4 <network_listening>

000d7b58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7b5c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7b5e:	b095      	sub	sp, #84	; 0x54
   d7b60:	4616      	mov	r6, r2
   d7b62:	460d      	mov	r5, r1
   d7b64:	4607      	mov	r7, r0
    IPAddress addr;
   d7b66:	f7ff ff7b 	bl	d7a60 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7b6a:	4621      	mov	r1, r4
   d7b6c:	2218      	movs	r2, #24
   d7b6e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7b70:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7b72:	f001 fa9f 	bl	d90b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7b76:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7b78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7b7c:	4621      	mov	r1, r4
   d7b7e:	466b      	mov	r3, sp
   d7b80:	aa0c      	add	r2, sp, #48	; 0x30
   d7b82:	4630      	mov	r0, r6
   d7b84:	f7ff f86c 	bl	d6c60 <netdb_getaddrinfo>
    if (!r) {
   d7b88:	4604      	mov	r4, r0
   d7b8a:	2800      	cmp	r0, #0
   d7b8c:	d146      	bne.n	d7c1c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b8e:	4602      	mov	r2, r0
   d7b90:	2101      	movs	r1, #1
   d7b92:	6868      	ldr	r0, [r5, #4]
   d7b94:	f7ff f9fe 	bl	d6f94 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b98:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b9a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b9c:	4622      	mov	r2, r4
   d7b9e:	6868      	ldr	r0, [r5, #4]
   d7ba0:	f7ff f9f8 	bl	d6f94 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ba4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ba6:	4681      	mov	r9, r0
        bool ok = false;
   d7ba8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7baa:	2e00      	cmp	r6, #0
   d7bac:	d036      	beq.n	d7c1c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7bae:	2900      	cmp	r1, #0
   d7bb0:	d134      	bne.n	d7c1c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7bb2:	6873      	ldr	r3, [r6, #4]
   d7bb4:	2b02      	cmp	r3, #2
   d7bb6:	d003      	beq.n	d7bc0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7bb8:	2b0a      	cmp	r3, #10
   d7bba:	d00b      	beq.n	d7bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7bbc:	69f6      	ldr	r6, [r6, #28]
   d7bbe:	e7f4      	b.n	d7baa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7bc0:	f1b8 0f00 	cmp.w	r8, #0
   d7bc4:	d004      	beq.n	d7bd0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7bc6:	6971      	ldr	r1, [r6, #20]
   d7bc8:	4638      	mov	r0, r7
   d7bca:	3104      	adds	r1, #4
   d7bcc:	f7ff ff75 	bl	d7aba <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7bd0:	4641      	mov	r1, r8
   d7bd2:	e7f3      	b.n	d7bbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7bd4:	f1b9 0f00 	cmp.w	r9, #0
   d7bd8:	d101      	bne.n	d7bde <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7bda:	4649      	mov	r1, r9
   d7bdc:	e7ee      	b.n	d7bbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7bde:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7be0:	2210      	movs	r2, #16
   d7be2:	a801      	add	r0, sp, #4
   d7be4:	f001 fa66 	bl	d90b4 <memset>
                    a.v = 6;
   d7be8:	2306      	movs	r3, #6
   d7bea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7bee:	ad01      	add	r5, sp, #4
   d7bf0:	f104 0308 	add.w	r3, r4, #8
   d7bf4:	3418      	adds	r4, #24
   d7bf6:	6818      	ldr	r0, [r3, #0]
   d7bf8:	6859      	ldr	r1, [r3, #4]
   d7bfa:	462a      	mov	r2, r5
   d7bfc:	c203      	stmia	r2!, {r0, r1}
   d7bfe:	3308      	adds	r3, #8
   d7c00:	42a3      	cmp	r3, r4
   d7c02:	4615      	mov	r5, r2
   d7c04:	d1f7      	bne.n	d7bf6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7c06:	a901      	add	r1, sp, #4
   d7c08:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7c0a:	ad07      	add	r5, sp, #28
   d7c0c:	f7ff ff36 	bl	d7a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c12:	1d3c      	adds	r4, r7, #4
   d7c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c16:	682b      	ldr	r3, [r5, #0]
   d7c18:	7023      	strb	r3, [r4, #0]
   d7c1a:	e7de      	b.n	d7bda <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7c1c:	9800      	ldr	r0, [sp, #0]
   d7c1e:	f7ff f817 	bl	d6c50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7c22:	4638      	mov	r0, r7
   d7c24:	b015      	add	sp, #84	; 0x54
   d7c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7c2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7c2c:	4b02      	ldr	r3, [pc, #8]	; (d7c38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7c2e:	4a03      	ldr	r2, [pc, #12]	; (d7c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7c30:	601a      	str	r2, [r3, #0]
   d7c32:	2200      	movs	r2, #0
   d7c34:	605a      	str	r2, [r3, #4]

} // spark
   d7c36:	4770      	bx	lr
   d7c38:	2003e580 	.word	0x2003e580
   d7c3c:	000d9ac4 	.word	0x000d9ac4

000d7c40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c42:	4606      	mov	r6, r0
   d7c44:	460d      	mov	r5, r1
  size_t n = 0;
   d7c46:	188f      	adds	r7, r1, r2
   d7c48:	2400      	movs	r4, #0
  while (size--) {
   d7c4a:	42bd      	cmp	r5, r7
   d7c4c:	d00c      	beq.n	d7c68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7c4e:	6833      	ldr	r3, [r6, #0]
   d7c50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7c54:	689b      	ldr	r3, [r3, #8]
   d7c56:	4630      	mov	r0, r6
   d7c58:	4798      	blx	r3
     if (chunk>=0)
   d7c5a:	1e03      	subs	r3, r0, #0
   d7c5c:	db01      	blt.n	d7c62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7c5e:	441c      	add	r4, r3
  while (size--) {
   d7c60:	e7f3      	b.n	d7c4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7c62:	2c00      	cmp	r4, #0
   d7c64:	bf08      	it	eq
   d7c66:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7c68:	4620      	mov	r0, r4
   d7c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c6c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7c6c:	b513      	push	{r0, r1, r4, lr}
   d7c6e:	4604      	mov	r4, r0
    }
   d7c70:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7c72:	b159      	cbz	r1, d7c8c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7c74:	9101      	str	r1, [sp, #4]
   d7c76:	f001 fa78 	bl	d916a <strlen>
   d7c7a:	6823      	ldr	r3, [r4, #0]
   d7c7c:	9901      	ldr	r1, [sp, #4]
   d7c7e:	68db      	ldr	r3, [r3, #12]
   d7c80:	4602      	mov	r2, r0
   d7c82:	4620      	mov	r0, r4
    }
   d7c84:	b002      	add	sp, #8
   d7c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7c8a:	4718      	bx	r3
    }
   d7c8c:	b002      	add	sp, #8
   d7c8e:	bd10      	pop	{r4, pc}

000d7c90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7c90:	6803      	ldr	r3, [r0, #0]
   d7c92:	689b      	ldr	r3, [r3, #8]
   d7c94:	4718      	bx	r3

000d7c96 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7c96:	b530      	push	{r4, r5, lr}
   d7c98:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7ca0:	2a01      	cmp	r2, #1
   d7ca2:	bf98      	it	ls
   d7ca4:	220a      	movls	r2, #10
   d7ca6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7ca8:	460d      	mov	r5, r1
   d7caa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7cae:	fb01 5312 	mls	r3, r1, r2, r5
   d7cb2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7cb6:	2b09      	cmp	r3, #9
   d7cb8:	bf94      	ite	ls
   d7cba:	3330      	addls	r3, #48	; 0x30
   d7cbc:	3337      	addhi	r3, #55	; 0x37
   d7cbe:	b2db      	uxtb	r3, r3
  } while(n);
   d7cc0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7cc2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7cc6:	d9ef      	bls.n	d7ca8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7cc8:	4621      	mov	r1, r4
   d7cca:	f7ff ffcf 	bl	d7c6c <_ZN5Print5writeEPKc>
}
   d7cce:	b00b      	add	sp, #44	; 0x2c
   d7cd0:	bd30      	pop	{r4, r5, pc}
	...

000d7cd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7cd4:	4b01      	ldr	r3, [pc, #4]	; (d7cdc <_GLOBAL__sub_I_RGB+0x8>)
   d7cd6:	2200      	movs	r2, #0
   d7cd8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7cda:	4770      	bx	lr
   d7cdc:	2003e588 	.word	0x2003e588

000d7ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	4604      	mov	r4, r0
   d7ce4:	4608      	mov	r0, r1
{
    _spi = spi;
   d7ce6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7ce8:	f7fe ffc2 	bl	d6c70 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7cec:	2300      	movs	r3, #0
   d7cee:	6063      	str	r3, [r4, #4]
}
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	bd10      	pop	{r4, pc}

000d7cf4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7cf4:	b510      	push	{r4, lr}
   d7cf6:	4604      	mov	r4, r0
{
	free(buffer);
   d7cf8:	6800      	ldr	r0, [r0, #0]
   d7cfa:	f7ff f99b 	bl	d7034 <free>
}
   d7cfe:	4620      	mov	r0, r4
   d7d00:	bd10      	pop	{r4, pc}

000d7d02 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7d02:	b510      	push	{r4, lr}
   d7d04:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7d06:	6800      	ldr	r0, [r0, #0]
   d7d08:	b108      	cbz	r0, d7d0e <_ZN6String10invalidateEv+0xc>
   d7d0a:	f7ff f993 	bl	d7034 <free>
	buffer = NULL;
   d7d0e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7d10:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7d14:	6023      	str	r3, [r4, #0]
}
   d7d16:	bd10      	pop	{r4, pc}

000d7d18 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7d18:	b538      	push	{r3, r4, r5, lr}
   d7d1a:	4604      	mov	r4, r0
   d7d1c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7d1e:	6800      	ldr	r0, [r0, #0]
   d7d20:	3101      	adds	r1, #1
   d7d22:	f7ff f98f 	bl	d7044 <realloc>
	if (newbuffer) {
   d7d26:	b110      	cbz	r0, d7d2e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7d28:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7d2c:	2001      	movs	r0, #1
	}
	return 0;
}
   d7d2e:	bd38      	pop	{r3, r4, r5, pc}

000d7d30 <_ZN6String7reserveEj>:
{
   d7d30:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7d32:	6803      	ldr	r3, [r0, #0]
{
   d7d34:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7d36:	b123      	cbz	r3, d7d42 <_ZN6String7reserveEj+0x12>
   d7d38:	6843      	ldr	r3, [r0, #4]
   d7d3a:	428b      	cmp	r3, r1
   d7d3c:	d301      	bcc.n	d7d42 <_ZN6String7reserveEj+0x12>
   d7d3e:	2001      	movs	r0, #1
}
   d7d40:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7d42:	4620      	mov	r0, r4
   d7d44:	f7ff ffe8 	bl	d7d18 <_ZN6String12changeBufferEj>
   d7d48:	2800      	cmp	r0, #0
   d7d4a:	d0f9      	beq.n	d7d40 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7d4c:	68a3      	ldr	r3, [r4, #8]
   d7d4e:	2b00      	cmp	r3, #0
   d7d50:	d1f5      	bne.n	d7d3e <_ZN6String7reserveEj+0xe>
   d7d52:	6822      	ldr	r2, [r4, #0]
   d7d54:	7013      	strb	r3, [r2, #0]
   d7d56:	e7f2      	b.n	d7d3e <_ZN6String7reserveEj+0xe>

000d7d58 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7d5a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7d5c:	4611      	mov	r1, r2
   d7d5e:	9201      	str	r2, [sp, #4]
{
   d7d60:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7d62:	f7ff ffe5 	bl	d7d30 <_ZN6String7reserveEj>
   d7d66:	9a01      	ldr	r2, [sp, #4]
   d7d68:	b928      	cbnz	r0, d7d76 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7d6a:	4620      	mov	r0, r4
   d7d6c:	f7ff ffc9 	bl	d7d02 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7d70:	4620      	mov	r0, r4
   d7d72:	b003      	add	sp, #12
   d7d74:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7d76:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7d78:	4629      	mov	r1, r5
   d7d7a:	6820      	ldr	r0, [r4, #0]
   d7d7c:	f001 f972 	bl	d9064 <memcpy>
	buffer[len] = 0;
   d7d80:	6822      	ldr	r2, [r4, #0]
   d7d82:	68a3      	ldr	r3, [r4, #8]
   d7d84:	2100      	movs	r1, #0
   d7d86:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7d88:	e7f2      	b.n	d7d70 <_ZN6String4copyEPKcj+0x18>

000d7d8a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7d8a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7d8c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7d8e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7d92:	4604      	mov	r4, r0
	len = 0;
   d7d94:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d96:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7d98:	b141      	cbz	r1, d7dac <_ZN6StringC1EPKc+0x22>
   d7d9a:	4608      	mov	r0, r1
   d7d9c:	9101      	str	r1, [sp, #4]
   d7d9e:	f001 f9e4 	bl	d916a <strlen>
   d7da2:	9901      	ldr	r1, [sp, #4]
   d7da4:	4602      	mov	r2, r0
   d7da6:	4620      	mov	r0, r4
   d7da8:	f7ff ffd6 	bl	d7d58 <_ZN6String4copyEPKcj>
}
   d7dac:	4620      	mov	r0, r4
   d7dae:	b002      	add	sp, #8
   d7db0:	bd10      	pop	{r4, pc}

000d7db2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7db2:	4288      	cmp	r0, r1
{
   d7db4:	b510      	push	{r4, lr}
   d7db6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7db8:	d005      	beq.n	d7dc6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7dba:	680b      	ldr	r3, [r1, #0]
   d7dbc:	b12b      	cbz	r3, d7dca <_ZN6StringaSERKS_+0x18>
   d7dbe:	688a      	ldr	r2, [r1, #8]
   d7dc0:	4619      	mov	r1, r3
   d7dc2:	f7ff ffc9 	bl	d7d58 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7dc6:	4620      	mov	r0, r4
   d7dc8:	bd10      	pop	{r4, pc}
	else invalidate();
   d7dca:	f7ff ff9a 	bl	d7d02 <_ZN6String10invalidateEv>
   d7dce:	e7fa      	b.n	d7dc6 <_ZN6StringaSERKS_+0x14>

000d7dd0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7dd0:	b510      	push	{r4, lr}
	buffer = NULL;
   d7dd2:	2300      	movs	r3, #0
String::String(const String &value)
   d7dd4:	4604      	mov	r4, r0
	capacity = 0;
   d7dd6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7dda:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7ddc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7dde:	f7ff ffe8 	bl	d7db2 <_ZN6StringaSERKS_>
}
   d7de2:	4620      	mov	r0, r4
   d7de4:	bd10      	pop	{r4, pc}

000d7de6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7de6:	b570      	push	{r4, r5, r6, lr}
   d7de8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7dea:	460e      	mov	r6, r1
   d7dec:	b909      	cbnz	r1, d7df2 <_ZN6String6concatEPKcj+0xc>
   d7dee:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7df0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7df2:	b16a      	cbz	r2, d7e10 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7df4:	6884      	ldr	r4, [r0, #8]
   d7df6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7df8:	4621      	mov	r1, r4
   d7dfa:	f7ff ff99 	bl	d7d30 <_ZN6String7reserveEj>
   d7dfe:	2800      	cmp	r0, #0
   d7e00:	d0f5      	beq.n	d7dee <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7e02:	6828      	ldr	r0, [r5, #0]
   d7e04:	68ab      	ldr	r3, [r5, #8]
   d7e06:	4631      	mov	r1, r6
   d7e08:	4418      	add	r0, r3
   d7e0a:	f001 f989 	bl	d9120 <strcpy>
	len = newlen;
   d7e0e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7e10:	2001      	movs	r0, #1
   d7e12:	e7ed      	b.n	d7df0 <_ZN6String6concatEPKcj+0xa>

000d7e14 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d7e14:	b513      	push	{r0, r1, r4, lr}
   d7e16:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e18:	b929      	cbnz	r1, d7e26 <_ZplRK15StringSumHelperPKc+0x12>
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	f7ff ff71 	bl	d7d02 <_ZN6String10invalidateEv>
	return a;
}
   d7e20:	4620      	mov	r0, r4
   d7e22:	b002      	add	sp, #8
   d7e24:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e26:	4608      	mov	r0, r1
   d7e28:	9101      	str	r1, [sp, #4]
   d7e2a:	f001 f99e 	bl	d916a <strlen>
   d7e2e:	9901      	ldr	r1, [sp, #4]
   d7e30:	4602      	mov	r2, r0
   d7e32:	4620      	mov	r0, r4
   d7e34:	f7ff ffd7 	bl	d7de6 <_ZN6String6concatEPKcj>
   d7e38:	2800      	cmp	r0, #0
   d7e3a:	d0ee      	beq.n	d7e1a <_ZplRK15StringSumHelperPKc+0x6>
   d7e3c:	e7f0      	b.n	d7e20 <_ZplRK15StringSumHelperPKc+0xc>

000d7e3e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7e3e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7e40:	6882      	ldr	r2, [r0, #8]
   d7e42:	b93a      	cbnz	r2, d7e54 <_ZNK6String6equalsEPKc+0x16>
   d7e44:	b121      	cbz	r1, d7e50 <_ZNK6String6equalsEPKc+0x12>
   d7e46:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7e48:	fab0 f080 	clz	r0, r0
   d7e4c:	0940      	lsrs	r0, r0, #5
   d7e4e:	e000      	b.n	d7e52 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7e50:	2001      	movs	r0, #1
}
   d7e52:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7e54:	6800      	ldr	r0, [r0, #0]
   d7e56:	b909      	cbnz	r1, d7e5c <_ZNK6String6equalsEPKc+0x1e>
   d7e58:	7800      	ldrb	r0, [r0, #0]
   d7e5a:	e7f5      	b.n	d7e48 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7e5c:	f001 f956 	bl	d910c <strcmp>
   d7e60:	e7f2      	b.n	d7e48 <_ZNK6String6equalsEPKc+0xa>

000d7e62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7e62:	b510      	push	{r4, lr}
   d7e64:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7e66:	6800      	ldr	r0, [r0, #0]
   d7e68:	b118      	cbz	r0, d7e72 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7e6a:	f7ff f8e3 	bl	d7034 <free>
            wakeupSource_ = nullptr;
   d7e6e:	2300      	movs	r3, #0
   d7e70:	6023      	str	r3, [r4, #0]
        }
    }
   d7e72:	bd10      	pop	{r4, pc}

000d7e74 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7e74:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7e76:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7e7a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7e7c:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7e7e:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d7e80:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7e84:	f8c0 2006 	str.w	r2, [r0, #6]
   d7e88:	889b      	ldrh	r3, [r3, #4]
   d7e8a:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7e8c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7e8e:	f7ff ffe8 	bl	d7e62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d7e92:	682b      	ldr	r3, [r5, #0]
   d7e94:	b113      	cbz	r3, d7e9c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7e96:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7e98:	2300      	movs	r3, #0
   d7e9a:	602b      	str	r3, [r5, #0]
    }
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	bd38      	pop	{r3, r4, r5, pc}

000d7ea0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7ea0:	b538      	push	{r3, r4, r5, lr}
   d7ea2:	460c      	mov	r4, r1
   d7ea4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7ea6:	f7ff ffdc 	bl	d7e62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d7eaa:	b144      	cbz	r4, d7ebe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d7eac:	8820      	ldrh	r0, [r4, #0]
   d7eae:	f7ff f8b9 	bl	d7024 <malloc>
   d7eb2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7eb4:	b128      	cbz	r0, d7ec2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7eb6:	8822      	ldrh	r2, [r4, #0]
   d7eb8:	4621      	mov	r1, r4
   d7eba:	f001 f8d3 	bl	d9064 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d7ebe:	2000      	movs	r0, #0
    }
   d7ec0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d7ec2:	4801      	ldr	r0, [pc, #4]	; (d7ec8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d7ec4:	e7fc      	b.n	d7ec0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d7ec6:	bf00      	nop
   d7ec8:	fffffefc 	.word	0xfffffefc

000d7ecc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7ecc:	b507      	push	{r0, r1, r2, lr}
   d7ece:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7ed0:	2100      	movs	r1, #0
{
   d7ed2:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7ed4:	9100      	str	r1, [sp, #0]
   d7ed6:	2001      	movs	r0, #1
   d7ed8:	218c      	movs	r1, #140	; 0x8c
   d7eda:	f7fe ffc9 	bl	d6e70 <system_reset>
}
   d7ede:	b003      	add	sp, #12
   d7ee0:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ee4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7ee4:	4601      	mov	r1, r0
    reset(0, flags);
   d7ee6:	2000      	movs	r0, #0
   d7ee8:	f7ff bff0 	b.w	d7ecc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7eec <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7eec:	2000      	movs	r0, #0
   d7eee:	f7ff bff9 	b.w	d7ee4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7ef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ef6:	4d2d      	ldr	r5, [pc, #180]	; (d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7ef8:	7d0b      	ldrb	r3, [r1, #20]
   d7efa:	4604      	mov	r4, r0
   d7efc:	b08b      	sub	sp, #44	; 0x2c
   d7efe:	4608      	mov	r0, r1
   d7f00:	1daf      	adds	r7, r5, #6
   d7f02:	2b00      	cmp	r3, #0
   d7f04:	d038      	beq.n	d7f78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7f06:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7f08:	791b      	ldrb	r3, [r3, #4]
   d7f0a:	2b00      	cmp	r3, #0
   d7f0c:	d034      	beq.n	d7f78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d7f0e:	2200      	movs	r2, #0
    SleepResult() {}
   d7f10:	4b27      	ldr	r3, [pc, #156]	; (d7fb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7f12:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7f14:	a902      	add	r1, sp, #8
   d7f16:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7f18:	9202      	str	r2, [sp, #8]
   d7f1a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d7f1e:	f88d 200e 	strb.w	r2, [sp, #14]
   d7f22:	f7fe ff9b 	bl	d6e5c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7f26:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7f2a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d7f2e:	b200      	sxth	r0, r0
   d7f30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7f34:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7f38:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7f3a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7f3c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7f3e:	4628      	mov	r0, r5
   d7f40:	f7ff ffae 	bl	d7ea0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7f44:	a802      	add	r0, sp, #8
   d7f46:	f7ff ff8c 	bl	d7e62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d7f4a:	2300      	movs	r3, #0
   d7f4c:	6023      	str	r3, [r4, #0]
   d7f4e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7f50:	71a3      	strb	r3, [r4, #6]
   d7f52:	8123      	strh	r3, [r4, #8]
   d7f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7f58:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d7f5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7f5e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7f60:	683b      	ldr	r3, [r7, #0]
   d7f62:	f8c4 3006 	str.w	r3, [r4, #6]
   d7f66:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7f68:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d7f6a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7f6c:	4620      	mov	r0, r4
   d7f6e:	f7ff ff97 	bl	d7ea0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7f72:	4620      	mov	r0, r4
   d7f74:	b00b      	add	sp, #44	; 0x2c
   d7f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d7f78:	2600      	movs	r6, #0
   d7f7a:	2320      	movs	r3, #32
   d7f7c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d7f80:	4b0c      	ldr	r3, [pc, #48]	; (d7fb4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d7f82:	9300      	str	r3, [sp, #0]
   d7f84:	490c      	ldr	r1, [pc, #48]	; (d7fb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d7f86:	4633      	mov	r3, r6
   d7f88:	aa02      	add	r2, sp, #8
   d7f8a:	2032      	movs	r0, #50	; 0x32
   d7f8c:	f7fe fef8 	bl	d6d80 <log_message>
    SleepResult() {}
   d7f90:	4b07      	ldr	r3, [pc, #28]	; (d7fb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7f92:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7f94:	a902      	add	r1, sp, #8
        error_ = error;
   d7f96:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d7f9a:	4804      	ldr	r0, [pc, #16]	; (d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d7f9c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d7f9e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d7fa2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7fa6:	f7ff ff65 	bl	d7e74 <_ZN17SystemSleepResultaSEOS_>
   d7faa:	e7cb      	b.n	d7f44 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d7fac:	2003e598 	.word	0x2003e598
   d7fb0:	ffff0000 	.word	0xffff0000
   d7fb4:	000d9aff 	.word	0x000d9aff
   d7fb8:	000d9af8 	.word	0x000d9af8

000d7fbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7fbc:	4b05      	ldr	r3, [pc, #20]	; (d7fd4 <_GLOBAL__sub_I_System+0x18>)
   d7fbe:	2202      	movs	r2, #2
   d7fc0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d7fc2:	4b05      	ldr	r3, [pc, #20]	; (d7fd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d7fc4:	4a05      	ldr	r2, [pc, #20]	; (d7fdc <_GLOBAL__sub_I_System+0x20>)
   d7fc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7fc8:	2000      	movs	r0, #0
   d7fca:	6018      	str	r0, [r3, #0]
   d7fcc:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7fce:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7fd0:	f7fe bef8 	b.w	d6dc4 <set_system_mode>
   d7fd4:	2003e5a4 	.word	0x2003e5a4
   d7fd8:	2003e598 	.word	0x2003e598
   d7fdc:	ffff0000 	.word	0xffff0000

000d7fe0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7fe4:	4a15      	ldr	r2, [pc, #84]	; (d803c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7fe6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8048 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7fea:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7fee:	18c0      	adds	r0, r0, r3
   d7ff0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7ff4:	4a12      	ldr	r2, [pc, #72]	; (d8040 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7ff6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7ffa:	18c6      	adds	r6, r0, r3
   d7ffc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d8000:	e9d8 2300 	ldrd	r2, r3, [r8]
   d8004:	42bb      	cmp	r3, r7
   d8006:	bf08      	it	eq
   d8008:	42b2      	cmpeq	r2, r6
{
   d800a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d800c:	d013      	beq.n	d8036 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d800e:	a903      	add	r1, sp, #12
   d8010:	4668      	mov	r0, sp
   d8012:	e9cd 6700 	strd	r6, r7, [sp]
   d8016:	f7ff f84d 	bl	d70b4 <localtime_r>
	calendar_time.tm_year += 1900;
   d801a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d801c:	4d09      	ldr	r5, [pc, #36]	; (d8044 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d801e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8022:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8024:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d802a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d802c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d802e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8032:	6823      	ldr	r3, [r4, #0]
   d8034:	602b      	str	r3, [r5, #0]
    }
}
   d8036:	b00c      	add	sp, #48	; 0x30
   d8038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d803c:	2003e5e0 	.word	0x2003e5e0
   d8040:	2003e5d8 	.word	0x2003e5d8
   d8044:	2003e5b0 	.word	0x2003e5b0
   d8048:	2003e5e8 	.word	0x2003e5e8

000d804c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d804c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d804e:	2000      	movs	r0, #0
   d8050:	f7fe ff60 	bl	d6f14 <spark_sync_time_pending>
   d8054:	b128      	cbz	r0, d8062 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8056:	f7fe ff35 	bl	d6ec4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d805a:	f080 0001 	eor.w	r0, r0, #1
   d805e:	b2c0      	uxtb	r0, r0
    }
   d8060:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8062:	2001      	movs	r0, #1
   d8064:	e7fc      	b.n	d8060 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8066 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8068:	4602      	mov	r2, r0
   d806a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d806c:	4668      	mov	r0, sp
    struct timeval tv = {
   d806e:	2100      	movs	r1, #0
    };
   d8070:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8074:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8078:	f7fe fd32 	bl	d6ae0 <hal_rtc_set_time>
   d807c:	4602      	mov	r2, r0
   d807e:	b910      	cbnz	r0, d8086 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8080:	4601      	mov	r1, r0
   d8082:	f7fe fecf 	bl	d6e24 <system_notify_time_changed>
    }
}
   d8086:	b005      	add	sp, #20
   d8088:	f85d fb04 	ldr.w	pc, [sp], #4

000d808c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d808c:	b530      	push	{r4, r5, lr}
   d808e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8090:	4818      	ldr	r0, [pc, #96]	; (d80f4 <_ZN9TimeClass7timeStrEx+0x68>)
   d8092:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8096:	1852      	adds	r2, r2, r1
   d8098:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d809c:	4816      	ldr	r0, [pc, #88]	; (d80f8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d809e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d80a2:	1852      	adds	r2, r2, r1
{
   d80a4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d80a6:	eb40 0303 	adc.w	r3, r0, r3
   d80aa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d80ae:	2224      	movs	r2, #36	; 0x24
   d80b0:	eb0d 0002 	add.w	r0, sp, r2
   d80b4:	2100      	movs	r1, #0
   d80b6:	f000 fffd 	bl	d90b4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d80ba:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d80bc:	a909      	add	r1, sp, #36	; 0x24
   d80be:	4668      	mov	r0, sp
   d80c0:	f7fe fff8 	bl	d70b4 <localtime_r>
    char ascstr[26] = {};
   d80c4:	2216      	movs	r2, #22
   d80c6:	4629      	mov	r1, r5
   d80c8:	a803      	add	r0, sp, #12
   d80ca:	9502      	str	r5, [sp, #8]
   d80cc:	f000 fff2 	bl	d90b4 <memset>
    asctime_r(&calendar_time, ascstr);
   d80d0:	a902      	add	r1, sp, #8
   d80d2:	a809      	add	r0, sp, #36	; 0x24
   d80d4:	f000 ff84 	bl	d8fe0 <asctime_r>
    int len = strlen(ascstr);
   d80d8:	a802      	add	r0, sp, #8
   d80da:	f001 f846 	bl	d916a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d80de:	ab12      	add	r3, sp, #72	; 0x48
   d80e0:	4418      	add	r0, r3
    return String(ascstr);
   d80e2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d80e4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d80e8:	4620      	mov	r0, r4
   d80ea:	f7ff fe4e 	bl	d7d8a <_ZN6StringC1EPKc>
}
   d80ee:	4620      	mov	r0, r4
   d80f0:	b013      	add	sp, #76	; 0x4c
   d80f2:	bd30      	pop	{r4, r5, pc}
   d80f4:	2003e5e0 	.word	0x2003e5e0
   d80f8:	2003e5d8 	.word	0x2003e5d8

000d80fc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d80fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8100:	b0a5      	sub	sp, #148	; 0x94
   d8102:	4607      	mov	r7, r0
   d8104:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8106:	a814      	add	r0, sp, #80	; 0x50
{
   d8108:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d810a:	223f      	movs	r2, #63	; 0x3f
{
   d810c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d810e:	f001 f834 	bl	d917a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8112:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8114:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8116:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d811a:	f001 f826 	bl	d916a <strlen>
   d811e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8120:	bb5d      	cbnz	r5, d817a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d8122:	492a      	ldr	r1, [pc, #168]	; (d81cc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8124:	a803      	add	r0, sp, #12
   d8126:	f000 fffb 	bl	d9120 <strcpy>
   d812a:	ae14      	add	r6, sp, #80	; 0x50
{
   d812c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d812e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d8132:	45ab      	cmp	fp, r5
   d8134:	d936      	bls.n	d81a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8136:	46b1      	mov	r9, r6
   d8138:	f105 0a01 	add.w	sl, r5, #1
   d813c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8140:	2b25      	cmp	r3, #37	; 0x25
   d8142:	d117      	bne.n	d8174 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8144:	7873      	ldrb	r3, [r6, #1]
   d8146:	2b7a      	cmp	r3, #122	; 0x7a
   d8148:	d114      	bne.n	d8174 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d814a:	a803      	add	r0, sp, #12
   d814c:	f001 f80d 	bl	d916a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8150:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d8152:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8154:	1828      	adds	r0, r5, r0
   d8156:	4418      	add	r0, r3
   d8158:	ebab 0205 	sub.w	r2, fp, r5
   d815c:	1cb1      	adds	r1, r6, #2
   d815e:	f000 ff81 	bl	d9064 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8162:	4622      	mov	r2, r4
   d8164:	a903      	add	r1, sp, #12
   d8166:	4630      	mov	r0, r6
   d8168:	f000 ff7c 	bl	d9064 <memcpy>
            len = strlen(format_str);
   d816c:	a814      	add	r0, sp, #80	; 0x50
   d816e:	f000 fffc 	bl	d916a <strlen>
   d8172:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8174:	464e      	mov	r6, r9
   d8176:	4655      	mov	r5, sl
   d8178:	e7d9      	b.n	d812e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d817a:	213c      	movs	r1, #60	; 0x3c
   d817c:	fb95 f3f1 	sdiv	r3, r5, r1
   d8180:	2b00      	cmp	r3, #0
   d8182:	bfb8      	it	lt
   d8184:	425b      	neglt	r3, r3
   d8186:	fbb3 f2f1 	udiv	r2, r3, r1
   d818a:	fb01 3312 	mls	r3, r1, r2, r3
   d818e:	9300      	str	r3, [sp, #0]
   d8190:	4a0f      	ldr	r2, [pc, #60]	; (d81d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d8192:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8196:	2110      	movs	r1, #16
   d8198:	a803      	add	r0, sp, #12
   d819a:	fb95 f3f3 	sdiv	r3, r5, r3
   d819e:	f7fe ff61 	bl	d7064 <snprintf>
   d81a2:	e7c2      	b.n	d812a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d81a4:	2100      	movs	r1, #0
   d81a6:	222e      	movs	r2, #46	; 0x2e
   d81a8:	a808      	add	r0, sp, #32
   d81aa:	9107      	str	r1, [sp, #28]
   d81ac:	f000 ff82 	bl	d90b4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d81b0:	4643      	mov	r3, r8
   d81b2:	aa14      	add	r2, sp, #80	; 0x50
   d81b4:	2132      	movs	r1, #50	; 0x32
   d81b6:	a807      	add	r0, sp, #28
   d81b8:	f7fe ff74 	bl	d70a4 <strftime>
    return String(buf);
   d81bc:	a907      	add	r1, sp, #28
   d81be:	4638      	mov	r0, r7
   d81c0:	f7ff fde3 	bl	d7d8a <_ZN6StringC1EPKc>
}
   d81c4:	4638      	mov	r0, r7
   d81c6:	b025      	add	sp, #148	; 0x94
   d81c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81cc:	000d9b26 	.word	0x000d9b26
   d81d0:	000d9b28 	.word	0x000d9b28

000d81d4 <_ZN9TimeClass6formatExPKc>:
{
   d81d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81d6:	b08d      	sub	sp, #52	; 0x34
   d81d8:	e9cd 2300 	strd	r2, r3, [sp]
   d81dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d81de:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d81e0:	b915      	cbnz	r5, d81e8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d81e2:	4b19      	ldr	r3, [pc, #100]	; (d8248 <_ZN9TimeClass6formatExPKc+0x74>)
   d81e4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d81e6:	b12d      	cbz	r5, d81f4 <_ZN9TimeClass6formatExPKc+0x20>
   d81e8:	4b18      	ldr	r3, [pc, #96]	; (d824c <_ZN9TimeClass6formatExPKc+0x78>)
   d81ea:	4628      	mov	r0, r5
   d81ec:	6819      	ldr	r1, [r3, #0]
   d81ee:	f000 ff8d 	bl	d910c <strcmp>
   d81f2:	b938      	cbnz	r0, d8204 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d81f4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d81f8:	4620      	mov	r0, r4
   d81fa:	f7ff ff47 	bl	d808c <_ZN9TimeClass7timeStrEx>
}
   d81fe:	4620      	mov	r0, r4
   d8200:	b00d      	add	sp, #52	; 0x34
   d8202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d8204:	4e12      	ldr	r6, [pc, #72]	; (d8250 <_ZN9TimeClass6formatExPKc+0x7c>)
   d8206:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d8208:	4f12      	ldr	r7, [pc, #72]	; (d8254 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d820a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d820e:	185b      	adds	r3, r3, r1
   d8210:	9901      	ldr	r1, [sp, #4]
   d8212:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8216:	e9d7 0100 	ldrd	r0, r1, [r7]
   d821a:	181b      	adds	r3, r3, r0
   d821c:	eb41 0202 	adc.w	r2, r1, r2
   d8220:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d8224:	2100      	movs	r1, #0
   d8226:	2224      	movs	r2, #36	; 0x24
   d8228:	a803      	add	r0, sp, #12
   d822a:	f000 ff43 	bl	d90b4 <memset>
    localtime_r(&t, &calendar_time);
   d822e:	a903      	add	r1, sp, #12
   d8230:	4668      	mov	r0, sp
   d8232:	f7fe ff3f 	bl	d70b4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8236:	6832      	ldr	r2, [r6, #0]
   d8238:	683b      	ldr	r3, [r7, #0]
   d823a:	a903      	add	r1, sp, #12
   d823c:	4413      	add	r3, r2
   d823e:	4620      	mov	r0, r4
   d8240:	462a      	mov	r2, r5
   d8242:	f7ff ff5b 	bl	d80fc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8246:	e7da      	b.n	d81fe <_ZN9TimeClass6formatExPKc+0x2a>
   d8248:	2003e5ac 	.word	0x2003e5ac
   d824c:	2003e308 	.word	0x2003e308
   d8250:	2003e5e0 	.word	0x2003e5e0
   d8254:	2003e5d8 	.word	0x2003e5d8

000d8258 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8258:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d825a:	2000      	movs	r0, #0
   d825c:	f7fe fc28 	bl	d6ab0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8260:	4604      	mov	r4, r0
   d8262:	b9a0      	cbnz	r0, d828e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8264:	f7fe fda6 	bl	d6db4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8268:	2801      	cmp	r0, #1
   d826a:	d110      	bne.n	d828e <_ZN9TimeClass7isValidEv+0x36>
   d826c:	4620      	mov	r0, r4
   d826e:	f7fe fdd1 	bl	d6e14 <system_thread_get_state>
   d8272:	b960      	cbnz	r0, d828e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8274:	f7ff feea 	bl	d804c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8278:	b910      	cbnz	r0, d8280 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d827a:	f7fe fe13 	bl	d6ea4 <spark_process>
        while (_while() && !_condition()) {
   d827e:	e7f9      	b.n	d8274 <_ZN9TimeClass7isValidEv+0x1c>
   d8280:	f7ff fee4 	bl	d804c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8288:	2000      	movs	r0, #0
   d828a:	f7fe bc11 	b.w	d6ab0 <hal_rtc_time_is_valid>
}
   d828e:	4620      	mov	r0, r4
   d8290:	bd10      	pop	{r4, pc}

000d8292 <_ZN9TimeClass3nowEv>:
{
   d8292:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8294:	f7ff ffe0 	bl	d8258 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8298:	2210      	movs	r2, #16
   d829a:	2100      	movs	r1, #0
   d829c:	4668      	mov	r0, sp
   d829e:	f000 ff09 	bl	d90b4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d82a2:	2100      	movs	r1, #0
   d82a4:	4668      	mov	r0, sp
   d82a6:	f7fe fc13 	bl	d6ad0 <hal_rtc_get_time>
}
   d82aa:	9800      	ldr	r0, [sp, #0]
   d82ac:	b005      	add	sp, #20
   d82ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d82b4 <_ZN9TimeClass4hourEv>:
{
   d82b4:	b508      	push	{r3, lr}
	return hour(now());
   d82b6:	f7ff ffec 	bl	d8292 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d82ba:	17c1      	asrs	r1, r0, #31
   d82bc:	f7ff fe90 	bl	d7fe0 <_ZL22Refresh_UnixTime_Cachex>
}
   d82c0:	4b01      	ldr	r3, [pc, #4]	; (d82c8 <_ZN9TimeClass4hourEv+0x14>)
   d82c2:	6898      	ldr	r0, [r3, #8]
   d82c4:	bd08      	pop	{r3, pc}
   d82c6:	bf00      	nop
   d82c8:	2003e5b0 	.word	0x2003e5b0

000d82cc <_ZN9TimeClass4yearEv>:
{
   d82cc:	b508      	push	{r3, lr}
	return year(now());
   d82ce:	f7ff ffe0 	bl	d8292 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d82d2:	17c1      	asrs	r1, r0, #31
   d82d4:	f7ff fe84 	bl	d7fe0 <_ZL22Refresh_UnixTime_Cachex>
}
   d82d8:	4b01      	ldr	r3, [pc, #4]	; (d82e0 <_ZN9TimeClass4yearEv+0x14>)
   d82da:	6958      	ldr	r0, [r3, #20]
   d82dc:	bd08      	pop	{r3, pc}
   d82de:	bf00      	nop
   d82e0:	2003e5b0 	.word	0x2003e5b0

000d82e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d82e4:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d82e6:	681a      	ldr	r2, [r3, #0]
   d82e8:	4b02      	ldr	r3, [pc, #8]	; (d82f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d82ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d82ec:	4770      	bx	lr
   d82ee:	bf00      	nop
   d82f0:	2003e308 	.word	0x2003e308
   d82f4:	2003e5ac 	.word	0x2003e5ac

000d82f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d82f8:	4770      	bx	lr

000d82fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d82fa:	7441      	strb	r1, [r0, #17]
}
   d82fc:	4770      	bx	lr

000d82fe <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d82fe:	4770      	bx	lr

000d8300 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8300:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8302:	7c00      	ldrb	r0, [r0, #16]
   d8304:	f7fe fcfc 	bl	d6d00 <hal_usart_available_data_for_write>
}
   d8308:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d830c:	bd08      	pop	{r3, pc}

000d830e <_ZN11USARTSerial9availableEv>:
{
   d830e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8310:	7c00      	ldrb	r0, [r0, #16]
   d8312:	f7fe fccd 	bl	d6cb0 <hal_usart_available>
}
   d8316:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d831a:	bd08      	pop	{r3, pc}

000d831c <_ZN11USARTSerial4peekEv>:
{
   d831c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d831e:	7c00      	ldrb	r0, [r0, #16]
   d8320:	f7fe fcd6 	bl	d6cd0 <hal_usart_peek>
}
   d8324:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8328:	bd08      	pop	{r3, pc}

000d832a <_ZN11USARTSerial4readEv>:
{
   d832a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d832c:	7c00      	ldrb	r0, [r0, #16]
   d832e:	f7fe fcc7 	bl	d6cc0 <hal_usart_read>
}
   d8332:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8336:	bd08      	pop	{r3, pc}

000d8338 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8338:	7c00      	ldrb	r0, [r0, #16]
   d833a:	f7fe bcd1 	b.w	d6ce0 <hal_usart_flush>

000d833e <_ZN11USARTSerial5writeEh>:
{
   d833e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8340:	7c45      	ldrb	r5, [r0, #17]
{
   d8342:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8344:	b12d      	cbz	r5, d8352 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8346:	7c20      	ldrb	r0, [r4, #16]
}
   d8348:	b003      	add	sp, #12
   d834a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d834e:	f7fe bca7 	b.w	d6ca0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8352:	7c00      	ldrb	r0, [r0, #16]
   d8354:	9101      	str	r1, [sp, #4]
   d8356:	f7fe fcd3 	bl	d6d00 <hal_usart_available_data_for_write>
   d835a:	2800      	cmp	r0, #0
   d835c:	9901      	ldr	r1, [sp, #4]
   d835e:	dcf2      	bgt.n	d8346 <_ZN11USARTSerial5writeEh+0x8>
}
   d8360:	4628      	mov	r0, r5
   d8362:	b003      	add	sp, #12
   d8364:	bd30      	pop	{r4, r5, pc}

000d8366 <_ZN11USARTSerialD0Ev>:
   d8366:	b510      	push	{r4, lr}
   d8368:	2114      	movs	r1, #20
   d836a:	4604      	mov	r4, r0
   d836c:	f000 fa10 	bl	d8790 <_ZdlPvj>
   d8370:	4620      	mov	r0, r4
   d8372:	bd10      	pop	{r4, pc}

000d8374 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8374:	b510      	push	{r4, lr}
   d8376:	f04f 0c00 	mov.w	ip, #0
   d837a:	4604      	mov	r4, r0
   d837c:	4608      	mov	r0, r1
   d837e:	4611      	mov	r1, r2
   d8380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8384:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8388:	4a04      	ldr	r2, [pc, #16]	; (d839c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d838a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d838c:	2201      	movs	r2, #1
  _serial = serial;
   d838e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8390:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8392:	461a      	mov	r2, r3
   d8394:	f7fe fc7c 	bl	d6c90 <hal_usart_init>
}
   d8398:	4620      	mov	r0, r4
   d839a:	bd10      	pop	{r4, pc}
   d839c:	000d9b58 	.word	0x000d9b58

000d83a0 <_Z22__fetch_global_Serial1v>:
{
   d83a0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d83a2:	4c0d      	ldr	r4, [pc, #52]	; (d83d8 <_Z22__fetch_global_Serial1v+0x38>)
   d83a4:	7821      	ldrb	r1, [r4, #0]
   d83a6:	f3bf 8f5b 	dmb	ish
   d83aa:	f011 0101 	ands.w	r1, r1, #1
   d83ae:	d110      	bne.n	d83d2 <_Z22__fetch_global_Serial1v+0x32>
   d83b0:	4620      	mov	r0, r4
   d83b2:	9101      	str	r1, [sp, #4]
   d83b4:	f7fb fe80 	bl	d40b8 <__cxa_guard_acquire>
   d83b8:	9901      	ldr	r1, [sp, #4]
   d83ba:	b150      	cbz	r0, d83d2 <_Z22__fetch_global_Serial1v+0x32>
   d83bc:	4b07      	ldr	r3, [pc, #28]	; (d83dc <_Z22__fetch_global_Serial1v+0x3c>)
   d83be:	4a08      	ldr	r2, [pc, #32]	; (d83e0 <_Z22__fetch_global_Serial1v+0x40>)
   d83c0:	4808      	ldr	r0, [pc, #32]	; (d83e4 <_Z22__fetch_global_Serial1v+0x44>)
   d83c2:	f7ff ffd7 	bl	d8374 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d83c6:	4620      	mov	r0, r4
   d83c8:	f7fb fe7b 	bl	d40c2 <__cxa_guard_release>
   d83cc:	4806      	ldr	r0, [pc, #24]	; (d83e8 <_Z22__fetch_global_Serial1v+0x48>)
   d83ce:	f000 fe2d 	bl	d902c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d83d2:	4804      	ldr	r0, [pc, #16]	; (d83e4 <_Z22__fetch_global_Serial1v+0x44>)
   d83d4:	b002      	add	sp, #8
   d83d6:	bd10      	pop	{r4, pc}
   d83d8:	2003e5f0 	.word	0x2003e5f0
   d83dc:	2003e678 	.word	0x2003e678
   d83e0:	2003e5f4 	.word	0x2003e5f4
   d83e4:	2003e6fc 	.word	0x2003e6fc
   d83e8:	000d82ff 	.word	0x000d82ff

000d83ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83ec:	7441      	strb	r1, [r0, #17]
}
   d83ee:	4770      	bx	lr

000d83f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d83f0:	4770      	bx	lr

000d83f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d83f2:	4770      	bx	lr

000d83f4 <_ZN9USBSerial4readEv>:
{
   d83f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d83f6:	2100      	movs	r1, #0
   d83f8:	7c00      	ldrb	r0, [r0, #16]
   d83fa:	f7fe fca1 	bl	d6d40 <HAL_USB_USART_Receive_Data>
}
   d83fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8402:	bd08      	pop	{r3, pc}

000d8404 <_ZN9USBSerial4peekEv>:
{
   d8404:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8406:	2101      	movs	r1, #1
   d8408:	7c00      	ldrb	r0, [r0, #16]
   d840a:	f7fe fc99 	bl	d6d40 <HAL_USB_USART_Receive_Data>
}
   d840e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8412:	bd08      	pop	{r3, pc}

000d8414 <_ZN9USBSerial17availableForWriteEv>:
{
   d8414:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8416:	7c00      	ldrb	r0, [r0, #16]
   d8418:	f7fe fc8a 	bl	d6d30 <HAL_USB_USART_Available_Data_For_Write>
}
   d841c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8420:	bd08      	pop	{r3, pc}

000d8422 <_ZN9USBSerial9availableEv>:
{
   d8422:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8424:	7c00      	ldrb	r0, [r0, #16]
   d8426:	f7fe fc7b 	bl	d6d20 <HAL_USB_USART_Available_Data>
}
   d842a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d842e:	bd08      	pop	{r3, pc}

000d8430 <_ZN9USBSerial5writeEh>:
{
   d8430:	b513      	push	{r0, r1, r4, lr}
   d8432:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8434:	7c00      	ldrb	r0, [r0, #16]
{
   d8436:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8438:	f7fe fc7a 	bl	d6d30 <HAL_USB_USART_Available_Data_For_Write>
   d843c:	2800      	cmp	r0, #0
   d843e:	9901      	ldr	r1, [sp, #4]
   d8440:	dc01      	bgt.n	d8446 <_ZN9USBSerial5writeEh+0x16>
   d8442:	7c60      	ldrb	r0, [r4, #17]
   d8444:	b120      	cbz	r0, d8450 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8446:	7c20      	ldrb	r0, [r4, #16]
   d8448:	f7fe fc82 	bl	d6d50 <HAL_USB_USART_Send_Data>
   d844c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8450:	b002      	add	sp, #8
   d8452:	bd10      	pop	{r4, pc}

000d8454 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8454:	7c00      	ldrb	r0, [r0, #16]
   d8456:	f7fe bc83 	b.w	d6d60 <HAL_USB_USART_Flush_Data>

000d845a <_ZN9USBSerialD0Ev>:
   d845a:	b510      	push	{r4, lr}
   d845c:	2114      	movs	r1, #20
   d845e:	4604      	mov	r4, r0
   d8460:	f000 f996 	bl	d8790 <_ZdlPvj>
   d8464:	4620      	mov	r0, r4
   d8466:	bd10      	pop	{r4, pc}

000d8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8468:	b510      	push	{r4, lr}
   d846a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d846e:	4604      	mov	r4, r0
   d8470:	4608      	mov	r0, r1
   d8472:	2100      	movs	r1, #0
   d8474:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8478:	4b04      	ldr	r3, [pc, #16]	; (d848c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d847a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d847c:	2301      	movs	r3, #1
  _serial = serial;
   d847e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8480:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8482:	4611      	mov	r1, r2
   d8484:	f7fe fc44 	bl	d6d10 <HAL_USB_USART_Init>
}
   d8488:	4620      	mov	r0, r4
   d848a:	bd10      	pop	{r4, pc}
   d848c:	000d9b88 	.word	0x000d9b88

000d8490 <_Z19acquireSerialBufferv>:
{
   d8490:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8492:	2214      	movs	r2, #20
{
   d8494:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8496:	2100      	movs	r1, #0
   d8498:	f000 fe0c 	bl	d90b4 <memset>
}
   d849c:	4620      	mov	r0, r4
   d849e:	bd10      	pop	{r4, pc}

000d84a0 <_Z16_fetch_usbserialv>:
{
   d84a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84a2:	4c0f      	ldr	r4, [pc, #60]	; (d84e0 <_Z16_fetch_usbserialv+0x40>)
{
   d84a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d84a6:	a803      	add	r0, sp, #12
   d84a8:	f7ff fff2 	bl	d8490 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84ac:	7821      	ldrb	r1, [r4, #0]
   d84ae:	f3bf 8f5b 	dmb	ish
   d84b2:	f011 0101 	ands.w	r1, r1, #1
   d84b6:	d10f      	bne.n	d84d8 <_Z16_fetch_usbserialv+0x38>
   d84b8:	4620      	mov	r0, r4
   d84ba:	9101      	str	r1, [sp, #4]
   d84bc:	f7fb fdfc 	bl	d40b8 <__cxa_guard_acquire>
   d84c0:	9901      	ldr	r1, [sp, #4]
   d84c2:	b148      	cbz	r0, d84d8 <_Z16_fetch_usbserialv+0x38>
   d84c4:	aa03      	add	r2, sp, #12
   d84c6:	4807      	ldr	r0, [pc, #28]	; (d84e4 <_Z16_fetch_usbserialv+0x44>)
   d84c8:	f7ff ffce 	bl	d8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d84cc:	4620      	mov	r0, r4
   d84ce:	f7fb fdf8 	bl	d40c2 <__cxa_guard_release>
   d84d2:	4805      	ldr	r0, [pc, #20]	; (d84e8 <_Z16_fetch_usbserialv+0x48>)
   d84d4:	f000 fdaa 	bl	d902c <atexit>
	return _usbserial;
}
   d84d8:	4802      	ldr	r0, [pc, #8]	; (d84e4 <_Z16_fetch_usbserialv+0x44>)
   d84da:	b008      	add	sp, #32
   d84dc:	bd10      	pop	{r4, pc}
   d84de:	bf00      	nop
   d84e0:	2003e710 	.word	0x2003e710
   d84e4:	2003e714 	.word	0x2003e714
   d84e8:	000d83f1 	.word	0x000d83f1

000d84ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d84ec:	4b01      	ldr	r3, [pc, #4]	; (d84f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d84ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d84f0:	4770      	bx	lr
   d84f2:	bf00      	nop
   d84f4:	2003e30c 	.word	0x2003e30c

000d84f8 <serialEventRun>:
{
   d84f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d84fa:	4b0b      	ldr	r3, [pc, #44]	; (d8528 <serialEventRun+0x30>)
   d84fc:	b143      	cbz	r3, d8510 <serialEventRun+0x18>
   d84fe:	f7ff ffcf 	bl	d84a0 <_Z16_fetch_usbserialv>
   d8502:	6803      	ldr	r3, [r0, #0]
   d8504:	691b      	ldr	r3, [r3, #16]
   d8506:	4798      	blx	r3
   d8508:	2800      	cmp	r0, #0
   d850a:	dd01      	ble.n	d8510 <serialEventRun+0x18>
        serialEvent();
   d850c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8510:	4b06      	ldr	r3, [pc, #24]	; (d852c <serialEventRun+0x34>)
   d8512:	b143      	cbz	r3, d8526 <serialEventRun+0x2e>
   d8514:	f7ff ff44 	bl	d83a0 <_Z22__fetch_global_Serial1v>
   d8518:	6803      	ldr	r3, [r0, #0]
   d851a:	691b      	ldr	r3, [r3, #16]
   d851c:	4798      	blx	r3
   d851e:	2800      	cmp	r0, #0
   d8520:	dd01      	ble.n	d8526 <serialEventRun+0x2e>
        serialEvent1();
   d8522:	f3af 8000 	nop.w
}
   d8526:	bd08      	pop	{r3, pc}
	...

000d8530 <_post_loop>:
{
   d8530:	b508      	push	{r3, lr}
	serialEventRun();
   d8532:	f7ff ffe1 	bl	d84f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8536:	f7fe fab3 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d853a:	4b01      	ldr	r3, [pc, #4]	; (d8540 <_post_loop+0x10>)
   d853c:	6018      	str	r0, [r3, #0]
}
   d853e:	bd08      	pop	{r3, pc}
   d8540:	2003e73c 	.word	0x2003e73c

000d8544 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8544:	4805      	ldr	r0, [pc, #20]	; (d855c <_Z33system_initialize_user_backup_ramv+0x18>)
   d8546:	4a06      	ldr	r2, [pc, #24]	; (d8560 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8548:	4906      	ldr	r1, [pc, #24]	; (d8564 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d854a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d854c:	1a12      	subs	r2, r2, r0
   d854e:	f000 fd89 	bl	d9064 <memcpy>
    __backup_sram_signature = signature;
   d8552:	4b05      	ldr	r3, [pc, #20]	; (d8568 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8554:	4a05      	ldr	r2, [pc, #20]	; (d856c <_Z33system_initialize_user_backup_ramv+0x28>)
   d8556:	601a      	str	r2, [r3, #0]
}
   d8558:	bd08      	pop	{r3, pc}
   d855a:	bf00      	nop
   d855c:	2003f400 	.word	0x2003f400
   d8560:	2003fc04 	.word	0x2003fc04
   d8564:	000d9d40 	.word	0x000d9d40
   d8568:	2003fc00 	.word	0x2003fc00
   d856c:	9a271c1e 	.word	0x9a271c1e

000d8570 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8570:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8572:	2300      	movs	r3, #0
   d8574:	9300      	str	r3, [sp, #0]
   d8576:	461a      	mov	r2, r3
   d8578:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d857c:	f7fe fc64 	bl	d6e48 <system_ctrl_set_result>
}
   d8580:	b003      	add	sp, #12
   d8582:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8588 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8588:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d858a:	8843      	ldrh	r3, [r0, #2]
   d858c:	2b0a      	cmp	r3, #10
   d858e:	d008      	beq.n	d85a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8590:	2b50      	cmp	r3, #80	; 0x50
   d8592:	d10b      	bne.n	d85ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8594:	4b09      	ldr	r3, [pc, #36]	; (d85bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8596:	681b      	ldr	r3, [r3, #0]
   d8598:	b14b      	cbz	r3, d85ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d859a:	b003      	add	sp, #12
   d859c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d85a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d85a2:	f7ff ffe5 	bl	d8570 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d85a6:	b003      	add	sp, #12
   d85a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85ac:	2300      	movs	r3, #0
   d85ae:	9300      	str	r3, [sp, #0]
   d85b0:	461a      	mov	r2, r3
   d85b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85b6:	f7fe fc47 	bl	d6e48 <system_ctrl_set_result>
}
   d85ba:	e7f4      	b.n	d85a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d85bc:	2003e72c 	.word	0x2003e72c

000d85c0 <module_user_init_hook>:
{
   d85c0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d85c2:	4812      	ldr	r0, [pc, #72]	; (d860c <module_user_init_hook+0x4c>)
   d85c4:	2100      	movs	r1, #0
   d85c6:	f7fe fd65 	bl	d7094 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d85ca:	4b11      	ldr	r3, [pc, #68]	; (d8610 <module_user_init_hook+0x50>)
   d85cc:	681a      	ldr	r2, [r3, #0]
   d85ce:	4b11      	ldr	r3, [pc, #68]	; (d8614 <module_user_init_hook+0x54>)
   d85d0:	429a      	cmp	r2, r3
   d85d2:	4b11      	ldr	r3, [pc, #68]	; (d8618 <module_user_init_hook+0x58>)
   d85d4:	bf0c      	ite	eq
   d85d6:	2201      	moveq	r2, #1
   d85d8:	2200      	movne	r2, #0
   d85da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d85dc:	d001      	beq.n	d85e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d85de:	f7ff ffb1 	bl	d8544 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d85e2:	f7fe fa45 	bl	d6a70 <HAL_RNG_GetRandomNumber>
   d85e6:	4604      	mov	r4, r0
    srand(seed);
   d85e8:	f000 fd6c 	bl	d90c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d85ec:	4b0b      	ldr	r3, [pc, #44]	; (d861c <module_user_init_hook+0x5c>)
   d85ee:	b113      	cbz	r3, d85f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d85f0:	4620      	mov	r0, r4
   d85f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d85f6:	2100      	movs	r1, #0
   d85f8:	4808      	ldr	r0, [pc, #32]	; (d861c <module_user_init_hook+0x5c>)
   d85fa:	f7fe fca3 	bl	d6f44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d85fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8602:	4807      	ldr	r0, [pc, #28]	; (d8620 <module_user_init_hook+0x60>)
   d8604:	2100      	movs	r1, #0
   d8606:	f7fe bc15 	b.w	d6e34 <system_ctrl_set_app_request_handler>
   d860a:	bf00      	nop
   d860c:	000d84ed 	.word	0x000d84ed
   d8610:	2003fc00 	.word	0x2003fc00
   d8614:	9a271c1e 	.word	0x9a271c1e
   d8618:	2003e728 	.word	0x2003e728
   d861c:	00000000 	.word	0x00000000
   d8620:	000d8589 	.word	0x000d8589

000d8624 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8624:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8626:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8628:	d902      	bls.n	d8630 <pinAvailable+0xc>
    return false;
   d862a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d862c:	b002      	add	sp, #8
   d862e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8630:	f1a0 030b 	sub.w	r3, r0, #11
   d8634:	2b02      	cmp	r3, #2
   d8636:	d81a      	bhi.n	d866e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8638:	4c17      	ldr	r4, [pc, #92]	; (d8698 <pinAvailable+0x74>)
   d863a:	7821      	ldrb	r1, [r4, #0]
   d863c:	f3bf 8f5b 	dmb	ish
   d8640:	f011 0101 	ands.w	r1, r1, #1
   d8644:	d10b      	bne.n	d865e <pinAvailable+0x3a>
   d8646:	4620      	mov	r0, r4
   d8648:	9101      	str	r1, [sp, #4]
   d864a:	f7fb fd35 	bl	d40b8 <__cxa_guard_acquire>
   d864e:	9901      	ldr	r1, [sp, #4]
   d8650:	b128      	cbz	r0, d865e <pinAvailable+0x3a>
   d8652:	4812      	ldr	r0, [pc, #72]	; (d869c <pinAvailable+0x78>)
   d8654:	f7ff fb44 	bl	d7ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8658:	4620      	mov	r0, r4
   d865a:	f7fb fd32 	bl	d40c2 <__cxa_guard_release>
   d865e:	4b0f      	ldr	r3, [pc, #60]	; (d869c <pinAvailable+0x78>)
   d8660:	7818      	ldrb	r0, [r3, #0]
   d8662:	f7fe fb0d 	bl	d6c80 <hal_spi_is_enabled>
   d8666:	2800      	cmp	r0, #0
   d8668:	d1df      	bne.n	d862a <pinAvailable+0x6>
  return true; // 'pin' is available
   d866a:	2001      	movs	r0, #1
   d866c:	e7de      	b.n	d862c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d866e:	2801      	cmp	r0, #1
   d8670:	d809      	bhi.n	d8686 <pinAvailable+0x62>
   d8672:	f000 f869 	bl	d8748 <_Z19__fetch_global_Wirev>
   d8676:	2100      	movs	r1, #0
   d8678:	7c00      	ldrb	r0, [r0, #16]
   d867a:	f7fe fab9 	bl	d6bf0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d867e:	f080 0001 	eor.w	r0, r0, #1
   d8682:	b2c0      	uxtb	r0, r0
   d8684:	e7d2      	b.n	d862c <pinAvailable+0x8>
   d8686:	3809      	subs	r0, #9
   d8688:	2801      	cmp	r0, #1
   d868a:	d8ee      	bhi.n	d866a <pinAvailable+0x46>
   d868c:	f7ff fe88 	bl	d83a0 <_Z22__fetch_global_Serial1v>
   d8690:	7c00      	ldrb	r0, [r0, #16]
   d8692:	f7fe fb2d 	bl	d6cf0 <hal_usart_is_enabled>
   d8696:	e7f2      	b.n	d867e <pinAvailable+0x5a>
   d8698:	2003e730 	.word	0x2003e730
   d869c:	2003e734 	.word	0x2003e734

000d86a0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86a0:	2823      	cmp	r0, #35	; 0x23
{
   d86a2:	b538      	push	{r3, r4, r5, lr}
   d86a4:	4604      	mov	r4, r0
   d86a6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86a8:	d80a      	bhi.n	d86c0 <pinMode+0x20>
   d86aa:	29ff      	cmp	r1, #255	; 0xff
   d86ac:	d008      	beq.n	d86c0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d86ae:	f7ff ffb9 	bl	d8624 <pinAvailable>
   d86b2:	b128      	cbz	r0, d86c0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d86b4:	4629      	mov	r1, r5
   d86b6:	4620      	mov	r0, r4
}
   d86b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d86bc:	f7fe ba28 	b.w	d6b10 <HAL_Pin_Mode>
}
   d86c0:	bd38      	pop	{r3, r4, r5, pc}

000d86c2 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d86c2:	b510      	push	{r4, lr}
   d86c4:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86c6:	f7fe fa2b 	bl	d6b20 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d86ca:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d86cc:	b2db      	uxtb	r3, r3
   d86ce:	2b01      	cmp	r3, #1
   d86d0:	d908      	bls.n	d86e4 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d86d2:	4620      	mov	r0, r4
   d86d4:	f7ff ffa6 	bl	d8624 <pinAvailable>
   d86d8:	b120      	cbz	r0, d86e4 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86da:	4620      	mov	r0, r4
}
   d86dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d86e0:	f7fe ba26 	b.w	d6b30 <HAL_GPIO_Read>
}
   d86e4:	2000      	movs	r0, #0
   d86e6:	bd10      	pop	{r4, pc}

000d86e8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d86e8:	280d      	cmp	r0, #13
{
   d86ea:	b510      	push	{r4, lr}
   d86ec:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d86ee:	bf9c      	itt	ls
   d86f0:	340e      	addls	r4, #14
   d86f2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d86f4:	4620      	mov	r0, r4
   d86f6:	f7ff ff95 	bl	d8624 <pinAvailable>
   d86fa:	b150      	cbz	r0, d8712 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d86fc:	2103      	movs	r1, #3
   d86fe:	4620      	mov	r0, r4
   d8700:	f7fe f9fe 	bl	d6b00 <HAL_Validate_Pin_Function>
   d8704:	2803      	cmp	r0, #3
   d8706:	d104      	bne.n	d8712 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8708:	4620      	mov	r0, r4
}
   d870a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d870e:	f7fe ba27 	b.w	d6b60 <hal_adc_read>
}
   d8712:	2000      	movs	r0, #0
   d8714:	bd10      	pop	{r4, pc}

000d8716 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8716:	4770      	bx	lr

000d8718 <_Z17acquireWireBufferv>:
{
   d8718:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d871a:	2300      	movs	r3, #0
   d871c:	2520      	movs	r5, #32
   d871e:	8043      	strh	r3, [r0, #2]
   d8720:	2314      	movs	r3, #20
{
   d8722:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8724:	8003      	strh	r3, [r0, #0]
   d8726:	6085      	str	r5, [r0, #8]
   d8728:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d872a:	4906      	ldr	r1, [pc, #24]	; (d8744 <_Z17acquireWireBufferv+0x2c>)
   d872c:	4628      	mov	r0, r5
   d872e:	f000 f833 	bl	d8798 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8732:	4904      	ldr	r1, [pc, #16]	; (d8744 <_Z17acquireWireBufferv+0x2c>)
	};
   d8734:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8736:	4628      	mov	r0, r5
   d8738:	f000 f82e 	bl	d8798 <_ZnajRKSt9nothrow_t>
	};
   d873c:	60e0      	str	r0, [r4, #12]
}
   d873e:	4620      	mov	r0, r4
   d8740:	bd38      	pop	{r3, r4, r5, pc}
   d8742:	bf00      	nop
   d8744:	000d9bb0 	.word	0x000d9bb0

000d8748 <_Z19__fetch_global_Wirev>:
{
   d8748:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d874a:	4d0e      	ldr	r5, [pc, #56]	; (d8784 <_Z19__fetch_global_Wirev+0x3c>)
   d874c:	7829      	ldrb	r1, [r5, #0]
   d874e:	f3bf 8f5b 	dmb	ish
   d8752:	f011 0401 	ands.w	r4, r1, #1
{
   d8756:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8758:	d111      	bne.n	d877e <_Z19__fetch_global_Wirev+0x36>
   d875a:	4628      	mov	r0, r5
   d875c:	f7fb fcac 	bl	d40b8 <__cxa_guard_acquire>
   d8760:	b168      	cbz	r0, d877e <_Z19__fetch_global_Wirev+0x36>
   d8762:	a801      	add	r0, sp, #4
   d8764:	f7ff ffd8 	bl	d8718 <_Z17acquireWireBufferv>
   d8768:	aa01      	add	r2, sp, #4
   d876a:	4621      	mov	r1, r4
   d876c:	4806      	ldr	r0, [pc, #24]	; (d8788 <_Z19__fetch_global_Wirev+0x40>)
   d876e:	f7ff f8ad 	bl	d78cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8772:	4628      	mov	r0, r5
   d8774:	f7fb fca5 	bl	d40c2 <__cxa_guard_release>
   d8778:	4804      	ldr	r0, [pc, #16]	; (d878c <_Z19__fetch_global_Wirev+0x44>)
   d877a:	f000 fc57 	bl	d902c <atexit>
	return wire;
}
   d877e:	4802      	ldr	r0, [pc, #8]	; (d8788 <_Z19__fetch_global_Wirev+0x40>)
   d8780:	b007      	add	sp, #28
   d8782:	bd30      	pop	{r4, r5, pc}
   d8784:	2003e740 	.word	0x2003e740
   d8788:	2003e744 	.word	0x2003e744
   d878c:	000d8717 	.word	0x000d8717

000d8790 <_ZdlPvj>:
   d8790:	f7fb bc85 	b.w	d409e <_ZdlPv>

000d8794 <_ZnwjRKSt9nothrow_t>:
   d8794:	f7fb bc7f 	b.w	d4096 <_Znwj>

000d8798 <_ZnajRKSt9nothrow_t>:
   d8798:	f7fb bc7f 	b.w	d409a <_Znaj>

000d879c <_ZSt25__throw_bad_function_callv>:
   d879c:	b508      	push	{r3, lr}
   d879e:	f7fe fc69 	bl	d7074 <abort>
	...

000d87a4 <__aeabi_drsub>:
   d87a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d87a8:	e002      	b.n	d87b0 <__adddf3>
   d87aa:	bf00      	nop

000d87ac <__aeabi_dsub>:
   d87ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d87b0 <__adddf3>:
   d87b0:	b530      	push	{r4, r5, lr}
   d87b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d87b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d87ba:	ea94 0f05 	teq	r4, r5
   d87be:	bf08      	it	eq
   d87c0:	ea90 0f02 	teqeq	r0, r2
   d87c4:	bf1f      	itttt	ne
   d87c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d87ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d87ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d87d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d87d6:	f000 80e2 	beq.w	d899e <__adddf3+0x1ee>
   d87da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d87de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d87e2:	bfb8      	it	lt
   d87e4:	426d      	neglt	r5, r5
   d87e6:	dd0c      	ble.n	d8802 <__adddf3+0x52>
   d87e8:	442c      	add	r4, r5
   d87ea:	ea80 0202 	eor.w	r2, r0, r2
   d87ee:	ea81 0303 	eor.w	r3, r1, r3
   d87f2:	ea82 0000 	eor.w	r0, r2, r0
   d87f6:	ea83 0101 	eor.w	r1, r3, r1
   d87fa:	ea80 0202 	eor.w	r2, r0, r2
   d87fe:	ea81 0303 	eor.w	r3, r1, r3
   d8802:	2d36      	cmp	r5, #54	; 0x36
   d8804:	bf88      	it	hi
   d8806:	bd30      	pophi	{r4, r5, pc}
   d8808:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d880c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8810:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8814:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8818:	d002      	beq.n	d8820 <__adddf3+0x70>
   d881a:	4240      	negs	r0, r0
   d881c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8820:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8824:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8828:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d882c:	d002      	beq.n	d8834 <__adddf3+0x84>
   d882e:	4252      	negs	r2, r2
   d8830:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8834:	ea94 0f05 	teq	r4, r5
   d8838:	f000 80a7 	beq.w	d898a <__adddf3+0x1da>
   d883c:	f1a4 0401 	sub.w	r4, r4, #1
   d8840:	f1d5 0e20 	rsbs	lr, r5, #32
   d8844:	db0d      	blt.n	d8862 <__adddf3+0xb2>
   d8846:	fa02 fc0e 	lsl.w	ip, r2, lr
   d884a:	fa22 f205 	lsr.w	r2, r2, r5
   d884e:	1880      	adds	r0, r0, r2
   d8850:	f141 0100 	adc.w	r1, r1, #0
   d8854:	fa03 f20e 	lsl.w	r2, r3, lr
   d8858:	1880      	adds	r0, r0, r2
   d885a:	fa43 f305 	asr.w	r3, r3, r5
   d885e:	4159      	adcs	r1, r3
   d8860:	e00e      	b.n	d8880 <__adddf3+0xd0>
   d8862:	f1a5 0520 	sub.w	r5, r5, #32
   d8866:	f10e 0e20 	add.w	lr, lr, #32
   d886a:	2a01      	cmp	r2, #1
   d886c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8870:	bf28      	it	cs
   d8872:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8876:	fa43 f305 	asr.w	r3, r3, r5
   d887a:	18c0      	adds	r0, r0, r3
   d887c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8880:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8884:	d507      	bpl.n	d8896 <__adddf3+0xe6>
   d8886:	f04f 0e00 	mov.w	lr, #0
   d888a:	f1dc 0c00 	rsbs	ip, ip, #0
   d888e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8892:	eb6e 0101 	sbc.w	r1, lr, r1
   d8896:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d889a:	d31b      	bcc.n	d88d4 <__adddf3+0x124>
   d889c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88a0:	d30c      	bcc.n	d88bc <__adddf3+0x10c>
   d88a2:	0849      	lsrs	r1, r1, #1
   d88a4:	ea5f 0030 	movs.w	r0, r0, rrx
   d88a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d88ac:	f104 0401 	add.w	r4, r4, #1
   d88b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d88b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d88b8:	f080 809a 	bcs.w	d89f0 <__adddf3+0x240>
   d88bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d88c0:	bf08      	it	eq
   d88c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d88c6:	f150 0000 	adcs.w	r0, r0, #0
   d88ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d88ce:	ea41 0105 	orr.w	r1, r1, r5
   d88d2:	bd30      	pop	{r4, r5, pc}
   d88d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d88d8:	4140      	adcs	r0, r0
   d88da:	eb41 0101 	adc.w	r1, r1, r1
   d88de:	3c01      	subs	r4, #1
   d88e0:	bf28      	it	cs
   d88e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d88e6:	d2e9      	bcs.n	d88bc <__adddf3+0x10c>
   d88e8:	f091 0f00 	teq	r1, #0
   d88ec:	bf04      	itt	eq
   d88ee:	4601      	moveq	r1, r0
   d88f0:	2000      	moveq	r0, #0
   d88f2:	fab1 f381 	clz	r3, r1
   d88f6:	bf08      	it	eq
   d88f8:	3320      	addeq	r3, #32
   d88fa:	f1a3 030b 	sub.w	r3, r3, #11
   d88fe:	f1b3 0220 	subs.w	r2, r3, #32
   d8902:	da0c      	bge.n	d891e <__adddf3+0x16e>
   d8904:	320c      	adds	r2, #12
   d8906:	dd08      	ble.n	d891a <__adddf3+0x16a>
   d8908:	f102 0c14 	add.w	ip, r2, #20
   d890c:	f1c2 020c 	rsb	r2, r2, #12
   d8910:	fa01 f00c 	lsl.w	r0, r1, ip
   d8914:	fa21 f102 	lsr.w	r1, r1, r2
   d8918:	e00c      	b.n	d8934 <__adddf3+0x184>
   d891a:	f102 0214 	add.w	r2, r2, #20
   d891e:	bfd8      	it	le
   d8920:	f1c2 0c20 	rsble	ip, r2, #32
   d8924:	fa01 f102 	lsl.w	r1, r1, r2
   d8928:	fa20 fc0c 	lsr.w	ip, r0, ip
   d892c:	bfdc      	itt	le
   d892e:	ea41 010c 	orrle.w	r1, r1, ip
   d8932:	4090      	lslle	r0, r2
   d8934:	1ae4      	subs	r4, r4, r3
   d8936:	bfa2      	ittt	ge
   d8938:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d893c:	4329      	orrge	r1, r5
   d893e:	bd30      	popge	{r4, r5, pc}
   d8940:	ea6f 0404 	mvn.w	r4, r4
   d8944:	3c1f      	subs	r4, #31
   d8946:	da1c      	bge.n	d8982 <__adddf3+0x1d2>
   d8948:	340c      	adds	r4, #12
   d894a:	dc0e      	bgt.n	d896a <__adddf3+0x1ba>
   d894c:	f104 0414 	add.w	r4, r4, #20
   d8950:	f1c4 0220 	rsb	r2, r4, #32
   d8954:	fa20 f004 	lsr.w	r0, r0, r4
   d8958:	fa01 f302 	lsl.w	r3, r1, r2
   d895c:	ea40 0003 	orr.w	r0, r0, r3
   d8960:	fa21 f304 	lsr.w	r3, r1, r4
   d8964:	ea45 0103 	orr.w	r1, r5, r3
   d8968:	bd30      	pop	{r4, r5, pc}
   d896a:	f1c4 040c 	rsb	r4, r4, #12
   d896e:	f1c4 0220 	rsb	r2, r4, #32
   d8972:	fa20 f002 	lsr.w	r0, r0, r2
   d8976:	fa01 f304 	lsl.w	r3, r1, r4
   d897a:	ea40 0003 	orr.w	r0, r0, r3
   d897e:	4629      	mov	r1, r5
   d8980:	bd30      	pop	{r4, r5, pc}
   d8982:	fa21 f004 	lsr.w	r0, r1, r4
   d8986:	4629      	mov	r1, r5
   d8988:	bd30      	pop	{r4, r5, pc}
   d898a:	f094 0f00 	teq	r4, #0
   d898e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8992:	bf06      	itte	eq
   d8994:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8998:	3401      	addeq	r4, #1
   d899a:	3d01      	subne	r5, #1
   d899c:	e74e      	b.n	d883c <__adddf3+0x8c>
   d899e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89a2:	bf18      	it	ne
   d89a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89a8:	d029      	beq.n	d89fe <__adddf3+0x24e>
   d89aa:	ea94 0f05 	teq	r4, r5
   d89ae:	bf08      	it	eq
   d89b0:	ea90 0f02 	teqeq	r0, r2
   d89b4:	d005      	beq.n	d89c2 <__adddf3+0x212>
   d89b6:	ea54 0c00 	orrs.w	ip, r4, r0
   d89ba:	bf04      	itt	eq
   d89bc:	4619      	moveq	r1, r3
   d89be:	4610      	moveq	r0, r2
   d89c0:	bd30      	pop	{r4, r5, pc}
   d89c2:	ea91 0f03 	teq	r1, r3
   d89c6:	bf1e      	ittt	ne
   d89c8:	2100      	movne	r1, #0
   d89ca:	2000      	movne	r0, #0
   d89cc:	bd30      	popne	{r4, r5, pc}
   d89ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d89d2:	d105      	bne.n	d89e0 <__adddf3+0x230>
   d89d4:	0040      	lsls	r0, r0, #1
   d89d6:	4149      	adcs	r1, r1
   d89d8:	bf28      	it	cs
   d89da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d89de:	bd30      	pop	{r4, r5, pc}
   d89e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d89e4:	bf3c      	itt	cc
   d89e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d89ea:	bd30      	popcc	{r4, r5, pc}
   d89ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d89f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d89f8:	f04f 0000 	mov.w	r0, #0
   d89fc:	bd30      	pop	{r4, r5, pc}
   d89fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a02:	bf1a      	itte	ne
   d8a04:	4619      	movne	r1, r3
   d8a06:	4610      	movne	r0, r2
   d8a08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a0c:	bf1c      	itt	ne
   d8a0e:	460b      	movne	r3, r1
   d8a10:	4602      	movne	r2, r0
   d8a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a16:	bf06      	itte	eq
   d8a18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a1c:	ea91 0f03 	teqeq	r1, r3
   d8a20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a24:	bd30      	pop	{r4, r5, pc}
   d8a26:	bf00      	nop

000d8a28 <__aeabi_ui2d>:
   d8a28:	f090 0f00 	teq	r0, #0
   d8a2c:	bf04      	itt	eq
   d8a2e:	2100      	moveq	r1, #0
   d8a30:	4770      	bxeq	lr
   d8a32:	b530      	push	{r4, r5, lr}
   d8a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a3c:	f04f 0500 	mov.w	r5, #0
   d8a40:	f04f 0100 	mov.w	r1, #0
   d8a44:	e750      	b.n	d88e8 <__adddf3+0x138>
   d8a46:	bf00      	nop

000d8a48 <__aeabi_i2d>:
   d8a48:	f090 0f00 	teq	r0, #0
   d8a4c:	bf04      	itt	eq
   d8a4e:	2100      	moveq	r1, #0
   d8a50:	4770      	bxeq	lr
   d8a52:	b530      	push	{r4, r5, lr}
   d8a54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8a60:	bf48      	it	mi
   d8a62:	4240      	negmi	r0, r0
   d8a64:	f04f 0100 	mov.w	r1, #0
   d8a68:	e73e      	b.n	d88e8 <__adddf3+0x138>
   d8a6a:	bf00      	nop

000d8a6c <__aeabi_f2d>:
   d8a6c:	0042      	lsls	r2, r0, #1
   d8a6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8a72:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a7a:	bf1f      	itttt	ne
   d8a7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8a80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8a88:	4770      	bxne	lr
   d8a8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8a8e:	bf08      	it	eq
   d8a90:	4770      	bxeq	lr
   d8a92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8a96:	bf04      	itt	eq
   d8a98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8a9c:	4770      	bxeq	lr
   d8a9e:	b530      	push	{r4, r5, lr}
   d8aa0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8aa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8aac:	e71c      	b.n	d88e8 <__adddf3+0x138>
   d8aae:	bf00      	nop

000d8ab0 <__aeabi_ul2d>:
   d8ab0:	ea50 0201 	orrs.w	r2, r0, r1
   d8ab4:	bf08      	it	eq
   d8ab6:	4770      	bxeq	lr
   d8ab8:	b530      	push	{r4, r5, lr}
   d8aba:	f04f 0500 	mov.w	r5, #0
   d8abe:	e00a      	b.n	d8ad6 <__aeabi_l2d+0x16>

000d8ac0 <__aeabi_l2d>:
   d8ac0:	ea50 0201 	orrs.w	r2, r0, r1
   d8ac4:	bf08      	it	eq
   d8ac6:	4770      	bxeq	lr
   d8ac8:	b530      	push	{r4, r5, lr}
   d8aca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8ace:	d502      	bpl.n	d8ad6 <__aeabi_l2d+0x16>
   d8ad0:	4240      	negs	r0, r0
   d8ad2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8ad6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ada:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ade:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8ae2:	f43f aed8 	beq.w	d8896 <__adddf3+0xe6>
   d8ae6:	f04f 0203 	mov.w	r2, #3
   d8aea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8aee:	bf18      	it	ne
   d8af0:	3203      	addne	r2, #3
   d8af2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8af6:	bf18      	it	ne
   d8af8:	3203      	addne	r2, #3
   d8afa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8afe:	f1c2 0320 	rsb	r3, r2, #32
   d8b02:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b06:	fa20 f002 	lsr.w	r0, r0, r2
   d8b0a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b0e:	ea40 000e 	orr.w	r0, r0, lr
   d8b12:	fa21 f102 	lsr.w	r1, r1, r2
   d8b16:	4414      	add	r4, r2
   d8b18:	e6bd      	b.n	d8896 <__adddf3+0xe6>
   d8b1a:	bf00      	nop

000d8b1c <__aeabi_dmul>:
   d8b1c:	b570      	push	{r4, r5, r6, lr}
   d8b1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b2a:	bf1d      	ittte	ne
   d8b2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b30:	ea94 0f0c 	teqne	r4, ip
   d8b34:	ea95 0f0c 	teqne	r5, ip
   d8b38:	f000 f8de 	bleq	d8cf8 <__aeabi_dmul+0x1dc>
   d8b3c:	442c      	add	r4, r5
   d8b3e:	ea81 0603 	eor.w	r6, r1, r3
   d8b42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8b4e:	bf18      	it	ne
   d8b50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8b54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8b5c:	d038      	beq.n	d8bd0 <__aeabi_dmul+0xb4>
   d8b5e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8b62:	f04f 0500 	mov.w	r5, #0
   d8b66:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8b6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8b6e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b72:	f04f 0600 	mov.w	r6, #0
   d8b76:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8b7a:	f09c 0f00 	teq	ip, #0
   d8b7e:	bf18      	it	ne
   d8b80:	f04e 0e01 	orrne.w	lr, lr, #1
   d8b84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8b88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8b8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8b90:	d204      	bcs.n	d8b9c <__aeabi_dmul+0x80>
   d8b92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8b96:	416d      	adcs	r5, r5
   d8b98:	eb46 0606 	adc.w	r6, r6, r6
   d8b9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ba0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ba4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ba8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8bac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8bb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8bb4:	bf88      	it	hi
   d8bb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8bba:	d81e      	bhi.n	d8bfa <__aeabi_dmul+0xde>
   d8bbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8bc0:	bf08      	it	eq
   d8bc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8bc6:	f150 0000 	adcs.w	r0, r0, #0
   d8bca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8bce:	bd70      	pop	{r4, r5, r6, pc}
   d8bd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8bd4:	ea46 0101 	orr.w	r1, r6, r1
   d8bd8:	ea40 0002 	orr.w	r0, r0, r2
   d8bdc:	ea81 0103 	eor.w	r1, r1, r3
   d8be0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8be4:	bfc2      	ittt	gt
   d8be6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8bea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8bee:	bd70      	popgt	{r4, r5, r6, pc}
   d8bf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bf4:	f04f 0e00 	mov.w	lr, #0
   d8bf8:	3c01      	subs	r4, #1
   d8bfa:	f300 80ab 	bgt.w	d8d54 <__aeabi_dmul+0x238>
   d8bfe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c02:	bfde      	ittt	le
   d8c04:	2000      	movle	r0, #0
   d8c06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c0a:	bd70      	pople	{r4, r5, r6, pc}
   d8c0c:	f1c4 0400 	rsb	r4, r4, #0
   d8c10:	3c20      	subs	r4, #32
   d8c12:	da35      	bge.n	d8c80 <__aeabi_dmul+0x164>
   d8c14:	340c      	adds	r4, #12
   d8c16:	dc1b      	bgt.n	d8c50 <__aeabi_dmul+0x134>
   d8c18:	f104 0414 	add.w	r4, r4, #20
   d8c1c:	f1c4 0520 	rsb	r5, r4, #32
   d8c20:	fa00 f305 	lsl.w	r3, r0, r5
   d8c24:	fa20 f004 	lsr.w	r0, r0, r4
   d8c28:	fa01 f205 	lsl.w	r2, r1, r5
   d8c2c:	ea40 0002 	orr.w	r0, r0, r2
   d8c30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c3c:	fa21 f604 	lsr.w	r6, r1, r4
   d8c40:	eb42 0106 	adc.w	r1, r2, r6
   d8c44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c48:	bf08      	it	eq
   d8c4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c4e:	bd70      	pop	{r4, r5, r6, pc}
   d8c50:	f1c4 040c 	rsb	r4, r4, #12
   d8c54:	f1c4 0520 	rsb	r5, r4, #32
   d8c58:	fa00 f304 	lsl.w	r3, r0, r4
   d8c5c:	fa20 f005 	lsr.w	r0, r0, r5
   d8c60:	fa01 f204 	lsl.w	r2, r1, r4
   d8c64:	ea40 0002 	orr.w	r0, r0, r2
   d8c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c70:	f141 0100 	adc.w	r1, r1, #0
   d8c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c78:	bf08      	it	eq
   d8c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c7e:	bd70      	pop	{r4, r5, r6, pc}
   d8c80:	f1c4 0520 	rsb	r5, r4, #32
   d8c84:	fa00 f205 	lsl.w	r2, r0, r5
   d8c88:	ea4e 0e02 	orr.w	lr, lr, r2
   d8c8c:	fa20 f304 	lsr.w	r3, r0, r4
   d8c90:	fa01 f205 	lsl.w	r2, r1, r5
   d8c94:	ea43 0302 	orr.w	r3, r3, r2
   d8c98:	fa21 f004 	lsr.w	r0, r1, r4
   d8c9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ca0:	fa21 f204 	lsr.w	r2, r1, r4
   d8ca4:	ea20 0002 	bic.w	r0, r0, r2
   d8ca8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8cac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cb0:	bf08      	it	eq
   d8cb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cb6:	bd70      	pop	{r4, r5, r6, pc}
   d8cb8:	f094 0f00 	teq	r4, #0
   d8cbc:	d10f      	bne.n	d8cde <__aeabi_dmul+0x1c2>
   d8cbe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8cc2:	0040      	lsls	r0, r0, #1
   d8cc4:	eb41 0101 	adc.w	r1, r1, r1
   d8cc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ccc:	bf08      	it	eq
   d8cce:	3c01      	subeq	r4, #1
   d8cd0:	d0f7      	beq.n	d8cc2 <__aeabi_dmul+0x1a6>
   d8cd2:	ea41 0106 	orr.w	r1, r1, r6
   d8cd6:	f095 0f00 	teq	r5, #0
   d8cda:	bf18      	it	ne
   d8cdc:	4770      	bxne	lr
   d8cde:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8ce2:	0052      	lsls	r2, r2, #1
   d8ce4:	eb43 0303 	adc.w	r3, r3, r3
   d8ce8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8cec:	bf08      	it	eq
   d8cee:	3d01      	subeq	r5, #1
   d8cf0:	d0f7      	beq.n	d8ce2 <__aeabi_dmul+0x1c6>
   d8cf2:	ea43 0306 	orr.w	r3, r3, r6
   d8cf6:	4770      	bx	lr
   d8cf8:	ea94 0f0c 	teq	r4, ip
   d8cfc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d00:	bf18      	it	ne
   d8d02:	ea95 0f0c 	teqne	r5, ip
   d8d06:	d00c      	beq.n	d8d22 <__aeabi_dmul+0x206>
   d8d08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d0c:	bf18      	it	ne
   d8d0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d12:	d1d1      	bne.n	d8cb8 <__aeabi_dmul+0x19c>
   d8d14:	ea81 0103 	eor.w	r1, r1, r3
   d8d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d1c:	f04f 0000 	mov.w	r0, #0
   d8d20:	bd70      	pop	{r4, r5, r6, pc}
   d8d22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d26:	bf06      	itte	eq
   d8d28:	4610      	moveq	r0, r2
   d8d2a:	4619      	moveq	r1, r3
   d8d2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d30:	d019      	beq.n	d8d66 <__aeabi_dmul+0x24a>
   d8d32:	ea94 0f0c 	teq	r4, ip
   d8d36:	d102      	bne.n	d8d3e <__aeabi_dmul+0x222>
   d8d38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d3c:	d113      	bne.n	d8d66 <__aeabi_dmul+0x24a>
   d8d3e:	ea95 0f0c 	teq	r5, ip
   d8d42:	d105      	bne.n	d8d50 <__aeabi_dmul+0x234>
   d8d44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d48:	bf1c      	itt	ne
   d8d4a:	4610      	movne	r0, r2
   d8d4c:	4619      	movne	r1, r3
   d8d4e:	d10a      	bne.n	d8d66 <__aeabi_dmul+0x24a>
   d8d50:	ea81 0103 	eor.w	r1, r1, r3
   d8d54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d60:	f04f 0000 	mov.w	r0, #0
   d8d64:	bd70      	pop	{r4, r5, r6, pc}
   d8d66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8d6e:	bd70      	pop	{r4, r5, r6, pc}

000d8d70 <__aeabi_ddiv>:
   d8d70:	b570      	push	{r4, r5, r6, lr}
   d8d72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d7e:	bf1d      	ittte	ne
   d8d80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d84:	ea94 0f0c 	teqne	r4, ip
   d8d88:	ea95 0f0c 	teqne	r5, ip
   d8d8c:	f000 f8a7 	bleq	d8ede <__aeabi_ddiv+0x16e>
   d8d90:	eba4 0405 	sub.w	r4, r4, r5
   d8d94:	ea81 0e03 	eor.w	lr, r1, r3
   d8d98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8d9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8da0:	f000 8088 	beq.w	d8eb4 <__aeabi_ddiv+0x144>
   d8da4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8da8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8dac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8db0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8db4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8db8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8dbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8dc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8dc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8dc8:	429d      	cmp	r5, r3
   d8dca:	bf08      	it	eq
   d8dcc:	4296      	cmpeq	r6, r2
   d8dce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8dd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8dd6:	d202      	bcs.n	d8dde <__aeabi_ddiv+0x6e>
   d8dd8:	085b      	lsrs	r3, r3, #1
   d8dda:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dde:	1ab6      	subs	r6, r6, r2
   d8de0:	eb65 0503 	sbc.w	r5, r5, r3
   d8de4:	085b      	lsrs	r3, r3, #1
   d8de6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8dee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8df2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8df6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dfa:	bf22      	ittt	cs
   d8dfc:	1ab6      	subcs	r6, r6, r2
   d8dfe:	4675      	movcs	r5, lr
   d8e00:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e04:	085b      	lsrs	r3, r3, #1
   d8e06:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e0a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e12:	bf22      	ittt	cs
   d8e14:	1ab6      	subcs	r6, r6, r2
   d8e16:	4675      	movcs	r5, lr
   d8e18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e1c:	085b      	lsrs	r3, r3, #1
   d8e1e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e22:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e2a:	bf22      	ittt	cs
   d8e2c:	1ab6      	subcs	r6, r6, r2
   d8e2e:	4675      	movcs	r5, lr
   d8e30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e34:	085b      	lsrs	r3, r3, #1
   d8e36:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e42:	bf22      	ittt	cs
   d8e44:	1ab6      	subcs	r6, r6, r2
   d8e46:	4675      	movcs	r5, lr
   d8e48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8e4c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8e50:	d018      	beq.n	d8e84 <__aeabi_ddiv+0x114>
   d8e52:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8e56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8e5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8e5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8e62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8e66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8e6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8e6e:	d1c0      	bne.n	d8df2 <__aeabi_ddiv+0x82>
   d8e70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e74:	d10b      	bne.n	d8e8e <__aeabi_ddiv+0x11e>
   d8e76:	ea41 0100 	orr.w	r1, r1, r0
   d8e7a:	f04f 0000 	mov.w	r0, #0
   d8e7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8e82:	e7b6      	b.n	d8df2 <__aeabi_ddiv+0x82>
   d8e84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e88:	bf04      	itt	eq
   d8e8a:	4301      	orreq	r1, r0
   d8e8c:	2000      	moveq	r0, #0
   d8e8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e92:	bf88      	it	hi
   d8e94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e98:	f63f aeaf 	bhi.w	d8bfa <__aeabi_dmul+0xde>
   d8e9c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ea0:	bf04      	itt	eq
   d8ea2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8ea6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8eaa:	f150 0000 	adcs.w	r0, r0, #0
   d8eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8eb2:	bd70      	pop	{r4, r5, r6, pc}
   d8eb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8eb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8ebc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8ec0:	bfc2      	ittt	gt
   d8ec2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ec6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8eca:	bd70      	popgt	{r4, r5, r6, pc}
   d8ecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ed0:	f04f 0e00 	mov.w	lr, #0
   d8ed4:	3c01      	subs	r4, #1
   d8ed6:	e690      	b.n	d8bfa <__aeabi_dmul+0xde>
   d8ed8:	ea45 0e06 	orr.w	lr, r5, r6
   d8edc:	e68d      	b.n	d8bfa <__aeabi_dmul+0xde>
   d8ede:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8ee2:	ea94 0f0c 	teq	r4, ip
   d8ee6:	bf08      	it	eq
   d8ee8:	ea95 0f0c 	teqeq	r5, ip
   d8eec:	f43f af3b 	beq.w	d8d66 <__aeabi_dmul+0x24a>
   d8ef0:	ea94 0f0c 	teq	r4, ip
   d8ef4:	d10a      	bne.n	d8f0c <__aeabi_ddiv+0x19c>
   d8ef6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8efa:	f47f af34 	bne.w	d8d66 <__aeabi_dmul+0x24a>
   d8efe:	ea95 0f0c 	teq	r5, ip
   d8f02:	f47f af25 	bne.w	d8d50 <__aeabi_dmul+0x234>
   d8f06:	4610      	mov	r0, r2
   d8f08:	4619      	mov	r1, r3
   d8f0a:	e72c      	b.n	d8d66 <__aeabi_dmul+0x24a>
   d8f0c:	ea95 0f0c 	teq	r5, ip
   d8f10:	d106      	bne.n	d8f20 <__aeabi_ddiv+0x1b0>
   d8f12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f16:	f43f aefd 	beq.w	d8d14 <__aeabi_dmul+0x1f8>
   d8f1a:	4610      	mov	r0, r2
   d8f1c:	4619      	mov	r1, r3
   d8f1e:	e722      	b.n	d8d66 <__aeabi_dmul+0x24a>
   d8f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f24:	bf18      	it	ne
   d8f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f2a:	f47f aec5 	bne.w	d8cb8 <__aeabi_dmul+0x19c>
   d8f2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f32:	f47f af0d 	bne.w	d8d50 <__aeabi_dmul+0x234>
   d8f36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f3a:	f47f aeeb 	bne.w	d8d14 <__aeabi_dmul+0x1f8>
   d8f3e:	e712      	b.n	d8d66 <__aeabi_dmul+0x24a>

000d8f40 <__aeabi_d2f>:
   d8f40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8f48:	bf24      	itt	cs
   d8f4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8f4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8f52:	d90d      	bls.n	d8f70 <__aeabi_d2f+0x30>
   d8f54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8f58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8f5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8f60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8f64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8f68:	bf08      	it	eq
   d8f6a:	f020 0001 	biceq.w	r0, r0, #1
   d8f6e:	4770      	bx	lr
   d8f70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8f74:	d121      	bne.n	d8fba <__aeabi_d2f+0x7a>
   d8f76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8f7a:	bfbc      	itt	lt
   d8f7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8f80:	4770      	bxlt	lr
   d8f82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f86:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8f8a:	f1c2 0218 	rsb	r2, r2, #24
   d8f8e:	f1c2 0c20 	rsb	ip, r2, #32
   d8f92:	fa10 f30c 	lsls.w	r3, r0, ip
   d8f96:	fa20 f002 	lsr.w	r0, r0, r2
   d8f9a:	bf18      	it	ne
   d8f9c:	f040 0001 	orrne.w	r0, r0, #1
   d8fa0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fa4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8fa8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8fac:	ea40 000c 	orr.w	r0, r0, ip
   d8fb0:	fa23 f302 	lsr.w	r3, r3, r2
   d8fb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8fb8:	e7cc      	b.n	d8f54 <__aeabi_d2f+0x14>
   d8fba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8fbe:	d107      	bne.n	d8fd0 <__aeabi_d2f+0x90>
   d8fc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8fc4:	bf1e      	ittt	ne
   d8fc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8fca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8fce:	4770      	bxne	lr
   d8fd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8fd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8fd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8fdc:	4770      	bx	lr
   d8fde:	bf00      	nop

000d8fe0 <asctime_r>:
   d8fe0:	b510      	push	{r4, lr}
   d8fe2:	460c      	mov	r4, r1
   d8fe4:	6941      	ldr	r1, [r0, #20]
   d8fe6:	6903      	ldr	r3, [r0, #16]
   d8fe8:	6982      	ldr	r2, [r0, #24]
   d8fea:	b086      	sub	sp, #24
   d8fec:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8ff0:	9104      	str	r1, [sp, #16]
   d8ff2:	6801      	ldr	r1, [r0, #0]
   d8ff4:	9103      	str	r1, [sp, #12]
   d8ff6:	6841      	ldr	r1, [r0, #4]
   d8ff8:	9102      	str	r1, [sp, #8]
   d8ffa:	6881      	ldr	r1, [r0, #8]
   d8ffc:	9101      	str	r1, [sp, #4]
   d8ffe:	68c1      	ldr	r1, [r0, #12]
   d9000:	9100      	str	r1, [sp, #0]
   d9002:	4907      	ldr	r1, [pc, #28]	; (d9020 <asctime_r+0x40>)
   d9004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9008:	440b      	add	r3, r1
   d900a:	4906      	ldr	r1, [pc, #24]	; (d9024 <asctime_r+0x44>)
   d900c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9010:	440a      	add	r2, r1
   d9012:	4620      	mov	r0, r4
   d9014:	4904      	ldr	r1, [pc, #16]	; (d9028 <asctime_r+0x48>)
   d9016:	f7fe f81d 	bl	d7054 <siprintf>
   d901a:	4620      	mov	r0, r4
   d901c:	b006      	add	sp, #24
   d901e:	bd10      	pop	{r4, pc}
   d9020:	000d9be6 	.word	0x000d9be6
   d9024:	000d9bd1 	.word	0x000d9bd1
   d9028:	000d9bb1 	.word	0x000d9bb1

000d902c <atexit>:
   d902c:	2300      	movs	r3, #0
   d902e:	4601      	mov	r1, r0
   d9030:	461a      	mov	r2, r3
   d9032:	4618      	mov	r0, r3
   d9034:	f000 b938 	b.w	d92a8 <__register_exitproc>

000d9038 <atoi>:
   d9038:	220a      	movs	r2, #10
   d903a:	2100      	movs	r1, #0
   d903c:	f000 b92a 	b.w	d9294 <strtol>

000d9040 <gmtime>:
   d9040:	b538      	push	{r3, r4, r5, lr}
   d9042:	4b07      	ldr	r3, [pc, #28]	; (d9060 <gmtime+0x20>)
   d9044:	681d      	ldr	r5, [r3, #0]
   d9046:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d9048:	4604      	mov	r4, r0
   d904a:	b91b      	cbnz	r3, d9054 <gmtime+0x14>
   d904c:	2024      	movs	r0, #36	; 0x24
   d904e:	f7fd ffe9 	bl	d7024 <malloc>
   d9052:	63e8      	str	r0, [r5, #60]	; 0x3c
   d9054:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d9056:	4620      	mov	r0, r4
   d9058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d905c:	f7fe b832 	b.w	d70c4 <gmtime_r>
   d9060:	2003e30c 	.word	0x2003e30c

000d9064 <memcpy>:
   d9064:	440a      	add	r2, r1
   d9066:	4291      	cmp	r1, r2
   d9068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d906c:	d100      	bne.n	d9070 <memcpy+0xc>
   d906e:	4770      	bx	lr
   d9070:	b510      	push	{r4, lr}
   d9072:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9076:	f803 4f01 	strb.w	r4, [r3, #1]!
   d907a:	4291      	cmp	r1, r2
   d907c:	d1f9      	bne.n	d9072 <memcpy+0xe>
   d907e:	bd10      	pop	{r4, pc}

000d9080 <memmove>:
   d9080:	4288      	cmp	r0, r1
   d9082:	b510      	push	{r4, lr}
   d9084:	eb01 0402 	add.w	r4, r1, r2
   d9088:	d902      	bls.n	d9090 <memmove+0x10>
   d908a:	4284      	cmp	r4, r0
   d908c:	4623      	mov	r3, r4
   d908e:	d807      	bhi.n	d90a0 <memmove+0x20>
   d9090:	1e43      	subs	r3, r0, #1
   d9092:	42a1      	cmp	r1, r4
   d9094:	d008      	beq.n	d90a8 <memmove+0x28>
   d9096:	f811 2b01 	ldrb.w	r2, [r1], #1
   d909a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d909e:	e7f8      	b.n	d9092 <memmove+0x12>
   d90a0:	4402      	add	r2, r0
   d90a2:	4601      	mov	r1, r0
   d90a4:	428a      	cmp	r2, r1
   d90a6:	d100      	bne.n	d90aa <memmove+0x2a>
   d90a8:	bd10      	pop	{r4, pc}
   d90aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d90ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d90b2:	e7f7      	b.n	d90a4 <memmove+0x24>

000d90b4 <memset>:
   d90b4:	4402      	add	r2, r0
   d90b6:	4603      	mov	r3, r0
   d90b8:	4293      	cmp	r3, r2
   d90ba:	d100      	bne.n	d90be <memset+0xa>
   d90bc:	4770      	bx	lr
   d90be:	f803 1b01 	strb.w	r1, [r3], #1
   d90c2:	e7f9      	b.n	d90b8 <memset+0x4>

000d90c4 <srand>:
   d90c4:	b538      	push	{r3, r4, r5, lr}
   d90c6:	4b0d      	ldr	r3, [pc, #52]	; (d90fc <srand+0x38>)
   d90c8:	681d      	ldr	r5, [r3, #0]
   d90ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d90cc:	4604      	mov	r4, r0
   d90ce:	b97b      	cbnz	r3, d90f0 <srand+0x2c>
   d90d0:	2018      	movs	r0, #24
   d90d2:	f7fd ffa7 	bl	d7024 <malloc>
   d90d6:	4a0a      	ldr	r2, [pc, #40]	; (d9100 <srand+0x3c>)
   d90d8:	4b0a      	ldr	r3, [pc, #40]	; (d9104 <srand+0x40>)
   d90da:	63a8      	str	r0, [r5, #56]	; 0x38
   d90dc:	e9c0 2300 	strd	r2, r3, [r0]
   d90e0:	4b09      	ldr	r3, [pc, #36]	; (d9108 <srand+0x44>)
   d90e2:	6083      	str	r3, [r0, #8]
   d90e4:	230b      	movs	r3, #11
   d90e6:	8183      	strh	r3, [r0, #12]
   d90e8:	2201      	movs	r2, #1
   d90ea:	2300      	movs	r3, #0
   d90ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d90f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d90f2:	2200      	movs	r2, #0
   d90f4:	611c      	str	r4, [r3, #16]
   d90f6:	615a      	str	r2, [r3, #20]
   d90f8:	bd38      	pop	{r3, r4, r5, pc}
   d90fa:	bf00      	nop
   d90fc:	2003e30c 	.word	0x2003e30c
   d9100:	abcd330e 	.word	0xabcd330e
   d9104:	e66d1234 	.word	0xe66d1234
   d9108:	0005deec 	.word	0x0005deec

000d910c <strcmp>:
   d910c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9110:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9114:	2a01      	cmp	r2, #1
   d9116:	bf28      	it	cs
   d9118:	429a      	cmpcs	r2, r3
   d911a:	d0f7      	beq.n	d910c <strcmp>
   d911c:	1ad0      	subs	r0, r2, r3
   d911e:	4770      	bx	lr

000d9120 <strcpy>:
   d9120:	4603      	mov	r3, r0
   d9122:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9126:	f803 2b01 	strb.w	r2, [r3], #1
   d912a:	2a00      	cmp	r2, #0
   d912c:	d1f9      	bne.n	d9122 <strcpy+0x2>
   d912e:	4770      	bx	lr

000d9130 <strdup>:
   d9130:	4b02      	ldr	r3, [pc, #8]	; (d913c <strdup+0xc>)
   d9132:	4601      	mov	r1, r0
   d9134:	6818      	ldr	r0, [r3, #0]
   d9136:	f000 b803 	b.w	d9140 <_strdup_r>
   d913a:	bf00      	nop
   d913c:	2003e30c 	.word	0x2003e30c

000d9140 <_strdup_r>:
   d9140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9142:	4604      	mov	r4, r0
   d9144:	4608      	mov	r0, r1
   d9146:	460d      	mov	r5, r1
   d9148:	f000 f80f 	bl	d916a <strlen>
   d914c:	1c42      	adds	r2, r0, #1
   d914e:	4611      	mov	r1, r2
   d9150:	4620      	mov	r0, r4
   d9152:	9201      	str	r2, [sp, #4]
   d9154:	f7fd ff96 	bl	d7084 <_malloc_r>
   d9158:	4604      	mov	r4, r0
   d915a:	b118      	cbz	r0, d9164 <_strdup_r+0x24>
   d915c:	9a01      	ldr	r2, [sp, #4]
   d915e:	4629      	mov	r1, r5
   d9160:	f7ff ff80 	bl	d9064 <memcpy>
   d9164:	4620      	mov	r0, r4
   d9166:	b003      	add	sp, #12
   d9168:	bd30      	pop	{r4, r5, pc}

000d916a <strlen>:
   d916a:	4603      	mov	r3, r0
   d916c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9170:	2a00      	cmp	r2, #0
   d9172:	d1fb      	bne.n	d916c <strlen+0x2>
   d9174:	1a18      	subs	r0, r3, r0
   d9176:	3801      	subs	r0, #1
   d9178:	4770      	bx	lr

000d917a <strncpy>:
   d917a:	b510      	push	{r4, lr}
   d917c:	3901      	subs	r1, #1
   d917e:	4603      	mov	r3, r0
   d9180:	b132      	cbz	r2, d9190 <strncpy+0x16>
   d9182:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9186:	f803 4b01 	strb.w	r4, [r3], #1
   d918a:	3a01      	subs	r2, #1
   d918c:	2c00      	cmp	r4, #0
   d918e:	d1f7      	bne.n	d9180 <strncpy+0x6>
   d9190:	441a      	add	r2, r3
   d9192:	2100      	movs	r1, #0
   d9194:	4293      	cmp	r3, r2
   d9196:	d100      	bne.n	d919a <strncpy+0x20>
   d9198:	bd10      	pop	{r4, pc}
   d919a:	f803 1b01 	strb.w	r1, [r3], #1
   d919e:	e7f9      	b.n	d9194 <strncpy+0x1a>

000d91a0 <_strtol_l.isra.0>:
   d91a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d91a4:	4e3a      	ldr	r6, [pc, #232]	; (d9290 <_strtol_l.isra.0+0xf0>)
   d91a6:	4686      	mov	lr, r0
   d91a8:	468c      	mov	ip, r1
   d91aa:	4660      	mov	r0, ip
   d91ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d91b0:	5da5      	ldrb	r5, [r4, r6]
   d91b2:	f015 0508 	ands.w	r5, r5, #8
   d91b6:	d1f8      	bne.n	d91aa <_strtol_l.isra.0+0xa>
   d91b8:	2c2d      	cmp	r4, #45	; 0x2d
   d91ba:	d133      	bne.n	d9224 <_strtol_l.isra.0+0x84>
   d91bc:	f89c 4000 	ldrb.w	r4, [ip]
   d91c0:	f04f 0801 	mov.w	r8, #1
   d91c4:	f100 0c02 	add.w	ip, r0, #2
   d91c8:	2b00      	cmp	r3, #0
   d91ca:	d05c      	beq.n	d9286 <_strtol_l.isra.0+0xe6>
   d91cc:	2b10      	cmp	r3, #16
   d91ce:	d10c      	bne.n	d91ea <_strtol_l.isra.0+0x4a>
   d91d0:	2c30      	cmp	r4, #48	; 0x30
   d91d2:	d10a      	bne.n	d91ea <_strtol_l.isra.0+0x4a>
   d91d4:	f89c 0000 	ldrb.w	r0, [ip]
   d91d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d91dc:	2858      	cmp	r0, #88	; 0x58
   d91de:	d14d      	bne.n	d927c <_strtol_l.isra.0+0xdc>
   d91e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d91e4:	2310      	movs	r3, #16
   d91e6:	f10c 0c02 	add.w	ip, ip, #2
   d91ea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d91ee:	3f01      	subs	r7, #1
   d91f0:	2600      	movs	r6, #0
   d91f2:	fbb7 f9f3 	udiv	r9, r7, r3
   d91f6:	4630      	mov	r0, r6
   d91f8:	fb03 7a19 	mls	sl, r3, r9, r7
   d91fc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9200:	2d09      	cmp	r5, #9
   d9202:	d818      	bhi.n	d9236 <_strtol_l.isra.0+0x96>
   d9204:	462c      	mov	r4, r5
   d9206:	42a3      	cmp	r3, r4
   d9208:	dd24      	ble.n	d9254 <_strtol_l.isra.0+0xb4>
   d920a:	1c75      	adds	r5, r6, #1
   d920c:	d007      	beq.n	d921e <_strtol_l.isra.0+0x7e>
   d920e:	4581      	cmp	r9, r0
   d9210:	d31d      	bcc.n	d924e <_strtol_l.isra.0+0xae>
   d9212:	d101      	bne.n	d9218 <_strtol_l.isra.0+0x78>
   d9214:	45a2      	cmp	sl, r4
   d9216:	db1a      	blt.n	d924e <_strtol_l.isra.0+0xae>
   d9218:	fb00 4003 	mla	r0, r0, r3, r4
   d921c:	2601      	movs	r6, #1
   d921e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9222:	e7eb      	b.n	d91fc <_strtol_l.isra.0+0x5c>
   d9224:	2c2b      	cmp	r4, #43	; 0x2b
   d9226:	bf08      	it	eq
   d9228:	f89c 4000 	ldrbeq.w	r4, [ip]
   d922c:	46a8      	mov	r8, r5
   d922e:	bf08      	it	eq
   d9230:	f100 0c02 	addeq.w	ip, r0, #2
   d9234:	e7c8      	b.n	d91c8 <_strtol_l.isra.0+0x28>
   d9236:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d923a:	2d19      	cmp	r5, #25
   d923c:	d801      	bhi.n	d9242 <_strtol_l.isra.0+0xa2>
   d923e:	3c37      	subs	r4, #55	; 0x37
   d9240:	e7e1      	b.n	d9206 <_strtol_l.isra.0+0x66>
   d9242:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9246:	2d19      	cmp	r5, #25
   d9248:	d804      	bhi.n	d9254 <_strtol_l.isra.0+0xb4>
   d924a:	3c57      	subs	r4, #87	; 0x57
   d924c:	e7db      	b.n	d9206 <_strtol_l.isra.0+0x66>
   d924e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9252:	e7e4      	b.n	d921e <_strtol_l.isra.0+0x7e>
   d9254:	1c73      	adds	r3, r6, #1
   d9256:	d106      	bne.n	d9266 <_strtol_l.isra.0+0xc6>
   d9258:	2322      	movs	r3, #34	; 0x22
   d925a:	f8ce 3000 	str.w	r3, [lr]
   d925e:	4638      	mov	r0, r7
   d9260:	b942      	cbnz	r2, d9274 <_strtol_l.isra.0+0xd4>
   d9262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9266:	f1b8 0f00 	cmp.w	r8, #0
   d926a:	d000      	beq.n	d926e <_strtol_l.isra.0+0xce>
   d926c:	4240      	negs	r0, r0
   d926e:	2a00      	cmp	r2, #0
   d9270:	d0f7      	beq.n	d9262 <_strtol_l.isra.0+0xc2>
   d9272:	b10e      	cbz	r6, d9278 <_strtol_l.isra.0+0xd8>
   d9274:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9278:	6011      	str	r1, [r2, #0]
   d927a:	e7f2      	b.n	d9262 <_strtol_l.isra.0+0xc2>
   d927c:	2430      	movs	r4, #48	; 0x30
   d927e:	2b00      	cmp	r3, #0
   d9280:	d1b3      	bne.n	d91ea <_strtol_l.isra.0+0x4a>
   d9282:	2308      	movs	r3, #8
   d9284:	e7b1      	b.n	d91ea <_strtol_l.isra.0+0x4a>
   d9286:	2c30      	cmp	r4, #48	; 0x30
   d9288:	d0a4      	beq.n	d91d4 <_strtol_l.isra.0+0x34>
   d928a:	230a      	movs	r3, #10
   d928c:	e7ad      	b.n	d91ea <_strtol_l.isra.0+0x4a>
   d928e:	bf00      	nop
   d9290:	000d9c0b 	.word	0x000d9c0b

000d9294 <strtol>:
   d9294:	4613      	mov	r3, r2
   d9296:	460a      	mov	r2, r1
   d9298:	4601      	mov	r1, r0
   d929a:	4802      	ldr	r0, [pc, #8]	; (d92a4 <strtol+0x10>)
   d929c:	6800      	ldr	r0, [r0, #0]
   d929e:	f7ff bf7f 	b.w	d91a0 <_strtol_l.isra.0>
   d92a2:	bf00      	nop
   d92a4:	2003e30c 	.word	0x2003e30c

000d92a8 <__register_exitproc>:
   d92a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d92ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d9368 <__register_exitproc+0xc0>
   d92b0:	4606      	mov	r6, r0
   d92b2:	f8d8 0000 	ldr.w	r0, [r8]
   d92b6:	461f      	mov	r7, r3
   d92b8:	460d      	mov	r5, r1
   d92ba:	4691      	mov	r9, r2
   d92bc:	f000 f856 	bl	d936c <__retarget_lock_acquire_recursive>
   d92c0:	4b25      	ldr	r3, [pc, #148]	; (d9358 <__register_exitproc+0xb0>)
   d92c2:	681c      	ldr	r4, [r3, #0]
   d92c4:	b934      	cbnz	r4, d92d4 <__register_exitproc+0x2c>
   d92c6:	4c25      	ldr	r4, [pc, #148]	; (d935c <__register_exitproc+0xb4>)
   d92c8:	601c      	str	r4, [r3, #0]
   d92ca:	4b25      	ldr	r3, [pc, #148]	; (d9360 <__register_exitproc+0xb8>)
   d92cc:	b113      	cbz	r3, d92d4 <__register_exitproc+0x2c>
   d92ce:	681b      	ldr	r3, [r3, #0]
   d92d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d92d4:	6863      	ldr	r3, [r4, #4]
   d92d6:	2b1f      	cmp	r3, #31
   d92d8:	dd07      	ble.n	d92ea <__register_exitproc+0x42>
   d92da:	f8d8 0000 	ldr.w	r0, [r8]
   d92de:	f000 f847 	bl	d9370 <__retarget_lock_release_recursive>
   d92e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d92e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d92ea:	b34e      	cbz	r6, d9340 <__register_exitproc+0x98>
   d92ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d92f0:	b988      	cbnz	r0, d9316 <__register_exitproc+0x6e>
   d92f2:	4b1c      	ldr	r3, [pc, #112]	; (d9364 <__register_exitproc+0xbc>)
   d92f4:	b923      	cbnz	r3, d9300 <__register_exitproc+0x58>
   d92f6:	f8d8 0000 	ldr.w	r0, [r8]
   d92fa:	f000 f838 	bl	d936e <__retarget_lock_release>
   d92fe:	e7f0      	b.n	d92e2 <__register_exitproc+0x3a>
   d9300:	f44f 7084 	mov.w	r0, #264	; 0x108
   d9304:	f7fd fe8e 	bl	d7024 <malloc>
   d9308:	2800      	cmp	r0, #0
   d930a:	d0f4      	beq.n	d92f6 <__register_exitproc+0x4e>
   d930c:	2300      	movs	r3, #0
   d930e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d9312:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d9316:	6863      	ldr	r3, [r4, #4]
   d9318:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d931c:	2201      	movs	r2, #1
   d931e:	409a      	lsls	r2, r3
   d9320:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d9324:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d9328:	4313      	orrs	r3, r2
   d932a:	2e02      	cmp	r6, #2
   d932c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d9330:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d9334:	bf02      	ittt	eq
   d9336:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d933a:	431a      	orreq	r2, r3
   d933c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d9340:	6863      	ldr	r3, [r4, #4]
   d9342:	f8d8 0000 	ldr.w	r0, [r8]
   d9346:	1c5a      	adds	r2, r3, #1
   d9348:	3302      	adds	r3, #2
   d934a:	6062      	str	r2, [r4, #4]
   d934c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d9350:	f000 f80e 	bl	d9370 <__retarget_lock_release_recursive>
   d9354:	2000      	movs	r0, #0
   d9356:	e7c6      	b.n	d92e6 <__register_exitproc+0x3e>
   d9358:	2003e7e4 	.word	0x2003e7e4
   d935c:	2003e758 	.word	0x2003e758
   d9360:	00000000 	.word	0x00000000
   d9364:	000d7025 	.word	0x000d7025
   d9368:	2003e370 	.word	0x2003e370

000d936c <__retarget_lock_acquire_recursive>:
   d936c:	4770      	bx	lr

000d936e <__retarget_lock_release>:
   d936e:	4770      	bx	lr

000d9370 <__retarget_lock_release_recursive>:
   d9370:	4770      	bx	lr

000d9372 <link_code_end>:
	...

000d9374 <dynalib_user>:
   d9374:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9384:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   d9394:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   d93a4:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   d93b4:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   d93c4:	302e 0031 6f4e 4420 7461 0061 6552 7073     .01.No Data.Resp
   d93d4:	6e6f 6573 5220 6365 6965 6576 0064 6e55     onse Received.Un
   d93e4:	6e6b 776f 206e 6572 7073 6e6f 6573 7220     known response r
   d93f4:	6365 7665 6569 2064 6925 5500 6962 6f64     ecevied %i.Ubido
   d9404:	7374 4820 6f6f 006b 6553 2074 6556 6272     ts Hook.Set Verb
   d9414:	736f 2065 6f4d 6564 3000 4300 656c 7261     ose Mode.0.Clear
   d9424:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
   d9434:	6553 2074 6f74 3320 6472 5020 7261 7974     Set to 3rd Party
   d9444:	5320 6d69 5300 7465 7420 206f 6150 7472      Sim.Set to Part
   d9454:	6369 656c 5320 6d69 4b00 6565 2070 6c41     icle Sim.Keep Al
   d9464:	7669 2065 6573 2074 6f74 2520 2069 6573     ive set to %i se
   d9474:	0063 654b 7065 4120 696c 6576 4c00 616f     c.Keep Alive.Loa
   d9484:	6964 676e 5320 7379 6574 206d 6544 6166     ding System Defa
   d9494:	6c75 7374 7b00 7422 6d65 6570 6172 7574     ults.{"temperatu
   d94a4:	6572 3a22 3425 312e 2c66 2020 6822 6d75     re":%4.1f,  "hum
   d94b4:	6469 7469 2279 253a 2e34 6631 202c 2220     idity":%4.1f,  "
   d94c4:	6f53 6c69 6f6d 7369 7574 6572 3a22 6925     Soilmoisture":%i
   d94d4:	202c 2220 756c 2278 253a 2e34 6631 202c     ,  "lux":%4.1f, 
   d94e4:	2220 6877 7469 2265 253a 2e34 6631 202c      "white":%4.1f, 
   d94f4:	2220 6c61 2273 253a 2e34 6631 222c 6162      "als":%4.1f,"ba
   d9504:	7474 7265 2279 253a 7d69 6500 766e 7269     ttery":%i}.envir
   d9514:	6e6f 656d 746e 6c61 682d 6f6f 006b 7246     onmental-hook.Fr
   d9524:	6d6f 2520 2073 6f74 2520 0073 7453 7461     om %s to %s.Stat
   d9534:	2065 7254 6e61 6973 6974 6e6f 2a00 4c00     e Transition.*.L
   d9544:	776f 5020 776f 7265 4d20 646f 0065 7254     ow Power Mode.Tr
   d9554:	6575 4e00 726f 616d 206c 704f 7265 7461     ue.Normal Operat
   d9564:	6f69 736e 4600 6c61 6573 2500 2e34 6631     ions.False.%4.1f
   d9574:	432a 2500 2e34 6631 2525 4c00 7875 3a20     *C.%4.1f%%.Lux :
   d9584:	2520 2e34 6631 5700 6968 6574 3a20 2520      %4.1f.White : %
   d9594:	2e34 6631 4100 534c 3a20 2520 2e34 6631     4.1f.ALS : %4.1f
   d95a4:	2500 2069 2525 4500 7272 726f 7420 6b61     .%i %%.Error tak
   d95b4:	6e69 2067 654d 7361 7275 6d65 6e65 7374     ing Measurements
   d95c4:	5300 6174 6574 7300 6170 6b72 642f 7665     .State.spark/dev
   d95d4:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   d95e4:	7245 6f72 2072 7453 7461 2065 202d 6552     Error State - Re
   d95f4:	6573 0074 682f 6f6f 2d6b 6572 7073 6e6f     set./hook-respon
   d9604:	6573 652f 766e 7269 6e6f 656d 746e 6c61     se/environmental
   d9614:	682d 6f6f 2f6b 5200 6c65 6165 6573 7400     -hook/.Release.t
   d9624:	6d65 6570 6172 7574 6572 6800 6d75 6469     emperature.humid
   d9634:	7469 0079 754c 0078 6857 7469 0065 6152     ity.Lux.White.Ra
   d9644:	2077 4c41 0053 6142 7474 7265 0079 6142     w ALS.Battery.Ba
   d9654:	7474 7265 4379 6e6f 6574 7478 4b00 6565     tteryContext.Kee
   d9664:	2070 6c41 7669 2065 6553 0063 6f6c 5077     p Alive Sec.lowP
   d9674:	776f 7265 6f4d 6564 4d00 6165 7573 6572     owerMode.Measure
   d9684:	4e2d 776f 5600 7265 6f62 6573 4d2d 646f     -Now.Verbose-Mod
   d9694:	0065 6553 2074 6f4c 2077 6f50 6577 0072     e.Set Low Power.
   d96a4:	7245 6f72 2072 202d 4853 3354 2031 6e49     Error - SHT31 In
   d96b4:	7469 6169 696c 617a 6974 6e6f 4500 7272     itialization.Err
   d96c4:	726f 2d20 5620 4d45 204c 6e49 7469 6169     or - VEML Initia
   d96d4:	696c 617a 6974 6e6f 5300 6174 7472 7075     lization.Startup
   d96e4:	0000 0000                                   ....

000d96e8 <_ZTV17PublishQueueAsync>:
	...
   d96f0:	4149 000d 415d 000d 62cd 000d 6459 000d     IA..]A...b..Yd..
   d9700:	6419 000d 63f7 000d 659f 000d 643f 000d     .d...c...e..?d..

000d9710 <_ZTV8MB85RC64>:
	...
   d9718:	4121 000d 4135 000d 58b1 000d 5947 000d     !A..5A...X..GY..
   d9728:	59c9 000d 9388 000d 9390 000d 9394 000d     .Y..............
   d9738:	939d 000d 93a5 000d 93b1 000d 93b7 000d     ................
   d9748:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   d9758:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000d9788 <_ZL17FRAMversionNumber>:
   d9788:	0005 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   d9798:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   d97a8:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000d97b8 <_ZTV6MB85RC>:
	...
   d97c0:	57d1 000d 57d3 000d 58b1 000d 5947 000d     .W...W...X..GY..
   d97d0:	59c9 000d 6564 6976 6563 6552 6461 6620     .Y..deviceRead f
   d97e0:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   d97f0:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   d9800:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   d9810:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   d9820:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   d9830:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   d9840:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   d9850:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   d9860:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   d9870:	0063 0000                                   c...

000d9874 <_ZTV12MCP79410SRAM>:
	...
   d987c:	5a89 000d 5a9f 000d 5a79 000d 5a7d 000d     .Z...Z..yZ..}Z..
   d988c:	5ac9 000d 5db1 000d 5fd1 000d               .Z...]..._..

000d9898 <_ZTV12MCP79410Time>:
	...
   d98a0:	5a8d 000d 5a91 000d                         .Z...Z..

000d98a8 <_ZTV14MCP79410EEPROM>:
	...
   d98b0:	5a8b 000d 5aad 000d 5a81 000d 5a85 000d     .Z...Z...Z...Z..
   d98c0:	5ac9 000d 5deb 000d 6211 000d               .Z...]...b..

000d98cc <_ZTV8MCP79410>:
	...
   d98d4:	5a8f 000d 5abb 000d 7550 6c62 7369 5168     .Z...Z..PublishQ
   d98e4:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   d98f4:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   d9904:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   d9914:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   d9924:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   d9934:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   d9944:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   d9954:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   d9964:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   d9974:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   d9984:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   d9994:	7162 0000                                   bq..

000d9998 <_ZTV21PublishQueueAsyncBase>:
	...
   d99a8:	62cd 000d 40a5 000d 40a5 000d 40a5 000d     .b...@...@...@..
   d99b8:	40a5 000d 40a5 000d                         .@...@..

000d99c0 <_ZTV25PublishQueueAsyncRetained>:
	...
   d99c8:	63b5 000d 63c9 000d 62cd 000d 6459 000d     .c...c...b..Yd..
   d99d8:	6419 000d 63f7 000d 659f 000d 643f 000d     .d...c...e..?d..

000d99e8 <_ZTVN5spark13CellularClassE>:
	...
   d99f0:	71df 000d 71d5 000d 71cb 000d 7181 000d     .q...q...q...q..
   d9a00:	71bf 000d 71b3 000d 7b21 000d 7b29 000d     .q...q..!{..){..
   d9a10:	71a7 000d 719f 000d 7195 000d 718b 000d     .q...q...q...q..
   d9a20:	7b59 000d                                   Y{..

000d9a24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9a2c:	7219 000d 721f 000d 725d 000d 722d 000d     .r...r..]r..-r..
   d9a3c:	721b 000d                                   .r..

000d9a40 <_ZTVN5spark13EthernetClassE>:
	...
   d9a48:	7857 000d 784d 000d 7843 000d 7839 000d     Wx..Mx..Cx..9x..
   d9a58:	782d 000d 7821 000d 7b21 000d 7b29 000d     -x..!x..!{..){..
   d9a68:	7815 000d 780d 000d 7803 000d 77f9 000d     .x...x...x...w..
   d9a78:	7b59 000d                                   Y{..

000d9a7c <_ZTV7TwoWire>:
	...
   d9a84:	7875 000d 78bf 000d 7897 000d 7877 000d     ux...x...x..wx..
   d9a94:	789f 000d 78a7 000d 78af 000d 78b7 000d     .x...x...x...x..

000d9aa4 <_ZTV9IPAddress>:
	...
   d9aac:	79fd 000d 79ed 000d 79ef 000d 7061 0070     .y...y...y..app.

000d9abc <_ZTVN5spark12NetworkClassE>:
	...
   d9ac4:	7ae1 000d 7aeb 000d 7af5 000d 7aff 000d     .z...z...z...z..
   d9ad4:	7b09 000d 7b15 000d 7b21 000d 7b29 000d     .{...{..!{..){..
   d9ae4:	7b31 000d 7b3d 000d 7b45 000d 7b4f 000d     1{..={..E{..O{..
   d9af4:	7b59 000d 6977 6972 676e 5300 7379 6574     Y{..wiring.Syste
   d9b04:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   d9b14:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   d9b24:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   d9b34:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d9b44:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d9b50 <_ZTV11USARTSerial>:
	...
   d9b58:	82f9 000d 8367 000d 833f 000d 7c41 000d     ....g...?...A|..
   d9b68:	830f 000d 832b 000d 831d 000d 8339 000d     ....+.......9...
   d9b78:	82fb 000d 8301 000d                         ........

000d9b80 <_ZTV9USBSerial>:
	...
   d9b88:	83f3 000d 845b 000d 8431 000d 7c41 000d     ....[...1...A|..
   d9b98:	8423 000d 83f5 000d 8405 000d 8455 000d     #...........U...
   d9ba8:	8415 000d 83ed 000d                         ........

000d9bb0 <_ZSt7nothrow>:
   d9bb0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d9bc0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d9bd1 <day_name.6145>:
   d9bd1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d9be1:	6972 6153                                    riSat

000d9be6 <mon_name.6146>:
   d9be6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d9bf6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d9c06:	4476 6365                                   vDec

000d9c0a <_ctype_>:
   d9c0a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9c1a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9c2a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9c3a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9c4a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9c5a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9c6a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9c7a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9c8a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9d0b <link_const_variable_data_end>:
	...

000d9d0c <link_constructors_location>:
   d9d0c:	000d51c9 	.word	0x000d51c9
   d9d10:	000d6241 	.word	0x000d6241
   d9d14:	000d6831 	.word	0x000d6831
   d9d18:	000d7171 	.word	0x000d7171
   d9d1c:	000d71e9 	.word	0x000d71e9
   d9d20:	000d7861 	.word	0x000d7861
   d9d24:	000d7ad1 	.word	0x000d7ad1
   d9d28:	000d7c2d 	.word	0x000d7c2d
   d9d2c:	000d7cd5 	.word	0x000d7cd5
   d9d30:	000d7fbd 	.word	0x000d7fbd
   d9d34:	000d82e5 	.word	0x000d82e5

000d9d38 <link_constructors_end>:
	...
